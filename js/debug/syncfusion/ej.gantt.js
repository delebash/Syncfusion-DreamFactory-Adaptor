/*!
*  filename: ej.gantt.js
*  version : 14.4.0.20
*  Copyright Syncfusion Inc. 2001 - 2016. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/
(function (fn) {
    typeof define === 'function' && define.amd ? define(["./ej.treegrid","./../common/ej.globalize","jsrender","./../common/ej.core","./../common/ej.data","./../common/ej.draggable","./../common/ej.scroller","./ej.button","./ej.splitter","./ej.dialog","./ej.datepicker","./ej.datetimepicker","./ej.checkbox","./ej.dropdownlist","./ej.editor","./ej.maskedit","./ej.toolbar"], fn) : fn();
})
(function () {
	
/**
* @fileOverview Plugin to create the Gantt
* @copyright Copyright Syncfusion Inc. 2001 - 2016. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.1 
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/

(function ($, ej, undefined) {
   
    ej.widget("ejGantt", "ej.Gantt", {

        // widget element will be automatically set in this
        _rootCSS: "e-gantt",

        element: null,

        validTags: ["div"],
        // user defined model will be automatically set in this
        model: null,
        _tags: [{
            tag: "holidays",
            attr: ["day", "background", "label"],
            content: "template"
        },
        {
            tag: "stripLines",
            attr: ["day", "label", "lineStyle", "lineColor", "lineWidth"],
            content: "template"
        },
         {
             tag: "editDialogFields",
             attr: ["field", "editType"],
             content: "template"
         },
         {
             tag: "addDialogFields",
             attr: ["field", "editType"],
             content: "template"
         },
         {
            tag: "sortSettings.sortedColumns",
            attr: ["field","direction"]
         },
         {
             tag: "dayWorkingTime",
             attr: ["from", "to"],
             singular: "dayWorkingTime"
         }
        ],
        _holidays: function (index, property, value, old) {
            this._$ganttchartHelper.ejGanttChart("refreshHolidays");
            this._trigger("refresh");
        },
        _stripLines: function (index, property, value, old) {
            this._$ganttchartHelper.ejGanttChart("refreshStripLines");
            this._trigger("refresh");
        },
        _editDialogFields: function (index, property, value, old) {
            this._trigger("refresh");
        },
        _addDialogFields: function (index, property, value, old) {
            this._trigger("refresh");
        },
        defaults: {

            allowSorting: false,
            allowColumnResize: false,
            allowSelection: true,
            allowMultipleExporting: false,
            allowDragAndDrop: false,
            dragTooltip: {
                showTooltip: false,
                tooltipItems: [],
                tooltipTemplate: "",
            },
            dataSource: null,
            showColumnChooser: false,
            showColumnOptions: false,
            query: null,
            splitterSettings: {
                position: "",
                index: -1
            },
            splitterPosition: "",
            taskIdMapping: "",
            parentTaskIdMapping: "",
            taskNameMapping: "",
            startDateMapping: "",
            endDateMapping: "",
            baselineStartDateMapping: "",
            baselineEndDateMapping: "",
            childMapping: "",
            durationMapping: "",
            milestoneMapping: "",
            progressMapping: "",
            predecessorMapping: "",
            resourceInfoMapping: "",
            taskSchedulingModeMapping: "",
            notesMapping:"",
            resources: [],
            holidays: [],
            searchSettings: {
                fields: [],
                key: "",
                operator: "contains",
                ignoreCase: true
            },
            highlightWeekends: true,
            scheduleStartDate: null,
            scheduleEndDate: null,
            enableProgressBarResizing: true,
            rowHeight: 30,
            includeWeekend: true,
            taskSchedulingMode: "auto",
            validateManualTasksOnLinking: false,
            toolbarSettings: {
                showToolbar: false,
                toolbarItems: []
            },
            stripLines: [],
            workingTimeScale: 'TimeScale8Hours',
            roundOffDayworkingTime: true,
            durationUnit: 'day',
            workUnit: 'hours',
            taskType: "fixedUnit",
            scheduleHeaderSettings:
            {
                weekHeaderFormat: "MMM dd , yyyy",
                dayHeaderFormat: "",
                yearHeaderFormat: "yyyy",
                monthHeaderFormat: "MMM",
                hourHeaderFormat: 'HH',
                scheduleHeaderType: 'week',
                minutesPerInterval: "auto",
                weekendBackground: '',
                timescaleStartDateMode: "auto"
            },
            taskbarBackground: "",
            progressbarBackground: "",
            connectorLineBackground: "",
            parentTaskbarBackground: "",
            parentProgressbarBackground: "",
            connectorlineWidth: 1,
            readOnly:false,
            showTaskNames: true,
            leftTaskLabelMapping: "",
            rightTaskLabelMapping: "",
            leftTaskLabelTemplate: "",
            rightTaskLabelTemplate: "",
            showGridCellTooltip: false,
            cellTooltipTemplate:null,
            showGridExpandCellTooltip: false,
            showProgressStatus: true,
            showResourceNames: true,
            enableTaskbarDragTooltip: true,
            enableTaskbarTooltip: true,
            enableWBS:false,
            enableWBSPredecessor:false,
            editSettings: {
                allowEditing: false,
                allowAdding: false,
                allowDeleting: false,
                allowIndent: false,               
                editMode: "normal",
                beginEditAction: "dblclick",
                rowPosition: "belowselectedrow"
            },
            flatRecords: [],
            parentRecords: [],
            currentViewData: [],
            updatedRecords: [],
            ids: [],
            allowKeyboardNavigation: true,
            cssClass: "",
            locale: "en-US",
            allowMultiSorting: false,
            sortSettings: {
                sortedColumns: []
            },
            enableAltRow: true,
            enableVirtualization: false,
            progressbarHeight: 100,
            taskbarTooltipTemplate: "",
            progressbarTooltipTemplate: "",
            taskbarTooltipTemplateId: "",
            dateFormat: "",
            resourceIdMapping: "",
            resourceNameMapping: "",
            resourceUnitMapping: "",
            progressbarTooltipTemplateId: "",
            taskbarEditingTooltipTemplateId: "",
            taskbarEditingTooltipTemplate: "",
            selectedRowIndex: -1,
            allowGanttChartEditing: true,
            sizeSettings: {
                height: "",
                width: "",
            },
            selectedItem: null,
            selectionType: "single",
            selectionMode: "row",
            selectedCellIndexes: [],
            weekendBackground: "",
            baselineColor: '#fba41c',
            treeColumnIndex: 0,
            editDialogFields: [],
            addDialogFields: [],
            columnDialogFields: [],
            renderBaseline: false,
            enableContextMenu: false,
            enableResize: true,
            isResponsive: true,
            enableCollapseAll: false,
            enablePredecessorValidation: true,
            taskbarTemplate: "",
            parentTaskbarTemplate: "",
            milestoneTemplate: "",
            durationUnitMapping: "",
            dayWorkingTime: [{ "from": "08:00 AM", "to": "12:00 PM" }, { "from": "01:00 PM", "to": "05:00 PM" }],//, { from: "4:00 PM", to: "5:00 PM" }
            exportToExcelAction: "",
            /*Events*/
            rowSelecting: null,
            rowSelected: null,
            rowDragStart: null,
            rowDrag: null,
            rowDragStop: null,
            cellSelecting: null,
            cellSelected: null,
            queryCellInfo: null,
            queryTaskbarInfo: null,            
            beginEdit: null,
            endEdit: null,
            rowDataBound: null,
            expanding: null,
            expanded: null,
            collapsing: null,
            collapsed: null,
            actionBegin: null,
            actionComplete: null,
            taskbarEditing: null,
            taskbarEdited: null,
            load: null,
            create:null,
            contextMenuOpen: null,
            taskbarClick: null
        },

        dataTypes: {
            allowSorting: "boolean",
            allowColumnResize: "boolean",
            allowSelection: "boolean",
            dataSource: "data", //inline or remote data
            query: "data",
            taskIdMapping: "string",
            parentTaskIdMapping: "string",
            taskNameMapping: "string",
            startDateMapping: "string",
            endDateMapping: "string",
            baselineStartDateMapping: "string",
            baselineEndDateMapping: "string",
            childMapping: "string",
            durationMapping: "string",
            milestoneMapping: "string",
            progressMapping: "string",
            predecessorMapping: "string",
            resourceInfoMapping: "string",
            taskSchedulingModeMapping: "string",
            resources: "array",
            holidays: "array",
            dayWorkingTime: "array",
            highlightWeekends: "boolean",
            scheduleStartDate: "data",
            scheduleEndDate: "data",
            enableProgressBarResizing: "boolean",
            rowHeight: "number",
            includeWeekend: "boolean",
            taskSchedulingMode: "string",
            validateManualTasksOnLinking: "boolean",
            toolbarSettings: {
                showToolbar: "boolean",
                toolbarItems: "array"
            },
            stripLines: "array",
            scheduleHeaderSettings: "data",
            roundOffDayworkingTime: "boolean",
            taskbarBackground: "string",
            progressbarBackground: "string",
            connectorLineBackground: "string",
            parentTaskbarBackground: "string",
            parentProgressbarBackground: "string",
            connectorlineWidth: "number",
            readOnly:"boolean",
            showTaskNames: "boolean",
            leftTaskLabelMapping: "string",
            rightTaskLabelMapping: "string",
            leftTaskLabelTemplate: "string",
            rightTaskLabelTemplate: "string",
            showProgressStatus: "boolean",
            showResourceNames: "boolean",
            enableTaskbarDragTooltip: "boolean",
            enableTaskbarTooltip: "boolean",
            editSettings: "data",
            flatRecords: "array",
            parentRecords: "array",
            currentViewData: "array",
            ids: "array",
            updatedRecords: "array",
            allowKeyboardNavigation: "boolean",
            cssClass: "string",
            locale: "string",
            allowMultiSorting: "boolean",
            showGridExpandCellTooltip: "boolean",
            sortSettings: {
                sortedColumns: "array"
            },
            enableAltRow: "boolean",
            enableVirtualization: "boolean",
            progressbarHeight: "number",
            taskbarTooltipTemplate: "string",
            progressbarTooltipTemplate: "string",
            taskbarTooltipTemplateId: "string",
            dateFormat: "string",
            resourceIdMapping: "string",
            resourceNameMapping: "string",
            resourceUnitMapping: "string",
            progressbarTooltipTemplateId: "string",
            taskbarEditingTooltipTemplateId: "string",
            taskbarEditingTooltipTemplate: "string",
            allowGanttChartEditing: "boolean",
            size: {
                height: "string",
                width: "string"
            },            
            weekendBackground: "string",
            baselineColor: "string",
            renderBaseline: "boolean",
            enableContextMenu: "boolean",
            showGridCellTooltip: "boolean",
            treeColumnIndex: "number",
            editDialogFields: "array",
            addDialogFields: "array",
            showColumnChooser: "boolean",
            enableResize: "boolean",
            isResponsive: "boolean",
            enableCollapseAll: "boolean",
            enablePredecessorValidation: "boolean",
            durationUnitMapping: "string",
            taskbarTemplate: "string",
            parentTaskbarTemplate: "string",
            milestoneTemplate: "string"
        },
        ignoreOnExport: [
            "isEdit", "toolbarClick", "query", "queryCellInfo", "selectionType", "currentViewData", "enableRTL", "rowDataBound",
              "editSettings", "localization", "cssClass", "dataSource", "allowKeyboardNavigation"
        ],
        observables: ["selectedItem", "selectedRowIndex", "selectedCellIndexes", "splitterPosition", "dataSource","splitterSettings.position"],
        selectedItem: ej.util.valueFunction("selectedItem"),
        selectedRowIndex: ej.util.valueFunction("selectedRowIndex"),
        selectedCellIndexes: ej.util.valueFunction("selectedCellIndexes"),
        splitterPosition: ej.util.valueFunction("splitterSettings.position"),
        dataSource: ej.util.valueFunction("dataSource"),
        _splitterPosition: ej.util.valueFunction("splitterPosition"),

        //Retruns column value
        getColumns: function() {
            return this._columns;
        },
        //set column value
        setColumns: function(value) {
            this._columns = value;
        },

        // Initialize values to header Text and Gantt records for custom columns alone
        customColumnFields: function () {
            var proxy = this, model = proxy.model,
                totalColumns = proxy._columns, totalColumnsLength = totalColumns.length;

            for (var i = 0; i < totalColumnsLength; i++)
            {
                if (!proxy._columnHeaderTexts[totalColumns[i].field]) {
                    proxy._columnHeaderTexts[totalColumns[i].field] = totalColumns[i].headerText;
                }
            }           
        },

        //Control Rendering is initiated
        _init: function () {
            var proxy = this,
                model = proxy.model, startDate, endDate,interval = model.scheduleHeaderSettings.minutesPerInterval,
                durationUnit = model.durationUnit;

            //Default data source for ASP designer
            if (model.isdesignMode) {
                model.taskIdMapping = "Id";
                model.taskNameMapping = "Name";
                model.startDateMapping = "StartDate";
                model.durationMapping = "Duration";
                model.progressMapping = "Progress";
                model.scheduleStartDate = "02/23/2014";
                model.scheduleEndDate = "03/10/2014";
                this.dataSource([{ Id: 1, Name: "Task 1", StartDate: "02/23/2014", Duration: 5, Progress: 40 },
                { Id: 2, Name: "Task 2", StartDate: "02/24/2014", Duration: 5, Progress: 40 },
                { Id: 3, Name: "Task 3", StartDate: "02/25/2014", Duration: 5, Progress: 40 }]);
                model.sizeSettings.height = "300px";
				model.sizeSettings.width = "800px";
            }

            if (!(model.scheduleStartDate || model.scheduleEndDate) && interval == "auto")
                model.scheduleHeaderSettings.minutesPerInterval = ej.Gantt.minutesPerInterval.FiveMinutes;            
            proxy._initPrivateProperties();
            //Load event triggered
            proxy._trigger("load");
            proxy.element.addClass("e-gantt-core");
            if (this.dataSource() !== null) {
                this._checkDataBinding();
            }
            else {
                proxy._initialize();
            }
        },

        //clear selected item
        _deSelectRowItem: function () {
            var proxy = this, model = proxy.model;
            proxy._$ganttchartHelper.ejGanttChart("selectRows", -1);
            proxy._$treegridHelper.ejTreeGrid("selectRows", -1);
            this.selectedRowIndex(-1);
            model.selectedItem = null;
        },
        
        //populate gantt records from data source
        _checkDataBinding: function () {
            var proxy = this, model = proxy.model;
           
            if (this.dataSource() == null) {
                this.dataSource([]);
            }
            if (this.dataSource() instanceof ej.DataManager) {
                this._initDataSource();
            }
            else if (this.dataSource().length > 0) {
                if ((model.taskIdMapping.length > 0) && (model.parentTaskIdMapping.length > 0)) {
                    var dataArray = proxy.dataSource();
                    //cloning the datasource                   
                    var data = [];
                    for (var i in dataArray) {
                        var tempData = dataArray[i];
                        data.push($.extend(true, {}, tempData));
                        if (tempData[model.taskIdMapping]) proxy._taskIds.push(tempData[model.taskIdMapping]);
                    }
                  
                    if (!model.childMapping) model.childMapping = "Children";                                        
                    proxy._reconstructDatasource(data);
                    proxy._createGanttRecords(proxy.secondaryDatasource);
                }
                else {
                    proxy._createGanttRecords(this.dataSource());
                }
                proxy._initialize();
            }
            else {
                proxy._initialize();
            }
        },

        //Create gantt records and render gantt if data source is remote data
        _initDataSource: function () {
            var proxy = this, model = proxy.model;     
            var query = this._columnToSelect();
            var queryPromise = this.dataSource().executeQuery(query);
            queryPromise.done(ej.proxy(function (e) {
                if (proxy.dataSource().dataSource.offline) {
                    proxy._retrivedData = proxy.dataSource().dataSource.json;
                } else {
                    proxy._retrivedData = e.result;
                }
               
                if ((model.taskIdMapping.length > 0) && (model.parentTaskIdMapping.length > 0)) {
                    //cloning the datasource
                    var dataArray = e.result;
                    var data = [];
                    for (var i in dataArray) {
                        var tempData = dataArray[i];
                        data.push($.extend(true, {}, tempData));
                        if (tempData[model.taskIdMapping]) proxy._taskIds.push(tempData[model.taskIdMapping]);
                    }
                    if (!model.childMapping) {
                        model.childMapping = "Children";
                    }
                    proxy._reconstructDatasource(data);
                }
                else {
                    proxy.secondaryDatasource = proxy._retrivedData;
                }
                proxy._createGanttRecords(proxy.secondaryDatasource);
                proxy._initialize();
            }));
        },

        //create ejQuery when remote data is initiated
        _columnToSelect: function () {
            var proxy = this,
                model = proxy.model,
                column = [], queryManager = ej.Query();

            queryManager = model.query ? model.query : queryManager;
            return queryManager;
        },

        _intersectionObjects: function (flatCollection, rootCollection) {
            var result = [];
            while (flatCollection.length > 0 && rootCollection.length > 0) {
                var index = rootCollection.indexOf(flatCollection[0]);
                if (index == -1) {
                    flatCollection.shift();
                }
                else {
                    result.push(flatCollection.shift())
                    rootCollection.splice(index, 1);
                }
            }

            return result;
        },

        //If parentIdMapping is given data source is changed in hierarchical order
        _reconstructDatasource: function (datasource) {
            var proxy = this, model = proxy.model,
                data, filter;

            filter = ej.Predicate(model.parentTaskIdMapping, ej.FilterOperators.notEqual, "null");
            data = ej.DataManager(datasource).executeLocal(ej.Query().where(filter).group(model.parentTaskIdMapping));
            var tempParent = [];
            for (var i = 0; i < data.length; i++) {
                if (!ej.isNullOrUndefined(data[i].key)) {

                    var index = proxy._taskIds.indexOf(data[i].key);
                    if (index > -1) {
                        datasource[index][model.childMapping] = data[i].items;
                        continue;
                    }
                }
                var items = data[i].items;
                for (var item in data[i].items)
                    tempParent.push(items[item]);
            }
            proxy.secondaryDatasource = proxy._intersectionObjects(datasource, tempParent);
        },       

        //refresh the chart with updated schedule dates
        updateScheduleDates: function (startDate, endDate) {
            
            var proxy = this, model = this.model;
                model.scheduleStartDate = startDate;
                model.scheduleEndDate = endDate;
                proxy._scheduleDays = [];
                proxy._scheduleMonths = [];
                proxy._scheduleWeeks = [];
                proxy._scheduleYears = [];
                proxy._scheduleHours = [];
                proxy._scheduleMinutes = [];
                proxy._calculateHeaderDates();
                var chartObject = $("#ejGanttChart" + proxy._id).ejGanttChart("instance");
                var chartModel = chartObject.model;
                /* No need to re render parent item , because all the records are rerendered*/
                proxy._isTreeGridRendered = false;
                proxy._isGanttChartRendered = false;
                proxy._updateGanttRecords();
                chartModel.projectStartDate = proxy._getDateFromFormat(proxy._projectStartDate);
                chartModel.projectEndDate = proxy._getDateFromFormat(proxy._projectEndDate);
                chartModel.scheduleDays = proxy._scheduleDays;
                chartModel.scheduleMonths = proxy._scheduleMonths;
                chartModel.scheduleWeeks = proxy._scheduleWeeks;
                chartModel.scheduleYears = proxy._scheduleYears;
                chartModel.scheduleHours = proxy._scheduleHours;
                chartModel.scheduleMinutes = proxy._scheduleMinutes;
                chartModel.renderBaseline = model.renderBaseline;
                $("#ejGanttChart" + proxy._id).ejGanttChart("refreshChartHeader", proxy._getDateFromFormat(startDate), proxy._getDateFromFormat(endDate));
                $("#ejGanttChart" + proxy._id).ejGanttChart("refreshContainersWidth");
                proxy._$ganttchartHelper.ejGanttChart("refreshHelper", proxy.model.currentViewData, proxy.model.updatedRecords, proxy._totalCollapseRecordCount);
                if (model.predecessorMapping) {
                    proxy._$ganttchartHelper.ejGanttChart("clearConnectorLines");
                    proxy._connectorlineIds = [];
                    proxy._connectorLinesCollection = [];
                    proxy._isValidationEnabled = false;
                    proxy._createConnectorLinesCollection();
                    proxy._isValidationEnabled = true;
                }
                chartObject._$bodyContainer.ejScroller("refresh");

                proxy._isTreeGridRendered = true;
                proxy._isGanttChartRendered = true;
        },
        //used to change the schedule mode dynamically
        
        reRenderChart: function (scheduleMode) {
            var proxy = this, model = proxy.model,
                startDate = proxy._getDateFromFormat(model.scheduleStartDate),
                endDate = proxy._getDateFromFormat(model.scheduleEndDate);
            model.flatRecords = [];
            model.parentRecords = [];
            $("#ejGanttChart" + proxy._id).empty();

            switch (scheduleMode) {
                case ej.Gantt.ScheduleHeaderType.Week:
                    model.scheduleHeaderSettings.scheduleHeaderType = ej.Gantt.ScheduleHeaderType.Week;
                    proxy._perDayWidth = 30;
                    proxy._calculateWeekSplit(startDate, endDate);
                    break;

                case ej.Gantt.ScheduleHeaderType.Day:
                    model.scheduleHeaderSettings.scheduleHeaderType = ej.Gantt.ScheduleHeaderType.Day;
                    proxy._perHourWidth = 20;
                    proxy._perDayWidth = (proxy._perHourWidth * 24);//24 hours
                    proxy._calculateDaySplit(startDate, endDate);
                    break;

                case ej.Gantt.ScheduleHeaderType.Month:
                    model.scheduleHeaderSettings.scheduleHeaderType = ej.Gantt.ScheduleHeaderType.Month;
                    proxy._perDayWidth = 10;
                    proxy._perWeekWidth = 70;
                    proxy._calculateMonthSplit(startDate, endDate);
                    break;

                case ej.Gantt.ScheduleHeaderType.Year:
                    model.scheduleHeaderSettings.scheduleHeaderType = ej.Gantt.ScheduleHeaderType.Year;
                    proxy._perDayWidth = 3;
                    proxy._perMonthWidth = 90;
                    proxy._calculateYearSplit(startDate, endDate);
                    break;
                case ej.Gantt.ScheduleHeaderType.Hour:
                    model.scheduleHeaderSettings.scheduleHeaderType = ej.Gantt.ScheduleHeaderType.Hour;
                    var minutesPerInterval = model.scheduleHeaderSettings.minutesPerInterval,
                        intervalValue = ej.Gantt.minutesPerInterval;
                    proxy._perMinuteWidth = 20;
                    if (minutesPerInterval) {
                        if (minutesPerInterval == intervalValue.Auto) {
                            var twoDaysTimeSpan = 2 * 86400000,// Time in milliseconds
                                sevenDaysTimeSpan = 7 * 86400000,//Time in milliseconds
                                tenDaysTimeSpan = 10 * 86400000,
                                diff = endDate - startDate;

                            if (diff > tenDaysTimeSpan) {
                                proxy._minuteInterval = 30;
                                proxy._perDayWidth = (proxy._perMinuteWidth * 24 * 2);//24 hours
                            }
                            else if (diff > sevenDaysTimeSpan) {
                                proxy._minuteInterval = 15;
                                proxy._perDayWidth = (proxy._perMinuteWidth * 24 * 4);//24 hours
                            }
                            else if (diff > twoDaysTimeSpan) {
                                proxy._minuteInterval = 5;
                                proxy._perDayWidth = (proxy._perMinuteWidth * 24 * 12);//24 hours
                            }
                            else {
                                proxy._minuteInterval = 1;
                                proxy._perDayWidth = (proxy._perMinuteWidth * 24 * 60);//24 hours
                            }
                        }
                        else if (minutesPerInterval == intervalValue.OneMinute) {
                            proxy._minuteInterval = 1;
                            proxy._perDayWidth = (proxy._perMinuteWidth * 24 * 60)
                        }
                        else if (minutesPerInterval == intervalValue.FiveMinutes) {
                            proxy._minuteInterval = 5;
                            proxy._perDayWidth = (proxy._perMinuteWidth * 24 * 12);//24 hours
                        }
                        else if (minutesPerInterval == intervalValue.FifteenMinutes) {
                            proxy._minuteInterval = 15;
                            proxy._perDayWidth = (proxy._perMinuteWidth * 24 * 4);//24 hours
                        }
                        else if (minutesPerInterval == intervalValue.ThirtyMinutes) {
                            proxy._minuteInterval = 30;
                            proxy._perDayWidth = (proxy._perMinuteWidth * 24 * 2);//24 hours
                        }
                    }
                    proxy._calculateHourSplit(startDate, endDate);
                    break;
            }
            proxy.element.ejGantt("destroy").ejGantt(model);
            proxy._isTreeGridRendered = false;
            proxy._isGanttChartRendered = false;

        },

        changeTaskMode:function(record, taskMode){
            var proxy = this, model = proxy.model, args = {};
            args.data = record;

            proxy._isValidationEnabled = true;
            if (taskMode == ej.Gantt.TaskSchedulingMode.Manual) {
                record.isAutoSchedule = false;
                record.item[model.taskSchedulingModeMapping] = true;                
            }
            else if (taskMode == ej.Gantt.TaskSchedulingMode.Auto) {
                record.isAutoSchedule = true;
                record.item[model.taskSchedulingModeMapping] = false;                
            }
            args.columnName = "taskMode";
            proxy._updateEditedGanttRecords(args);
            proxy._isValidationEnabled = false;
        },
        autoSchedule: function (taskId) {
            var proxy = this, model = proxy.model, targetRecord,
                updatedRecords = model.updatedRecords;
            targetRecord = updatedRecords.filter(function (record) {
                return record.taskId === taskId;
            });
            proxy.changeTaskMode(targetRecord[0], ej.Gantt.TaskSchedulingMode.Auto);
        },
        manualSchedule: function (taskId) {
            var proxy = this, model = proxy.model, targetRecord,
                updatedRecords = model.updatedRecords;
            targetRecord = updatedRecords.filter(function (record) {
                return record.taskId === taskId;
            });
            proxy.changeTaskMode(targetRecord[0], ej.Gantt.TaskSchedulingMode.Manual);
        },
        //update the all gantt records width,progresswidth and left value
        _updateGanttRecords: function () {

            var proxy = this, model = proxy.model,
                flatRecords = model.flatRecords,
                length = flatRecords.length,
                currentRecord, parentItem, childRecords;
          
            for (var i = 0; i < length; i++) {
                currentRecord = flatRecords[i];
                if (currentRecord.hasChildRecords === false) {
                    currentRecord.left = currentRecord._calculateLeft(this);
                    currentRecord.width = currentRecord._calculateWidth(this);
                    currentRecord.width = currentRecord.isMilestone == true ? proxy._milesStoneWidth : model.flatRecords[i].width;
                    currentRecord.progressWidth = currentRecord._calculateProgressWidth(currentRecord.width, currentRecord.status);
                }
                if (currentRecord.baselineStartDate && currentRecord.baselineEndDate) {
                    currentRecord.baselineLeft = currentRecord._calculateBaselineLeft(this);
                    currentRecord.baselineWidth = currentRecord._calculateBaseLineWidth(this);
                } else {
                    currentRecord.baselineLeft = 0;
                    currentRecord.baselineWidth = 0;
                }

                parentItem = currentRecord.parentItem;
                childRecords = parentItem && parentItem.childRecords;

                if (parentItem && childRecords.indexOf(currentRecord) == childRecords.length - 1 && currentRecord.hasChildRecords === false) {
                    if (parentItem.isAutoSchedule)
                        proxy._updateParentItem(currentRecord);
                    else
                        proxy._updateManualParentItem(currentRecord);
                }                
            }

        },
        
        //Method for initialize private peoperties
        _initPrivateProperties: function () {

            var proxy = this;
            model = proxy.model;
            scheduleMode = model.scheduleHeaderSettings.scheduleHeaderType;
            proxy._isFromGantt = true;
            proxy._disabledToolItems = [],
            proxy._id = proxy.element.attr('id'),
            proxy._scheduleWeeks = [],
            proxy._taskIds = [],
            proxy._duplicate = false,          
            proxy._wrongenddate=false,
            proxy._addPosition = null,
            proxy._scheduleYears = [],//new property for year schedule modes

            proxy._scheduleMonths = [], //new property for month

            proxy._scheduleYears = [],//property for schedule years
            proxy._scheduleDays = [],//property for schedule days
            proxy._scheduleHours=[],
            proxy._projectStartDate, //property instead of scheduleWeeks[0] and scheduleYears[0]
            proxy._projectEndDate,

            proxy._columns = [],
            proxy._storedIndex = -1,
            proxy._perDayWidth,
            proxy._prevDayWidth = 0,
            proxy._rowIndexOfLastSelectedCell = -1,
            proxy._perMonthWidth,//new property for month
            proxy._perWeekWidth,//new property for month-week schedule

            proxy._$treegridPane = null,
            proxy._$ganttchartPane = null,
            proxy._$treegrid = null,
            proxy._$ganttchart = null,
            proxy._$ejGantt = null,
            proxy._$treegridHelper = null,
            proxy._$ganttchartHelper = null;
            proxy._tdsOffsetWidth = [];
            proxy._subPosx = [];
            proxy._predecessorsCollection = [];
            proxy._connectorLinesCollection = [];            
            proxy._updatedConnectorLineCollection = [];
            proxy._connectorlineIds = [];
            proxy._gridRows = null;

            //variables used for ExpandCollapse action in non Virtualization 
            proxy._collapsedRecordCount = 0;
            proxy._expandedRecordsCount = 0;
            proxy._totalCollapseRecordCount = 0;
            proxy._isInExpandCollapse = false;

            proxy._hiddenRecordCount = 0;
            
            proxy.prevPredecessorTO = null;
            proxy.prevPredecessorFrom = null;
            proxy.prevPredecessorcount = 0;
            proxy._isValidationEnabled = true;
            proxy._isTreeGridRendered = false;//indicate treegrid part is rendered or not for refresh row
            proxy._isGanttChartRendered = false;//indicate gantChart part is rendered or not
            proxy._holidaysList = proxy._getHoliday();
            proxy._stringHolidays = proxy._getStringHolidays();
            proxy._isinBeginEdit = false;
            proxy._isMileStoneEdited = false;
            proxy._cellEditColumn = null;
            proxy._isinAddnewRecord = false;
           
            //variables for context menu items
            proxy._contextMenuItems = null; //proxy._getContextMenuItems();
            proxy._totalBorderWidth = 2;//Left and Right border width

            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9) {
                proxy._totalBorderHeight = model.toolbarSettings.showToolbar ? 3 : 2;//top,bottom,toolbar div
            } else {
                proxy._totalBorderHeight = model.toolbarSettings.showToolbar ? 1 : 0;//top box-sizing:border-box includes it's border
            }
            //private variable decalartion for localization
            proxy._columnHeaderTexts = null;
            proxy._predecessorEditingTexts = null;
            proxy._editDialogTexts = null;
            proxy._toolboxTooltipTexts = null;
            proxy._durationUnitTexts = null;
            proxy._durationUnitEditText = null;
            proxy._workUnitTexts = null;
            proxy._taskTypeTexts = null;
            proxy._effortDrivenTexts = null;
            proxy._contextMenuTexts = null;
            proxy._columnMenuTexts = null;
            proxy._columnDialogTitle = null;
            proxy._deleteColumnText = null;
            proxy._okButtonText = null;
            proxy._cancelButtonText = null;
            proxy._confirmDeleteText = null;
            proxy._columnDialogTexts = null;
            proxy._newTaskTexts = null;
            proxy._months = null;  
            proxy._days = null;
            proxy._dialogTabTitleTexts = null;
            proxy._isLoad = true;
            proxy._updatedColumn = "";
            proxy._isExistingUnitIsUpdated = false;
            proxy._isDurationUpdated = false;
            proxy._isResourceAddedOrRemoved = false;
            proxy._newRecordResourceCollection = [];//maintan newly added row resources and its units.

            /*alert text localization*/
            proxy._alertTexts = null;

            proxy._commonColumnWidth = 150;
            proxy._searchString = "",
            proxy._emptyDataColumns = [],
            proxy.secondaryDatasource = [];
            proxy._datasourceChildItems = [];
            proxy._$predecessorTable = null;
            proxy._mappingItems = [];
            proxy._editedDialogRecord = null;
            proxy._calculateDimensions();
            proxy._retrivedData = this.dataSource();
            proxy._isInExpandCollapseAll = false;
            proxy._preTableCollection = [];
            proxy._defaultStartTime = null;
            proxy._defaultEndTime = null;
            proxy._workingTimeRanges = [];
            proxy._nonWorkingHours = [];
            this._validateTimeRange();
            //deprecate working timescaale API with dayWorkingTime API
            if (JSON.stringify(model.dayWorkingTime) == '[{\"from\":\"08:00 AM\",\"to\":\"12:00 PM\"},{\"from\":\"01:00 PM\",\"to\":\"05:00 PM\"}]') {
                if (model.workingTimeScale != ej.Gantt.workingTimeScale.TimeScale8Hours)
                    model.dayWorkingTime = [{ from: "12:00 AM", to: "12:00 AM" }];
                else
                    model.dayWorkingTime = [{ from: "08:00 AM", to: "12:00 PM" }, { from: "01:00 PM", to: "05:00 PM" }];
            }
            proxy._secondsPerDay = proxy._getSecondsPerDay();
            if (scheduleMode == "week") {
                proxy._perDayWidth = 30;
                proxy._perMinuteWidth = proxy._perDayWidth / (24 * 60);
            }
            else if (scheduleMode == "year") {
                proxy._perDayWidth = 3;
                proxy._perMonthWidth = proxy._perDayWidth * 30;
                proxy._perMinuteWidth = proxy._perDayWidth / (24 * 60);
            }
            else if (scheduleMode == "month") {
                proxy._perDayWidth = 10;
                proxy._perWeekWidth = proxy._perDayWidth * 7;
                proxy._perHourWidth = proxy._perDayWidth / 24;
                proxy._perMinuteWidth = proxy._perDayWidth / (24 * 60);
            }
            else if (scheduleMode == "day") {
                proxy._perHourWidth = 20;
                proxy._perMinuteWidth = proxy._perHourWidth / 60;
                proxy._perDayWidth = (proxy._perHourWidth * 24);//24 hours
            }
            else if (scheduleMode == "hour") {
                var minutesPerInterval = model.scheduleHeaderSettings.minutesPerInterval,
                    intervalValue = ej.Gantt.minutesPerInterval;
                proxy._perMinuteWidth = 20;
                if (minutesPerInterval) {
                    if (minutesPerInterval == intervalValue.Auto) {
                        var scheduleStartDate = proxy._getDateFromFormat(model.scheduleStartDate),
                            scheduleEndDate = proxy._getDateFromFormat(model.scheduleEndDate),
                            twoDaysTimeSpan = 2 * 86400000,// Time in milliseconds
                            sevenDaysTimeSpan = 7 * 86400000,//Time in milliseconds
                            tenDaysTimeSpan = 10 * 86400000,
                            diff = scheduleEndDate - scheduleStartDate;

                        if (diff > tenDaysTimeSpan) {
                            proxy._minuteInterval = 30;
                            proxy._perDayWidth = (proxy._perMinuteWidth * 24 * 2);//24 hours
                        }
                        else if (diff > sevenDaysTimeSpan) {
                            proxy._minuteInterval = 15;
                            proxy._perDayWidth = (proxy._perMinuteWidth * 24 * 4);//24 hours
                        }
                        else if (diff > twoDaysTimeSpan) {
                            proxy._minuteInterval = 5;
                            proxy._perDayWidth = (proxy._perMinuteWidth * 24 * 12);//24 hours
                        }
                        else {
                            proxy._minuteInterval = 1;
                            proxy._perDayWidth = (proxy._perMinuteWidth * 24 * 60);//24 hours
                        }
                    }
                    else if (minutesPerInterval == intervalValue.OneMinute) {
                        proxy._minuteInterval = 1;
                        proxy._perDayWidth = (proxy._perMinuteWidth * 24 * 60)
                    }
                    else if (minutesPerInterval == intervalValue.FiveMinutes) {
                        proxy._minuteInterval = 5;
                        proxy._perDayWidth = (proxy._perMinuteWidth * 24 * 12);//24 hours
                    }
                    else if (minutesPerInterval == intervalValue.FifteenMinutes) {
                        proxy._minuteInterval = 15;
                        proxy._perDayWidth = (proxy._perMinuteWidth * 24 * 4);//24 hours
                    }
                    else if (minutesPerInterval == intervalValue.ThirtyMinutes) {
                        proxy._minuteInterval = 30;
                        proxy._perDayWidth = (proxy._perMinuteWidth * 24 * 2);//24 hours
                    }
                }                
            }
            proxy._predecessorCollectionText = "";
            proxy._localizedLabels = proxy._getLocalizedLabels();
            //culture info assigned for private variables
            proxy._setCultureInfo();
            //Column collection populated
            proxy.setColumns(model.columns && model.columns.length ? model.columns : proxy.createTreeGridColumns());

            //update columns dropdown data while changing localization dynamically.
            if (model.isRerender)
                proxy._updateColumnDropDownData();

            proxy._updateColumnLocaleText();
            /* flag for refreshing newly added record */
            proxy._isRefreshAddedRecord = false;
            /* Used as flag for refresh chart and grid rows on adding when parent item is in collpased state*/
            proxy._isInAdd = false;
            //context menu sctive item's ID
            proxy._activeMenuItemId = null;
            proxy._isAddEditDialogSave = false;
            /*MilesStone width as by rowHeight*/
            proxy._milesStoneWidth = (Math.floor((model.rowHeight - 6) / 2) * 2 + 6);// 6 ->  gantt chart row paddingTop and bottom
            proxy.isCriticalPathEnable = false;
            proxy.criticalPathCollection = [];
            proxy.detailPredecessorCollection = [];
            proxy.collectionTaskId = [];
            proxy._enableDisableCriticalIcon = false;
            proxy._generalTabColumnFields = [];
            proxy._addDialogGeneralColumns = [];
            proxy._addDialogcustomColumns = [];
            proxy._editDialogGeneralColumns = [];
            proxy._editDialogCustomColumns = [];
            //update resource unit mapping value
            if (model.resourceUnitMapping == "")
                model.resourceUnitMapping = "unit";
            proxy._dialogTab = ["General", "Predecessors", "Resources", "Custom Fields", "Notes"];
        },
        /*validate dayWorkingTime API if it is not valid assign default value to this API*/
        _validateTimeRange: function () {
            var tempDay = "01/01/2016", tempEndDay = "01/02/2016", proxy = this, model = this.model,
               length = model.dayWorkingTime.length, isValid = true, prevTimeline = null;//MM/dd/yyyy
            for (var count = 0; count < length; count++) {
                var currentRange = model.dayWorkingTime[count];
                if (currentRange.from && currentRange.to) {
                    var startHour = ej.parseDate(tempDay + " " + currentRange.from, "MM/dd/yyyy h:mm tt", "en-US"),
                        endHour = currentRange.to != "12:00 AM" ? ej.parseDate(tempDay + " " + currentRange.to, "MM/dd/yyyy h:mm tt", "en-US") : ej.parseDate(tempEndDay + " " + currentRange.to, "MM/dd/yyyy h:mm tt", "en-US"),
                        timeDiff = endHour.getTime() - startHour.getTime(),
                        sdHour = this._getSecondsInDecimal(startHour),
                        edHour = this._getSecondsInDecimal(endHour);
                    if (edHour == 0)
                        edHour = 86400; // second in a day
                    if (sdHour >= edHour) {
                        isValid = false;
                    }
                    else {
                        if (prevTimeline == null)
                            prevTimeline = edHour;
                        else if (prevTimeline >= sdHour || prevTimeline >= edHour)
                            isValid = false;
                    }
                }
                else {
                    isValid = false;
                }
            }
            if (!isValid) {
                model.dayWorkingTime = [{ from: "08:00 AM", to: "12:00 PM" }, { from: "01:00 PM", to: "05:00 PM" }];
            }
        },
        /*Get date from string*/
        _getParsedDate: function (value, format, locale) {
            return ej.parseDate(value, format, locale);
        },
        _setTime: function (seconds, date) {
            var hour = parseInt(seconds / (3600)),
                min = parseInt((seconds - (hour * 3600)) / 60),
                sec = seconds - (hour * 3600) - (min * 60);
            date.setHours(hour, min, sec, 0);
        },
        // Update date next recent working hours
        _checkStartDate: function (date, record) {
            var cloneDate = new Date(date), model = this.model, hour = this._getSecondsInDecimal(cloneDate), startRangeIndex = -1;
            if (hour < this._defaultStartTime) {
                //cloneDate.setHours(this._defaultStartTime, 0, 0, 0);
                this._setTime(this._defaultStartTime, cloneDate);
            } else if (hour >= this._defaultEndTime) {
                cloneDate.setDate(cloneDate.getDate() + 1);
                this._setTime(this._defaultStartTime, cloneDate);
                //cloneDate.setHours(this._defaultStartTime, 0, 0, 0);
            } else if (hour > this._defaultStartTime && hour < this._defaultEndTime) {
                for (var i = 0; i < this._workingTimeRanges.length; i++) {
                    var val = this._workingTimeRanges[i];
                    if (hour >= val.to && (this._workingTimeRanges[i + 1] && hour < this._workingTimeRanges[i + 1].from)) {
                        this._setTime(this._workingTimeRanges[i + 1].from, cloneDate);
                        break;
                    }
                }
            }
            var tempStartDate;
            do{
                tempStartDate = new Date(cloneDate);
                //check holidays and weekends
                if ((!ej.isNullOrUndefined(record) && record.isAutoSchedule && (!model.includeWeekend || model.holidays.length > 0)) || (ej.isNullOrUndefined(record) && (!model.includeWeekend || model.holidays.length > 0))) {
                    if (!model.includeWeekend) {
                        if (cloneDate.getDay() == 0) {
                            cloneDate.setDate(cloneDate.getDate() + 1);
                            this._setTime(this._defaultStartTime, cloneDate);
                            //cloneDate.setHours(this._defaultStartTime, 0, 0, 0);
                        }
                        else if (cloneDate.getDay() == 6) {
                            cloneDate.setDate(cloneDate.getDate() + 2);
                            this._setTime(this._defaultStartTime, cloneDate);
                           // cloneDate.setHours(this._defaultStartTime, 0, 0, 0);
                        }
                    }
                    for (var count = 0; count < model.holidays.length; count++) {
                        var holidayFrom = this._getDateFromFormat(model.holidays[count].day),
                            holidayTo = new Date(holidayFrom);
                        holidayFrom.setHours(0, 0, 0, 0);
                        holidayTo.setHours(23, 59, 59, 59);
                        if (cloneDate.getTime() >= holidayFrom.getTime() && cloneDate.getTime() < holidayTo.getTime()) {
                            cloneDate.setDate(cloneDate.getDate() + 1);
                            this._setTime(this._defaultStartTime, cloneDate);
                            //cloneDate.setHours(this._defaultStartTime, 0, 0, 0);
                        }
                    }
                }
            } while (tempStartDate.getTime() != cloneDate.getTime());
            return new Date(cloneDate);
            //Holiday Update
        },
        //Update the date to previous working time
        _checkEndDate: function (date, record) {
            var cloneDate = new Date(date), model = this.model, hour = this._getSecondsInDecimal(cloneDate), endRangeIndex = -1;
            if (hour > this._defaultEndTime) {
                this._setTime(this._defaultEndTime, cloneDate);
            //    cloneDate.setHours(this._defaultEndTime, 0, 0, 0);
            } else if (hour <= this._defaultStartTime) {
                cloneDate.setDate(cloneDate.getDate() - 1);
                this._setTime(this._defaultEndTime, cloneDate);
              //  cloneDate.setHours(this._defaultEndTime, 0, 0, 0);
            } else if (hour > this._defaultStartTime && hour < this._defaultEndTime) {
                for (var i = 0; i < this._workingTimeRanges.length; i++) {
                    var val = this._workingTimeRanges[i];
                    if (hour > val.to && (this._workingTimeRanges[i + 1] && hour <= this._workingTimeRanges[i + 1].from)) {
                        this._setTime(this._workingTimeRanges[i].to, cloneDate);
                        //cloneDate.setHours(this._workingTimeRanges[i].to, 0, 0, 0);
                        break;
                    }
                }
            }
            var tempCheckDate;
            do {
                tempCheckDate = new Date(cloneDate);
                if ((!ej.isNullOrUndefined(record) && record.isAutoSchedule && (!model.includeWeekend || model.holidays.length > 0)) || (ej.isNullOrUndefined(record) && (!model.includeWeekend || model.holidays.length > 0))) {

                    //Update Weekend and holidays
                    if (!model.includeWeekend) {
                        if (cloneDate.getDay() == 0) {
                            cloneDate.setDate(cloneDate.getDate() - 2);
                            this._setTime(this._defaultEndTime, cloneDate);
                            //cloneDate.setHours(this._defaultEndTime, 0, 0, 0);
                        }
                        else if (cloneDate.getDay() == 6) {
                            cloneDate.setDate(cloneDate.getDate() - 1);
                            this._setTime(this._defaultEndTime, cloneDate);
                            //cloneDate.setHours(this._defaultEndTime, 0, 0, 0);
                        }
                        else if (cloneDate.getDay() == 1 && this._defaultEndTime == 86400 && this._getSecondsInDecimal(cloneDate) == 0) {
                            cloneDate.setDate(cloneDate.getDate() - 2);
                        }
                    }
                    for (var count = 0; count < model.holidays.length; count++) {
                        var holidayFrom = this._getDateFromFormat(model.holidays[count].day),
                            holidayTo = new Date(holidayFrom),
                            tempHoliDay = new Date(cloneDate);
                        tempHoliDay.setMinutes(cloneDate.getMinutes() - 2);
                        holidayFrom.setHours(0, 0, 0, 0);
                        holidayTo.setHours(23, 59, 59, 59);
                        if (cloneDate.getTime() >= holidayFrom.getTime() && cloneDate.getTime() < holidayTo.getTime() || (tempHoliDay.getTime() >= holidayFrom.getTime() && tempHoliDay.getTime() < holidayTo.getTime())) {
                            cloneDate.setDate(cloneDate.getDate() - 1);
                            if (!(cloneDate.getTime() == holidayFrom.getTime() && this._defaultEndTime == 86400 && this._getSecondsInDecimal(cloneDate) == 0))
                                this._setTime(this._defaultEndTime, cloneDate);
                                //cloneDate.setHours(this._defaultEndTime, 0, 0, 0);
                        }
                    }
                }
            } while (tempCheckDate.getTime() != cloneDate.getTime());
            return new Date(cloneDate);
        },
        /*get left value of task with schedule start*/
        _getTaskLeft: function (currentDate) {
            var date = new Date(currentDate), model = this.model,
                headerType = model.scheduleHeaderSettings.scheduleHeaderType;
            if (headerType == ej.Gantt.ScheduleHeaderType.Week || headerType == ej.Gantt.ScheduleHeaderType.Month
                || headerType == ej.Gantt.ScheduleHeaderType.Year) {
                if (this._getSecondsInDecimal(date) == this._defaultStartTime) {
                    date.setHours(0, 0, 0, 0);
                }
            }
            if (this._projectStartDate)
                return (((date.getTime() - this._projectStartDate.getTime()) / (1000 * 60 * 60 * 24)) * this._perDayWidth);//this._perMinuteWidth
            else
                return 0;
        },
        /*get width value of task*/
        _getTaskWidth: function (startDate, endDate) {
            var sDate = new Date(startDate), eDate = new Date(endDate), model = this.model,
               headerType = model.scheduleHeaderSettings.scheduleHeaderType;

            if (headerType == ej.Gantt.ScheduleHeaderType.Week || headerType == ej.Gantt.ScheduleHeaderType.Month
                || headerType == ej.Gantt.ScheduleHeaderType.Year) {
                if (this._getSecondsInDecimal(sDate) == this._defaultStartTime) {
                    sDate.setHours(0, 0, 0, 0);
                }
                if (this._getSecondsInDecimal(eDate) == this._defaultEndTime) {
                    eDate.setHours(24);
                }
            }
            timeDiff = eDate.getTime() - sDate.getTime();

            return ((timeDiff / (1000 * 60 * 60 * 24)) * this._perDayWidth);//per day width
        },
        /*Get holidays betwwen two dates range*/
        _getHolidaysCount: function (startDate, endDate) {
            var model = this.model,
                holidays = this.model.holidays,
                holidaysCount = 0;
            for (var i = 0; i < holidays.length; i++) {
                var currentHoliday = this._getDateFromFormat(holidays[i].day);
                if (startDate.getTime() < currentHoliday.getTime() && endDate.getTime() >= currentHoliday.getTime())
                    if (!model.includeWeekend && currentHoliday.getDay() != 0 && currentHoliday.getDay() != 6)
                        holidaysCount += 1;
                    else if (model.includeWeekend) {
                        holidaysCount += 1;
                    }
            }
            return holidaysCount;
        },

        //get weekend days between two dates without including args dates
        _getWeekendCount: function (startDate, endDate) {
            var sDay = new Date(startDate), eDay = new Date(endDate), weekEndCount = 0;
            sDay.setHours(0, 0, 0, 0);
            sDay.setDate(sDay.getDate() + 1);
            eDay.setHours(0, 0, 0, 0);
            while (sDay.getTime() < eDay.getTime()) {
                if (sDay.getDay() == 0) {
                    weekEndCount += 1;
                    sDay.setDate(sDay.getDate() + 5);
                }
                if (sDay.getTime() < endDate.getTime() && sDay.getDay() == 6) {
                    weekEndCount += 1;
                }
                sDay.setDate(sDay.getDate() + 1);
            }
            return weekEndCount;
        },
        /*get days between two dates*/
        _getDayDiff: function (startDate, endDate) {
            return (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24);
        },
        //Get seconds between two Dates
        _getNumberOfSeconds: function (startDate, endDate) {
            var sDay = new Date(startDate), eDay = new Date(endDate), weekEndCount = 0, timeDiff = 0;
            sDay.setHours(0, 0, 0, 0);
            sDay.setDate(sDay.getDate() + 1);
            eDay.setHours(0, 0, 0, 0);
            if (sDay.getTime() < eDay.getTime())
                timeDiff = (eDay.getTime() - sDay.getTime()) / 1000;
            return timeDiff;
        },
        //Calculate end date with startDate,duration ,duration Unit
        _getEndDate: function (startDate, duration, durationUnit, record) {
            var secondDuration = 0, sHour = -1, nextAvailDuration = 0, endDate = new Date(startDate), startRangeIndex = -1;
            if (!durationUnit || durationUnit == ej.Gantt.DurationUnit.Day)
                secondDuration = this._secondsPerDay * duration;
            else if (durationUnit == ej.Gantt.DurationUnit.Hour)
                secondDuration = duration * 3600;
            else
                secondDuration = duration * 60;

            while (secondDuration > 0) {
                sHour = this._getSecondsInDecimal(endDate);
                for (var i = 0; i < this._workingTimeRanges.length; i++) {
                    var val = this._workingTimeRanges[i];
                    if (sHour >= val.from && sHour <= val.to) {
                        startRangeIndex = i;
                        break;
                    }
                }
                nextAvailDuration = Math.round(this._workingTimeRanges[startRangeIndex].to - sHour);
                if (nextAvailDuration <= secondDuration) {
                    endDate.setSeconds(endDate.getSeconds() + nextAvailDuration);
                    secondDuration -= nextAvailDuration;
                } else {
                    endDate.setSeconds(endDate.getSeconds() + secondDuration);
                    break;
                }
                if (secondDuration > 0)
                    endDate = this._checkStartDate(endDate, record);
            }
            return endDate;
        },
        //Calculate start date with endDate,duration ,duration Unit
        _getStartDate: function (endDate, duration, durationUnit, record) {
            var minuteDuraion = 0, sHour = -1, nextAvailDuration = 0, startDate = new Date(endDate), startRangeIndex = -1;
            if (!durationUnit || durationUnit == ej.Gantt.DurationUnit.Day)
                minuteDuraion = this._secondsPerDay * duration;
            else if (durationUnit == ej.Gantt.DurationUnit.Hour)
                minuteDuraion = duration * 3600;
            else
                minuteDuraion = duration * 60;

            while (minuteDuraion > 0) {
                sHour = this._getSecondsInDecimal(startDate);
                if (this._workingTimeRanges.length > 0 && this._workingTimeRanges[this._workingTimeRanges.length - 1].to == 86400 && sHour == 0) {
                    sHour = 86400;
                }
                for (var i = 0; i < this._workingTimeRanges.length; i++) {
                    var val = this._workingTimeRanges[i];
                    if (sHour >= val.from && sHour <= val.to) {
                        startRangeIndex = i;
                        break;
                    }
                }
                nextAvailDuration = Math.round(sHour - this._workingTimeRanges[startRangeIndex].from);//In Minutes
                if (nextAvailDuration <= minuteDuraion) {
                    startDate.setSeconds(startDate.getSeconds() - nextAvailDuration);
                    minuteDuraion -= nextAvailDuration;
                } else {
                    startDate.setSeconds(startDate.getSeconds() - minuteDuraion);
                    break;
                }
                if (minuteDuraion > 0)
                    startDate = this._checkEndDate(startDate, record);
            }
            return startDate;
        },
        /*get duration betwwen two dates according to duration unit value*/
        _getDuration: function (sDate, eDate, durationUnit, isAutoSchedule) {
            var timeDiff = eDate.getTime() - sDate.getTime(), durationValue,
               weekendCount = !this.model.includeWeekend && isAutoSchedule ? this._getWeekendCount(sDate, eDate) : 0,
               nonWrkHours = 0, durationHrs = 0, totalHours = this._getNumberOfSeconds(sDate, eDate),
               holidaysCount = isAutoSchedule ? this._getHolidaysCount(sDate, eDate) : 0;
            timeDiff = timeDiff / 1000;
            totalHours = (totalHours - (weekendCount * 86400) - (holidaysCount * 86400)) / 86400; // days between two dates
            nonWrkHours = this._getNonWorkingSecondsOnDate(sDate, eDate);
            durationHrs = timeDiff - (totalHours * (86400 - this._secondsPerDay)) - (weekendCount * 86400) - (holidaysCount * 86400) - nonWrkHours;
            if (!durationUnit || durationUnit == ej.Gantt.DurationUnit.Day) {
                durationValue = durationHrs / this._secondsPerDay;
            } else if (durationUnit == ej.Gantt.DurationUnit.Minute) {
                durationValue = durationHrs / 60;
            } else {
                durationValue = durationHrs / 3600;
            }
            return parseFloat(durationValue.toFixed(2));
        },
        /*Get four infomration in date*/
        _getSecondsInDecimal: function (date) {
            return (date.getHours() * 60 * 60) + (date.getMinutes() * 60) + date.getSeconds() + (date.getMilliseconds() / 1000);
        },
        /*get non working hours betwwen two dates*/
        _getNonWorkingSecondsOnDate: function (startDate, endDate) {

            var proxy = this, sHour = this._getSecondsInDecimal(startDate), eHour = this._getSecondsInDecimal(endDate), startRangeIndex = -1, endRangeIndex = -1, totNonWrkSecs = 0;
            for (var i = 0; i < this._workingTimeRanges.length; i++) {
                var val = this._workingTimeRanges[i];
                if (sHour >= val.from && sHour <= val.to)
                    startRangeIndex = i;
                if (eHour >= val.from && eHour <= val.to)
                    endRangeIndex = i;
            }
            if (startDate.getDate() != endDate.getDate()) {
                totNonWrkSecs = proxy._nonWorkingHours[proxy._nonWorkingHours.length - 1 - startRangeIndex] + 86400 - proxy._defaultEndTime;
                totNonWrkSecs += proxy._nonWorkingHours[endRangeIndex] + proxy._defaultStartTime;
            }
            else {
                if (startRangeIndex != endRangeIndex) {
                    totNonWrkSecs = proxy._nonWorkingHours[endRangeIndex] - proxy._nonWorkingHours[startRangeIndex];
                }
            }
            return totNonWrkSecs;
        },
        /*Get working hours between work time range value*/
        _getSecondsPerDay: function () {
            var tempDay = "01/01/2016", tempEndDay = "01/02/2016", proxy = this, model = this.model,
                length = model.dayWorkingTime.length, totalSeconds = 0;//MM/dd/yyyy
            for (var count = 0; count < length; count++) {
                var currentRange = model.dayWorkingTime[count];
                if (currentRange.from && currentRange.to) {

                    var startHour = ej.parseDate(tempDay + " " + currentRange.from, "MM/dd/yyyy h:mm tt", "en-US"),
                        endHour = currentRange.to != "12:00 AM" ? ej.parseDate(tempDay + " " + currentRange.to, "MM/dd/yyyy h:mm tt", "en-US") : ej.parseDate(tempEndDay + " " + currentRange.to, "MM/dd/yyyy h:mm tt", "en-US"),
                        timeDiff = endHour.getTime() - startHour.getTime(),
                        sdHour = this._getSecondsInDecimal(startHour),
                        edHour = this._getSecondsInDecimal(endHour);
                    if (edHour == 0)
                        edHour = 86400; // second in a day
                    totalSeconds += timeDiff / 1000;
                    if (count == 0)
                        proxy._defaultStartTime = sdHour;
                    if (count == length - 1)
                        proxy._defaultEndTime = edHour;
                    if (count > 0)
                        proxy._nonWorkingHours.push(proxy._nonWorkingHours[proxy._nonWorkingHours.length - 1] + sdHour - proxy._workingTimeRanges[count - 1].to);
                    else
                        proxy._nonWorkingHours.push(0);
                    proxy._workingTimeRanges.push({ from: sdHour, to: edHour });
                }
            }
            return totalSeconds;
        },

        _updateColumnLocaleText: function () {
            var model = this.model,
                columns = model.columns;
            if (columns && columns.length > 0) {
                for (var count = 0; count < columns.length; count++) {
                    if (columns[count].field && this._columnHeaderTexts[columns[count].field]) {
                        columns[count].headerText = this._columnHeaderTexts[columns[count].field];
                    }
                }
            }
        },
        //calculate height and width for gantt at load time
        _calculateDimensions: function ()
        {
            var proxy = this,
                sizeSettings = this.model.sizeSettings,
                sizeSettingHeight = sizeSettings.height,
                sizeSettingsWidth = sizeSettings.width,
                element = proxy.element,
                elementStyleHeight = element[0].style.height,
                elementStyleWidth = element[0].style.width,
                parentHeight = element.parent().height(),
                parentWidth = element.parent().width();

            if (sizeSettingsWidth)
                element.css("width", sizeSettingsWidth);

            if (sizeSettingHeight)
                element.css("height", sizeSettingHeight);

            /* check given value and assign default value for width and height */
            if (!sizeSettingHeight && !elementStyleHeight) {
                elementStyleHeight = "450px";
                element.css("height", "450px");
            }

            if (!sizeSettingsWidth && !elementStyleWidth) {
                elementStyleWidth = "100%";
                proxy.element.css("width", "100%");
            }
            proxy._ganttHeight = element.height();
            proxy._ganttWidth = element.width();

            if (proxy._ganttHeight === 0) {
                proxy._ganttHeight = 450;
                element.css("450px");
            }
        },
        _setCultureInfo:function() {
            var proxy = this,
               model = proxy.model,
               culture = model.locale,
               localization = $.extend({}, proxy._localizedLabels, 
                ej.isNullOrUndefined(ej.cultures[culture]) ? ej.cultures["default"] : ej.cultures[culture]),
               defaultLocalization = $.extend({}, ej.cultures["default"], ej.Gantt.Locale["default"]);
            model.dateFormat = !model.dateFormat ? ((localization && localization["calendars"] &&
                    localization["calendars"]["standard"]["patterns"]) ?
                (localization["calendars"]["standard"]["patterns"]["d"]) :
                ej.preferredCulture(culture) ? ej.preferredCulture(culture)["calendars"]["standard"]["patterns"]["d"] :
                    defaultLocalization["calendars"]["standard"]["patterns"]["d"]) : model.dateFormat;

            
            //EmptyRecord text to be displayed with dataSource is null
            proxy._emptyRecordText = (localization && localization["emptyRecord"]) ?
                localization["emptyRecord"] : defaultLocalization["emptyRecord"];
            
            //ColumnHeaderText to be displayed in treegrid
            proxy._columnHeaderTexts = ( localization && localization["columnHeaderTexts"] ) ?
                localization["columnHeaderTexts"] : defaultLocalization["columnHeaderTexts"];
            
            proxy._columnHeaderTexts = $.extend({}, defaultLocalization["columnHeaderTexts"], proxy._columnHeaderTexts);

            //taskModeDropDownValue to be displayed in treegrid
            proxy._taskModeTexts = (localization && localization["taskModeTexts"]) ?
                localization["taskModeTexts"] : defaultLocalization["taskModeTexts"];

            proxy._taskModeTexts = $.extend({}, defaultLocalization["taskModeTexts"], proxy._taskModeTexts);

            //EditDialog Text to be displayed in popup window
            proxy._editDialogTexts = (localization && localization["editDialogTexts"]) ?
                localization["editDialogTexts"] : defaultLocalization["editDialogTexts"];

            proxy._editDialogTexts = $.extend({}, defaultLocalization["editDialogTexts"], proxy._editDialogTexts);

            //Add Column Dialog Text to be displayed in popup window
            proxy._columnDialogTexts = (localization && localization["columnDialogTexts"]) ?
                localization["columnDialogTexts"] : defaultLocalization["columnDialogTexts"];

            //Tooltip Text to be displayed in the Toolbar
            proxy._toolboxTooltipTexts = (localization && localization["toolboxTooltipTexts"]) ?
                localization["toolboxTooltipTexts"] :
                defaultLocalization["toolboxTooltipTexts"];

            proxy._toolboxTooltipTexts = $.extend({}, defaultLocalization["toolboxTooltipTexts"], proxy._toolboxTooltipTexts);
            //Tooltip Text to be displayed on the Taskbar for duration units
            proxy._durationUnitTexts = (localization && localization["durationUnitTexts"]) ?
                localization["durationUnitTexts"] : defaultLocalization["durationUnitTexts"];

            proxy._durationUnitTexts = $.extend({}, defaultLocalization["durationUnitTexts"], proxy._durationUnitTexts);

            //Tooltip Text to be displayed on the Taskbar for duration units
            proxy._durationUnitEditText = (localization && localization["durationUnitEditText"]) ?
                localization["durationUnitEditText"] : defaultLocalization["durationUnitEditText"];

            proxy._durationUnitEditText = $.extend({}, defaultLocalization["durationUnitEditText"], proxy._durationUnitEditText);


            //Unit text to display in Work field.
            proxy._workUnitTexts = (localization && localization["workUnitTexts"]) ?
                localization["workUnitTexts"] : defaultLocalization["workUnitTexts"];
            
            proxy._workUnitTexts = $.extend({}, defaultLocalization["workUnitTexts"], proxy._workUnitTexts);
            
            //Text to be displayed in type drop down.
            proxy._taskTypeTexts = (localization && localization["taskTypeTexts"]) ?
                localization["taskTypeTexts"] : defaultLocalization["taskTypeTexts"];
            
            proxy._taskTypeTexts = $.extend({}, defaultLocalization["taskTypeTexts"], proxy._taskTypeTexts);
            
            //Text to be displayed in default type drop down.
            proxy._effortDrivenTexts = (localization && localization["effortDrivenTexts"]) ?
                localization["effortDrivenTexts"] : defaultLocalization["effortDrivenTexts"];
            
            proxy._effortDrivenTexts = $.extend({}, defaultLocalization["effortDrivenTexts"], proxy._effortDrivenTexts);

            //Context Menu Text
            proxy._contextMenuTexts = (localization && localization["contextMenuTexts"]) ?
                localization["contextMenuTexts"] : defaultLocalization["contextMenuTexts"];

            proxy._contextMenuTexts = $.extend({}, defaultLocalization["contextMenuTexts"], proxy._contextMenuTexts);
            //Name for New Task while adding
            proxy._newTaskTexts = (localization && localization["newTaskTexts"]) ?
                localization["newTaskTexts"] : defaultLocalization["newTaskTexts"];
            
            //Month names to be displayed in schedule
            proxy._months = (localization && localization["calendars"]) ?
                localization["calendars"]["standard"]["months"]["namesAbbr"] :
                ej.preferredCulture(culture) ? ej.preferredCulture(culture)["calendars"]["standard"]["months"]["namesAbbr"] :
                defaultLocalization["calendars"]["standard"]["months"]["namesAbbr"];
            
            //Day names to displayed in schedule
            proxy._days = (localization && localization["calendars"]) ?
                localization["calendars"]["standard"]["months"]["namesAbbr"] :
                ej.preferredCulture(culture) ? ej.preferredCulture(culture)["calendars"]["standard"]["days"]["namesAbbr"] :
                defaultLocalization["calendars"]["standard"]["days"]["namesAbbr"];

            //Column Menu Text
            proxy._columnMenuTexts = (localization && localization["columnMenuTexts"]) ?
                localization["columnMenuTexts"] : defaultLocalization["columnMenuTexts"];

            proxy._columnMenuTexts = $.extend({}, defaultLocalization["contextMenuTexts"], proxy._columnMenuTexts);

            //Column dialog title Text 
            proxy._columnDialogTitle = (localization && localization["columnDialogTitle"]) ?
                localization["columnDialogTitle"] : defaultLocalization["columnDialogTitle"];


            //Deleting the column texts 
            proxy._deleteColumnText = (localization && localization["deleteColumnText"]) ?
                localization["deleteColumnText"] : defaultLocalization["deleteColumnText"];

            proxy._okButtonText = (localization && localization["okButtonText"]) ?
                localization["okButtonText"] : defaultLocalization["okButtonText"];

            proxy._cancelButtonText = (localization && localization["cancelButtonText"]) ?
                localization["cancelButtonText"] : defaultLocalization["cancelButtonText"];

            proxy._confirmDeleteText = (localization && localization["confirmDeleteText"]) ?
                    localization["confirmDeleteText"] : defaultLocalization["confirmDeleteText"];

            //Predecssor Editing Text
            proxy._predecessorEditingTexts = localization && localization["predecessorEditingTexts"] ?
                localization["predecessorEditingTexts"] : defaultLocalization["predecessorEditingTexts"];

            proxy._predecessorEditingTexts = $.extend({}, defaultLocalization["contextMenuTexts"], proxy._predecessorEditingTexts);


            proxy._alertTexts = localization && localization["alertTexts"] ?
                localization["alertTexts"] : defaultLocalization["alertTexts"];

            proxy._alertTexts = $.extend({}, defaultLocalization["alertTexts"], proxy._alertTexts);
            
            //TabDialogText to be displayed in Gantt add and edit dialog
            proxy._dialogTabTitleTexts = (localization && localization["dialogTabTitleTexts"]) ?
                localization["dialogTabTitleTexts"] : defaultLocalization["dialogTabTitleTexts"];

            proxy._dialogTabTitleTexts = $.extend({}, defaultLocalization["dialogTabTitleTexts"], proxy._dialogTabTitleTexts);

            proxy._predecessorCollectionText = localization && localization["predecessorCollectionText"] ?
                localization["predecessorCollectionText"] : defaultLocalization["predecessorCollectionText"];
        },

        //Populate available fields
        _getMappingItems: function () {
            var proxy = this,
                model = proxy.model,
                mappingItems = [],
                length = proxy._columns.length;

            for (var i = 0; i < length; i++) {
                mappingItems.push(proxy._columns[i].mappingName);
            }
            return mappingItems;
        },

        //populate the context menu with items
        _getContextMenuItems: function () {
            var contextMenuItems = [],
                proxy = this,
                contextMenuLabel = this._contextMenuTexts;

            contextMenuItems = [{
                headerText: contextMenuLabel["taskDetailsText"],
                eventHandler: null,
                isDefault: true,
                menuId: "Task",

            }, {
                headerText: contextMenuLabel["addNewTaskText"],
                eventHandler: null,
                isDefault: true,
                menuId: "Add"
            },
             {
                headerText: contextMenuLabel["indentText"],
                eventHandler: null,
                isDefault: true,
                menuId: "Indent"
            }, {
                headerText: contextMenuLabel["outdentText"],
                eventHandler: null,
                isDefault: true,
                menuId: "Outdent"
            }, {
                headerText: contextMenuLabel["deleteText"],
                eventHandler: null,
                isDefault: true,
                menuId: "Delete"
            },
            {
                iconPath: null,
                headerText: contextMenuLabel["aboveText"],
                eventHandler: null,
                menuId: "Above",
                parentMenuId: "Add"
            }, {
                iconPath: null,
                headerText: contextMenuLabel["belowText"],
                eventHandler: null,
                menuId: "Below",
                parentMenuId: "Add"
            }
           ];
            return contextMenuItems;
        },

        //rendering is initiated here
        _initialize: function () {

            if (this._isFromSetModel)
                return;
            else {
                var proxy = this, model = proxy.model;
                proxy._$treegridPane = ej.buildTag('div.e-treegridPane');
                proxy._$ganttchartPane = ej.buildTag('div.e-ganttchartPane');
                proxy._$ejGantt = ej.buildTag('div.e-gantt-Spliter#e-ejSpliter' + proxy._id, "", {}, { 'unselectable': "on" });
                model.predecessorMapping && proxy._updatePredecessors();
                proxy._render();
                model.updatedRecords = model.flatRecords.slice();
                model.currentViewData = model.flatRecords.slice();
                model.predecessorMapping && model.enablePredecessorValidation && proxy._updatedRecordsDateByPredecessor();
                proxy._calculateScheduleDates();
                proxy._calculateHeaderDates();
                proxy._updateGanttRecords();
                proxy._checkDataManagerUpdate();
                proxy._renderTreeGrid();
                model.updatedRecords = proxy.getUpdatedRecords();
                model.currentViewData = proxy.getCurrentViewData();
                proxy._renderGanttChart();
                proxy._enableCreateCollection = true;
                proxy._isValidationEnabled = false;          //no validation require here
                proxy._isLoad = false,
                model.predecessorMapping && proxy._createConnectorLinesCollection();//connectorline oboject creates here
                proxy._isValidationEnabled = true;//reassign this value
                proxy._$treegridPane.css({ 'overflow': 'hidden' });
                //Dialog templates Rendering initiated
                proxy._initiateDialogTemplates();
                proxy._isTreeGridRendered = true;
                proxy._isGanttChartRendered = true;
                proxy._gridRows = proxy.getRows();
                proxy._ganttChartRows = proxy.getGanttChartRows();
                proxy._createContextMenuTemplate();
                proxy._wireEvents();
                proxy._initialEndRendering();
                proxy._getLocalizedLabels();
            }
        },

        _getLocalizedLabels:function(){
            return ej.getLocalizedConstants(this.sfType, this.model.locale);
        },

        //apply row Selection and enable collapse all while loading
        _initialEndRendering:function()
        {
            var proxy = this,
                model = this.model;

            //Call collapse All
            if (model.enableCollapseAll) {
                if (this.selectedRowIndex() != -1) {
                    proxy._deSelectRowItem();
                }
                proxy._collapseAll();
            }           

            //Select item by selected row index
            if (proxy.selectedRowIndex() >= 0 && proxy.selectedRowIndex() < proxy.model.updatedRecords.length && model.selectionMode == "row") {
                var rowSelectingArgs = {};
                rowSelectingArgs.recordIndex = proxy.selectedRowIndex();
                rowSelectingArgs.previousIndex = model.selectedItem ? model.updatedRecords.indexOf(model.selectedItem) : -1;
                if (proxy.rowSelecting(rowSelectingArgs)) {
                    proxy.selectRows(proxy.selectedRowIndex());
                    proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                }
            }  
        },

        //Check if data manager is updatable
        _checkDataManagerUpdate: function ()
        {
            var proxy = this,
                dataSource =this.dataSource();
            proxy._isDataManagerUpdate = false;
            proxy._jsonData = null;

            if (dataSource instanceof ej.DataManager) {
                if (dataSource.dataSource.offline && dataSource.dataSource.json) {
                    proxy._isDataManagerUpdate = true;
                    proxy._jsonData = dataSource.dataSource.json;
                }
                else if (!dataSource.dataSource.offline) {
                    proxy._isDataManagerUpdate = true;
                    proxy._jsonData = proxy._retrivedData;
                }
            }
        },
        //Render add,edit dialog templates
        _initiateDialogTemplates:function()
        {
            var proxy = this, model = this.model;

            proxy.customColumnFields();
            if (model.editSettings.allowEditing || model.editSettings.editMode == "normal" || model.editSettings.editMode == "dialogTemplate") {
                proxy.editDialogTemplate();
                if ($("#" + this._id + "_dialogEdit").length === 0)
                    proxy.element.append(proxy._renderDialog());
            }
            if (model.editSettings.allowAdding) {
                proxy.addDialogTemplate();
                if ($("#" + this._id + "_dialogAdd").length === 0) {
                    var $dialog = ej.buildTag("div.e-dialog e-dialog-content e-shadow e-widget-content", "", { display: "none" }, { id: this._id + "_dialogAdd" });
                    proxy.element.append($dialog);
                }
            }
        },

        //Toolbar,Gantt and treegrid parts are rendered and templates for add and edit dialog are created
        _render: function () {
            var proxy = this, element = proxy.element, model = proxy.model;
            if (proxy.model.toolbarSettings.showToolbar) {
                element.append(proxy._renderToolBar());
            }
            proxy._ganttHeight = parseInt(proxy._ganttHeight) - proxy._getToolBarHeight() - proxy._totalBorderHeight;
            proxy._$treegrid = ej.buildTag("div.ejTreeGrid#ejTreeGrid" + proxy._id, "", { "height": proxy._ganttHeight }, {});
            proxy._$ganttchart = ej.buildTag("div.ejGanttChart#ejGanttChart" + proxy._id, "", { "height": proxy._ganttHeight }, {});
            proxy._$ganttchartPane.append(proxy._$ganttchart);
            proxy._$treegridPane.append(proxy._$treegrid);
            proxy._$ejGantt.append(proxy._$treegridPane);
            proxy._$ejGantt.append(proxy._$ganttchartPane);    
            
            element.append(proxy._$ejGantt);
            proxy._renderGantt();
        },

        //Return dialog tag
        _renderDialog: function () {
            var $dialog = ej.buildTag("div.e-dialog e-dialog-content e-shadow e-widget-content", "", { display: "none" }, { id: this._id + "_dialogEdit" });
            return $dialog;
        },
        //Create Template for edit dialog
        editDialogTemplate: function () {

            var proxy = this,
                model = proxy.model,
                columns = $.extend([], proxy._columns),
                length = columns.length,
                emptyDataColumns = [], model = proxy.model, column, predecessorColoumnIndex = -1, resourceColumnIndex = -1,
                treeGridObj = proxy._$treegridHelper.data("ejTreeGrid"),
                columnIndex,
                dialogTab = proxy._dialogTab,
                tabLength = dialogTab.length;
            proxy._editDialogGeneralColumns = [];
            proxy._editDialogCustomColumns = [];            
            proxy._generalTabColumnFields = ["taskId", "taskMode", "taskName", "startDate", "endDate", "duration", "resourceInfo", "status", "work", "taskType", "effortDriven", "baselineStartDate", "baselineEndDate", "predecessor", "WBS", "notes"];
            proxy._mappingItems = proxy._getMappingItems();

            if (length == 0)
                return;

            if (model.editDialogFields.length > 0) {
                var filteredColumns = [];
                var count = 0, resultColumn;
                for (; count < model.editDialogFields.length; count++) {
                    resultColumn = $.grep(proxy._columns, function (val) {
                        return val.mappingName === model.editDialogFields[count].field;
                    });
                    resultColumn.length && filteredColumns.push(resultColumn[0]);
                }
                columns = filteredColumns;                
            }
            else {
                //To hide the WBS predecessor field
                if (model.enableWBS) {
                    var finalColumns;
                    if (model.enableWBSPredecessor) {
                        finalColumns = columns.filter(function (col) {
                            return col.mappingName != "WBSPredecessor";
                        });
                    }
                    if (finalColumns && finalColumns.length)
                        columns = finalColumns;
                }
            }
            var index = $.map(columns, function (column, index) {
                if (column.mappingName == model.taskNameMapping) {
                    return index;
                }
            });
            if ((index[0] + 1) % 3 == 0) {
                columns.splice(index[0] - 1, 0, columns.splice(index[0], 1)[0]);
            }
            length = columns.length;
            for (var i = 0; i < length; i++) {
                if ($.inArray(columns[i].mappingName, proxy._mappingItems) != -1) {
                    if (!model.resourceInfoMapping && (columns[i].field == "work" || columns[i].field == "taskType" || columns[i].field == "effortDriven"))
                        continue;
                    if (columns[i].mappingName !== model.predecessorMapping && columns[i].mappingName != model.resourceInfoMapping && columns[i].mappingName != model.notesMapping + "Text" &&
                        columns[i].mappingName !== model.baselineStartDateMapping && columns[i].mappingName !== model.baselineEndDateMapping) {
                        var index = $.map(proxy._generalTabColumnFields, function (field, index) {
                            if (field == columns[i].field) {
                                return index;
                            }
                        });
                        if (index.length > 0) {
                            proxy._editDialogGeneralColumns.push(columns[i]);
                        }
                        else {
                            proxy._editDialogCustomColumns.push(columns[i]);
                        }
                    }
                    else {
                        if (columns[i].mappingName !== model.baselineStartDateMapping && columns[i].mappingName !== model.baselineEndDateMapping) {
                            if (columns[i].mappingName !== model.predecessorMapping)
                                resourceColumnIndex = i;
                            else
                                predecessorColoumnIndex = i;
                        }
                    }
                }
            }
            var $tbody = ej.buildTag('div', "", {}, {}),
                $tab = ej.buildTag('div', "", {}, { id: proxy._id + "EditTab" }),
                $ul = ej.buildTag('ul', "", {}, {});
            $tab.append($ul);
            $tbody.append($tab);
            for (var tabIndex = 0; tabIndex < tabLength; tabIndex++) {
                switch (dialogTab[tabIndex]) {
                    //General Tab
                    case "General":
                        $ul.append("<li><a href='#" + proxy._id + "EditGeneral'>" + proxy._dialogTabTitleTexts["generalTabText"] + "</a></li>");
                        var $general = ej.buildTag('div', "", { "padding": "4px" }, { id: proxy._id + "EditGeneral" }),
                            $genearlForm = ej.buildTag('form', "", { 'height': 'auto', 'width': 'auto', 'font-size': '14px' }, { id: proxy._id + "GeneralEditForm" });
                        $general.append($genearlForm);
                        $tab.append($general);
                        $form = ej.buildTag('form', "", { 'height': 'auto', 'width': 'auto', 'font-size': '14px' }, { id: proxy._id + "EditForm" });
                        $genearlTable = ej.buildTag('table', "", { "border-spacing": "2px", "border-collapse": "separate" }, {});
                        $tr = ej.buildTag('tr');
                        var columnCount = 0,
                            generalColumns = proxy._editDialogGeneralColumns,
                            length = generalColumns.length;
                        for (var i = 0; i < length; i++) {
                            if (columnCount < 3) {
                                if (generalColumns[i].mappingName !== model.taskNameMapping) {
                                    columnCount++;
                                    $td = ej.buildTag('td', "", { "text-align": "left", 'padding': '5px 5px 0', 'font-weight': 'normal', "outline": "none" }, {});
                                }
                                else {
                                    columnCount += 2;
                                    $td = ej.buildTag('td', "", { "text-align": "left", 'padding': '5px 5px 0', 'font-weight': 'normal', "outline": "none" }, { "colspan": "2" });
                                }
                                $innerTable = ej.buildTag('table', "", { "outline": "none", "border-spacing": "2px", "border-collapse": "separate" }, {});
                                $inTr = ej.buildTag('tr', "", { "line-height": "1.4" }, {});
                                $inTd = ej.buildTag('td.editLabel', "", { "outline": "none", "padding": "1px" }, {});
                                $inTd.append("<label for='" + generalColumns[i].field + "' style='font-weight:normal;margin-bottom:0px;'>" + proxy._columnHeaderTexts[generalColumns[i].field] + "</label>");
                                $inTr.append($inTd);
                                $innerTable.append($inTr);
                                $inTr2 = ej.buildTag('tr');
                                $inTd2 = ej.buildTag('td.e-editValue', "", { "padding": "1px" }, {});
                                columnIndex = proxy._columns.indexOf(generalColumns[i])
                                ej.TreeGrid._initCellEditType(treeGridObj, $inTd2, proxy._id, columnIndex, "Edit");
                                $inTr2.append($inTd2);
                                $innerTable.append($inTr2);
                                $td.append($innerTable);
                                $tr.append($td);
                            }
                            else {
                                $genearlTable.append($tr);
                                $tr = $tempTr = ej.buildTag('tr');
                                i--;
                                columnCount = 0;
                            }
                        }
                        $genearlTable.append($tr);
                        $genearlForm.append($genearlTable);
                        break;
                    case "Predecessors":
                        //Predecessor Tab
                        if (model.predecessorMapping && predecessorColoumnIndex != -1) {
                            $ul.append("<li><a href='#" + proxy._id + "EditPredecessors'>" + proxy._dialogTabTitleTexts["predecessorsTabText"] + "</a></li>");
                            var $predecessor = ej.buildTag('div', "", { "padding": "0px" }, { id: proxy._id + "EditPredecessors" }),
                                $predecessorForm = ej.buildTag('form', "", { 'height': 'auto', 'width': '592px', 'font-size': '14px' }, { id: proxy._id + "PredecessorEditForm" });
                            $predecessor.append($predecessorForm);
                            $tab.append($predecessor);
                            $predecessorTable = ej.buildTag('table#' + proxy._id + 'predecessoreditTable', "", { "width": "100%", "outline": "none", "border-collapse": "collapse", "position": "relative", "left": "-2px" }, {});
                            $inTr = ej.buildTag('tr', "", { "border-collapse": "collapse", "height": "40px" }, "");
                            $inTd = ej.buildTag('td.editLabel', "", { "outline": "none", "border-collapse": "collapse", "padding": "1px" }, {});
                            $inTd.append("<span id='" + proxy._id + "EditDialog_PredecesorAdd' class='e-addpre e-icon e-enable e-edit-dialog' style='cursor:pointer; width: auto;position:relative;left:10px;'>&nbsp;&nbsp;" + proxy._editDialogTexts["addPredecessor"] + "</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span id='" + proxy._id + "EditDialog_PredecesorDelete' class='e-deletepre e-icon e-disable e-edit-dialog' style='cursor:pointer; width: auto;position:relative;left:10px;'>&nbsp;&nbsp;" + proxy._editDialogTexts["removePredecessor"] + "</span>");
                            $inTr.append($inTd);
                            $predecessorTable.append($inTr);
                            $inTr2 = ej.buildTag('tr', "", { "border-collapse": "collapse" }, {});
                            $inTd2 = ej.buildTag('td.e-editValue', "", { "border-collapse": "collapse", "padding": "1px" }, {});
                            $preDiv = ej.buildTag("div#treegrid" + proxy._id + "predecessorEdit", "", { "width": "100%", "height": "150px" }, {});
                            $inTd2.append($preDiv);
                            $inTr2.append($inTd2);
                            $predecessorTable.append($inTr2);
                            $predecessorForm.append($predecessorTable);
                        }
                        break;
                    case "Resources":
                        // Resource tab
                        if (model.resourceInfoMapping && resourceColumnIndex != -1) {
                            $ul.append("<li><a href='#" + proxy._id + "EditResources'>" + proxy._dialogTabTitleTexts["resourcesTabText"] + "</a></li>");
                            var $resource = ej.buildTag('div', "", { "padding": "0px" }, { id: proxy._id + "EditResources" }),
                                $resourceForm = ej.buildTag('form', "", { 'height': 'auto', 'width': '592px', 'font-size': '14px' }, { id: proxy._id + "ResourceEditForm" });
                            $resource.append($resourceForm);
                            $tab.append($resource);
                            $resourceTable = ej.buildTag('table#' + proxy._id + 'resourceeditTable', "", { "width": "100%", "outline": "none", "border-collapse": "collapse", "position": "relative", "left": "-2px" }, {});
                            $inTr = ej.buildTag('tr', "", { "border-collapse": "collapse", "height": "40px" }, {});
                            $inTd = ej.buildTag('td.editLabel', "", { "outline": "none", "border-collapse": "collapse", "padding": "1px" }, {});
                            $inTd.append("<span id='" + proxy._id + "EditDialog_ResourceAdd' class='e-addpre e-icon e-enable e-edit-dialog' style='cursor:pointer; width: auto;position:relative;left:10px;'>&nbsp;&nbsp;" + proxy._editDialogTexts["addPredecessor"] + "</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span id='" + proxy._id + "EditDialog_ResourceDelete' class='e-deletepre e-icon e-disable e-edit-dialog' style='cursor:pointer; width: auto;position:relative;left:10px;'>&nbsp;&nbsp;" + proxy._editDialogTexts["removePredecessor"] + "</span>");
                            $inTr.append($inTd);
                            $resourceTable.append($inTr);
                            $inTr2 = ej.buildTag('tr', "", { "border-collapse": "collapse" }, {});
                            $inTd2 = ej.buildTag('td.e-editValue', "", { "border-collapse": "collapse", "padding": "1px" }, {});
                            $preDiv = ej.buildTag("div#treegrid" + proxy._id + "resourceEdit", "", { "width": "100%", "height": "150px" }, {});
                            $inTd2.append($preDiv);
                            $inTr2.append($inTd2);
                            $resourceTable.append($inTr2);
                            $resourceForm.append($resourceTable);
                        }
                        break;
                    case "Custom Fields":
                        // Custom Field Tab
                        if (proxy._editDialogCustomColumns.length > 0) {
                            $ul.append("<li><a href='#" + proxy._id + "EditCustomFields'>" + proxy._dialogTabTitleTexts["customFieldsTabText"] + "</a></li>");
                            var $customField = ej.buildTag('div', "", { "padding": "0px" }, { id: proxy._id + "EditCustomFields" }),
                                $customFieldForm = ej.buildTag('form', "", { 'height': 'auto', 'width': '592px', 'font-size': '14px' }, { id: proxy._id + "CustomFieldsEditForm" });
                            $customField.append($customFieldForm);
                            $tab.append($customField);
                            $customFieldTable = ej.buildTag('table#' + proxy._id + 'customFieldeditTable', "", { "width": "100%", "outline": "none", "position": "relative", "left": "-2px", "top": "4px", "border-collapse": "collapse" }, {});
                            $inTr = ej.buildTag('tr', "", { "border-collapse": "collapse" }, "");
                            $inTd = ej.buildTag('td.e-editValue', "", { "border-collapse": "collapse", "padding": "1px" }, {});
                            $preDiv = ej.buildTag("div#treegrid" + proxy._id + "customFieldEdit", "", {}, {});
                            $inTd.append($preDiv);
                            $inTr.append($inTd);
                            $customFieldTable.append($inTr);
                            $customFieldForm.append($customFieldTable);
                        }
                        break;
                    case "Notes":
                        //Notes Tab
                        var editDialogFields = model.editDialogFields,
                            length = editDialogFields.length,
                            index = $.map(editDialogFields, function (dialogField, index) {
                                if (dialogField.field == model.notesMapping) {
                                    return index;
                                }
                            });
                        if ((model.notesMapping && length == 0) || (length > 0 && index.length > 0)) {
                            $ul.append("<li><a href='#" + proxy._id + "EditNotes'>" + proxy._dialogTabTitleTexts["notesTabText"] + "</a></li>");
                            var $notes = ej.buildTag('div', "", { "padding": "0px" }, { id: proxy._id + "EditNotes" }),
                                $notesDiv = ej.buildTag('div', "", { "padding": "0px", "position": "relative", "top": "5px", "left": "-1px" }, {}),
                                $noteTextArea = ej.buildTag('textarea', "", {}, { id: proxy._id + "EditAreaNotes" });
                            $notesDiv.append($noteTextArea);
                            $notes.append($notesDiv);
                            $tab.append($notes);
                        }
                        break;
                }
            }
            $tbody = proxy.renderDiaglogButton("edit", $tbody);
            $.templates(proxy._id + "_JSONDialogEditingTemplate", $tbody.html());
        },
        //create template for add dialog
        addDialogTemplate: function () {

            var proxy = this,
                model = proxy.model,
                columns = $.extend([], proxy._columns),
                length = columns.length,
                emptyDataColumns = [], model = proxy.model, column, predecessorColoumnIndex = -1, resourceColumnIndex = -1,
                treeGridObj = proxy._$treegridHelper.data("ejTreeGrid"),
                columnIndex,
                dialogTab = proxy._dialogTab,
                tabLength = dialogTab.length;
            proxy._addDialogGeneralColumns = [];
            proxy._addDialogCustomColumns = [];            
            proxy._generalTabColumnFields = ["taskId", "taskMode", "taskName", "startDate", "endDate", "duration", "resourceInfo", "status", "work", "taskType", "effortDriven", "baselineStartDate", "baselineEndDate", "predecessor", "WBS", "notes"];
            proxy._mappingItems = proxy._getMappingItems();

            if (length == 0)
                return;

            if (model.addDialogFields.length > 0) {
                var filteredColumns = [];
                var count = 0, resultColumn;
                for (; count < model.addDialogFields.length; count++) {
                    resultColumn = $.grep(proxy._columns, function (val) {
                        return val.mappingName === model.addDialogFields[count].field;
                    });
                    resultColumn.length && filteredColumns.push(resultColumn[0]);
                }
                columns = filteredColumns;
            }
            else {
                //To hide the WBS predecessor field
                if (model.enableWBS) {
                    var finalColumns;
                    if (model.enableWBSPredecessor) {
                        finalColumns = columns.filter(function (col) {
                            return col.mappingName != "WBSPredecessor";
                        });
                    }
                    if (finalColumns && finalColumns.length)
                        columns = finalColumns;
                }
            }
            var index = $.map(columns, function (column, index) {
                if (column.mappingName == model.taskNameMapping) {
                    return index;
                }
            });
            if ((index[0] + 1) % 3 == 0) {
                columns.splice(index[0] - 1, 0, columns.splice(index[0], 1)[0]);
            }
            var $tbody = ej.buildTag('div', "", {}, {}),
                $tab = ej.buildTag('div', "", {}, { id: proxy._id + "AddTab" }),
                $ul = ej.buildTag('ul', "", {}, {});
            $tab.append($ul);
            $tbody.append($tab);
            length = columns.length;
            for (var i = 0; i < length; i++) {
                if ($.inArray(columns[i].mappingName, proxy._mappingItems) != -1) {
                    if (columns[i].field == "work" || columns[i].field == "taskType" || columns[i].field == "effortDriven")
                        continue;
                    if (columns[i].mappingName !== model.predecessorMapping && columns[i].mappingName != model.resourceInfoMapping && columns[i].mappingName != model.notesMapping + "Text") {
                        var index = $.map(proxy._generalTabColumnFields, function (field, index) {
                            if (field == columns[i].field) {
                                return index;
                            }
                        });
                        if (index.length > 0) {
                            proxy._addDialogGeneralColumns.push(columns[i]);
                        }
                        else {
                            proxy._addDialogCustomColumns.push(columns[i]);
                        }
                    }
                    else {
                        if (columns[i].mappingName === model.predecessorMapping)
                            predecessorColoumnIndex = i;
                        else if (columns[i].mappingName === model.resourceInfoMapping)
                            resourceColumnIndex = i;
                    }
                }
            }
            for (var tabIndex = 0; tabIndex < tabLength; tabIndex++) {
                switch (dialogTab[tabIndex]) {
                    // General Tab
                    case "General":
                        $ul.append("<li><a href='#" + proxy._id + "AddGeneral'>" + proxy._dialogTabTitleTexts["generalTabText"] + "</a></li>");
                        var $general = ej.buildTag('div', "", { "padding": "4px" }, { id: proxy._id + "AddGeneral" }),
                            $genearlForm = ej.buildTag('form', "", { 'height': 'auto', 'width': 'auto', 'font-size': '14px' }, { id: proxy._id + "GeneralAddForm" });
                        $general.append($genearlForm);
                        $tab.append($general);
                        $form = ej.buildTag('form', "", { 'height': 'auto', 'width': 'auto', 'font-size': '14px' }, { id: proxy._id + "AddForm" });
                        $genearlTable = ej.buildTag('table', "", { "border-spacing": "2px", "border-collapse": "separate" }, {});
                        $tr = ej.buildTag('tr');
                        var columnCount = 0,
                            generalColumns = proxy._addDialogGeneralColumns,
                            length = generalColumns.length;
                        for (var i = 0; i < length; i++) {
                            if (columnCount < 3) {
                                if (generalColumns[i].mappingName !== model.taskNameMapping) {
                                    columnCount++;
                                    $td = ej.buildTag('td', "", { "text-align": "left", 'padding': '5px 5px 0', 'font-weight': 'normal', "outline": "none" }, {});
                                }
                                else {
                                    columnCount += 2;
                                    $td = ej.buildTag('td', "", { "text-align": "left", 'padding': '5px 5px 0', 'font-weight': 'normal', "outline": "none" }, { "colspan": "2" });
                                }
                                $innerTable = ej.buildTag('table', "", { "outline": "none", "border-spacing": "2px", "border-collapse": "separate" }, {});
                                $inTr = ej.buildTag('tr', "", { "line-height": "1.4" }, {});
                                $inTd = ej.buildTag('td.editLabel', "", { "outline": "none", "padding": "1px" }, {});
                                $inTd.append("<label for='" + generalColumns[i].field + "' style='font-weight:normal;margin-bottom:0px'>" + proxy._columnHeaderTexts[generalColumns[i].field] + "</label>");
                                $inTr.append($inTd);
                                $innerTable.append($inTr);
                                $inTr2 = ej.buildTag('tr');
                                $inTd2 = ej.buildTag('td.e-editValue', "", { "padding": "1px" }, {});
                                columnIndex = proxy._columns.indexOf(generalColumns[i])
                                ej.TreeGrid._initCellEditType(treeGridObj, $inTd2, proxy._id, columnIndex, "Add");
                                $inTr2.append($inTd2);
                                $innerTable.append($inTr2);
                                $td.append($innerTable);
                                $tr.append($td);
                            }
                            else {
                                $genearlTable.append($tr);
                                $tr = $tempTr = ej.buildTag('tr');
                                i--;
                                columnCount = 0;
                            }
                        }
                        $genearlTable.append($tr);
                        $genearlForm.append($genearlTable);
                        break;
                    case "Predecessors":
                        //Predecessor Tab
                        if (model.predecessorMapping && predecessorColoumnIndex != -1) {
                            $ul.append("<li><a href='#" + proxy._id + "AddPredecessors'>" + proxy._dialogTabTitleTexts["predecessorsTabText"] + "</a></li>");
                            var $predecessor = ej.buildTag('div', "", { "padding": "0px", "overflow": "visible" }, { id: proxy._id + "AddPredecessors" }),
                                $predecessorForm = ej.buildTag('form', "", { 'height': 'auto', 'width': '592px', 'font-size': '14px' }, { id: proxy._id + "PredecessorAddForm" });
                            $predecessor.append($predecessorForm);
                            $tab.append($predecessor);
                            $predecessorTable = ej.buildTag('table#' + proxy._id + 'predecessoraddTable', "", { "width": "100%", "outline": "none", "border-collapse": "collapse", "position": "relative", "left": "-2px" }, {});
                            $inTr = ej.buildTag('tr', "", { "border-collapse": "collapse", "height": "40px" }, {});
                            $inTd = ej.buildTag('td.editLabel', "", { "outline": "none", "border-collapse": "collapse", "padding": "1px" }, {});
                            $inTd.append("<span id='" + proxy._id + "AddDialog_PredecesorAdd' class='e-addpre e-icon e-enable e-add-dialog' style='cursor:pointer; width: auto;position:relative;left:10px;'>&nbsp;&nbsp;" + proxy._editDialogTexts["addPredecessor"] + "</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span id='" + proxy._id + "AddDialog_PredecesorDelete' class='e-deletepre e-icon e-disable e-add-dialog' style='cursor:pointer; width: auto;position:relative;left:10px;'>&nbsp;&nbsp;" + proxy._editDialogTexts["removePredecessor"] + "</span>");
                            $inTr.append($inTd);
                            $predecessorTable.append($inTr);
                            $inTr2 = ej.buildTag('tr', "", { "border-collapse": "collapse" }, {});
                            $inTd2 = ej.buildTag('td.e-editValue', "", { "border-collapse": "collapse", "padding": "1px" }, {});
                            $preDiv = ej.buildTag("div#treegrid" + proxy._id + "predecessorAdd", "", { "width": "100%", "height": "150px" }, {});
                            $inTd2.append($preDiv);
                            $inTr2.append($inTd2);
                            $predecessorTable.append($inTr2);
                            $predecessorForm.append($predecessorTable);
                        }
                        break;
                    case "Resources":
                        // Resource tab
                        if (model.resourceInfoMapping && resourceColumnIndex != -1) {
                            $ul.append("<li><a href='#" + proxy._id + "AddResources'>" + proxy._dialogTabTitleTexts["resourcesTabText"] + "</a></li>");
                            var $resource = ej.buildTag('div', "", { "padding": "0px" }, { id: proxy._id + "AddResources" }),
                                $resourceForm = ej.buildTag('form', "", { 'height': 'auto', 'width': '592px', 'font-size': '14px' }, { id: proxy._id + "ResourceAddForm" });
                            $resource.append($resourceForm);
                            $tab.append($resource);
                            $resourceTable = ej.buildTag('table#' + proxy._id + 'resourceaddTable', "", { "width": "100%", "outline": "none", "border-collapse": "collapse", "position": "relative", "left": "-2px" }, {});
                            $inTr = ej.buildTag('tr', "", { "border-collapse": "collapse", "height": "40px" }, {});
                            $inTd = ej.buildTag('td.editLabel', "", { "outline": "none", "border-collapse": "collapse", "padding": "1px" }, {});
                            $inTd.append("<span id='" + proxy._id + "AddDialog_ResourceAdd' class='e-addpre e-icon e-enable e-add-dialog' style='cursor:pointer; width: auto;position:relative;left:10px;'>&nbsp;&nbsp;" + proxy._editDialogTexts["addPredecessor"] + "</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span id='" + proxy._id + "AddDialog_ResourceDelete' class='e-deletepre e-icon e-disable e-add-dialog' style='cursor:pointer; width: auto;position:relative;left:10px;'>&nbsp;&nbsp;" + proxy._editDialogTexts["removePredecessor"] + "</span>");
                            $inTr.append($inTd);
                            $resourceTable.append($inTr);
                            $inTr2 = ej.buildTag('tr', "", { "border-collapse": "collapse" }, {});
                            $inTd2 = ej.buildTag('td.e-editValue', "", { "border-collapse": "collapse", "padding": "1px" }, {});
                            $preDiv = ej.buildTag("div#treegrid" + proxy._id + "resourceAdd", "", { "width": "100%", "height": "150px" }, {});
                            $inTd2.append($preDiv);
                            $inTr2.append($inTd2);
                            $resourceTable.append($inTr2);
                            $resourceForm.append($resourceTable);
                        }
                        break;
                    case "Custom Fields":
                        // Custom Field Tab
                        if (proxy._addDialogCustomColumns.length > 0) {
                            $ul.append("<li><a href='#" + proxy._id + "AddCustomFields'>" + proxy._dialogTabTitleTexts["customFieldsTabText"] + "</a></li>");
                            var $customField = ej.buildTag('div', "", { "padding": "0px" }, { id: proxy._id + "AddCustomFields" }),
                                $customFieldForm = ej.buildTag('form', "", { 'height': 'auto', 'width': '592px', 'font-size': '14px' }, { id: proxy._id + "CustomfFieldsAddForm" });
                            $customField.append($customFieldForm);
                            $tab.append($customField);
                            $customFieldTable = ej.buildTag('table#' + proxy._id + 'customfieldaddTable', "", { "width": "100%", "outline": "none", "border-collapse": "collapse", "position": "relative", "left": "-2px", "top": "4px" }, {});
                            $inTr = ej.buildTag('tr', "", { "border-collapse": "collapse" }, {});
                            $inTd = ej.buildTag('td.e-editValue', "", { "border-collapse": "collapse", "padding": "1px" }, {});
                            $preDiv = ej.buildTag("div#treegrid" + proxy._id + "customFieldAdd", "", {}, {});
                            $inTd.append($preDiv);
                            $inTr.append($inTd);
                            $customFieldTable.append($inTr);
                            $customFieldForm.append($customFieldTable);
                        }
                        break;
                    case "Notes":
                        //Notes Tab
                        var addDialogFields = model.addDialogFields,
                            length = addDialogFields.length,
                            index = $.map(addDialogFields, function (dialogField, index) {
                                if (dialogField.field == model.notesMapping) {
                                    return index;
                                }
                            });
                        if (model.notesMapping && (length == 0) || (length > 0 && index.length > 0)) {
                            $ul.append("<li><a href='#" + proxy._id + "AddNotes'>" + proxy._dialogTabTitleTexts["notesTabText"] + "</a></li>");
                            var $notes = ej.buildTag('div', "", { "padding": "0px" }, { id: proxy._id + "AddNotes" }),
                                $notesDiv = ej.buildTag('div', "", { "padding": "0px", "position": "relative", "top": "5px", "left": "-1px" }, {}),
                                $noteTextArea = ej.buildTag('textarea', "", {}, { id: proxy._id + "AddAreaNotes" });
                            $notesDiv.append($noteTextArea);
                            $notes.append($notesDiv);
                            $tab.append($notes);
                        }
                        break;
                }
            }

            $tbody = proxy.renderDiaglogButton("add", $tbody);
            $.templates(proxy._id + "_JSONDialogAddingTemplate", $tbody.html());
        },
        //remove contextmenu from DOM
        _clearContextMenu: function () {
            //variables for context menu items
         
            $('.e-contextmenu').remove();
            $('.e-innerContextmenu').remove();
        },

        //JSRender Template for ContextMenu
        _createContextMenuTemplate: function () {
            var proxy = this;
            var helpers = {};
            helpers["_" + proxy._id + "getHeaderName"] = $.proxy(proxy._getHeaderName, proxy);

            $.views.helpers(helpers);
            var menuItemList = "<li style='list-style-type:none;margin:0px;'>";
            var listChild = "<div class='e-menuitem{{if disable}} e-disable{{/if}}' id={{:menuId}}  style='display:table;cursor:pointer;min-width:100px;'>" +
                            "{{if iconPath}}" +
                            "<div class='e-icon e-gantticon' style='display:inline-block;margin-left:5px;position:relative;top:0px;" +
                            "background-image:{{:iconPath}};background-repeat:no-repeat;'/>" +
                             "{{else}}" +
                            "<span class='e-icon {{:iconClass}} e-gantticon' style='display:inline-block;padding:0px 5px 0px 7px;position:relative;top:0px;'/>" +
                            "{{/if}}" +
                            "<div style='display:inline-block;padding:5px;position:relative;top:-2px;'>" +
                            "<span style='font-size:12px;padding:5px;'>{{:headerText}}</span></div>" +
                            "{{if ~_" + proxy._id + "getHeaderName(#data)}}<div class='e-icon e-expander e-gantticon' style='display:inline-block;padding:5px;float:right;position:relative;top:0px;'/> {{/if}}";

            menuItemList += listChild;
            menuItemList += "</div></li>";
            var templates = {};
            templates[proxy._id + "contextMenuTemplate"] = menuItemList;
            $.templates(templates);
        },

        //helper methods for context menu template
        _getHeaderName: function (data) {
            var childMenuItems = this._contextMenuItems.filter(function (value) {
                if (data.menuId != null && data.menuId == value.parentMenuId)
                    return true;
            });
            if (childMenuItems.length > 0) {
                return true;
            }
            return false;
        },

        //create templates for all columns edit types
        initCellEditType: function (column, element,editTarget) {

            var proxy = this,
                model = proxy.model,
                id,    
                helpers = {};
            id = editTarget ? editTarget : "";
            if (ej.isNullOrUndefined(column["editType"]))
                column["editType"] = "stringedit";

            switch (column["editType"]) {
                case "stringedit":
                    if (column.mappingName === model.predecessorMapping) {
                        helpers["_" + proxy._id + "predecessor"] = proxy._getPredecessorsValue;
                        $.views.helpers(helpers);
                        element.html(ej.buildTag('input.e-field e-ejinputtext', "", {}, { value: "{{:~_" + proxy._id + "predecessor('" + proxy._id + "Object','" + model.predecessorMapping + "','" + column.field + "')}}", id: proxy._id + column.field, name: column.field }));
                    } else {
                        element.html(ej.buildTag('input.e-field e-ejinputtext', "", {}, { value: "{{:#data['" + column.field + "']}}", id: proxy._id + column.field + id, name: column.field, dialog: editTarget }));
                    }
                    break;
                case "booleanedit":
                    element.html('{{if ' + column.field + '}} <input class="e-field e-checkbox" type ="checkbox" id=' + proxy._id + column.field + ' name=' + column.field + ' checked="checked"></input>{{else}} <input class="e-field e-checkbox" type ="checkbox" id=' + proxy._id + column.field + ' name=' + column.field + ' > {{/if}}');
                    break;
                case "numericedit":
                    var $numericText = ej.buildTag('input.e-numerictextbox e-field', "", {}, { type: "text", value: "{{:#data['" + column.field + "']}}", id: proxy._id + column.field + id, name: column.field, dialog: editTarget });
                    element.append($numericText);
                    break;
                case "datepicker":
                case "datetimepicker":
                    var $datePicker = ej.buildTag('input.e-' + column["editType"] + ' e-field', "", {}, { type: "text", value: "{{:#data['" + column.field + "']}}", id: proxy._id + column.field + id, name: column.field, dialog: editTarget });
                    element.append($datePicker);
                    break;
                case "dropdownedit":
                    var $dropDownList = ej.buildTag('input.e-field e-dropdownlist' + ' e-field', "", {}, { type: "text", value: "{{:#data['" + column.field + "']}}", id: proxy._id + column.field + id, name: column.field, dialog: editTarget });
                    element.append($dropDownList);                    
                    break;
                case "maskedit":
                    var $maskEdit = ej.buildTag('input .e-field e-maskedit', "", {},
                                        {
                                            value: "{{:#data['" + column.field + "']}}",
                                            id: proxy._id + column.field + id,
                                            name: column.field,
                                            dialog: editTarget
                                        });
                    element.append($maskEdit);
                    break;
            }
        },

        //returns predecessor value
        _getPredecessorsValue: function (gridObject, mappingName) {
            return this.data.item ? this.data.item[mappingName] : "";
        },

        //reduce the date when date is fall on holidays
        _onHoliDayCheckBefore: function (startDate) {
            var proxy = this,
                holidays = proxy.model.holidays,
                includeWeekend = proxy.model.includeWeekend;


            if (isAutoSchedule && holidays && holidays.length) {
                var holidayIndex = 0,
                    holidayslength = holidays.length,
                    holiday, flag;
                    for (holidayIndex = 0; holidayIndex < holidayslength; holidayIndex++) {
                        holiday = proxy._getDateFromFormat(holidays[holidayIndex].day);
                        if (holiday.getTime() == startDate.getTime()) {
                            startDate.setDate(startDate.getDate() - 1);
                            if (this.model.includeWeekend === false) {
                                proxy._setBeforeWeekend(startDate);
                            }
                        }
                        else {
                            return startDate;
                        }
                    }
                    return startDate;
            }
            else {
                return startDate;
            }
        },
        //check date is on holidays
        _onHoliDayCheck: function (startDate)
        {
            var proxy = this,
                holidays = proxy.model.holidays,
                includeWeekend = proxy.model.includeWeekend;
                

            if (isAutoSchedule && holidays && holidays.length && !proxy.hasChildRecords) {
                var holidayIndex = 0,
                    holidayslength = holidays.length,
                    holiday, flag;

                    for (holidayIndex = 0; holidayIndex < holidayslength; holidayIndex++) {
                        holiday = proxy._getDateFromFormat(holidays[holidayIndex].day);
                        if (holiday.getTime()==startDate.getTime()) {
                            startDate.setDate(startDate.getDate() + 1);
                            if (this.model.includeWeekend === false) {
                                if (startDate.getDay() == 0) {
                                    startDate.setDate(startDate.getDate() + 1);
                                } else if (startDate.getDay() == 6) {
                                    startDate.setDate(startDate.getDate() + 2);
                                }
                            }
                        }
                        else
                        {
                            return startDate;
                        }
                    }
                    return startDate;
            }
            else
            {
                return startDate;
            }
        },
        /*get duration and duration unit value from given string*/
        _getDurationValues: function (val, isFromDialog) {
            var duration = 0,
                model = this.model,
                durationUnit = model.durationUnit, unitIndex;

            if (typeof val == "string") {
                var values = val.match(/(\d*\.*\d+|[A-z]+)/g);
                if (values && values.length <= 2) {
                    duration = parseFloat(values[0]);
                    durationUnit = values[1] ? values[1].toLowerCase() : "";
                    if (this._durationUnitEditText.minute.indexOf(durationUnit) != -1)
                        durationUnit = ej.Gantt.DurationUnit.Minute;
                    else if (this._durationUnitEditText.hour.indexOf(durationUnit) != -1)
                        durationUnit = ej.Gantt.DurationUnit.Hour;
                    else if (this._durationUnitEditText.day.indexOf(durationUnit) != -1)
                        durationUnit = ej.Gantt.DurationUnit.Day;
                    else
                        durationUnit = model.durationUnit;
                } 
            } else {
                duration = val;
                durationUnit = model.durationUnit;
            }

            if (isNaN(duration)) {
                duration = isFromDialog ? this._editedDialogRecord.duration : 0;
                durationUnit = isFromDialog ? this._editedDialogRecord.durationUnit : model.durationUnit;
            }
            var output = {};
            output.duration = duration;
            output.durationUnit = durationUnit;
            return output;
        },

        //calculate end date and duration on date change in edit dialog
        _editStartDateChange: function (element, args)
        {
            var proxy = this,
                id = proxy._id,
                model = proxy.model,
                targetId = element.attr("id"),
                holidays = this.model.holidays,
                dialog = element.attr("dialog"),
                selectedItem = model.selectionMode == "row" ? this.selectedItem() : model.updatedRecords[proxy._rowIndexOfLastSelectedCell],
                editedObj = this._editedDialogRecord,
                effortDriven = editedObj.effortDriven == "true" ? true : false,
                startDateId, endDateId, durationId, baselineStartDateId, baselineEndDateId, durationVal, durationUnit;

            if (this._editedDialogRecord.isUpdatedFromDialog)
                return;
            this._editedDialogRecord.isUpdatedFromDialog = true;

            if (dialog === "Add") {
                startDateId = "#" + id + "startDateAdd";
                endDateId = "#" + id + "endDateAdd";
                durationId = "#" + id + "durationAdd";
                effortDrivenId = "#" + id + "effortDrivenAdd";
                typeId = "#" + id + "taskTypeAdd";
                workId = "#" + id + "workAdd";
                baselineStartDateId = "#" + id + "baselineStartDateAdd";
                baselineEndDateId = "#" + id + "baselineEndDateAdd";
            }
            else {
                startDateId = "#" + id + "startDateEdit";
                endDateId = "#" + id + "endDateEdit";
                durationId = "#" + id + "durationEdit";
                effortDrivenId = "#" + id + "effortDrivenEdit";
                typeId = "#" + id + "taskTypeEdit";
                workId = "#" + id + "workEdit";
            }
            var startDate = $(startDateId).val(),
                endDate = $(endDateId).val(),
                duration = $(durationId).val(),
                work = $(workId).val();
            if ((targetId === id + "startDateEdit") || (targetId === id + "startDateAdd"))
            if (!startDate) {
                startDate = editedObj ? editedObj.startDate : undefined;
            }
            if (!duration) {
                duration = editedObj ? editedObj.duration : undefined;
            }
            if (!endDate) {
                endDate = editedObj ? editedObj.endDate : undefined;
            }
            if ((targetId === id + "startDateEdit") || (targetId === id + "startDateAdd")){
                startDate = args.value ? proxy._getDateFromFormat(args.value) : startDate;
                startDate = proxy._checkStartDate(startDate, editedObj);
                if (proxy.getFormatedDate(startDate) != args.value) {


                    if (model.dateFormat.toLowerCase().indexOf("hh") != -1)
                        $(startDateId).ejDateTimePicker("option", "value", startDate);
                    else
                        $(startDateId).ejDatePicker("option", "value", startDate);
                }
                var tempEndDate = proxy._getEndDate(startDate, editedObj.duration, editedObj.durationUnit, editedObj);
                editedObj.startDate = startDate;
                editedObj.endDate = tempEndDate;
                if (model.dateFormat.indexOf("hh") != -1)
                    $(endDateId).ejDateTimePicker("option", "value", tempEndDate);
                else
                    $(endDateId).ejDatePicker("option", "value", tempEndDate);
            }

            else if((targetId=== id + "endDateEdit") ||(targetId===id + "endDateAdd")){
                endDate = args.value ? proxy._getDateFromFormat(args.value) : endDate;
                if (endDate.getHours() == 0 && this._defaultEndTime != 86400)
                    this._setTime(this._defaultEndTime, endDate);
                endDate = this._checkEndDate(endDate, editedObj);
                if (proxy.getFormatedDate(endDate) != args.value) {
                    if (model.dateFormat.indexOf("hh") != -1)
                        $(endDateId).ejDateTimePicker("option", "value", endDate);
                    else
                        $(endDateId).ejDatePicker("option", "value", endDate);
                }

                if (editedObj.isMilestone) {
                    editedObj.startDate = this._checkStartDate(editedObj.startDate, editedObj);

                    if (proxy.getFormatedDate(editedObj.startDate) != startDate) {
                        if (model.dateFormat.toLowerCase().indexOf("hh") != -1)
                            $(startDateId).ejDateTimePicker("option", "value", editedObj.startDate);
                        else
                            $(startDateId).ejDatePicker("option", "value", editedObj.startDate);
                    }
                proxy._updateResourceRelatedFields(editedObj);
                $(workId).ejNumericTextbox("option", "value", editedObj.work);
                $(durationId).val(proxy._getDurationStringValue(editedObj));
                }
                if (editedObj.startDate.getTime() <= endDate.getTime()) {
                    editedObj.endDate = endDate;
                    editedObj.duration = this._getDuration(editedObj.startDate, endDate, editedObj.durationUnit, editedObj.isAutoSchedule);
                    duration = proxy._getDurationStringValue(editedObj);
                    $(durationId).val(duration);
                } else {

                    if (model.dateFormat.toLowerCase().indexOf("hh") != -1)
                        $(endDateId).ejDateTimePicker("option", "value", editedObj.endDate);
                    else
                        $(endDateId).ejDatePicker("option", "value", editedObj.endDate);

                }
            }
              
            else if ((targetId === id + "durationEdit") || (targetId === id + "durationAdd")) {
                var values = proxy._getDurationValues(duration, true);
                durationVal = values.duration;
                durationUnit = values.durationUnit;
                if (editedObj.duration != durationVal || editedObj.durationUnit != durationUnit) {
                    //calculate end date and update it
                    editedObj.duration = durationVal;
                    editedObj.durationUnit = durationUnit;
                    if (editedObj.isMilestone) {
                        editedObj.startDate = this._checkStartDate(editedObj.startDate, editedObj);
                        if (proxy.getFormatedDate(editedObj.startDate) != startDate) {
                            if (model.dateFormat.toLowerCase().indexOf("hh") != -1)
                                $(startDateId).ejDateTimePicker("option", "value", editedObj.startDate);
                            else
                                $(startDateId).ejDatePicker("option", "value", editedObj.startDate);
                        }
                    }
                    endDate = this._getEndDate(editedObj.startDate, durationVal, durationUnit, editedObj);
                    editedObj.endDate = endDate;
                    if (model.dateFormat.indexOf("hh") != -1)
                        $(endDateId).ejDateTimePicker("option", "value", endDate);
                    else
                        $(endDateId).ejDatePicker("option", "value", endDate);
                }
                proxy._updateResourceRelatedFields(editedObj);
                if (!effortDriven)
                    $(workId).ejNumericTextbox("option", "value", editedObj.work);
                $(durationId).val(proxy._getDurationStringValue(editedObj));
                if (editedObj.taskType == "fixedWork")
                    proxy._updateResourceDataSource(editedObj);                                   
            }
            else if ((targetId === id + "workEdit") || (targetId === id + "workAdd")) {
                editedObj.work = parseInt(work);
                proxy._updateResourceRelatedFields(editedObj);
                if (editedObj.taskType != "fixedDuration" && editedObj.isAutoSchedule) {                    
                    $(durationId).val(proxy._getDurationStringValue(editedObj));
                    endDate = this._getEndDate(editedObj.startDate, editedObj.duration, editedObj.durationUnit, editedObj);
                    editedObj.endDate = endDate;
                    if (model.dateFormat.indexOf("hh") != -1)
                        $(endDateId).ejDateTimePicker("option", "value", endDate);
                    else
                        $(endDateId).ejDatePicker("option", "value", endDate);
                }
                else
                    proxy._updateResourceDataSource(editedObj);
            }
            else if (targetId === id + "baselineStartDateAdd") {
                if ($(baselineEndDateId).length > 0) {
                    var baselineStartDate = proxy._getDateFromFormat($(baselineStartDateId).val());
                    var baselineEndDate = proxy._getDateFromFormat($(baselineEndDateId).val());
                    if (baselineStartDate && baselineEndDate && baselineStartDate.getTime() > baselineEndDate.getTime()) {
                        if (model.dateFormat.toLowerCase().indexOf("hh") != -1)
                            $(baselineStartDateId).ejDateTimePicker("option", "value", args.prevDate);
                        else
                            $(baselineStartDateId).ejDatePicker("option", "value", args.prevDate);
                    }
                }

            } else if (targetId === id + "baselineEndDateAdd") {
                if ($(baselineStartDateId).length > 0) {
                    var baselineStartDate = proxy._getDateFromFormat($(baselineStartDateId).val());
                    var baselineEndDate = proxy._getDateFromFormat($(baselineEndDateId).val());
                    if (baselineStartDate && baselineEndDate && baselineStartDate.getTime() > baselineEndDate.getTime()) {
                        if (model.dateFormat.toLowerCase().indexOf("hh") != -1)
                            $(baselineEndDateId).ejDateTimePicker("option", "value", args.prevDate);
                        else
                            $(baselineEndDateId).ejDatePicker("option", "value", args.prevDate);
                    }
                }
            }
            this._editedDialogRecord.isUpdatedFromDialog = false;
        },

        //Create task name collection from records for edit dialog
        _taskNameCollection:function()
        {
            var proxy = this,
            records = proxy.model.flatRecords,
            names = [];
            idsCollection = [];
            proxy._preTableCollection = [];
            for(var i=0;i<records.length;i++)
            {
                var temp = { id: records[i].taskId.toString(), text: (records[i].taskId.toString() + "-" + records[i].taskName), value: (records[i].taskId.toString() + "-" + records[i].taskName)};
                var ids = { id: (records[i].taskId.toString() + "-" + records[i].taskName), text: records[i].taskId.toString(), value: records[i].taskId.toString() };
                names.push(temp);
                idsCollection.push(ids);
            }            
            proxy._preTableCollection.push(idsCollection);
            proxy._preTableCollection.push(names);
        }
        ,

        //get ID array from predecessor string
        _idFromPredecessor:function(pre)
        {
            var str = "123FS+2";
            var preArray = pre.split(',');
            var preIdArray = [];
           

            for (var j = 0; j < preArray.length; j++)
            {
                var strArray = [];
                for (var i = 0; i < preArray[j].length; i++) {
                    if (!isNaN(preArray[j].charAt(i))) {
                        strArray.push(preArray[j].charAt(i));
                    }
                    else {
                        break;
                    }
                }
                preIdArray.push((strArray.join('')));
            }
            return preIdArray;
        },

        //Change the id name while task name is selected in dialog
        _preIdChangByName:function()
        {
            var proxy = this;
            var $form = $("#" + proxy._id + "PreEditForm");
            $targetTr = $form.closest("tr");
            $val = $form.find(".onEdit");
            var temp = $val.val();
            var names = proxy._taskNameCollection();

            var id = $.map(names, function (obj, index) {
                if (obj.text === $val.val()) {
                    return obj.id;
                }
            });
            id = id[0];
            $targetTr.find(".id").html(id);
        },

        //handle end edit event in dialog box predecessor editing
        _preEndEdit:function(editDialogId,dialogType,args)
        {
            var proxy = this,
                dataSource = args.model.dataSource,
                selectedItem = args.model.selectedItem,
                tempId;
            proxy._taskNameCollection();
            if (args.value !== null && (args.columnName === "name" || args.columnName === "id")) {
                if (args.columnName === "name" && args.value.length > 0) {
                    tempId = args.value.split('-');
                    var id = $.map(proxy._preTableCollection[1], function (obj, index) {
                        if (obj.id === tempId[0]) {
                            return obj.id;
                        }
                    });
                    id = id[0];
                    selectedItem.id = id;
                    selectedItem.name = args.value;
                    var curent = dataSource.indexOf(selectedItem.item);
                    if (curent === -1) {
                        dataSource.push(selectedItem.item);
                        curent = dataSource.indexOf(selectedItem.item);
                    }
                    dataSource[curent].id = id;
                    dataSource[curent].name = args.value;
                }
                if (args.columnName === "id" && args.value.length > 0) {

                    var name = $.map(proxy._preTableCollection[0], function (obj, index) {
                        if (obj.value === args.value) {
                            return obj.id;
                        }
                    });
                    name = name[0];
                    selectedItem.name = name;
                    selectedItem.id = id;
                    var curent = dataSource.indexOf(selectedItem.item);
                    if (curent === -1) {
                        dataSource.push(selectedItem.item);
                        curent = dataSource.indexOf(selectedItem.item);
                    }
                    dataSource[curent].name = name;
                }

                if (!selectedItem.type && !ej.isNullOrUndefined(curent)) {
                    selectedItem.type = "Finish-Start";
                    dataSource[curent].type = "Finish-Start";
                }
                $(editDialogId).ejTreeGrid("refreshRow", args.model.selectedRowIndex);
                $(editDialogId).ejTreeGrid("selectRows", args.model.selectedRowIndex);
                proxy._enbleDisablePredecessorAddButton('enable', dialogType);
            }
        },
        //udapte the status of predecessor delete button in dialog
        _enableDisablePredecessorDelete: function (dialogType, args)
        {
            var proxy = this,
                predecessorDelete;
            if (dialogType == "add")
                predecessorDelete = $("#" + proxy._id + "AddDialog_PredecesorDelete");
            else
                predecessorDelete = $("#" + proxy._id + "EditDialog_PredecesorDelete");
            $(predecessorDelete).unbind("click", $.proxy(proxy._deletepredecessor, proxy)).bind("click", $.proxy(proxy._deletepredecessor, proxy));
            $(predecessorDelete).removeClass("e-disable").addClass("e-enable");
        },

        //udapte the status of resource delete button in dialog
        _enableDisableResouceDelete: function (dialogType,args) {
            var proxy = this, resourceDelete;
            if (dialogType == "add")
                resourceDelete = $("#" + proxy._id + "AddDialog_ResourceDelete");
            else
                resourceDelete = $("#" + proxy._id + "EditDialog_ResourceDelete");
            $(resourceDelete).unbind("click", $.proxy(proxy._deleteResource, proxy)).bind("click", $.proxy(proxy._deleteResource, proxy));
            $(resourceDelete).removeClass("e-disable").addClass("e-enable");
        },

        //prepare data source for dropdown in predecessor edit in dialog box
        _predecessorEditCollection:function(){
        
            var proxy = this,
               model = proxy.model,
               collection,
               gridId,
               types,
               data = [],
               selectedItem;
            gridId = "#" + proxy._id + "predecessor";            
            types = proxy._predecessorCollectionText;
            data = [];
            selectedItem = model.selectedItem;
            proxy._taskNameCollection();
            collection = proxy._preTableCollection[1];
            if (!ej.isNullOrUndefined(selectedItem) && !ej.isNullOrUndefined(selectedItem.predecessor) && !ej.isNullOrUndefined(selectedItem.item[model.predecessorMapping]))
            {
                var predecessor = selectedItem.predecessor,
                    predecessorLength = predecessor.length,
                    typeLength = types.length,
                    collectionLength = collection.length;
                for (var i = 0; i < predecessorLength; i++) {
                    var id = predecessor[i].from;
                    if (selectedItem.taskId.toString()!==id.toString())
                    {
                        var taskName, type, lags = 0;
                        for (var j = 0; j < collectionLength; j++) {
                            if (collection[j].id === id) {
                                taskName = collection[j].value;
                                break;
                            }
                        }
                        for (var k = 0; k < typeLength; k++) {
                            if (types[k].id == predecessor[i].predecessorsType) {
                                type = types[k].text;
                            }
                        }

                        var multiple = predecessor[i].offset != 1, val = "";
                        if (predecessor[i].offsetDurationUnit == "day")
                            val += multiple ? this._durationUnitTexts.days : this._durationUnitTexts.day;
                        else if (predecessor[i].offsetDurationUnit == "hour")
                            val += multiple ? this._durationUnitTexts.hours : this._durationUnitTexts.hour;
                        else
                            val += multiple ? this._durationUnitTexts.minutes : this._durationUnitTexts.minute;

                        lags = (predecessor[i].offset + " " + val);
                        var obj = { id: id, name: taskName, type: type, offset: lags };
                        data.push(obj);
                    }
                }
            }
            return data;
        },
        _getResourceInfoIndex: function (resourceIdcollection, resourcecollection) {

            var count = 0,
            resources = [];
            if (resourceIdcollection && resourcecollection) {
                for (count; count < resourceIdcollection.length; count++) {
                    if (resourcecollection[resourceIdcollection[count]])
                        resources.push(resourceIdcollection[count]);
                }
            }
            return resources;
        },
        //render control in diaog box as per template created
        _refreshEditForm: function (args) {
            var proxy = this,
                elementFocused = false,
                $formElement,
                percent = 86,
                i = 0, form, length,
                $element,
                inputWidth = "165px",
                model = proxy.model,
                width,
                params = {},
                value,
                column,
                customParams,
                toformat, newIdInstant,
                formatVal, editTreeGridId,
                selectedItem = model.selectionMode == "row" ? model.selectedItem : model.updatedRecords[proxy._rowIndexOfLastSelectedCell];

            if (args.requestType == "add") {
                var tab = document.getElementById(proxy._id + "AddTab"),
                    dialog = $("#" + proxy._id + "_dialogAdd_wrapper"),
                form = document.getElementById(proxy._id + "GeneralAddForm"),
                editTreeGridId = "#treegrid" + proxy._id + "predecessorAdd",
                noteRteId = "#" + proxy._id + "AddAreaNotes",
                resourceTreeGridId = "#treegrid" + proxy._id + "resourceAdd",
                customFieldTreeGridId = "#treegrid" + proxy._id + "customFieldAdd";
                if (!ej.isNullOrUndefined(model.dataSource) && model.dataSource.length == 0 && model.predecessorMapping && $(editTreeGridId).length > 0) {
                    var index = [];
                    index[0] = proxy._dialogTab.indexOf("Predecessors");
                    $("#" + proxy._id + "AddTab").ejTab("option", "disabledItemIndex", index);
                }
                else {
                    var index = [];
                    index[0] = proxy._dialogTab.indexOf("Predecessors");
                    $("#" + proxy._id + "AddTab").ejTab("option", "enabledItemIndex", index);
                    $("#" + proxy._id + "AddTab").find("div.e-content").css("overflow", "visible");
                }
                newIdInstant = proxy.model.flatRecords.length;
                newIdInstant = proxy._getNewTaskId(newIdInstant);
                if (proxy.model.enableWBS) {
                    var rowPos = model.editSettings.rowPosition.toLowerCase(),
                        newWBSval = proxy._getNewWBSid(rowPos);
                }
            }
            else {
                var tab = document.getElementById(proxy._id + "EditTab"),
                    dialog = $("#" + proxy._id + "_dialogEdit_wrapper"),
                    form = document.getElementById(proxy._id + "GeneralEditForm"),
                    editTreeGridId = "#treegrid" + proxy._id + "predecessorEdit",
                    noteRteId = "#" + proxy._id + "EditAreaNotes",
                    resourceTreeGridId = "#treegrid" + proxy._id + "resourceEdit",
                    customFieldTreeGridId = "#treegrid" + proxy._id + "customFieldEdit";
                if (model.flatRecords.length <= 2 && model.parentRecords.length == 1
                    && model.predecessorMapping && $(editTreeGridId).length > 0)
                    $("#" + proxy._id + "EditTab").ejTab("removeItem", 1);

            }
            $formElement = $(form).find("input,select");
            length = $formElement.length;
            for (i; i < length; i++) {
                $element = $formElement.eq(i);
                params = {};
                inputWidth = 180;
                column = ej.TreeGrid.getColumnByField(proxy._columns, $element.prop("name"));

                if (column)
                    value = args.data[column.field];
                else
                    continue;

                if ($element.hasClass("e-numerictextbox")) {

                    width = inputWidth;
                    params.width = width;
                    params.showSpinButton = true;
                    params.cssClass = model.cssClass;
                    //for parent editing 
                    var tempId = $element[0].id;
                    tempId = tempId.replace(proxy._id, '');
                    if (!ej.isNullOrUndefined(selectedItem) && selectedItem.hasChildRecords && (tempId == "statusEdit" ||tempId == "workEdit")) {
                        params.readOnly = true;
                        $element.closest("td").css("opacity", 0.5);
                    }
                    if (tempId == "statusEdit" || tempId == "statusAdd") {
                            params.maxValue = 100;
                            params.minValue = 0;
                        }
                        if (tempId == "workEdit" || tempId == "workAdd") {
                            params.change = function (args) {
                                proxy._updatedColumn = "work";
                                proxy._editStartDateChange($(this.element[0]));
                            }
                        }
                    if (value.toString().length)
                            params.value = parseFloat(value);
                        else
                        params.value = 0;

                    if (!ej.isNullOrUndefined(column["editParams"]))
                        $.extend(params, column["editParams"]);
                    $element.ejNumericTextbox(params);
                    $element.prop("name", $element.prop("name").replace(proxy._id, ""));
                }
                else if ($element.hasClass("e-datepicker")) {

                    params.width = inputWidth;
                    params.cssClass = model.cssClass;
                    params.dateFormat = model.dateFormat;
                    params.locale = model.locale;
                    params.change = function (args) {
                        this.option("value", args.value);
                        proxy._updatedColumn = this.element[0].name;
                        proxy._editStartDateChange(this.element, args);
                    };
                    var tempId = $element[0].id;
                    tempId = tempId.replace(proxy._id, '');
                    if (!ej.isNullOrUndefined(selectedItem) && selectedItem.hasChildRecords && selectedItem.isAutoSchedule && (tempId == "startDateEdit" || tempId == "endDateEdit") && args.requestType !== "add") {
                        params.readOnly = true;
                        $element.closest("td").css("opacity", 0.5);
                    }
                    if (value.toString().length)
                        params.value = proxy._getDateFromFormat(value.toString());
                    else
                        params.value = proxy._getDateFromFormat(model.scheduleStartDate);


                    if (column["format"] !== undefined && column.format.length > 0) {
                        toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
                        formatVal = toformat.exec(column.format);
                        params.dateFormat = formatVal[2];
                        params.value = ej.format(new Date(params.value), params.dateFormat, params.locale);
                        $element.val(params.value);
                    }
                    if (!ej.isNullOrUndefined(column["editParams"]))
                        $.extend(params, column["editParams"]);

                    $element.ejDatePicker(params);
                }
                else if ($element.hasClass("e-datetimepicker")) {

                    params = {
                        width: inputWidth,
                        rtl: model.rtl,
                        locale: model.locale,
                            cssClass: model.css,
                            dateTimeFormat: model.dateFormat,
                        };
                        params.change = function (args) {
                            proxy._updatedColumn = this.element[0].name;
                            this.option("value", args.value);
                            if (this._prevDateTimeVal)
                                proxy._editStartDateChange(this.element, args);
                        };
                        var tempId = $element[0].id;
                        tempId = tempId.replace(proxy._id, '');
                        if (!ej.isNullOrUndefined(selectedItem) && selectedItem.hasChildRecords && selectedItem.isAutoSchedule && selectedItem.isAutoSchedule && (tempId == "startDate" || tempId == "endDate") && args.requestType !== "add" ) {
                            params.readOnly = true;
                            $element.closest("td").css("opacity", 0.5);
                        }
                    if (value.toString().length)
                        params.value = proxy._getDateFromFormat(value.toString());
                        else
                        params.value = proxy._getDateFromFormat(model.scheduleStartDate);

                        if (!ej.isNullOrUndefined(column["editParams"]))
                            $.extend(params, column["editParams"]);
                        
                    $element.ejDateTimePicker(params);
                }
                else if ($element.hasClass("e-dropdownlist")) {

                    var dataSource = column.dropdownData;
                    if (column.field === "resourceInfo") {
                        $element.ejDropDownList({
                            cssClass: model.cssClass,
                            width: inputWidth,
                            showCheckbox: true,
                            dataSource: dataSource,
                            fields: { id: model.resourceIdMapping, text: model.resourceNameMapping, value: model.resourceNameMapping },
                                selectedItems: args.requestType == "add" ? proxy._getResourceInfoIndex(args.data.resourceInfo, model.resources) : proxy.getIndexofresourceInfo(dataSource, args.data)
                            });
                        }                       
                        else {
                            var controlArgs = {};
                            controlArgs.cssClass = model.cssClass;
                            controlArgs.width = inputWidth;
                            controlArgs.dataSource = dataSource;
                            controlArgs.value = value;
                            controlArgs.change = function (args) {
                                proxy._updateEditDialogFields(this);
                            }
                            if (!ej.isNullOrUndefined(column["editParams"]))
                                $.extend(controlArgs, column["editParams"]);
                            if ($element.val.length) {
                                if (column.field == "taskMode") {
                                    value = args.requestType == "beginedit" ? !args.data.isAutoSchedule : model.taskSchedulingMode == "manual" ? true : false;
                                    $element.val(value);
                                }
                                else if (column.field == "taskType") {
                                    var value = args.requestType == "beginedit" ? args.data.taskType : proxy.model.taskType;
                                    $element.val(value);
                                }
                                else if (column.field == "effortDriven") {
                                    var value = args.requestType == "beginedit" ? args.data.effortDriven : model.taskType == "fixedWork" ? true : false;
                                    $element.val(value);
                                }
                            }
                            if (args.requestType == "beginedit" && !args.data.isAutoSchedule && (column.field == "taskType" || column.field == "effortDriven"))
                                controlArgs.enabled = false;
                            if (args.data.taskType == "fixedWork" && column.field == "effortDriven")
                                controlArgs.enabled = false;
                            if (args.requestType == "add" && column.field == "effortDriven" && model.taskType == "fixedWork")
                                controlArgs.enabled = false;
                            if ((column.field == "taskType" || column.field == "effortDriven") && args.data.hasChildRecords)
                                controlArgs.enabled = false;
                            if (column.field == "taskMode" && model.taskSchedulingMode != ej.Gantt.TaskSchedulingMode.Custom)
                                controlArgs.enabled = false;
                            $element.val(controlArgs.value);
                            $element.ejDropDownList(controlArgs);

                            var obj = $element.ejDropDownList("instance");
                            obj._setValue($element.val());

                        }
                    }
                else if ($element.hasClass("e-maskedit")) {
                    var controlArgs = {};
                    controlArgs.locale = model.locale;
                    controlArgs.cssClass = model.cssClass;
                    controlArgs.width = inputWidth;
                    if (!ej.isNullOrUndefined(column["editParams"]))
                        $.extend(controlArgs, column["editParams"]);

                    $element.ejMaskEdit(controlArgs);
                }
                else {
                    switch ($element.prop('tagName')) {
                        case "INPUT":

                            if ($element.attr("type") != "checkbox") {
                                //For ID field id is read only

                                if ($element.attr("name") === "taskId") {
                                    if (args.requestType !== "add") {
                                        $element.attr("readonly", "readonly");
                                        $element.css("opacity", 0.5);
                                        $element.val(args.data.taskId);
                                    }
                                    else if (args.requestType === "add") {
                                        if (args.data.taskId == "" || ej.isNullOrUndefined(args.data.taskId))
                                            $element.val(newIdInstant);
                                        else
                                            $element.val(args.data.taskId);
                                    }
                                }
                                else if ($element.attr("name") === "taskName") {
                                    if (args.requestType === "add") {
                                        if (args.data.taskName == "" || ej.isNullOrUndefined(args.data.taskName))
                                            $element.val(proxy._newTaskTexts["newTaskName"] + " " + newIdInstant);
                                        else
                                            $element.val(args.data.taskName);
                                    }
                                    else
                                        $element.val(args.data.taskName);
                                }
                                else if ($element.attr("name") === "duration") {
                                    args.data && $element.val(proxy._getDurationStringValue(args.data));
                                    var durationValues = proxy._getDurationValues(args.data)
                                    if (args.requestType !== "add" && args.data.hasChildRecords && args.data.isAutoSchedule) {
                                        $element.attr("readonly", "readonly");
                                        $element.css("opacity", 0.5);
                                    } else if ((args.requestType == "add") && args.data.duration == "") {
                                        $element.val("0 " + proxy._durationUnitTexts[durationValues.durationUnit]);
                                    }
                                    else 
                                        $element.val(args.data.duration + " " + proxy._durationUnitTexts[durationValues.durationUnit]); 

                                        $element.change(function () {
                                            proxy._updatedColumn = "duration"
                                            proxy._editStartDateChange($(this));                                            
                                        });
                                        $element.keyup(function (e) {
                                            if (e.keyCode == 13)
                                            proxy._editStartDateChange($(this));
                                    });
                                }
                                else if ($element.attr("name") === "WBS") {
                                    if (args.requestType !== "add") {
                                        $element.attr("readonly", "readonly").css("opacity", 0.5);
                                        $element.val(args.data.WBS)
                                    }
                                    else if (args.requestType === "add") {
                                        $element.val(newWBSval);
                                        $element.attr("readonly", "readonly").css("opacity", 0.5);
                                    }
                                }
                                else if ($element.attr("name") === "WBSPredecessor")
                                    $element.attr("readonly", "readonly").css("opacity", 0.5);
                                if ($element.attr("name") === "taskName")
                                    inputWidth = 380;
                                var tempId = $element[0].id;
                                tempId = tempId.replace(proxy._id, '');

                                $element.css("text-align", $element.attr("name") != null && ej.TreeGrid.getColumnByField(proxy._columns, $element.prop("name")) != null ?
                                    ej.TreeGrid.getColumnByField(proxy._columns, $element.attr("name")).textAlign : "center");
                                $element.outerWidth(inputWidth).height(25);
                            } else {
                                var controlArgs = {};
                                controlArgs.cssClass = model.cssClass;
                                controlArgs.size = "medium";
                                if (!ej.isNullOrUndefined(column["editParams"]))
                                    $.extend(params, column["editParams"]);
                                $element.ejCheckBox(controlArgs);
                            }
                            break;

                        case "SELECT":
                            $element.width(inputWidth).height(23);
                            break;
                    }
                }
                if (!$element.is(":disabled") && !elementFocused && (!$element.is(":hidden") || typeof $element.data("ejDropDownList") == "object")) {
                    if (!proxy._isEnterKeyPressed) {
                        proxy._focusElements($element.closest('td'));
                        elementFocused = true;
                    }
                }
            }
            //render prdecessor table in edit dialog
            if (model.predecessorMapping && $(editTreeGridId).length) {
                var ds = [];
                if (args.requestType !== "add") {
                    ds = proxy._predecessorEditCollection();
                }
                proxy._taskNameCollection();                
                var types = proxy._predecessorCollectionText;
                $(editTreeGridId).ejTreeGrid({
                    dataSource: ds,
                    allowSorting: false,
                    columns: [{ headerText: proxy._columnHeaderTexts["taskId"], field: "id", editType: ej.TreeGrid.EditingType.Dropdown, dropdownData: proxy._preTableCollection[0], width: "89px" },
                              { headerText: proxy._columnHeaderTexts["taskName"], field: "name", editType: ej.TreeGrid.EditingType.Dropdown, dropdownData: proxy._preTableCollection[1], width: "300px" },
                              { headerText: proxy._columnHeaderTexts["type"], field: "type", editType: ej.TreeGrid.EditingType.Dropdown, dropdownData: types, width: "141px" },
                              { headerText: proxy._columnHeaderTexts["offset"], field: "offset", editType: ej.TreeGrid.EditingType.String, width: "88px" }],
                    enableAltRow: false,
                    allowColumnResize: true,
                    editSettings: {
                        allowAdding: true,
                        allowDeleting: true,
                        allowEditing: true,
                        editMode: "cellEditing",
                        rowPosition: "bottom",
                        beginEditAction: ej.TreeGrid.BeginEditAction.Click
                    },
                    locale: model.locale,
                    endEdit: $.proxy(proxy._preEndEdit, proxy, editTreeGridId, args.requestType),
                    beginEdit: $.proxy(proxy._preBeginEdit, proxy),
                    rowSelected: $.proxy(proxy._enableDisablePredecessorDelete, proxy, args.requestType),
                    actionComplete: function (eventArgs) {
                        if (eventArgs.requestType == "delete") {
                            proxy._enbleDisablePredecessorDeleteButton('disable', args.requestType);
                            proxy._disablePredecessorAddButton(editTreeGridId, args.requestType);
                        }
                    },
                    treeColumnIndex: 5,
                    predecessorTable: proxy._isFromGantt,
                    sizeSettings: { width: "620px", height: "198px" },
                    isResponsive: false
                });

                if (model.selectedItem && model.selectedItem.hasChildRecords && args.requestType !== "add") {
                    proxy._enbleDisablePredecessorDeleteButton('disable', args.requestType);
                    proxy._enbleDisablePredecessorAddButton('disable', args.requestType);
                }
                else {
                    proxy._enbleDisablePredecessorDeleteButton('disable', args.requestType);
                    proxy._enbleDisablePredecessorAddButton('enable', args.requestType);
                }
            }

            //Render resource table in add and edit dialog
            if (model.resourceInfoMapping && $(resourceTreeGridId).length) {
                var resourceData = [],
                    resoruce = $.extend(true, [], model.resources);
                if (args.requestType != "add") {
                    var resource = args.data.resourceInfo,
                        length = resource ? resource.length : 0;
                    for (var i = 0; i < length; i++) {
                        resourceData.push({ "name": resource[i][model.resourceIdMapping], "unit": resource[i][model.resourceUnitMapping] });
                    }
                }
                else if (args.data.resourceInfo.length != 0) {
                    ganttRecord = new ej.Gantt.GanttRecord();
                    ganttRecord.item = args.data;
                    var resourceCollection = model.resources, resourceInfo = args.data.resourceInfo;
                    ganttRecord.resourceInfo = resourceInfo && ganttRecord._setResourceInfo(resourceInfo, model.resourceIdMapping, model.resourceNameMapping, model.resourceUnitMapping, resourceCollection);
                    var resource = ganttRecord.resourceInfo,
                        length = resource ? resource.length : 0;
                    for (var i = 0; i < length; i++) {
                        resourceData.push({ "name": resource[i][model.resourceIdMapping], "unit": resource[i][model.resourceUnitMapping] });
                    }
                }
                var resoruce = $.extend(true, [], model.resources);
                $(resourceTreeGridId).ejTreeGrid({
                    dataSource: resourceData,                    
                    columns: [{
                        headerText: proxy._columnHeaderTexts["resourceInfo"], field: "name", width: "309px",
                        editType: ej.TreeGrid.EditingType.Dropdown, dropdownData: resoruce, editParams: { fields: { text: model.resourceNameMapping, value: model.resourceIdMapping } }
                    },
                              {
                                  headerText: proxy._columnHeaderTexts["unit"], field: "unit", width: "309px",
                                  editType: ej.TreeGrid.EditingType.Numeric, visible: true, headerTextAlign: "center"
                              }
                    ],
                    enableAltRow: false,
                    allowColumnResize: true,
                    editSettings: {
                        allowAdding: true,
                        allowDeleting: true,
                        allowEditing: true,
                        editMode: "cellEditing",
                        beginEditAction: ej.TreeGrid.BeginEditAction.Click
                    },
                    locale: model.locale,
                    endEdit: $.proxy(proxy._resourceEndEdit, proxy, resourceTreeGridId, args.requestType),
                    beginEdit: $.proxy(proxy._resourceBeginEdit, proxy, resourceTreeGridId),
                    rowSelected: $.proxy(proxy._enableDisableResouceDelete, proxy, args.requestType),
                    actionBegin: function (args) {
                        if (args.requestType == "delete" || args.requestType == "sorting")
                            this.model.columns[0].dropdownData = $.extend(true, [], proxy.model.resources);
                    },
                    actionComplete: function (eventArgs) {
                        if (eventArgs.requestType == "delete") {
                            proxy._enableDisableResourceAddButton(eventArgs, true, args.requestType);
                            proxy.enbleDisableDeleteResourceButton('disable', args.requestType);
                        }
                    },
                    treeColumnIndex: 3,
                    resourceTable: proxy._isFromGantt,
                    sizeSettings: { width: "620px", height: "198px" },
                    isResponsive: false
                });
                if (args.requestType !== "add" && resourceData.length == model.resources.length) {
                    proxy.enbleDisableDeleteResourceButton('enable', args.requestType);
                    proxy.enbleDisableAddResourceButton('disable', args.requestType);
                }
                else {
                    proxy.enbleDisableDeleteResourceButton('disable', args.requestType);
                    proxy.enbleDisableAddResourceButton('enable', args.requestType);
                }
            }
            //Render custom field tab in add and edit dialog
            if ($(customFieldTreeGridId).length) {
                if (args.requestType == "add") {
                    var customColumns = proxy._addDialogCustomColumns,
                        gridData = [],
                        id = 0,
                        length = customColumns.length;
                    for (var i = 0; i < length; i++) {
                        id++;
                        var data = {};
                        data.id = id;
                        data.field = customColumns[i].field;
                        data.headerText = customColumns[i].headerText;
                        data.value = args.data[customColumns[i].field];
                        data.text = args.data[customColumns[i].field];
                        data.editType = customColumns[i].editType ? customColumns[i].editType.toLowerCase() : "stringedit";
                        gridData.push(data);
                    }
                }
                else {
                    var customColumns = proxy._editDialogCustomColumns,
                        gridData = [],
                        id = 0,
                        length = customColumns.length;
                    for (var i = 0; i < length; i++) {
                        id++;
                        var data = {};
                        data.id = id;
                        data.field = customColumns[i].field;
                        data.headerText = customColumns[i].headerText;
                        data.value = args.data[customColumns[i].field];

                        data.editType = customColumns[i].editType ? customColumns[i].editType.toLowerCase() : "stringedit";
                        if (customColumns[i].editType.toLowerCase() == "dropdownedit") {
                            data.text = ej.isNullOrUndefined(args.data[customColumns[i].field]) ? "" : proxy._getDropDownText(customColumns[i], args.data[customColumns[i].field]);
                        }
                        else
                            data.text = args.data[customColumns[i].field];
                        gridData.push(data);
                    }
                }
                $(customFieldTreeGridId).ejTreeGrid({
                    dataSource: gridData,
                    allowSorting: false,
                    locale: model.locale,
                    enableAltRow: false,
                    rowHeight:30,
                    columns: [{ headerText: proxy._columnHeaderTexts["dialogCustomFieldName"], field: "headerText", allowEditing: false },
                              { headerText: "Original Value", field: "value", visible: false },
                              { headerText: "Field", field: "field", visible: false },
                              {
                                  headerText: proxy._columnHeaderTexts["dialogCustomFieldValue"], field: "text",
                                  editTemplate: {
                                      create: function () {
                                          return "<input style='width:100%;'>";
                                      },
                                      read: $.proxy(proxy._customColumnRead, proxy, customFieldTreeGridId),
                                      write: $.proxy(proxy._customColumnWrite, proxy, customColumns, customFieldTreeGridId),
                                  }
                              }
                    ],
                    allowColumnResize: true,
                    editSettings: {
                        allowAdding: true,
                        allowDeleting: true,
                        allowEditing: true,
                        editMode: "cellEditing",
                        beginEditAction: ej.TreeGrid.BeginEditAction.Click
                    },
                    sizeSettings: { width: "620px", height: "234px" },
                    isResponsive: false
                });
            }
            //Render the RTE control for notes tab.
            if (model.notesMapping && $(noteRteId).length) {
                var value;
                if (args.requestType == "add")
                    value = args.data.notes;
                else {
                    var htmlText = args.data.item[model.notesMapping];
                    value = htmlText;
                }
                $(noteRteId).ejRTE({
                    width: "620px", isResponsive: false, height: "281px", value: value,
                    locale: model.locale,
                    tools: {
                        font: ["fontName", "fontSize", "fontColor", "backgroundColor"],
                        style: ["bold", "italic", "underline", "strikethrough"],
                        alignment: ["justifyLeft", "justifyCenter", "justifyRight", "justifyFull"],
                        doAction: ["undo", "redo"],
                        indenting: [],
                        clear: [],
                        links: ["createLink", "removeLink"],
                        images: [],
                        media: [],
                        tables: [],
                        lists: ["unorderedList"],
                        clipboard: [],
                        edit: [],
                        formatStyle: [],
                        view: []
                    }
                });
                $(noteRteId + "_wrapper").find(".e-toolbar.e-toolbarspan").css("border-bottom", "none"); // Remove the border bottom of rich text editor toolbar.
                $(noteRteId + "_editor").height("208");
                $(noteRteId + "_Iframe")[0].style.height = "203px";
                $(dialog).removeClass("e-rte");
            }
        },
        //updated the status of predecessor delelte button in dialog box
        _enbleDisablePredecessorDeleteButton: function (args, dialogType) {
            var proxy = this,
                 predecessorDelete;
            if (dialogType == "add")
                predecessorDelete = $("#" + proxy._id + "AddDialog_PredecesorDelete");
            else
                predecessorDelete = $("#" + proxy._id + "EditDialog_PredecesorDelete");
            if (args === "enable") {
                $(predecessorDelete).unbind("click", $.proxy(proxy._deletepredecessor, proxy)).bind("click", $.proxy(proxy._deletepredecessor, proxy));
                $(predecessorDelete).addClass('e-enable').removeClass('e-disable');
            }
            else {
                $(predecessorDelete).unbind("click", $.proxy(proxy._deletepredecessor, proxy));
                $(predecessorDelete).addClass('e-disable').removeClass('e-enable');
            }
        },

        //updated the status of predecessor button in dialog box
        _enbleDisablePredecessorAddButton: function (args, dialogType) {
            var proxy = this,
                predecessorAdd = "";
            if (dialogType == "add")
                predecessorAdd = $("#" + proxy._id + "AddDialog_PredecesorAdd");
            else
                predecessorAdd = $("#" + proxy._id + "EditDialog_PredecesorAdd");

            if (args === "enable") {
                $(predecessorAdd).unbind("click", $.proxy(proxy._addpredecessor, proxy)).bind("click", $.proxy(proxy._addpredecessor, proxy));
                $(predecessorAdd).addClass('e-enable').removeClass('e-disable');
            }
            else {
                $(predecessorAdd).unbind("click", $.proxy(proxy._addpredecessor, proxy));
                $(predecessorAdd).addClass('e-disable').removeClass('e-enable');
            }
        },

        //updated the status of predecessor button in dialog box
        _disablePredecessorAddButton: function (treeGridId, dialogType) {
            var proxy = this;
            var table = $(treeGridId + "e-table");
            var flag = false;
            var len = table[0].rows.length;
            proxy._enbleDisablePredecessorAddButton('disable', dialogType);
            for (var j = 0; j < len; j++) {
                var currentRow = table[0].rows[j];
                if (currentRow.cells.length === 4)
                    if (currentRow.cells[1].innerText === "") {
                        flag = true;
                    }
            }
            if (!flag) {
                proxy._enbleDisablePredecessorAddButton('enable', dialogType);
            }
        },

        //Dynamically update input elements fields in add/edit dialog box according with another fields change.
        _updateEditDialogFields: function (editObj) {
            var proxy = this,
                reuestType = $(editObj.element).attr("dialog");
            if (reuestType == "Add") {
                var effortDrivenObj = $("#" + proxy._id + "effortDrivenAdd").data("ejDropDownList"),
                  typeObj = $("#" + proxy._id + "taskTypeAdd").data("ejDropDownList");
            }
            else {
                var effortDrivenObj = $("#" + proxy._id + "effortDrivenEdit").data("ejDropDownList"),
                typeObj = $("#" + proxy._id + "taskTypeEdit").data("ejDropDownList");
            }
            if (!ej.isNullOrUndefined(effortDrivenObj) && editObj._name == "taskType") {
                if (editObj.model.value == "fixedWork") {
                    effortDrivenObj.selectItemByValue("true");
                    effortDrivenObj.disable();
                }
                else
                    effortDrivenObj.enable();

                proxy._editedDialogRecord[editObj._name] = editObj.model.value;
            }
            if (editObj._name == "taskMode") {
                if (editObj.model.text == "Auto") {
                    if (!ej.isNullOrUndefined(effortDrivenObj) && !ej.isNullOrUndefined(typeObj) && typeObj.model.value != "fixedWork")
                        effortDrivenObj.enable();
                    if (!ej.isNullOrUndefined(typeObj))
                        typeObj.enable();
                    proxy._editedDialogRecord["isAutoSchedule"] = true;
                }
                if (editObj.model.text == "Manual") {
                    if (!ej.isNullOrUndefined(effortDrivenObj))
                        effortDrivenObj.disable();
                    if (!ej.isNullOrUndefined(typeObj))
                        typeObj.disable();
                    proxy._editedDialogRecord["isAutoSchedule"] = false;
                }
            }

        },

        _customColumnWrite: function (customColumns, gridId, args) {
            var proxy = this,
                value = args.rowdata !== undefined ? args.rowdata["text"] : "",
                gridModel = $(gridId).ejTreeGrid("instance").model,
                column = customColumns[gridModel.selectedRowIndex],
                editParams = {};
            if (column.editParams)
                editParams = $.extend(true, {}, column.editParams);
            editParams.value = value;
            editParams.locale = proxy.model.locale;
            switch (args.rowdata.editType.toLowerCase()) {

                case "numericedit":
                    editParams.height = "25px";
                    args.element.ejNumericTextbox(editParams);
                    break;
                case "stringedit":
                    $(args.element).val(value).css({ "padding": "0px", "border": "0px", "height": "25px" }).addClass("e-ejinputtext");
                    break;
                case "datepicker":
                    editParams.width = "100%";
                    editParams.height = "25px";
                    args.element.ejDatePicker(editParams);
                    break;
                case "datetimepicker":
                    editParams.width = "100%";
                    editParams.height = "25px";
                    args.element.ejDateTimePicker(editParams);
                    break;
                case "maskedit":
                    editParams.width = "100%";
                    editParams.height = "25px";
                    args.element.ejMaskEdit(editParams);
                    break;
                case "dropdownedit":
                    editParams.width = "100%";
                    editParams.height = "25px";
                    editParams.dataSource = column.dropdownData;
                    editParams.value = gridModel.currentViewData[gridModel.selectedRowIndex].value;
                    args.element.ejDropDownList(editParams);
                    break;
                case "booleanedit":
                    editParams.cssClass = model.cssClass;
                    editParams.size = "small";
                    editParams.checked = value;
                    args.element.ejCheckBox(editParams);
                    var parentElement = args.element.parent(".e-chkbox-wrap"),
                                formElement = parentElement.parent("form");

                    if (formElement.length > 0)
                        formElement.css("margin-left", "45%");
                    else
                        parentElement.css("margin-left", "45%");
                    break;
            }
        },

        _customColumnRead: function (gridId, args) {
            var value, text,
                treeGrid = $(gridId).ejTreeGrid("instance"),
                selectedRowIndex = treeGrid.model.selectedRowIndex,
                updatedRecords = treeGrid.model.updatedRecords;
            $(args).blur();
            $(args).focusout();
            if ($(args[0]).hasClass("e-numerictextbox"))
                value = text = $(args).ejNumericTextbox("getValue");
            else if ($(args[0]).hasClass("e-datepicker"))
                value = text = $(args).ejDatePicker("getValue");
            else if ($(args[0]).hasClass("e-datepicker"))
                value = text = $(args).ejDatePicker("getValue");
            else if ($(args[0]).hasClass("e-dattimeepicker"))
                value = text = $(args).ejDateTimePicker("getValue");
            else if ($(args[0]).hasClass("e-maskedit"))
                value = text = $(args[0]).ejMaskEdit("model.value");
            else if ($(args[0]).hasClass("e-dropdownlist")) {
                text = $(args[0]).ejDropDownList("model.text");
                value = $(args[0]).ejDropDownList("getSelectedValue");
            }
            else if ($(args[0]).hasClass("e-checkbox")) {
                value = text = $(args[0]).ejCheckBox('isChecked');
            }
            else
                value = text = $(args).val();
            updatedRecords[selectedRowIndex].value = value;
            updatedRecords[selectedRowIndex].text = text;
            treeGrid.refreshRow(selectedRowIndex);
            return text;
        },

        //updated the status of predecessor button in dialog box
        _enableDisableResourceAddButton: function (args,enableResourceAdd,dialogType) {
            var proxy = this,
                dataSource = args.model.dataSource,
                flag = false;
            proxy.enbleDisableAddResourceButton('disable', dialogType);
            if (enableResourceAdd) {
                var index = $.map(dataSource, function (data, index) {
                    if (data.name == "" || data.name == null) {
                        return index;
                    }
                });
                if (index.length > 0 && dataSource.length > 0)
                    flag = true;
                if (!flag) {
                    proxy.enbleDisableAddResourceButton('enable', dialogType);
                }
            }
        },
        //add empty row in predecessor grid in dialog box
        _addpredecessor: function (e) {
            var proxy = this,
                args = {}, treeGridId, grid,
                item = { id: "", name: "", type: "Finish-Start", offset: "0" }, dialogType;
            
            if ($(e.target).hasClass("e-edit-dialog")) {
                treeGridId = "#treegrid" + proxy._id + "predecessorEdit";
                dialogType = "edit";
            }
            else {
                treeGridId = "#treegrid" + proxy._id + "predecessorAdd";
                dialogType = "add";
            }
            proxy._enbleDisablePredecessorAddButton('disable', dialogType);
            grid = $(treeGridId).ejTreeGrid("instance");
            grid.addRow(item);
            grid.clearSelection(grid.model.selectedRowIndex);
            proxy._enbleDisablePredecessorDeleteButton('disable', dialogType);
        },
        //delete predecessor in dialog box 
        _deletepredecessor:function(e)
        {
            var proxy = this, treeGridId, dialogType;

            if ($(e.target).hasClass("e-edit-dialog")) {
                treeGridId = "#treegrid" + proxy._id + "predecessorEdit";
                dialogType = "edit";
            }
            else {
                treeGridId = "#treegrid" + proxy._id + "predecessorAdd";
                dialogType = "add";
            }

            var selectedItem = $(treeGridId).ejTreeGrid("option", "selectedRowIndex");
            var args = {};
            args["requestType"] = ej.TreeGrid.Actions.Delete;
            if (selectedItem !== -1) {
                $(treeGridId).ejTreeGrid("deleteRow");
                proxy._enbleDisablePredecessorDeleteButton('disable',dialogType);
            }
            proxy._disablePredecessorAddButton(treeGridId, dialogType);
        },

         //updated the status of Resource button in dialog box
        enbleDisableDeleteResourceButton:function(args,dialogType)
        {
            var proxy = this, predecessorDelete;
            if (dialogType == "add")
                predecessorDelete = $("#" + proxy._id + "AddDialog_ResourceDelete");
            else
                predecessorDelete = $("#" + proxy._id + "EditDialog_ResourceDelete");
            if(args==="enable")
            {
                $(predecessorDelete).unbind("click", $.proxy(proxy._deleteResource, proxy)).bind("click", $.proxy(proxy._deleteResource, proxy));
                $(predecessorDelete).addClass('e-enable').removeClass('e-disable');
            }
            else {
                $(predecessorDelete).unbind("click", $.proxy(proxy._deleteResource, proxy));
                $(predecessorDelete).addClass('e-disable').removeClass('e-enable');
            }
        },
        //updated the status of Resource button in dialog box
        enbleDisableAddResourceButton: function (args,dialogType)
        {
            var proxy = this, resourceAdd;
            if (dialogType == "add")
                resourceAdd = $("#" + proxy._id + "AddDialog_ResourceAdd");
            else
                resourceAdd = $("#" + proxy._id + "EditDialog_ResourceAdd");
            if (args === "enable") {
                $(resourceAdd).unbind("click", $.proxy(proxy._addResource, proxy)).bind("click", $.proxy(proxy._addResource, proxy));
                $(resourceAdd).addClass('e-enable').removeClass('e-disable');
            }
            else {
                $(resourceAdd).unbind("click", $.proxy(proxy._addResource, proxy));
                $(resourceAdd).addClass('e-disable').removeClass('e-enable');
            }
        },

        //add empty row in predecessor grid in dialog box
        _addResource: function (e) {
            var proxy = this,
                args = {}, treeGridId, grid,
                item = { name: "", unit: "100" }, dialogType;
            if ($(e.target).hasClass("e-edit-dialog")) {
                dialogType = "edit";
                treeGridId = "#treegrid" + proxy._id + "resourceEdit";
            }
            else {
                dialogType = "add";
                treeGridId = "#treegrid" + proxy._id + "resourceAdd";
            }
            proxy.enbleDisableAddResourceButton('disable', dialogType);
            grid = $(treeGridId).ejTreeGrid("instance");
            grid.clearSelection(grid.model.selectedRowIndex);
            grid.addRow(item, "bottom");                       
            proxy.enbleDisableDeleteResourceButton('disable', dialogType);
        },
        //delete predecessor in dialog box 
        _deleteResource: function (e) {
            var proxy = this, treeGridId;

            if ($(e.target).hasClass("e-edit-dialog"))
                treeGridId = "#treegrid" + proxy._id + "resourceEdit";
            else
                treeGridId = "#treegrid" + proxy._id + "resourceAdd";

            var selectedItem = $(treeGridId).ejTreeGrid("option", "selectedRowIndex");
            var args = {};
            args["requestType"] = ej.TreeGrid.Actions.Delete;
            if (selectedItem !== -1) {
                $(treeGridId).ejTreeGrid("deleteRow");
            }
        },
            
        _resourceEndEdit:function(gridId,dialogType, args)
        {
            var proxy = this,
                columns = args.model.columns;
            columns[0].dropdownData = $.extend(true, [], proxy.model.resources),
            enableResourceAdd = args.model.dataSource.length < proxy.model.resources.length;
            proxy._enableDisableResourceAddButton(args, enableResourceAdd, dialogType);
        },
        _resourceBeginEdit: function (gridId, args) {
            var proxy = this,
                idMapping = proxy.model.resourceIdMapping,
                gridModel = args.model,
                 columns = gridModel.columns,
                 dropDownData = columns[0].dropdownData,
                 dataSource = gridModel.dataSource,
                 length = dataSource.length,
                 value = args.data.item.name;
            for (var i = 0; i < length; i++) {
                if (dataSource[i].name != "" && dataSource[i].name != null && value != dataSource[i].name) {
                    var index = $.map(dropDownData, function (data, index) {
                        if (data[idMapping].toString() == dataSource[i].name) {
                            return index;
                        }
                    });
                    dropDownData.splice(index[0], 1);
                }
            }
        },
        //returns column value by field name
        getColumnIndexByField: function (field) {

            var proxy = this,
                columns = proxy.model.columns,
                length = columns.length,
                column = 0;

            for (column; column < length; column++) {

                if (columns[column]["field"] == field) break;

            }

            return column;
        },

        //returns selected resource index from rource value
        getIndexofresourceInfo: function (dataSource,data) {
            var resourceInfo = data.resourceInfo,
                count = 0, length = resourceInfo ? resourceInfo.length : 0, resourceIndex = [];
            
            for (count; count < length; count++) {
                if (dataSource.indexOf(resourceInfo[count]) != -1)
                    resourceIndex.push(dataSource.indexOf(resourceInfo[count]));
            }

            return resourceIndex;

        },
        //focus elements on editing
        _focusElements: function ($currentCell) {
            if ($currentCell.length) {
                $currentCell.focus();
                var $childElem = $currentCell.children();
                if ($childElem[0].tagName.toLowerCase() == "select" || $childElem[0].tagName.toLowerCase() == "input") {
                    $childElem.focus().select();
                    $childElem[0].focus();
                }
                else if ($childElem.find(".e-field.e-dropdownlist").length)
                    $childElem.find(".e-ddl").focus();
                else
                    $childElem.find('input,select').select().focus();
            }
        },
        //add button templates for add and edit dialog
        renderDiaglogButton: function (type, tbody) {

            var btnId,
                proxy = this,
                model = proxy.model;
            if (type == "edit")
                btnId = "EditDialog_";
            else
                btnId = "AddDialog_";

            var savebtn = ej.buildTag('input', "",
                 {
                     'border-radius':'3px'
                 },
                 { type: "button", id: btnId + proxy._id + "_Save" }),
             saveText = proxy._editDialogTexts["saveButton"];
            
            savebtn.ejButton(
                {
                    cssClass: model.cssClass,
                    text: saveText,
                    width: "70"
                });

            var cancelText = proxy._editDialogTexts["cancelButton"],
             cancelbtn = ej.buildTag('input', "",
                 {
                     'margin-left': '18px',
                     'border-radius': '3px'
                 },
                 {
                     type: "button",
                     id: btnId + proxy._id + "_Cancel"
                 });
            
            cancelbtn.ejButton(
                {
                    cssClass: model.cssClass,
                    text: cancelText,
                    width: "70"
                });

            //Sample delete button
            var deleteText = proxy._editDialogTexts["deleteButton"],
                delbtn = ej.buildTag('input', "",
                {
                    'border-radius': '3px'
                },
                {
                    type: "button",
                    id: "EditDialog_" + proxy._id + "_Delete"
                });

            delbtn.ejButton(
                {
                    cssClass: model.cssClass,
                    text: deleteText,
                    width: "90"
                });



            var btnDiv = ej.buildTag('div', "", { 'margin-top': '10px', 'float': 'right', 'margin-bottom': '3px', 'margin-right': '0px',"z-index":"10" }, { 'class': "e-editform-btn" });
            var deleteBtnDiv = ej.buildTag('div', "", { 'margin-top': '10px', 'float': 'left', 'margin-bottom': '3px', 'margin-right': '0px', "z-index": "10" }, { 'class': "e-editform-btn" });

            btnDiv.append(savebtn);
            if (type == "edit" && model.editSettings.allowDeleting)
                deleteBtnDiv.append(delbtn);
            btnDiv.append(cancelbtn);
            btnDiv.appendTo(tbody);
            deleteBtnDiv.appendTo(tbody);
            return tbody;
        },
        //Tool bar rendering initiated
        _renderToolBar: function() {
            var proxy = this,
                model = proxy.model,
                $div = ej.buildTag("div.e-gantttoolbar#e-gantttoolbar" + proxy._id, "", { 'height': '50px'}, { id: proxy._id + "_toolbarItems"}),
                $ul = ej.buildTag("ul", "", { 'width': proxy._ganttWidth }, {});
            (!ej.isNullOrUndefined(model.toolbarSettings.toolbarItems) && model.toolbarSettings.toolbarItems.length) && proxy._renderLi($ul);
            $div.append($ul);
            var $customUl = ej.buildTag("ul");
            $div.append($customUl);
            var helper = {};
            helper.click = proxy._toolBarClick;
            helper.cssClass = "";
            helper.rtl = false;
            helper.itemSeparator = false;
            helper.width = proxy._ganttWidth;
            helper.fields = {
                id: "",
                tooltipText: "",
                imageUrl: "",
                text: "",
                imageAttributes: "",
                spriteCSS: "",
                htmlAttributes: "",
            };
            $div.ejToolbar(helper);
            $div.ejToolbar("disableItem", proxy._disabledToolItems);
            proxy._disabledToolItems = $();
            return $div;
        },
        //craete LI elements for tool bar
        _renderLi: function ($ul) {
            var proxy = this,
                toolBarItems = proxy.model.toolbarSettings.toolbarItems,
                length = toolBarItems.length,
                i = 0,
                $li;
            for (i; i < length; i++) {

                $li = ej.buildTag("li", "", {}, {
                    id: proxy._id + "_" + toolBarItems[i],                    
                    "tabindex": "0"
                });

                if (toolBarItems[i] !== "search")
                    $li.css({ 'width': '30px', 'height': '24px' });

                proxy._renderLiContent($li, toolBarItems[i]);
                $ul.append($li);
            }
        },

        //add attributes for tool bar li elements
        _renderLiContent: function ($li, item) {
            var $a, $input;
            var selectedRowIndex = this.selectedRowIndex();
            var editSetting = this.model.editSettings;
            switch (item) {

                case "add":
                    $a = ej.buildTag("span.e-addnewitem e-toolbaricons e-icon e-gantt-add", "", {});
                    //title: toolBarItems[i],
                    var addTitle = this._toolboxTooltipTexts["addTool"];
                    $li.attr("title", addTitle);
                        if (this.model.readOnly==true||!this.model.editSettings.allowAdding)
                        this._disabledToolItems.push($li.get(0));
                    break;

                case "edit":
                    $a = ej.buildTag("span.e-edititem e-toolbaricons e-icon e-gantt-edit", "", {});
                    var editTitle = this._toolboxTooltipTexts["editTool"];
                    $li.attr("title", editTitle);
                        if (this.model.readOnly==true||(!this.model.editSettings.allowEditing || selectedRowIndex == -1)) {
                        this._disabledToolItems.push($li.get(0));
                    }
                    
                    break;

                case "delete":
                    var deleteTitle = this._toolboxTooltipTexts["deleteTool"];
                    $li.attr("title", deleteTitle);
                    $a = ej.buildTag("span.e-deleteitem e-toolbaricons e-icon e-gantt-delete", "", {});
                    
                    if (this.model.readOnly==true||(!this.model.editSettings.allowDeleting || selectedRowIndex == -1)) {
                        this._disabledToolItems.push($li.get(0));
                    }
                    
                    break;

                case "update":
                    var saveTitle = this._toolboxTooltipTexts["saveTool"];
                    $li.attr("title", saveTitle);
                    $a = ej.buildTag("span.e-saveitem e-toolbaricons e-icon e-gantt-save e-disabletool", "", {});
                    this._disabledToolItems.push($li.get(0));
                    break;

                case "cancel":
                    var cancelTitle = this._toolboxTooltipTexts["cancelTool"];
                    $li.attr("title", cancelTitle);
                    $a = ej.buildTag("span.e-cancel e-toolbaricons e-icon e-gantt-cancel e-disabletool", "", {});
                    this._disabledToolItems.push($li.get(0));
                    break;

                case "indent":
                    var indentTitle = this._toolboxTooltipTexts["indentTool"];
                    $li.attr("title", indentTitle);
                    $input = ej.buildTag("span.e-indent e-toolbaricons e-icon e-disabletool e-gantt-indent", "", {}, {});
                    $li.append($input);
                    if (this.model.readOnly==true ||(!this.model.editSettings.allowIndent || selectedRowIndex == -1)) {
                        this._disabledToolItems.push($li.get(0));
                    }

                    break;

                case "outdent":
                    var outdentTitle = this._toolboxTooltipTexts["outdentTool"];
                    $li.attr("title", outdentTitle);
                    $input = ej.buildTag("span.e-outdent e-toolbaricons e-icon e-disabletool e-gantt-outdent", "", {}, {});
                    $li.append($input);
                    if (this.model.readOnly==true ||(!this.model.editSettings.allowIndent || selectedRowIndex == -1)) {
                        this._disabledToolItems.push($li.get(0));
                    }
                    break;

                case "expandAll":
                    var expandTitle = this._toolboxTooltipTexts["expandAllTool"];
                    $li.attr("title", expandTitle);
                    $input = ej.buildTag("span.e-expandall e-toolbaricons e-icon e-gantt-expandall", "", {}, {});
                    $li.append($input);
                    break;

                case "collapseAll":
                    var collapseTitle = this._toolboxTooltipTexts["collapseAllTool"];
                    $li.attr("title", collapseTitle);
                    $input = ej.buildTag("span.e-collapseall e-toolbaricons e-icon e-gantt-collapseall", "", {}, {});
                    $li.append($input); 
                    break;
                case "prevTimeSpan":
                    var prevTitle = this._toolboxTooltipTexts["prevTimeSpanTool"];
                    $li.attr("title", prevTitle);
                    $input = ej.buildTag("span.e-prevtimespan e-toolbaricons e-icon e-gantt-prevtimespan", "", {}, {});
                    $li.append($input);
                    break;
                case "nextTimeSpan":
                    var nextTitle = this._toolboxTooltipTexts["nextTimeSpanTool"];
                    $li.attr("title", nextTitle);
                    $input = ej.buildTag("span.e-nexttimespan e-toolbaricons e-icon e-gantt-nexttimespan", "", {}, {});
                    $li.append($input);
                    break;
                case "criticalPath":
                    var criticalTitle = this._toolboxTooltipTexts["criticalPathTool"];
                    $li.attr("title", criticalTitle);
                    $input = ej.buildTag("span.e-criticaltask e-toolbaricons e-icon e-gantt-criticaltask", "", {}, {});
                    $li.append($input);
                    break;
                case "search":
                    var searchTitle = this._toolboxTooltipTexts["searchTool"];
                    $input = ej.buildTag("input.e-ejinputtext", "", { 'margin': '4px', 'text-indent': '4px' }, { type: "text", placeholder: searchTitle }, { 'color': "#E8E9E9" });
                    $li.css({ 'float': 'right', 'padding': '2px' });
                    $li.attr("title", searchTitle);
                    $li.addClass('e-search');
                    $li.append($input);
                    this.model.allowSearching = true;

                    $input.keydown($.proxy(this._keyDown, this));

                    break;
                case "excelExport":
                    var excelExportTitle = this._toolboxTooltipTexts["excelExportTool"];
                    $li.attr("title", excelExportTitle);
                    $input = ej.buildTag("span.e-excelIcon e-toolbaricons e-icon e-gantt-excelexport", "", {}, {});
                    $li.append($input);
                    break;
            }
            $li.append($a);
        },

        //handle key down for searching in gantt
        _keyDown: function (e) {

            if (e.which ===13) { //13 is key code for Enter Key 
                this._toolbarOperation(this._id + "_search", e.currentTarget.value);
				e.preventDefault();
				return false;//prevent post back
            }          
        },

        //update the status of tool bar elements 
        _updateToolbarOptions:function(){

            var proxy = this,
                model = proxy.model,
                editSettings = model.editSettings,
                toolbar = $("#" + proxy._id + "_toolbarItems"),
                $addElement = $(toolbar).find(".e-addnewitem").parent()[0],
                $editElement = $(toolbar).find(".e-edititem").parent()[0],
                $deleteElement = $(toolbar).find(".e-deleteitem").parent()[0],
                $indentElement = $(toolbar).find(".e-indent").parent()[0],
                $outdentElement = $(toolbar).find(".e-outdent").parent()[0],                
                disabledItems = [], enabledItems = [];
            if (model.readOnly == true) {
                $addElement && disabledItems.push($($addElement));
                $editElement && disabledItems.push($($editElement));
                $deleteElement && disabledItems.push($($deleteElement));
                $indentElement && disabledItems.push($($indentElement));
                $outdentElement && disabledItems.push($($outdentElement));
                $(toolbar).ejToolbar('disableItem', disabledItems);
            }
            else {
                if (editSettings.allowAdding)
                    $addElement && enabledItems.push($addElement);
                else
                    $addElement && disabledItems.push($($addElement));

            if (!model.selectedItem) {

                if (editSettings.allowEditing) {
                    $editElement && disabledItems.push($($editElement));
                }

                if (editSettings.allowDeleting) {
                    $deleteElement && disabledItems.push($($deleteElement));
                    }

                    if ($indentElement)
                        $indentElement && disabledItems.push($($indentElement));

                    if ($outdentElement)
                        $outdentElement && disabledItems.push($($outdentElement));
                }
                else {

                    if (editSettings.allowEditing)
                        $editElement && enabledItems.push($editElement);
                    else
                        $editElement && disabledItems.push($($editElement));

                    if (editSettings.allowDeleting)
                        $deleteElement && enabledItems.push($deleteElement);
                    else
                        $deleteElement && disabledItems.push($($deleteElement));

                    proxy.updateIndentOutdentOption(model.selectedItem);
                }

                $(toolbar).ejToolbar('disableItem', disabledItems);
                $(toolbar).ejToolbar('enableItem', enabledItems);
            }
        },

        //Splitter control is initiated
        _renderGantt: function () {

            var proxy = this,
                model = proxy.model,
                leftPaneSize,
                rightPaneSize,
                ganttWidth = parseInt(proxy._ganttWidth),
                splitterPosition = proxy.splitterPosition(),
                isPercentage = false, columnWidth,
                splitterColumnIndex = model.splitterSettings.index;
            if (!splitterPosition)
            {
                splitterPosition = proxy._splitterPosition();
                proxy.splitterPosition(splitterPosition);
            }
            //calculate treegrid pane size
            if (splitterPosition || splitterColumnIndex > -1) {
                if (splitterPosition) {
                    if (splitterPosition.indexOf("%") != -1) {
                        leftPaneSize = parseInt(splitterPosition);
                        isPercentage = true;
                    }
                    else {
                        leftPaneSize = parseInt(splitterPosition) / ganttWidth * 100;
                        isPercentage = false;
                    }
                }
                else {
                    var columns = proxy.getColumns(),
                        columnWidth = 0;
                    columnIndex = splitterColumnIndex;
                    if (columnIndex >= columns.length)
                        columnIndex = columns.length - 1;
                    for (var index = 0; index <= columnIndex; index++)
                        columnWidth += columns[index].width;
                    if (columnWidth <= ganttWidth) {
                        leftPaneSize = parseInt(columnWidth) / ganttWidth * 100;
                        splitterColumnIndex = index - 1;
                    }
                    else {
                        columnWidth = 0;
                        for (var index = 0; index <= columnIndex; index++) {
                            if ((columnWidth + columns[index].width) <= ganttWidth) {
                                columnWidth += columns[index].width;
                                splitterColumnIndex = index;
                            }
                            else {
                                leftPaneSize = parseInt(columnWidth) / ganttWidth * 100;
                                break;
                            }
                        }
                    }
                    model.splitterSettings.index = splitterColumnIndex;
                }
                // set grid width value is zero when grid width is less than zero or NAN.
                if (isNaN(leftPaneSize) || leftPaneSize < 0)
                    leftPaneSize = 0;
                // check the left pane size is greather than 100% of gantt width
                if (leftPaneSize > 100) {
                    leftPaneSize = (2 * proxy._commonColumnWidth + 3) / ganttWidth * 100;
                    leftPaneSize = leftPaneSize < 30 ? leftPaneSize : 30;
                    isPercentage = true;
                }
            }
            else {
                leftPaneSize = (2 * proxy._commonColumnWidth + 3) / ganttWidth * 100;
                leftPaneSize = leftPaneSize < 30 ? leftPaneSize : 30;
                isPercentage = true;
            }
            //Here 9 is the splitter span width
            rightPaneSize = 100 - leftPaneSize - (9 / ganttWidth * 100);
            // Check the right pane size is less than or euqal to 0.
            if (rightPaneSize <= 0) {
                if (isPercentage)
                    proxy.splitterPosition("100%");
                else
                    proxy.splitterPosition(ganttWidth.toString());
                leftPaneSize = 100 - (9 / ganttWidth * 100);
                rightPaneSize = 0;
            }
            else if (rightPaneSize > 0) {
                if (isPercentage)
                    proxy.splitterPosition(Math.round(leftPaneSize) + "%");
                else
                    proxy.splitterPosition(Math.round((leftPaneSize * ganttWidth / 100)).toString());
            }
            // assign the splitter position value to deprecated splitterPosition property
            proxy._splitterPosition(proxy.splitterPosition());
            $("#e-ejSpliter" + proxy._id).ejSplitter({
                //border width and height excluded
                height: proxy._ganttHeight,
                width: ganttWidth,
                orientation: ej.Orientation.Horizontal,
                properties: [{ paneSize: leftPaneSize + "%", collapsible: false }, { paneSize: rightPaneSize + "%", collapsible: false }],
                enableAutoResize: false,
                resize: $.proxy(proxy._onResize, proxy)
            });
        },

        //Tree Grid part is initiated
        _renderTreeGrid: function() {
            var proxy = this, model = proxy.model;
            proxy._$treegridHelper = $("#ejTreeGrid" + proxy._id).ejTreeGrid({
                enableAltRow: model.enableAltRow,
                allowColumnResize: model.allowColumnResize,
                enableVirtualization: model.enableVirtualization,
                allowSorting: model.allowSorting,
                showColumnChooser: model.showColumnChooser,
                showColumnOptions: model.showColumnOptions,
                allowMultiSorting: model.allowMultiSorting,
                sortSettings: model.sortSettings,
                allowSelection: model.allowSelection,
                selectionType: model.selectionMode == "cell" ? model.selectionType : "single",
                selectionMode: model.selectionMode,
                selectedRowIndex: this.selectedRowIndex(),
                allowDragAndDrop: model.allowDragAndDrop,
                dragTooltip: model.dragTooltip,
                allowSearching: model.allowSearching,
                parentIdMapping:model.parentTaskIdMapping,
                allowKeyboardNavigation: model.allowKeyboardNavigation,
                cssClass: model.cssClass,
                locale: model.locale,
                columns: proxy.getColumns(),
                editSettings: model.editSettings,
                toolbarSettings:model.toolbarSettings,
                rowTemplate: model.rowTemplate,
                rowDataBound: model.rowDataBound,
                queryCellInfo: model.queryCellInfo,
                cellSelecting: model.cellSelecting,
                cellSelected: model.cellSelected,
                selectedCellIndexes: this.selectedCellIndexes(),
                dataSource:this.dataSource(),
                flatRecords: model.flatRecords,
                parentRecords: model.parentRecords,
                ids: proxy.model.ids,
                columns: proxy._columns,
                dateFormat: model.dateFormat,
                resourceInfoMapping: model.resourceInfoMapping,
                resourceNameMapping: model.resourceNameMapping,
                resourceIdMapping:model.resourceIdMapping,
                resourceUnitMapping: model.resourceUnitMapping,
                taskIdMapping: model.taskIdMapping,
                readOnly:model.readOnly,
                notesMapping: model.notesMapping,
                showGridCellTooltip: model.showGridCellTooltip,
                cellTooltipTemplate:model.cellTooltipTemplate,
                showGridExpandCellTooltip: model.showGridExpandCellTooltip,
                taskNameMapping: model.taskNameMapping,
                taskSchedulingModeMapping: model.taskSchedulingModeMapping,
                startDateMapping: model.startDateMapping,
                endDateMapping: model.endDateMapping,
                childMapping: model.childMapping,
                durationMapping: model.durationMapping,
                durationUnitMapping: model.durationUnitMapping,
                durationUnit: model.durationUnit,
                progressMapping: model.progressMapping,
                predecessorMapping: model.predecessorMapping,
                rowHeight: model.rowHeight,
                emptyRecordText: proxy._emptyRecordText,
                isFromGantt: proxy._isFromGantt,
                treeColumnIndex: model.treeColumnIndex,
                workingTimeScale:model.workingTimeScale,
                enableWBS: model.enableWBS,
                enableWBSPredecessor: model.enableWBSPredecessor,
                columnMenuTexts: proxy._columnMenuTexts,
                columnDialogTitle: proxy._columnDialogTitle,
                deleteColumnText: proxy._deleteColumnText,
                okButtonText: proxy._okButtonText,
                cancelButtonText: proxy._cancelButtonText,
                confirmDeleteText: proxy._confirmDeleteText,
                columnDialogFields: model.columnDialogFields,
                columnDialogTexts: proxy._columnDialogTexts,
                workUnit: proxy._workUnitTexts[model.workUnit],
                taskTypeTexts: proxy._taskTypeTexts,
                effortDrivenTexts: proxy._effortDrivenTexts,
                dataManagerUpdate: { isDataManagerUpdate: proxy._isDataManagerUpdate, jsonData: proxy._jsonData },
                durationUnitEditText: this._durationUnitEditText,
                durationUnitTexts: proxy._durationUnitTexts,
                enableCollapseAll: model.enableCollapseAll
            });
        },
        //Chart part is initiated
        _renderGanttChart: function() {
            var proxy = this,
                model = this.model;
            proxy._$ganttchartHelper = $("#ejGanttChart" + proxy._id).ejGanttChart(
                {
                    dataSource: this.dataSource(),
                    scheduleStartDate: model.scheduleStartDate,
                    scheduleEndDate: model.scheduleEndDate,
                    startDateMapping: model.startDateMapping,
                    endDateMapping: model.endDateMapping,
                    taskNameMapping: model.taskNameMapping,
                    taskIdMapping: model.taskIdMapping,
                    progressMapping: model.progressMapping,
                    durationMapping: model.durationMapping,
                    childPropertyName: model.childMapping,
                    predecessorMapping: model.predecessorMapping,
                    enableVirtualization: model.enableVirtualization,
                    highlightWeekends: model.highlightWeekends,
                    milestoneMapping: model.milestoneMapping,
                    enableRowHover: model.enableRowHover,
                    perDayWidth: proxy._perDayWidth,
                    workingTimeScale: model.workingTimeScale,
                    roundOffDayworkingTime: model.roundOffDayworkingTime,
                    durationUnit: model.durationUnit,
                    isCriticalPathEnable: this.isCriticalPathEnable,
                    criticalPathCollection: this.criticalPathCollection,
                    perMonthWidth: proxy._perMonthWidth,//new property for year - month schedule
                    perWeekWidth: proxy._perWeekWidth,//new property for week - month schedule
                    perHourWidth: proxy._perHourWidth,
                    perMinuteWidth: proxy._perMinuteWidth,
                    perTopHourWidth: proxy._perTopHourWidth,
                    minuteInterval:proxy._minuteInterval,
                    includeWeekend: model.includeWeekend,
                    connectorlineWidth: model.connectorlineWidth,
                    workingTimeRanges: proxy._workingTimeRanges,
                    secondsPerDay: proxy._secondsPerDay,
                    scheduleHeaderSettings: model.scheduleHeaderSettings,
                    taskbarBackground: model.taskbarBackground,
                    progressbarBackground: model.progressbarBackground,
                    connectorLineBackground: model.connectorLineBackground,
                    parentTaskbarBackground: model.parentTaskbarBackground,
                    parentProgressbarBackground: model.parentProgressbarBackground,
                    holidays: model.holidays,
                    dateFormat: model.dateFormat,
                    locale: model.locale,
                    enableTaskbarTooltip: model.enableTaskbarTooltip,
                    enableTaskbarDragTooltip:model.enableTaskbarDragTooltip,
                    flatRecords: model.flatRecords,
                    parentRecords: model.parentRecords,
                    scheduleWeeks: proxy._scheduleWeeks,

                    projectStartDate: proxy._projectStartDate, //new property instead of scheduleWeeks[0] and scheduleYears[0]
                    projectEndDate: proxy._projectEndDate,

                    scheduleYears: proxy._scheduleYears, //new property for year
                    scheduleMonths: proxy._scheduleMonths, //new property for month
                    scheduleDays:proxy._scheduleDays,
                    scheduleHours:proxy._scheduleHours,
                    progressbarHeight: model.progressbarHeight,
                    tooltipTemplate: model.taskbarTooltipTemplate,
                    tooltipTemplateId: model.taskbarTooltipTemplateId,
                    progressbarTooltipTemplate: model.progressbarTooltipTemplate,
                    progressbarTooltipTemplateId: model.progressbarTooltipTemplateId,
                    queryTaskbarInfo: model.queryTaskbarInfo,
                    readOnly:model.readOnly,
                    showTaskNames: model.showTaskNames,
                    leftTaskLabelMapping: model.leftTaskLabelMapping,
                    rightTaskLabelMapping: model.rightTaskLabelMapping,
                    leftTaskLabelTemplate: model.leftTaskLabelTemplate,
                    rightTaskLabelTemplate: model.rightTaskLabelTemplate,
                    showProgressStatus: model.showProgressStatus,
                    showResourceNames: model.showResourceNames,
                    resourceInfoMapping: model.resourceInfoMapping,
                    resourceNameMapping: model.resourceNameMapping,
                    resourceUnitMapping: model.resourceUnitMapping,
                    enableProgressBarResizing: model.enableProgressBarResizing,
                    allowGanttChartEditing: model.allowGanttChartEditing,
                    taskbarEditingTooltipTemplateId: model.taskbarEditingTooltipTemplateId,
                    taskbarEditingTooltipTemplate:model.taskbarEditingTooltipTemplate,
                    ids: proxy.model.ids,
                    stripLines: model.stripLines,
                    _predecessorCollection: proxy._predecessorsCollection,
                    _columns:proxy._columns,
                    weekendBackground: model.weekendBackground,
                    allowKeyboardNavigation: model.allowKeyboardNavigation,
                    updatedRecords: proxy.model.updatedRecords,
                    renderBaseline: model.renderBaseline,
                    baselineColor:model.baselineColor,
                    editSettings: model.editSettings,
                    columnHeaderTexts: proxy._columnHeaderTexts,
                    durationUnitTexts:proxy._durationUnitTexts,
                    predecessorEditingTexts: proxy._predecessorEditingTexts,
                    localizedDays: proxy._days,
                    localizedMonths:proxy._months,
                    rowHeight: model.rowHeight,
                    allowSelection: model.allowSelection,
                    selectionMode: model.selectionMode,
                    taskbarTemplate: model.taskbarTemplate,
                    parentTaskbarTemplate: model.parentTaskbarTemplate,
                    milestoneTemplate: model.milestoneTemplate,
                    durationUnitEditText: this._durationUnitEditText,
                    taskbarClick : model.taskbarClick
                });
        },
        //Dynamically update dropDown datasources while changing localization of a project.
        _updateColumnDropDownData:function(){
            var proxy = this, model = proxy.model, columns = model.columns,
                length = columns.length;
            for (var i = 0; i < length; i++) {
                if (columns[i].field == "taskMode") {
                    columns[i].dropdownData = [{ id: 1, "text": proxy._taskModeTexts["manual"], "value": true },
                                   { id: 2, "text": proxy._taskModeTexts["auto"], "value": false }];
                }
                if (columns[i].field == "taskType") {
                    columns[i].dropdownData = [{ id: 1, "text": proxy._taskTypeTexts["fixedWork"], "value": "fixedWork" },
                              { id: 2, "text": proxy._taskTypeTexts["fixedUnit"], "value": "fixedUnit" },
                              { id: 3, "text": proxy._taskTypeTexts["fixedDuration"], "value": "fixedDuration" }];
                }
                if (columns[i].field == "effortDriven") {
                    columns[i].dropdownData = [{ id: 1, "text": proxy._effortDrivenTexts["yes"], "value": "true" },
                              { id: 2, "text": proxy._effortDrivenTexts["no"], "value": "false" }];
                }
            }
        },

        //Populate columns for treegrid from mapping names
        createTreeGridColumns: function () {

            var proxy = this, model = proxy.model, column, columns = [];

            var mapping = (model.taskIdMapping)//?model.taskIdMapping:"Task Id";

            if (mapping.length) {
                if(model.showColumnChooser){
                    column = {
                        field: "taskId",
                        headerText: proxy._columnHeaderTexts["taskId"],
                        width: 40,
                        editType: ej.Gantt.EditingType.String,
                        mappingName: mapping,
                        allowEditing: false,
                        allowCellSelection: true 
                    };
                }
                else
                {
                    column = {
                        field: "taskId",
                        headerText: proxy._columnHeaderTexts["taskId"],
                        width: 30,
                        editType: ej.Gantt.EditingType.String,
                        mappingName: mapping,
                        allowEditing: false,
                        allowCellSelection: true
                    };
                }

                columns.push(column);
                //proxy._emptyDataColumns.push(column.field);
            }

            mapping = model.taskNameMapping;// "Task Name";

            if (mapping.length) {
                column = {
                    field: "taskName",
                    headerText: proxy._columnHeaderTexts["taskName"],
                    width: 150,
                    editType: ej.Gantt.EditingType.String,
                    mappingName: mapping,
                    allowCellSelection: true
                };

                columns.push(column);
                //proxy._emptyDataColumns.push(column.field);
            }

            mapping = model.startDateMapping;// "Start Date";

            if (mapping.length) {
                column = {
                    field: "startDate",
                    headerText:proxy._columnHeaderTexts["startDate"],
                    width: 150,
                    editType: (model.dateFormat.toLowerCase().indexOf("hh") == -1) ?
                              ej.Gantt.EditingType.DatePicker : ej.Gantt.EditingType.DateTimePicker,
                    mappingName: mapping,
                    allowCellSelection: true,
                    format: "{0:" + model.dateFormat + "}"
                };

                columns.push(column);
                //proxy._emptyDataColumns.push(column.field);
            }


            mapping = model.endDateMapping;// "End Date";

            if (mapping.length) {
                column = {
                    field: "endDate",
                    headerText: proxy._columnHeaderTexts["endDate"],
                    width: 150,
                    editType: (model.dateFormat.toLowerCase().indexOf("hh") == -1) ?
                             ej.Gantt.EditingType.DatePicker : ej.Gantt.EditingType.DateTimePicker,
                    mappingName: mapping,
                    allowCellSelection: true ,
                    format: "{0:" + model.dateFormat + "}"
                };

                columns.push(column);
                //proxy._emptyDataColumns.push(column.field);
            }

            mapping = model.resourceInfoMapping;//"Resources";

            if (mapping.length) {
                column = {
                    field: "resourceInfo",
                    headerText:proxy._columnHeaderTexts["resourceInfo"],
                    width: 150,
                    editType: ej.Gantt.EditingType.Dropdown,
                    mappingName: mapping,
                    allowCellSelection: true ,
                    dropdownData: model.resources //model.resources is null
                };
                columns.push(column);
                //proxy._emptyDataColumns.push(column.field);
            }

            mapping = model.durationMapping;// "Duration";

            if (mapping.length) {
                column = {
                    field: "duration",
                    headerText: proxy._columnHeaderTexts["duration"],
                    width: 150,
                    editType: ej.Gantt.EditingType.String,
                    allowCellSelection: true ,
                    mappingName:mapping
                };

                columns.push(column);
                //proxy._emptyDataColumns.push(column.field);
            }           

            mapping = model.progressMapping;// "Progress";

            if (mapping.length) {
                column = {
                    field: "status",
                    headerText: proxy._columnHeaderTexts["status"],
                    width: 150,
                    editType: ej.Gantt.EditingType.Numeric,
                    mappingName: mapping,
                    allowCellSelection: true
                };
                columns.push(column);
                //proxy._emptyDataColumns.push(column.field);
            }
            mapping = model.predecessorMapping;//)?model.predecessorMapping: "Predecessor";

            if (mapping.length) {
                column = {
                    field: "predecessor",
                    headerText:proxy._columnHeaderTexts["predecessor"],
                    width: 150,
                    editType: ej.Gantt.EditingType.String,
                    mappingName: mapping,
                    allowCellSelection: true
                };
                columns.push(column);
                //proxy._emptyDataColumns.push(column.field);
            }
            /*If renderBaseline enabled baseline columns  are added*/
            if (model.renderBaseline && model.baselineStartDateMapping && model.baselineEndDateMapping) {

                mapping = model.baselineStartDateMapping;
                if (mapping.length) {
                    column = {
                        field: "baselineStartDate",
                        headerText: proxy._columnHeaderTexts["baselineStartDate"],
                        width: 150,
                        editType: (model.dateFormat.toLowerCase().indexOf("hh") == -1) ?
                             ej.Gantt.EditingType.DatePicker : ej.Gantt.EditingType.DateTimePicker,
                        mappingName: mapping,
                        format: "{0:" + model.dateFormat + "}",
                        allowEditing: false,
                        allowCellSelection: true
                    };
                    columns.push(column);
                }
                mapping = model.baselineEndDateMapping;

                if (mapping.length) {
                    column = {
                        field: "baselineEndDate",
                        headerText: proxy._columnHeaderTexts["baselineEndDate"],
                        width: 150,
                        editType: (model.dateFormat.toLowerCase().indexOf("hh") == -1) ?
                             ej.Gantt.EditingType.DatePicker : ej.Gantt.EditingType.DateTimePicker,
                        mappingName: mapping,
                        format: "{0:" + model.dateFormat + "}",
                        allowEditing: false,
                        allowCellSelection: true
                    };
                    columns.push(column);
                }
            }
            /*To insert WBS column*/
            if (model.enableWBS) {
                mapping = "WBS";

                if (mapping.length) {
                    column = {
                        field: "WBS",
                        headerText: proxy._columnHeaderTexts["WBS"],
                        width: 150,
                        editType: ej.Gantt.EditingType.String,
                        allowEditing: false,
                        mappingName: mapping
                    };
                    columns.push(column);
                }
            }
            /*To insert WBS Predecessor column*/
            if (model.enableWBS && model.enableWBSPredecessor) {
                mapping = "WBSPredecessor";

                if (mapping.length) {
                    column = {
                        field: "WBSPredecessor",
                        headerText: proxy._columnHeaderTexts["WBSPredecessor"],
                        width: 150,
                        editType: ej.Gantt.EditingType.String,
                        allowEditing: false,
                        mappingName: mapping
                    };
                    columns.push(column);
                }
            }
            mapping = model.notesMapping;

            if (mapping.length) {
                column = {
                    field: "notesText",
                    headerText: proxy._columnHeaderTexts["notes"],
                    width: 150,
                    editType: "stringedit",
                    mappingName: mapping+"Text",
                    allowEditing: true,
                    allowCellSelection: true
                };
                columns.push(column);
            }
            mapping = model.taskSchedulingModeMapping;// "Task Mode";
            if (mapping.length) {
                var enableColumn = false;
                if (model.taskSchedulingMode == ej.Gantt.TaskSchedulingMode.Custom)
                    enableColumn = true;
                column = {
                    field: "taskMode",
                    headerText: proxy._columnHeaderTexts["taskMode"],
                    width: 100,
                    editType: ej.Gantt.EditingType.Dropdown,
                    allowCellSelection: enableColumn,
                    allowEditing: enableColumn,
                    mappingName: mapping,
                    dropdownData: [{ id: 1, "text": proxy._taskModeTexts["manual"], "value": true },
                                   { id: 2, "text": proxy._taskModeTexts["auto"], "value": false }],
                    editParams: { field: { text: "text", value: "value" } }
                }               
                columns.push(column);
            }

            column = {
                field: "work",
                headerText: proxy._columnHeaderTexts["work"],
                width: 150,
                editType: ej.Gantt.EditingType.Numeric,
                allowEditing: true,
                allowCellSelection: true,
                visible: false
            };
            columns.push(column);
            column = {
                field: "taskType",
                headerText: proxy._columnHeaderTexts["taskType"],
                width: 150,
                editType: ej.Gantt.EditingType.Dropdown,
                dropdownData: [{ id: 1, "text": proxy._taskTypeTexts["fixedWork"], "value": "fixedWork" },
                               { id: 2, "text": proxy._taskTypeTexts["fixedUnit"], "value": "fixedUnit" },
                               { id: 3, "text": proxy._taskTypeTexts["fixedDuration"], "value": "fixedDuration" }],
                editParams: { field: { text: "text", value: "value" } },
                allowEditing: true,
                allowCellSelection: true,
                visible: false
            };
            columns.push(column);

            column = {
                field: "effortDriven",
                headerText: proxy._columnHeaderTexts["effortDriven"],
                width: 150,
                editType: ej.Gantt.EditingType.Dropdown,
                dropdownData: [{ id: 1, "text": proxy._effortDrivenTexts["yes"], "value": "true" },
                               { id: 2, "text": proxy._effortDrivenTexts["no"], "value": "false" }],
                editParams: { field: { text: "text", value: "value" } },
                allowEditing: true,
                allowCellSelection: true,
                visible: false
            };
            columns.push(column);

            return columns;
        },
        
        //Create gannt record from given data source
        _createGanttRecords: function(data) {
            var proxy = this,
                model = proxy.model,
                ganttRecords = model.flatRecords,
                length = data.length,
                count = 0,
                parentGanttRecord,
                parentRecords = model.parentRecords,
                enableSorting = model.allowSorting,
                enableAltRow = model.enableAltRow,
                ids = proxy.model.ids;


            for (count; count < length; count++) {
                if (model.enableWBS) {
                    data[count]["WBS"] = (count + 1).toString();
                }
                parentGanttRecord = proxy._createGanttRecord(data[count], 0, null,undefined,"Load");
                proxy._storedIndex++;
                //if (enableAltRow)
                parentGanttRecord.isAltRow = proxy._storedIndex % 2 == 0 ? false : true;
                parentGanttRecord.index = proxy._storedIndex;
                
                ids[proxy._storedIndex] = parentGanttRecord["taskId"].toString();
                ganttRecords.push(parentGanttRecord);
                //if (enableSorting)
                parentRecords.push(parentGanttRecord);
                parentGanttRecord.childRecords && proxy._addNestedGanttRecords(parentGanttRecord.childRecords);
            }
            if (model.enableWBS && model.enableWBSPredecessor)
                proxy.createWBSPredecessor();
        },
        
        /*Create WBS predecessors value*/
        createWBSPredecessor: function () {
            var proxy = this,
                model = proxy.model;
            if (model.enableWBS && model.enableWBSPredecessor && model.predecessorMapping) {
                var linkedRecords = model.flatRecords.filter(function (record) {
                    return record && record["predecessor"];
                });
                for (var r = 0; r < linkedRecords.length; r++) {
                    var linkRecord = linkedRecords[r],
                        prdc = linkRecord["predecessor"],
                        wbspred = null;
                    for (var p = 0; p < prdc.length; p++) {
                        var refId = +prdc[p].from, refRecord;
                        refRecord = model.flatRecords.filter(function (record) {
                            return record && record.taskId == refId;
                        });
                        var newOne = refRecord[0]["WBS"] + prdc[p].predecessorsType;
                        wbspred = wbspred ? (wbspred + "," + newOne) : newOne;
                    }
                    linkRecord["WBSPredecessor"] = wbspred;
                    linkRecord["item"]["WBSPredecessor"] = wbspred;
                }
            }
        },
        //Calculate schedule dates from GanttRecord Collections
        _calculateScheduleDates:function(editArgs)
        {
            var proxy = this,
                minStartDate,
                maxEndDate,
                tempStartDate,
                tempEndDate,
                model = this.model,
                records = model.flatRecords,
                updatedDates;
            if (((!model.scheduleEndDate || !model.scheduleStartDate) && records.length > 0)  || editArgs) {

                $.each(records, function (index, value) {
                        tempStartDate = new Date(value.startDate);
                        tempEndDate = new Date(value.endDate);
                        baseLineStartDate = value.baselineStartDate ? new Date(value.baselineStartDate) : null;
                        baseLineEndDate = value.baselineEndDate ? new Date(value.baselineEndDate) : null;
                        //minimum startDate
                        if (minStartDate) {
                            if (minStartDate.getTime() >= tempStartDate.getTime()) {
                                minStartDate = tempStartDate;
                            }
                            if (baseLineStartDate && model.renderBaseline && (minStartDate.getTime() >= baseLineStartDate.getTime())) {
                                minStartDate = baseLineStartDate;
                            }
                        } else {
                            if (baseLineStartDate && model.renderBaseline && tempStartDate.getTime() >= baseLineStartDate.getTime())
                                minStartDate = baseLineStartDate;
                            else
                                minStartDate = tempStartDate;
                        }
                        //Maximum endDate
                        if (maxEndDate) {
                            if (maxEndDate.getTime() <= tempEndDate.getTime()) {
                                maxEndDate = tempEndDate;
                            }
                            if (baseLineEndDate && model.renderBaseline && (maxEndDate.getTime() <= baseLineEndDate.getTime())) {
                                maxEndDate = baseLineEndDate;
                            }

                        } else {
                            if (baseLineEndDate && model.renderBaseline && tempEndDate.getTime() <= baseLineEndDate.getTime())
                                maxEndDate = baseLineEndDate;
                            else
                                maxEndDate = tempEndDate;
                        }
                });
                updatedDates = proxy._updateScheduleDatesByTaskLables(minStartDate, maxEndDate);
                minStartDate = updatedDates.minStartDate;
                maxEndDate = updatedDates.maxEndDate;
            }
            else if ((!model.scheduleEndDate || !model.scheduleStartDate) && records.length === 0) {
                minStartDate = proxy._getDateFromFormat(new Date());
                maxEndDate = proxy._getDateFromFormat(new Date(minStartDate));
                maxEndDate.setDate(maxEndDate.getDate() + 20);
            }
            if (!editArgs) {
                model.scheduleStartDate = minStartDate ? proxy.getFormatedDate(minStartDate) : model.scheduleStartDate;
                model.scheduleEndDate = maxEndDate ? proxy.getFormatedDate(maxEndDate) : model.scheduleEndDate;
            }
            else {
                editArgs.minStartDate = minStartDate;
                editArgs.maxEndDate = maxEndDate;
            }

        },

        //update schedule dates as per showTaskName and showResourceName values  and 
        //holidays collection and strip line collections at loadtime and edit time
        _updateScheduleDatesByTaskLables: function (startDate, endDate)
        {
            var proxy = this,
                model = this.model,
                scheduleEndDate,
                scheduleHeaderType = model.scheduleHeaderSettings.scheduleHeaderType,
                scheduleHeaderValue = ej.Gantt.ScheduleHeaderType,
                resourceStringWidth = proxy._getResourceStringWidth(),
                numOfDays, returnValues = {},
                scheduleEndDate = model.scheduleEndDate && this._getDateFromFormat(model.scheduleEndDate);
              
            if (scheduleHeaderType == scheduleHeaderValue.Week) {
                //if (model.showTaskNames) {
                //    startDate.setDate(startDate.getDate() - 7);//one week before
                //}
                if (!model.scheduleEndDate || (scheduleEndDate.getTime() !== endDate.getTime()))
                {
                    numOfDays = resourceStringWidth > 0 ? (resourceStringWidth / proxy._perDayWidth)+7 : 7;//one week after
                    endDate.setDate(endDate.getDate() + numOfDays);
                }
            }
            if (scheduleHeaderType == scheduleHeaderValue.Year) {
                //if (model.showTaskNames) {
                //    startDate.setMonth(startDate.getMonth() - 2);//2 month before
                //}
                if (!model.scheduleEndDate || (scheduleEndDate.getTime() !== endDate.getTime())) {
                    numOfDays = resourceStringWidth > 0 ? (resourceStringWidth / proxy._perMonthWidth) + 1 : 1;//1 month after
                    endDate.setMonth(endDate.getMonth() + numOfDays);
                }
            }
             

            if (scheduleHeaderType == scheduleHeaderValue.Month) {
                //if (model.showTaskNames) {
                //    startDate.setDate(startDate.getDate() - 14);//two week before
                //}
                if (!model.scheduleEndDate || (scheduleEndDate.getTime() !== endDate.getTime())) {
                    numOfDays = resourceStringWidth > 0 ? (resourceStringWidth / proxy._perDayWidth) + 7 : 7;//one week after
                    endDate.setDate(endDate.getDate() + numOfDays);
                }
            }


            if (scheduleHeaderType == scheduleHeaderValue.Day) {
                //if (model.showTaskNames) {
                //    startDate.setHours(startDate.getHours() - 8);//8hrs before
                //}
                if (!model.scheduleEndDate || (scheduleEndDate.getTime() !== endDate.getTime())) {
                    numOfDays = resourceStringWidth > 0 ? (resourceStringWidth / proxy._perHourWidth) + 7 : 7;//7hrs after
                    endDate.setHours(endDate.getHours() + numOfDays);
                }
            }
            if (scheduleHeaderType == scheduleHeaderValue.Hour) {
                if (!model.scheduleEndDate || (scheduleEndDate.getTime() !== endDate.getTime())) {
                    numOfHours = resourceStringWidth > 0 ? (resourceStringWidth / proxy._perMinuteWidth) + 5 : 5;//5hrs after
                    endDate.setHours(endDate.getHours() + numOfHours);
                    startDate.setHours(startDate.getHours() - 1);//Add 1 hour before.
                }
            }

            /* Update schedule dates as per holiday and strip line collection */
            returnValues = proxy._updateScheduleDatesByStripLines(startDate, endDate);

            startDate = returnValues.startDate;
            endDate = returnValues.endDate;


            returnValues = proxy._updateScheduleDatesByHolidays(startDate, endDate);

            startDate = returnValues.startDate;
            endDate = returnValues.endDate;

            returnValues.minStartDate = startDate;
            returnValues.maxEndDate = endDate;
           
            return returnValues;

        },

         //update Schedule dates by holidays collection */
        _updateScheduleDatesByHolidays: function (startDate, endDate)
        {
            var proxy = this, model = this.model, returnValues = {};

            //Check holidays are in range of schedule dates
            if (proxy._holidaysList.length > 0) {
                $.each(proxy._holidaysList, function (idx, value) {
                    if (!(value.getTime() > startDate.getTime()) || !(value.getTime() < endDate.getTime())) {
                        if (value.getTime() < startDate.getTime())
                            startDate = new Date(value);
                        else
                            endDate = new Date(value);
                    }
                });
            }

            returnValues.startDate = startDate;
            returnValues.endDate = endDate;

            return returnValues;


        },

        //update Schedule dates by stripLines collection */
        _updateScheduleDatesByStripLines: function (startDate, endDate) {
            var proxy = this, model = this.model, returnValues = {};

            //Check striplines are in range of schedule dates
            if (model.stripLines.length > 0) {
                $.each(model.stripLines, function (idx, value) {
                    var currentValue = proxy._getDateFromFormat(value.day)
                    if (!(currentValue.getTime() > startDate.getTime()) || !(currentValue.getTime() < endDate.getTime())) {
                        if (currentValue.getTime() < startDate.getTime())
                            startDate = new Date(currentValue);
                        else
                            endDate = new Date(currentValue);
                    }
                });
            }
            returnValues.startDate = startDate;
            returnValues.endDate = endDate;

            return returnValues;
        },

        //Get reosurce collections width
        _getResourceStringWidth:function(){
            var proxy = this,
                model = this.model,
                resource = model.resources,
                totalString = "",width;
            if (resource.length > 0 && model.showResourceNames) {
                for (var count = 0; count < resource.length; count++) {
                    totalString += resource[count][model.resourceNameMapping] + " ,";
                }
                var $span = ej.buildTag("span", "", { "font-family": "Segoe UI", "font-size": "12px" }, {});
                $span.text(totalString);
                $(document.body).append($span);
                width = $span.width();
                $span.remove();
                return width;
            } else {
                return 0;
            }
        },

        //calculate project dates by schedule mode types
        _calculateHeaderDates: function () {

            var proxy = this,
                model=this.model,
                startDate = proxy._getDateFromFormat(model.scheduleStartDate),
                endDate = proxy._getDateFromFormat(model.scheduleEndDate),
                headerType = model.scheduleHeaderSettings.scheduleHeaderType,
                headerValue = ej.Gantt.ScheduleHeaderType;

            if (headerType == headerValue.Week)
                proxy._calculateWeekSplit(startDate, endDate);

            if (headerType == headerValue.Year) {
                proxy._calculateYearSplit(startDate, endDate);//method for year split
            }

            if (headerType == headerValue.Month)
                proxy._calculateMonthSplit(startDate, endDate);//method for Month split

            if (headerType == headerValue.Day)
                proxy._calculateDaySplit(startDate, endDate);

            if (headerType == headerValue.Hour)
                proxy._calculateHourSplit(startDate, endDate);
        },
        //AddNested Gantt Records
        _addNestedGanttRecords: function (data) {
            var proxy = this,
               
                ids = proxy.model.ids,
                model = proxy.model,
                ganttRecords = model.flatRecords,
                count = 0,
                length = data.length,
                records = [],
                record,
                enableAltRow = model.enableAltRow;
            
            for (count; count < length; count++) {
                record = data[count];
                proxy._storedIndex++;
                //if (enableAltRow)
                record.isAltRow = proxy._storedIndex % 2 == 0 ? false : true;;
                record.index = proxy._storedIndex;
              
                ids[proxy._storedIndex] = record["taskId"].toString();
                ganttRecords.push(record);
                records = record.childRecords;
                if (records) {
                    var j = 0, recordlength = records.length, childGanttRecord = null;
                    for (j; j < recordlength; j++) {
                        childGanttRecord = records[j];
                        proxy._storedIndex++;
                        //if (enableAltRow)
                        childGanttRecord.isAltRow = proxy._storedIndex % 2 == 0 ? false : true;
                        childGanttRecord.index = proxy._storedIndex;
                     
                        ids[proxy._storedIndex] = childGanttRecord["taskId"].toString();
                        ganttRecords.push(childGanttRecord);
                        childGanttRecord.childRecords && proxy._addNestedGanttRecords(childGanttRecord.childRecords);
                    }
                }

            }
            
        },
        //returns gantt record from data
        _createGanttRecord: function (data, level, parentItem, expanded, creatAt) {
            var proxy = this, ganttRecord, model = proxy.model,
                columnRecords = proxy._columns, columnRecordsLength = columnRecords.length,
                child = data[model.childMapping],
                duration = !ej.isNullOrUndefined(data[model.durationMapping]) ? data[model.durationMapping] : null,
                status = data[model.progressMapping] ? (!isNaN(parseFloat(data[model.progressMapping])) ? parseFloat(data[model.progressMapping]) : 0) : 0,
                startDateType = proxy._getDateFromFormat(data[model.startDateMapping]),
                endDateType = proxy._getDateFromFormat(data[model.endDateMapping]),
                resourceInfo = data[model.resourceInfoMapping],
                predecessors = data[model.predecessorMapping],
                notes = data[model.notesMapping],
                baselineStartDateType = proxy._getDateFromFormat(data[model.baselineStartDateMapping]),
                baselineEndDateType = proxy._getDateFromFormat(data[model.baselineEndDateMapping]),
                WBS_Val = data["WBS"] ? data["WBS"] : null,
                autoSchedule_val = (model.taskSchedulingMode == ej.Gantt.TaskSchedulingMode.Auto) ? true :
                                    (model.taskSchedulingMode == ej.Gantt.TaskSchedulingMode.Manual) ? false :
                                    (model.taskSchedulingMode == ej.Gantt.TaskSchedulingMode.Custom) ? data[model.taskSchedulingModeMapping] == true ? false : true :
                                    model.taskSchedulingMode,
                resourceName = [],
                predecessorscol = [],
                durationUnit = (model.durationUnitMapping && data[model.durationUnitMapping]) ? proxy._validateDurationUnitMapping(data[model.durationUnitMapping]) : null,
                isMilesStone = model.milestoneMapping && data[model.milestoneMapping];

            var sTime = startDateType ? new Date(startDateType.getFullYear(), startDateType.getMonth(),
                startDateType.getDate(), startDateType.getHours(), startDateType.getMinutes()).getTime() : null,
                eTime = endDateType ? new Date(endDateType.getFullYear(), endDateType.getMonth(),
                endDateType.getDate(), endDateType.getHours(), endDateType.getMinutes()).getTime() : null;

            ganttRecord = new ej.Gantt.GanttRecord();
            ganttRecord.taskId = data[model.taskIdMapping];
            ganttRecord.taskName = data[model.taskNameMapping];
            proxy._addItemValue(ganttRecord, data, creatAt);
            ganttRecord.isAutoSchedule = autoSchedule_val;            
            ganttRecord.startDate = this._checkStartDate(startDateType, ganttRecord);
            //Update duration and endDate by miles stone mapping
            if (!ej.isNullOrUndefined(isMilesStone) && isMilesStone) {
                ganttRecord.duration = 0;
                ganttRecord.durationUnit = durationUnit;
                ganttRecord.isMilestone = true;
                ganttRecord.endDate = new Date(ganttRecord.startDate);
            }
                //validate duration value
            else if (!ej.isNullOrUndefined(duration)) {
                var retrunVal = this._getDurationValues(duration);
                ganttRecord.duration = retrunVal.duration;
                ganttRecord.durationUnit = durationUnit ? durationUnit : retrunVal.durationUnit;
                if (ganttRecord.duration == 0) {
                    ganttRecord.isMilestone = true;
                    ganttRecord.endDate = new Date(ganttRecord.startDate);
                } else
                    ganttRecord.endDate = this._getEndDate(ganttRecord.startDate, ganttRecord.duration, ganttRecord.durationUnit, ganttRecord);
            } else if (endDateType) {
                //If No hour information on endate default end time is set
                if (endDateType.getHours() == 0 && this._defaultEndTime != 86400)
                    this._setTime(this._defaultEndTime, endDateType);
                ganttRecord.endDate = this._checkEndDate(endDateType, ganttRecord);
                if (ganttRecord.startDate.getTime() >= ganttRecord.endDate.getTime()) {
                    ganttRecord.endDate = new Date(ganttRecord.startDate);
                    ganttRecord.isMilestone = true;
                    ganttRecord.duration = 0;
                } else
                    ganttRecord.duration = this._getDuration(ganttRecord.startDate, ganttRecord.endDate, model.durationUnit, ganttRecord.isAutoSchedule);
                ganttRecord.durationUnit = model.durationUnit;
            } else if (!endDateType && ej.isNullOrUndefined(duration)) {
                ganttRecord.isMilestone = true;
                ganttRecord.duration = 0;
                ganttRecord.endDate = new Date(ganttRecord.startDate);
            }
            ganttRecord.baselineStartDate = baselineStartDateType,
            ganttRecord.baselineEndDate = baselineEndDateType,
            ganttRecord.WBS = WBS_Val;
            ganttRecord.notes = notes;
            ganttRecord["notesText"] = notes ? proxy._getPlainText(notes) : "";

            // updating Gantt record for custom columns while adding new row
            if (columnRecordsLength) {
                for (var i = 0; i < columnRecordsLength; i++) {
                    if (ganttRecord[columnRecords[i].field] == undefined)
                        ganttRecord[columnRecords[i].field] = data[columnRecords[i].mappingName];
                }
            }

            ganttRecord.status = status,
            ganttRecord.predecessor = predecessors && ganttRecord._calculatePredecessor(predecessors, this._durationUnitEditText, model.durationUnit);
            ganttRecord.predecessorsName = predecessors;
            var resourceCollection = proxy._isinAddnewRecord ? proxy._newRecordResourceCollection : model.resources;
            ganttRecord.resourceInfo = resourceInfo && ganttRecord._setResourceInfo(data[(model.resourceInfoMapping)], model.resourceIdMapping, model.resourceNameMapping, model.resourceUnitMapping, resourceCollection);
            proxy._updateResourceName(ganttRecord);
            ganttRecord.parentItem = parentItem;
            ganttRecord.level = level;

            if (!creatAt) {
                ganttRecord.width = ganttRecord._calculateWidth(this);
                ganttRecord.left = ganttRecord._calculateLeft(this);
                ganttRecord.progressWidth = ganttRecord._calculateProgressWidth(ganttRecord.width, status);

                if (ganttRecord.baselineStartDate && ganttRecord.baselineEndDate) {
                    ganttRecord.baselineLeft = ganttRecord._calculateBaselineLeft(this);
                    ganttRecord.baselineWidth = ganttRecord._calculateBaseLineWidth(this);
                }
            }
            proxy._updateItemValueInRecord(ganttRecord);
            ganttRecord.childRecords = (child && child.length > 0) && proxy._createChildRecords(child, level + 1, ganttRecord),
            ganttRecord.hasChildRecords = (child && child.length > 0) ? true : false,
            ganttRecord.isMilestone = ganttRecord.hasChildRecords ? false : ganttRecord.isMilestone;
            ganttRecord.expanded = expanded !== undefined ? expanded : child ? child.length > 0 : false;
            if (model.enableVirtualization === false) {
                ganttRecord.isExpanded = true;
            }
            if (ganttRecord.hasChildRecords) {                               
                ganttRecord.manualStartDate = ganttRecord.startDate;
                ganttRecord.manualEndDate = ganttRecord.endDate;                
                ganttRecord.manualDuration = ganttRecord.duration;                
            }            
            ganttRecord.taskType = data.taskType ? data.taskType : model.taskType;
            ganttRecord.effortDriven = data.effortDriven ? data.effortDriven : ganttRecord.taskType != "fixedWork" ? "false" : "true";           
            //Calculate total works for this record.
            ganttRecord._updateWorkWithDuration(proxy);
            if (predecessors)
                proxy._predecessorsCollection.push(ganttRecord);
            return ganttRecord;
        },
        /*Validate duration unit value from data source*/
        _validateDurationUnitMapping: function (value) {
            var durationUnit = value;
            if (this._durationUnitEditText.minute.indexOf(durationUnit) != -1)
                durationUnit = ej.Gantt.DurationUnit.Minute;
            else if (this._durationUnitEditText.hour.indexOf(durationUnit) != -1)
                durationUnit = ej.Gantt.DurationUnit.Hour;
            else if (this._durationUnitEditText.day.indexOf(durationUnit) != -1)
                durationUnit = ej.Gantt.DurationUnit.Day;
          
            if (durationUnit == ej.Gantt.DurationUnit.Day || durationUnit == ej.Gantt.DurationUnit.Hour || durationUnit == ej.Gantt.DurationUnit.Minute)
                return durationUnit;
            else
                return this.model.durationUnit;
        },
        //Start date,end date and duration are validated update this value in data source
        _updateItemValueInRecord: function (ganttRecord) {
            var model = this.model;
            if (ganttRecord.item) {
                var data = ganttRecord.item;
                if (model.startDateMapping)
                    data[model.startDateMapping] = ganttRecord.startDate;
                if (model.endDateMapping)
                    data[model.endDateMapping] = ganttRecord.endDate;
                if (model.durationMapping)
                    data[model.durationMapping] = ganttRecord.duration;
                if (model.durationUnitMapping)
                    data[model.durationUnitMapping] = ganttRecord.durationUnit;
                if (model.taskSchedulingModeMapping)
                    data[model.taskSchedulingModeMapping] = !ganttRecord.isAutoSchedule;
            }
        },
        _addItemValue: function (ganttRecord, data, creatAt) {
            var proxy = this, model = this.model;
            //add item value in Gantt record

            if (model.parentTaskIdMapping && creatAt) {
                var id = data[model.taskIdMapping],
                   index = proxy._taskIds.indexOf(id);
                ganttRecord.item = (index > -1) ? proxy._retrivedData[index] : [];
            }
            else {
                if (this.dataSource() instanceof ej.DataManager && this.dataSource().dataSource.json && this.dataSource().dataSource.offline && creatAt) {

                    if (model.parentTaskIdMapping) {
                        var id = data[model.taskIdMapping],
                            index = proxy._taskIds.indexOf(id);
                        ganttRecord.item = (index > -1) ? proxy._retrivedData[index] : [];
                    } else {
                        ganttRecord.item = data;
                    }
                }
                else {
                    ganttRecord.item = data;
                }
            }
        },

        //Get the plain text from html string
        _getPlainText: function (htmlString) {
            var div = document.createElement("DIV");
            div.innerHTML = htmlString;
            return div.textContent || div.innerText || "";
        },

        /* udpate resourceNames attribute of record*/
        _updateResourceName: function (ganttRecord) {
            var proxy = this, resourceInfo = ganttRecord.resourceInfo,
                resourceName = [], length;

            if (resourceInfo) {
                length = resourceInfo.length;
                ganttRecord.item ? ganttRecord.item[this.model.resourceInfoMapping] = [] : null;
                 for (var i = 0; i < length; i++){
                     resourceName.push(resourceInfo[i][this.model.resourceNameMapping]);
                     if (ganttRecord.item)
                         ganttRecord.item[this.model.resourceInfoMapping].push(resourceInfo[i][this.model.resourceIdMapping]);
                 }
                 ganttRecord.resourceNames = resourceName.join(',');
             }
        },
        //Update duration, work or unit of a resource according with the changes.
        _updateResourceRelatedFields: function (ganttRecord) {
            var proxy = this, model = proxy.model, updatedWorks,
                calculationType = ganttRecord.taskType,
                isAutoSchedule = ganttRecord.isAutoSchedule,
                isEffortDriven = (ganttRecord.effortDriven === "true"); //Convert String true/false to boolean.

            if (!ej.isNullOrUndefined(ganttRecord.resourceInfo)) {
                if (ganttRecord.work > 0) {
                    switch (calculationType) {
                        case "fixedUnit":
                            if (isAutoSchedule && ganttRecord.resourceInfo.length &&
                                (proxy._updatedColumn == "work" ||
                                (isEffortDriven && proxy._updatedColumn == "resourceInfo")))
                                ganttRecord._updateDurationWithWork(proxy);

                            else if (!isAutoSchedule && proxy._updatedColumn == "work")
                                ganttRecord._updateUnitWithWork(proxy);

                            else
                                ganttRecord._updateWorkWithDuration(proxy);
                            break;
                        case "fixedWork":
                            if (ganttRecord.resourceInfo.length == 0)
                                return;
                            else if (isAutoSchedule) {
                                if (proxy._updatedColumn == "duration" || proxy._updatedColumn == "endDate")
                                    ganttRecord._updateUnitWithWork(proxy);
                                else
                                    ganttRecord._updateDurationWithWork(proxy);
                            }
                            else {
                                if (proxy._updatedColumn == "work")
                                    ganttRecord._updateUnitWithWork(proxy);
                                else
                                    ganttRecord._updateWorkWithDuration(proxy);
                            }
                            break;
                        case "fixedDuration":                                                       
                            if (ganttRecord.resourceInfo.length && (proxy._updatedColumn == "work" ||
                                (isAutoSchedule && isEffortDriven && proxy._updatedColumn == "resourceInfo")))
                                ganttRecord._updateUnitWithWork(proxy);
                            else
                                ganttRecord._updateWorkWithDuration(proxy);
                            break;
                    }
                }
                else 
                    ganttRecord._updateWorkWithDuration(proxy);
            }
        },

        //Dynamically update resource treegrid datasource in resource tab of edit dialog box, according with changes in other resource related fields.
        _updateResourceDataSource: function (editedObj) {
            var proxy = this, resourceData = [],
                length = editedObj.resourceInfo ? editedObj.resourceInfo.length : 0;
            for (var i = 0; i < length; i++) {
                resourceData.push({ "name": editedObj.resourceInfo[i][model.resourceIdMapping], "unit": editedObj.resourceInfo[i][model.resourceUnitMapping] });
            }
            var resourceTreeGridId = "#treegrid" + proxy._id + "resourceEdit",
                resourceTreeGridDataSource = $(resourceTreeGridId).data("ejTreeGrid").model.dataSource;

            for (var index = 0; index < resourceTreeGridDataSource.length; index++) {
                var resource = resourceData.filter(function (data) { return data.name === parseInt(resourceTreeGridDataSource[index].name) })
                if (resource && resource.length == 0)
                    resourceData.push(resourceTreeGridDataSource[index]);
            }

            $(resourceTreeGridId).ejTreeGrid("option", "dataSource", resourceData);
        },
        _getHoliday: function () {
            if (this.model.holidays != null) {
                var holidayList = this.model.holidays,
                    holidays = [],
                    holidayLength = holidayList.length;
                if (holidayLength > 0) {
                    for (var i = 0; i < holidayLength; i++) {
                        holidays[i] = this._getDateFromFormat(holidayList[i].day);
                    }
                    return holidays;
                }
            }
            return false;
        },

        _getStringHolidays: function() {
            if (this._holidaysList != null && this._holidaysList.length > 0) {
                var holidayList = this._holidaysList,
                    holidays = [],
                    holidayLength = holidayList.length;
                if (holidayLength > 0) {
                    for (var i = 0; i < holidayLength; i++) {
                        holidays[i] = ej.format(holidayList[i], this.model.dateFormat, this.model.locale);
                    }
                    return holidays;
                }
            }
            return [];
        },
        
        //create childRecords for particular GanttRecord
        _createChildRecords: function (data, level, parentItem) {
            var ganttRecords = [],
                proxy = this,
                i = 0,
                length = data.length;

            for (i = 0; i < length; i++) {
                if (model.enableWBS) {
                    var parentWBS = parentItem.WBS;
                    data[i]["WBS"] = parentWBS + "." + (i + 1);
                }
                if (data[i]) {
                    var parentRecord = proxy._createGanttRecord(data[i], level, parentItem,undefined,"Load");
                    ganttRecords.push(parentRecord);
                }
            }
            return ganttRecords;
        },

        _createResourceInfoCollection: function (data) {
            var proxy = this,
                count = 0,
                length = data.length;
            for (count; count < length; count++) {
                proxy._resourceInfoCollection.push(proxy._createResourceInfo(data[count]));
            }
        },

        _createResourceInfo: function (data) {
            var model = this.model, resourceInfo = {};
            resourceInfo.resourceId = data[model.resourceIdMapping];
            resourceInfo.resourceName = data[model.resourceNameMapping];
            return resourceInfo;
        },

        _calculateWeekSplit: function (startdate, enddate) {
            var proxy = this,model=proxy.model;
            if (model.scheduleHeaderSettings.timescaleStartDateMode == "month") 
                var dt = new Date(startdate.getFullYear(), startdate.getMonth(), 1);
            else if (model.scheduleHeaderSettings.timescaleStartDateMode == "year") 
                var dt = new Date(startdate.getFullYear(), 0, 1);
            else
                var dt = startdate;
            startdate = dt;
            var roundOffStartDate = startdate.getDay() == 0 ? (startdate.getDate()) - 7 :
                (startdate.getDate()) - startdate.getDay();
            startdate.setDate(roundOffStartDate);
            startdate.setHours(0, 0, 0, 0);
            do {
                proxy._scheduleWeeks.push(new Date(startdate));
                startdate.setDate(startdate.getDate() + 7);
            } while (!(startdate > enddate));

            proxy._projectStartDate= new Date(proxy._scheduleWeeks[0]);
            proxy._projectEndDate = new Date(proxy._scheduleWeeks[proxy._scheduleWeeks.length - 1]);
        },

        //method for calculatting years (year-month schedule mode)
        _calculateYearSplit: function (startdate, enddate) {
            var proxy = this, model=proxy.model;
            if (model.scheduleHeaderSettings.timescaleStartDateMode == "month") {
                var dt = new Date(startdate.getFullYear(), startdate.getMonth(), 1);
                startdate = dt;
                do {
                    proxy._scheduleYears.push(new Date(startdate));
                    startdate = new Date(startdate.getFullYear() + 1, 0, 1);
                } while (!(startdate >= enddate));
                var projectStartDate, projectEndDate;
                proxy._projectStartDate = new Date(proxy._scheduleYears[0].getFullYear(), proxy._scheduleYears[0].getMonth(), 1);
                proxy._projectEndDate = new Date(proxy._scheduleYears[proxy._scheduleYears.length - 1].getFullYear(), 11, 31);
            }
            else if (model.scheduleHeaderSettings.timescaleStartDateMode == "week") {
                var roundOffStartDate = startdate.getDay() == 0 ? (startdate.getDate()) - 7 :
                  (startdate.getDate()) - startdate.getDay();
                startdate.setDate(roundOffStartDate);
                do {
                    proxy._scheduleYears.push(new Date(startdate));
                    if (startdate.getDate() == 29 && startdate.getMonth() == 0 && startdate.getFullYear() % 4 != 0)
                        startdate = new Date(startdate.getFullYear()+1, startdate.getMonth(), startdate.getDate() - 1);
                    else
                        startdate = new Date(startdate.getFullYear()+1, startdate.getMonth(), startdate.getDate());
                } while (!(startdate >= enddate));
                var projectStartDate, projectEndDate;
                proxy._projectStartDate = new Date(proxy._scheduleYears[0]);
                proxy._projectEndDate = new Date(proxy._scheduleYears[proxy._scheduleYears.length - 1].getFullYear(), 11, 31);
            }
            else {
                startdate.setMonth(0);
                startdate.setDate(1);
                startdate.setHours(0, 0, 0, 0);
                do {
                    proxy._scheduleYears.push(new Date(startdate));
                    startdate.setMonth(startdate.getMonth() + 12);
                } while (!(startdate >= enddate));
                var projectStartDate, projectEndDate;
                proxy._projectStartDate = new Date(proxy._scheduleYears[0].getFullYear(), proxy._scheduleYears[0].getMonth(), 1);
                proxy._projectEndDate = new Date(proxy._scheduleYears[proxy._scheduleYears.length - 1].getFullYear(), 11, 31);
            }        

           
        },

        //Method for calculating days (day-hour schedule mode)
        _calculateDaySplit: function (startdate, enddate) {
            var proxy = this, model=proxy.model;
            if (model.scheduleHeaderSettings.timescaleStartDateMode == "week") {
                var roundOffStartDate = startdate.getDay() == 0 ? (startdate.getDate()) - 7 :
                    (startdate.getDate()) - startdate.getDay();
                startdate.setDate(roundOffStartDate);
            }
            else if (model.scheduleHeaderSettings.timescaleStartDateMode == "month") {
                var dt = new Date(startdate.getFullYear(), startdate.getMonth(), 1);
                startdate = dt;
            }
            else if (model.scheduleHeaderSettings.timescaleStartDateMode == "year") {
                var dt = new Date(startdate.getFullYear(), 0, 1);
                startdate = dt;
            }
            else {
                startdate.setHours(0, 0, 0, 0);
            }
            do {
                proxy._scheduleDays.push(new Date(startdate));
                startdate.setDate(startdate.getDate() + 1);
            } while ((startdate <= enddate));
            proxy._projectStartDate = new Date(proxy._scheduleDays[0]);
            proxy._projectEndDate = new Date(proxy._scheduleDays[proxy._scheduleDays.length - 1]);
        },

        //Method for calculating hours (Hour-Minute schedule mode)
        _calculateHourSplit: function (startdate, enddate) {
            var proxy = this, model=proxy.model;
            if (model.scheduleHeaderSettings.timescaleStartDateMode == "week") {
                var roundOffStartDate = startdate.getDay() == 0 ? (startdate.getDate()) - 7 :
                    (startdate.getDate()) - startdate.getDay();
                startdate.setDate(roundOffStartDate);
            }
            else if (model.scheduleHeaderSettings.timescaleStartDateMode == "month") {
                var dt = new Date(startdate.getFullYear(), startdate.getMonth(), 1);
                startdate = dt;               
            }
            else if (model.scheduleHeaderSettings.timescaleStartDateMode == "year") {
                var dt = new Date(startdate.getFullYear(), 0, 1);
                startdate = dt;
            }
            else {
                startdate.setMinutes(0);              
            }
            do {
                proxy._scheduleHours.push(new Date(startdate));
                startdate.setHours(startdate.getHours() + 1);
            } while (startdate <= enddate);
            proxy._projectStartDate = new Date(proxy._scheduleHours[0]);          
            proxy._projectEndDate = new Date(proxy._scheduleHours[proxy._scheduleHours.length - 1]);
        },
        //new method for calculatting months
        _calculateMonthSplit: function (startdate, enddate) {
            var proxy = this, model = proxy.model;
            if (model.scheduleHeaderSettings.timescaleStartDateMode == "week") {
                var roundOffStartDate = startdate.getDay() == 0 ? (startdate.getDate()) - 7 :
                   (startdate.getDate()) - startdate.getDay();
                startdate.setDate(roundOffStartDate);
                do {
                    proxy._scheduleMonths.push(new Date(startdate));
                    if (startdate.getDate() == 29 && startdate.getMonth() == 0 && startdate.getFullYear() % 4 != 0)
                        startdate = new Date(startdate.getFullYear(), startdate.getMonth() + 1, startdate.getDate() - 1);
                    else
                        startdate = new Date(startdate.getFullYear(), startdate.getMonth() + 1, startdate.getDate());
                } while (!(startdate >= enddate));
            }
            else if (model.scheduleHeaderSettings.timescaleStartDateMode == "year") {
                var dt = new Date(startdate.getFullYear(), 0, 1);
                startdate = dt;
                do {
                    proxy._scheduleMonths.push(new Date(startdate));
                    if (startdate.getMonth() == 0 || startdate.getMonth() == 2 || startdate.getMonth() == 4 || startdate.getMonth() == 6 || startdate.getMonth() == 7 || startdate.getMonth() == 9 || startdate.getMonth() == 11)
                        startdate.setDate(startdate.getDate() + 31);
                    else if (startdate.getMonth() == 3 || startdate.getMonth() == 5 || startdate.getMonth() == 8 || startdate.getMonth() == 10)
                        startdate.setDate(startdate.getDate() + 30);
                    else if (startdate.getMonth() == 1) {
                        if (startdate.getFullYear() % 4 == 0)
                            startdate.setDate(startdate.getDate() + 29);
                        else
                            startdate.setDate(startdate.getDate() + 28);
                    }
                } while (!(startdate >= enddate));
            }
            else {
                var dt = new Date(startdate.getFullYear(), startdate.getMonth(), 1);
                startdate = dt;
                do {
                    proxy._scheduleMonths.push(new Date(startdate));
                    if (startdate.getMonth() == 0 || startdate.getMonth() == 2 || startdate.getMonth() == 4 || startdate.getMonth() == 6 || startdate.getMonth() == 7 || startdate.getMonth() == 9 || startdate.getMonth() == 11)
                        startdate.setDate(startdate.getDate() + 31);
                    else if (startdate.getMonth() == 3 || startdate.getMonth() == 5 || startdate.getMonth() == 8 || startdate.getMonth() == 10)
                        startdate.setDate(startdate.getDate() + 30);
                    else if (startdate.getMonth() == 1) {
                        if (startdate.getFullYear() % 4 == 0)
                            startdate.setDate(startdate.getDate() + 29);
                        else
                            startdate.setDate(startdate.getDate() + 28);
                    }
                } while (!(startdate >= enddate));
            }

            var projectStartDate, projectEndDate;
            projectStartDate = new Date(proxy._scheduleMonths[0]);
            projectEndDate = new Date(proxy._scheduleMonths[proxy._scheduleMonths.length - 1]);
            projectEndDate = new Date(projectEndDate.getFullYear(), projectEndDate.getMonth() + 1, 0);
            proxy._projectStartDate = projectStartDate;
            proxy._projectEndDate = projectEndDate;
        },



        _updatePredecessors: function () {
            var proxy = this,
                count = 0,
                predecessorsCollection = proxy._predecessorsCollection,
                length = predecessorsCollection.length,
                ganttRecord,
                connectorsCollection,
            i = 0,
            successorGanttRecord,
            connectorCount;
            for (count; count < length; count++) {
                ganttRecord = predecessorsCollection[count];
                connectorsCollection = ganttRecord["predecessor"];
                connectorCount = connectorsCollection.length;
                for (i=0; i < connectorCount; i++) {
                    var connector = connectorsCollection[i];
                    successorGanttRecord = proxy.model.flatRecords[proxy.model.ids.indexOf(connector.from)];
                    if (connector.from !== ganttRecord.taskId.toString()) {
                        if (successorGanttRecord) {
                            if (successorGanttRecord.predecessor) {
                                successorGanttRecord.predecessor.push(connector);
                            } else {
                                successorGanttRecord.predecessor = [];
                                successorGanttRecord.predecessor.push(connector);
                                predecessorsCollection.push(successorGanttRecord);
                            }
                        }
                    }

                }                
            }
        },
        
        getDateType: function (date) {
            if (date != null) {
                if (typeof (date) == "object") {
                    return date;
                }
                else {
                    var hyphenRegex = new RegExp("\\-", "g"),
                    dotRegex = new RegExp("\\.", "g");
                    date = date.replace(hyphenRegex, "/");
                    date = date.replace(dotRegex, "/");
                    return new Date(date);
                }
            }
            return null;
        },

        getFormatedDate: function(date) {
            return ej.format(date, this.model.dateFormat, this.model.locale);
        },

        _getProgressWidth: function (parentwidth, percent) {
            return (parentwidth * percent) / 100;
        },

        
        _wireEvents: function () {
            var proxy = this,
                model=proxy.model,
                treeGrid = $("#ejTreeGrid" + proxy._id),
                ganttChart = $("#ejGanttChart" + proxy._id),
                gantt = proxy._$ejGantt;

            proxy._on(proxy.element, "click", proxy.clickHandler);
            proxy._on(proxy.element, "click", ".e-ejinputtext", proxy._searchTextFocusIn);
            proxy._on(proxy.element, "focusout", ".e-ejinputtext", proxy._searchTextFocusOut);
            if (model.enableContextMenu) {
                proxy._on(proxy.element, "contextmenu", proxy._rightClick);
                proxy._on(proxy.element, "keyup", this._preventContextMenu);
            }

            if (model.enableResize && model.isResponsive) {
                proxy._on($(window), "resize", proxy.windowResize);
            }

            treeGrid.ejTreeGrid({ rowSelecting: $.proxy(proxy.rowSelecting, proxy) });
            treeGrid.ejTreeGrid({ rowSelected: $.proxy(proxy.rowSelected, proxy) });
            treeGrid.ejTreeGrid({ cellSelecting: $.proxy(proxy.cellSelecting, proxy) });
            treeGrid.ejTreeGrid({ cellSelected: $.proxy(proxy.cellSelected, proxy) });
            //treeGrid.ejTreeGrid({ rowHover: $.proxy(proxy._treeGridRowHover, proxy) });
            treeGrid.ejTreeGrid({ rowDrag: $.proxy(proxy.rowDrag, proxy) });
            treeGrid.ejTreeGrid({ rowDragStart: $.proxy(proxy.rowDragStart, proxy) });
            treeGrid.ejTreeGrid({ rowDragStop: $.proxy(proxy.rowDragStop, proxy) });
            treeGrid.ejTreeGrid({ actionBegin: $.proxy(proxy.actionBegin, proxy) });
            treeGrid.ejTreeGrid({ actionComplete: $.proxy(proxy.actionComplete, proxy) });
            treeGrid.ejTreeGrid({ expandAllCollapseAllRequest: $.proxy(proxy.expandAllCollapseAllRequest, proxy) });
            treeGrid.ejTreeGrid({ contextMenuAction: $.proxy(proxy.contextMenuAction, proxy) });
            treeGrid.ejTreeGrid({ subContextMenuAction: $.proxy(proxy.subContextMenuAction, proxy) });
            treeGrid.ejTreeGrid({ setInitialData: $.proxy(proxy.setInitialData, proxy) });
            

            if (model.queryCellInfo) {
                treeGrid.ejTreeGrid({ queryCellInfo: $.proxy(proxy._queryCellInfo, proxy) });
            }
            
            if (model.rowDataBound) {
                treeGrid.ejTreeGrid({ rowDataBound: $.proxy(proxy._rowDataBound, proxy) });
            }
            
            treeGrid.ejTreeGrid({ beginEdit: $.proxy(proxy._beginEdit, proxy) });
            treeGrid.ejTreeGrid({ endEdit: $.proxy(proxy._endEdit, proxy) });            
            
            treeGrid.ejTreeGrid({ expanding: $.proxy(proxy.expanding, proxy) });
            treeGrid.ejTreeGrid({ collapsing: $.proxy(proxy.collapsing, proxy) });
            treeGrid.ejTreeGrid({ expanded: $.proxy(proxy.expanded, proxy) });
            treeGrid.ejTreeGrid({ collapsed: $.proxy(proxy.collapsed, proxy) });
            treeGrid.ejTreeGrid({ refreshRow: $.proxy(proxy.refreshRow, proxy) });
            treeGrid.ejTreeGrid({ cancelEditCell: $.proxy(proxy.cancelEditCell, proxy) });
            
            
            ganttChart.ejGanttChart({ rowSelecting: $.proxy(proxy.rowSelecting, proxy) });
            ganttChart.ejGanttChart({ rowSelected: $.proxy(proxy.rowSelected, proxy) });
            ganttChart.ejGanttChart({ rowHover: $.proxy(proxy._ganttChartRowHover, proxy) });
            ganttChart.ejGanttChart({ actionBegin: $.proxy(proxy.actionBegin, proxy) });
            ganttChart.ejGanttChart({ actionComplete: $.proxy(proxy.chartactionComplete, proxy) });
            ganttChart.ejGanttChart({ refreshRow: $.proxy(proxy.refreshRowData, proxy) }); 
            ganttChart.ejGanttChart({ zooming: $.proxy(proxy.zoomingChart, proxy) });
            ganttChart.ejGanttChart({ queryTaskbarInfo: $.proxy(proxy.queryTaskbarInfo, proxy) });
            ganttChart.ejGanttChart({ expanding: $.proxy(proxy.expanding, proxy) });
            ganttChart.ejGanttChart({ collapsing: $.proxy(proxy.collapsing, proxy) });
            ganttChart.ejGanttChart({ expanded: $.proxy(proxy.expanded, proxy) });
            ganttChart.ejGanttChart({ collapsed: $.proxy(proxy.collapsed, proxy) });
            ganttChart.ejGanttChart({ expandAllCollapseAllRequest: $.proxy(proxy.expandAllCollapseAllRequest, proxy) });
            ganttChart.ejGanttChart({ taskbarEditing: $.proxy(proxy.taskbarEditing, proxy) });
            ganttChart.ejGanttChart({ taskbarEdited: $.proxy(proxy.taskbarEdited, proxy) });
            ganttChart.ejGanttChart({ calculateEndDate: $.proxy(proxy.calculateEndDate, proxy) });
            ganttChart.ejGanttChart({ calculateDuration: $.proxy(proxy.calculateDuration, proxy) });
            ganttChart.ejGanttChart({ clearColumnMenu: $.proxy(proxy.clearColumnMenu, proxy) });
            ganttChart.ejGanttChart({ deleteRow: $.proxy(proxy.deleteRow, proxy) });
            ganttChart.ejGanttChart({ cancelEditCell: $.proxy(proxy.cancelEditCell, proxy) });
            gantt.ejSplitter({ allowResizing: $.proxy(proxy._onResize, proxy) });
            proxy._on(proxy.element, "mousedown", proxy._mousedownhandler);
            proxy._enableEditingEvents();
        },
 
        /* prevent context menu action by menu option key*/
        _preventContextMenu: function (e) {
            if (e.keyCode == 93) {
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
        },
        _onResize: function (args) {
            var proxy = this,
                isPercentage = false,
                splitterPosition = proxy.splitterPosition();
            /* cancel edited cell in treegrid while resize the splitter*/
            if (proxy._isinBeginEdit) {
                if ($("#ejTreeGrid" + proxy._id + "EditForm").length > 0) {
                    proxy._$treegridHelper.ejTreeGrid("cancelEditCell");
                    proxy._isinBeginEdit = false;
                }
            }
            if (splitterPosition.indexOf("%") != -1) 
                isPercentage = true;
            else 
                isPercentage = false;
            if (isPercentage)
                proxy.splitterPosition(Math.round(args.prevPane.size / proxy._ganttWidth * 100)+ "%");
            else
                proxy.splitterPosition(Math.round(args.prevPane.size).toString());
            proxy._splitterPosition(proxy.splitterPosition());
            proxy._$treegridHelper.ejTreeGrid("refreshScroller", args.prevPane.size);
            proxy._$ganttchartHelper.ejGanttChart("refreshScroller", args.nextPane.size - 1);// chart content parent div added with 1px right border

        },
        _searchTextFocusOut: function (e) {
            var focus = 0;
            var proxy = this;
            var $target = $(e.target);
            if ($($target).closest('li') && $($target).closest('li').attr('id') == proxy._id + "_search") {
                $($target).attr("placeholder", "Search");
            }
        },
        _searchTextFocusIn: function (e) {
            var proxy = this;
            var $target = $(e.target);
            var attr = $($target).attr('placeholder');
            if ($target.hasClass("e-ejinputtext") && attr)
                $target.removeAttr('placeholder');
        },
        clickHandler: function (e) {
            var proxy = this;
            var $target = $(e.target);

            //if ($target.closest(".e-popup").length == 0 &&
            //  $target.closest(".e-rowcell").find("#" + proxy._id + "EditForm").length == 0) {
                
            //}


            proxy._clearContextMenu();

            //Skip the scroll bar click in Gantt.
            if ($target.hasClass("e-vhandle") || $target.hasClass("e-vscrollbar") || $target.hasClass("e-vup") || $target.hasClass("e-vhandlespace") || $target.hasClass("e-vdown"))
                return;
            if ($target.hasClass("e-hhandle") || $target.hasClass("e-hscrollbar") || $target.hasClass("e-hup") || $target.hasClass("e-hdown") || $target.hasClass("e-hhandlespace"))
                return;
            if (proxy._isinBeginEdit) {

                if (!$target.closest('td').hasClass("e-editedcell") && !$target.hasClass('e-date') && !$target.hasClass('e-arrow') && !$target.hasClass('e-down-arrow') && $target.closest("form#ejTreeGrid" + proxy._id + "EditForm").length == 0
                    && $("#ejTreeGrid" + proxy._id + "EditForm").length > 0) {
                    proxy._$treegridHelper.ejTreeGrid("saveCell");
                    proxy._isinBeginEdit = false;
                }
            }
            proxy.clearColumnMenu();
        },

        windowResize: function (e) {
            var proxy = this,
                ejGanttSplit = ("#e-ejSpliter" + this._id),
                toolbar = ("#" + this._id + "_toolbarItems"),
                ganttchart = ("#ejGanttChart" + this._id),
                treegrid = ("#ejTreeGrid" + this._id),
                ganttbody = (".e-ganttviewerbodyContianer"),
                gantthead = (".e-ganttviewerheaderContainer"),
                treegridhelp = ("#ejTreeGrid" + this._id),
                treegridcontent = ("#ejTreeGrid" + this._id + "e-gridcontent"),
                sizeSettingsWidth = proxy.model.sizeSettings.width,
                sizeSettingsHeight = proxy.model.sizeSettings.height,
                elementStyleHeight = proxy.element[0].style.height,
                elementStyleWidth = proxy.element[0].style.width,
                width, height, maxScrollWidth;
            //Width calculation
            if ((sizeSettingsWidth && (typeof(sizeSettingsWidth) != "number" && sizeSettingsWidth.indexOf("%") != -1)) || elementStyleWidth.indexOf("%") != -1) {

                var ganttWidth = sizeSettingsWidth ? sizeSettingsWidth : elementStyleWidth;
                var containerWidth = $(proxy.element).parent().width() ? $(proxy.element).parent().width() : $(proxy.element).width();
                width = (containerWidth / 100) * parseInt(ganttWidth);
                
            }
            else
                width = $(proxy.element).width();
            if (proxy.splitterPosition().indexOf("%") == -1){
                var splitterPosition = parseInt(proxy.splitterPosition()) + 7 + 2; // here 7 is splitter width, 2 is border width
                proxy._ganttWidth = width = Math.max(width, splitterPosition);
            }
            else
                proxy._ganttWidth = width;
            //height calculation
            if ((sizeSettingsHeight && (typeof(sizeSettingsWidth) != "number" && sizeSettingsHeight.indexOf("%") != -1 )) || elementStyleHeight.indexOf("%") != -1) {
                var ganttHeight = sizeSettingsHeight ? sizeSettingsHeight : elementStyleHeight;
                var containerHeight = $(proxy.element).parent().height() ? $(proxy.element).parent().height() : $(proxy.element).height();
                var tempHeight;
                if ($(proxy.element).parent().height())
                    tempHeight = (containerHeight / 100) * parseInt(ganttHeight);
                else
                    tempHeight = $(proxy.element).height();
                height = tempHeight;
            }
            else
                height = $(proxy.element).height();

            //Exclude bordor from width and height
            height = height - proxy._totalBorderHeight;
            width = Math.round(width);

            var ganttWidth, treeGridWidth, top,left,
                toolbarHeight = $(toolbar).length ? $(toolbar).height() : 0;
            $(ejGanttSplit).css("width", width);
            $(ejGanttSplit).css("height", (height - toolbarHeight));
            $(ejGanttSplit).ejSplitter("refresh");
            if ($(toolbar).length) {
                $(toolbar).css("width", width);
                $(toolbar).children(".e-ul:first-child").css("width", width);
            }

            ganttWidth = $(ganttchart).width();
            treeGridWidth = $(treegrid).width();
            $(ganttchart).height(height - toolbarHeight);

            top = $(ganttbody).ejScroller("option", "scrollTop");
            left = $(ganttbody).ejScroller("option", "scrollLeft");
            //set height for scroller div
            $(ganttbody).ejScroller({
                width: ganttWidth,
                height: (height - toolbarHeight - $(gantthead).height() - parseInt($(gantthead).css("border-bottom-width"))),
            });
            $(ganttbody).ejScroller("refresh");
            maxScrollWidth = proxy._$ganttchartHelper.ejGanttChart("getMaxScrollWidth");
            if (left > maxScrollWidth)
                left = maxScrollWidth > 0 ? maxScrollWidth : 0;

            $(ganttbody).ejScroller("option", "scrollTop", top);
            $(ganttbody).ejScroller("option", "scrollLeft", left);

            $(treegridhelp).height(height - toolbarHeight);
            $(treegridcontent).height((height - toolbarHeight - $(gantthead).height() - proxy._totalBorderHeight));
            left = $(treegridcontent).ejScroller("option", "scrollLeft");
            //$(treegridcontent).ejScroller("destroy";
            $(treegridcontent).width(treeGridWidth);
            //$(treegridcontent).ejScroller({
            //    width: treeGridWidth,
            //    scrollTop: top,
            //    height: 0
            //});
            $(treegridcontent).ejScroller("refresh");
            maxScrollWidth = proxy._$treegridHelper.ejTreeGrid("getMaxScrollWidth");
            if (left > maxScrollWidth)
                left = maxScrollWidth > 0 ? maxScrollWidth : 0;

            $(treegridcontent).ejScroller("option", "scrollLeft", left);

            proxy._$treegridHelper.ejTreeGrid("updateViewPortHeight");
            proxy._$ganttchartHelper.ejGanttChart("updateViewPortHeight");
            if(proxy.model.enableVirtualization)
            {
                proxy._$treegridHelper.ejTreeGrid("cancelRowEditCell");
                proxy._$treegridHelper.ejTreeGrid("processBindings");
                var tempArgs = {};
                tempArgs.requestType = ej.TreeGrid.Actions.Refresh;
                proxy._$treegridHelper.ejTreeGrid("sendDataRenderingRequest", tempArgs);
                proxy._$ganttchartHelper.ejGanttChart("refreshHelper", proxy.model.currentViewData, proxy.model.updatedRecords);
                proxy._$ganttchartHelper.ejGanttChart("onScrollHelper", top);
            }
            proxy.setSplitterPosition(proxy.splitterPosition());
        },

        /* Public method for scroll to the corresponding offset value */
        setScrollTop: function (top) {
            var proxy = this,
                max = proxy._$treegridHelper.ejTreeGrid("getMaxScrollHeight");
            if (proxy._isinBeginEdit)
                proxy._$treegridHelper.ejTreeGrid("saveCell");

            if ((typeof top == "number" || typeof parseInt(top) == "number")) {
                top = parseInt(top);
                if (top >= 0) {
                    if (max >= top)
                        proxy._$ganttchartHelper.ejGanttChart("onScrollHelper", top);
                    else
                        proxy._$ganttchartHelper.ejGanttChart("onScrollHelper", max);
                }
            }
        },
        
        // handler for mouse right click
        _rightClick: function (e) {
            e.preventDefault();
            var proxy = this,
                model = proxy.model,
                $target = $(e.target),
                div = $target.closest('tr'),
                $ganttGridRows,
                row,
                recordIndexr,
                item,selectIndex, selectCellIndex,
                args = {};
            proxy._$treegridHelper.ejTreeGrid("disableTooltip");
            proxy.clearColumnMenu();
            if ($(div).hasClass("e-chartcell") || $(div).hasClass("e-ganttrowcell")) {
                $ganttGridRows = proxy._$ganttchartHelper.ejGanttChart("getGanttChartRows");
                args.target = "ejTreeGrid";
            } else {
                $ganttGridRows = $(proxy._$treegridHelper.ejTreeGrid("getRows"));
                args.target = "ejGanttChart";
            }
            row = $target.closest('tr');
            recordIndexr = $ganttGridRows.index(row);
            proxy.model.currentViewData = proxy.getCurrentViewData();
            item = proxy.model.currentViewData[recordIndexr];
            recordIndexr = proxy.model.updatedRecords.indexOf(item);
            args.data = item;
            args.recordIndex = recordIndexr;

            if (item && proxy.model.enableContextMenu) {
                proxy._contextMenuItems = [];
                proxy._contextMenuItems = proxy._getContextMenuItems();
                proxy._updateIndentOutdentContextmenuOption(item);
                proxy._clearContextMenu();
                if (proxy._contextMenuItems.length > 0) {
                    if (proxy.model.readOnly == true || !proxy.model.editSettings.allowAdding) {
                          proxy._removeContextMenuItem("Below");
                          proxy._removeContextMenuItem("Above");
                    }
                    proxy._renderContextMenu(e, recordIndexr, item);
                }
                if (model.selectionMode == "row") {
                if (recordIndexr != proxy.model.selectedRowIndex)
                    proxy.rowSelected(args);
                proxy._$treegridHelper.ejTreeGrid("selectRows", recordIndexr);
                proxy._$ganttchartHelper.ejGanttChart("selectRows", recordIndexr);
                proxy.updateIndentOutdentOption(args.data);
            }
                if (model.selectionMode == "cell")  {
                    proxy._rowIndexOfLastSelectedCell = recordIndexr;
                    selectCellIndex = proxy._$treegridHelper.ejTreeGrid("getCellIndex", e);
                    if (!$($target.closest('td')).hasClass("e-chartcell"))
                        proxy.selectCells([{ rowIndex: recordIndexr, cellIndex: selectCellIndex }]);
                }
                //To save edited data when beginEditAction as "click"
                if (model.editSettings.beginEditAction == "click" && $("#ejTreeGrid" + proxy._id + "EditForm").length > 0) {
                    proxy._$treegridHelper.ejTreeGrid("saveCell");
                    proxy._isinBeginEdit = false;
                }
            }
            else if (proxy.model.flatRecords.length === 0 && proxy.model.enableContextMenu) {
                proxy._contextMenuItems = [];
                proxy._contextMenuItems = proxy._getContextMenuItems();
                //remove subContextMenu Items
                proxy._contextMenuItems.splice(5, 2);
                proxy._updateIndentOutdentContextmenuOption(item);
                proxy._clearContextMenu();
                if (proxy._contextMenuItems.length > 0)
                    proxy._renderContextMenu(e, recordIndexr, item);
            }
        },
		 // Mouse down handler for gantt
        _mousedownhandler:function(e)
        {
            var $target = $(e.target),
            proxy = this;
            proxy._clearContextMenu();
            if ($target.hasClass("e-vhandle") || $target.hasClass("e-vscrollbar") || $target.hasClass("e-vup") || $target.hasClass("e-vdown") || $target.hasClass("e-vhandlespace") || $target.hasClass("e-hhandle") || $target.hasClass("e-hscrollbar") || $target.hasClass("e-hdown") || $target.hasClass("e-hhandlespace") || $target.hasClass("e-splitbar")) {
                
                proxy.clearColumnMenu();
            }
        },
        
        //remove corresponding menu item in contextmenu collection by it menuId
        _removeContextMenuItem: function (id) {
            var proxy = this,
                index, contextMenuItems = proxy._contextMenuItems,
                filteredMenuItem;

            filteredMenuItem = contextMenuItems.filter(function (value) {
                if (value.menuId === id)
                    return true;
            });

            if (filteredMenuItem.length > 0) {
                index = contextMenuItems.indexOf(filteredMenuItem[0]);
                contextMenuItems.splice(index, 1);
            }
        },

        //Update contextmenu item according to selected item and editSettings API values
        _updateIndentOutdentContextmenuOption: function (ganttRecord) {
            var proxy = this,
                model = proxy.model,
                flatRecords = this.model.flatRecords,
                recordIndex = flatRecords.indexOf(ganttRecord);
            if (proxy.model.readOnly == true) {
                proxy._removeContextMenuItem("Add");              
                proxy._removeContextMenuItem("Task");
                proxy._removeContextMenuItem("Delete");
                proxy._removeContextMenuItem("Indent");
                proxy._removeContextMenuItem("Outdent");
            }
            else {
                if (recordIndex === 0) {
                    proxy._removeContextMenuItem("Indent");
                    proxy._removeContextMenuItem("Outdent");
                }
                else if (recordIndex > 0) {
                    if (ganttRecord.level === 0) {
                        proxy._removeContextMenuItem("Outdent");
                    }
                    else {
                        var previousGanttRecord = flatRecords[recordIndex - 1];
                        if (ganttRecord.level - previousGanttRecord.level === 1) {
                            proxy._removeContextMenuItem("Indent");
                        }
                    }
                }
                else if (recordIndex < 0) {
                    proxy._removeContextMenuItem("Task");
                    proxy._removeContextMenuItem("Delete");
                    proxy._removeContextMenuItem("Indent");
                    proxy._removeContextMenuItem("Outdent");
                }

                if (!model.editSettings.allowAdding) {
                    proxy._removeContextMenuItem("Add");
                }

                if (!model.editSettings.allowDeleting) {
                    proxy._removeContextMenuItem("Delete");
                }

                if (!model.editSettings.allowEditing) {
                    proxy._removeContextMenuItem("Task");
                }
                if (!model.editSettings.allowIndent) {
                    proxy._removeContextMenuItem("Indent");
                    proxy._removeContextMenuItem("Outdent");
                }                
            }
        },
      
        queryTaskbarInfo: function (args) {        
            this._trigger("queryTaskbarInfo", args);
        },
        

        zoomingChart: function (args) {
            var proxy = this;
            proxy.reRenderChart(args.delta);
        },

        refreshRowData: function (args) {
            var proxy = this,
                treegridObject = proxy._$treegridHelper.ejTreeGrid("instance");
            ej.TreeGrid.refreshRow(treegridObject, args.index);
        },

        expanding: function (args) {
            var proxy = this;           
            if (!proxy._trigger("expanding", args)) {
                if (proxy.model.enableVirtualization) {                    
                    ej.TreeGrid.sendExpandCollapseRequest(proxy, args);
                } else {
                    proxy._isInExpandCollapse = true;
                    //If need refresh chart if record is added after searching or sorting
                    if (proxy._isRefreshAddedRecord) {
                        args.data.expanded = true;
                        proxy._$treegridHelper.ejTreeGrid("updateExpandStatus", args.data, true);
                        proxy._refreshChartAndGridRows();
                        proxy._isRefreshAddedRecord = false;
                        return;
                    }
                    ej.TreeGrid.sendExpandCollapseRequest(proxy, args);
                    proxy._isInExpandCollapse = false;

                }
                proxy.updateSelectedItemIndex();
            }
        },

        collapsing: function (args) {
            var proxy = this, model= this.model,
                toolbar = $("#" + proxy._id + "_toolbarItems");
            if (!proxy._trigger("collapsing", args)) {
                if (proxy.model.enableVirtualization) {                    
                    ej.TreeGrid.sendExpandCollapseRequest(proxy,args);
                } else {
                    proxy._isInExpandCollapse = true;
                    //If need refresh chart if record is added after searching or sorting
                    if (proxy._isRefreshAddedRecord) {
                        args.data.expanded = false;
                        proxy._$treegridHelper.ejTreeGrid("updateExpandStatus", args.data, false);
                        proxy._refreshChartAndGridRows();
                        proxy._isRefreshAddedRecord = false;
                        return;
                    }
                    proxy._gridRows = proxy.getRows();
                    ej.TreeGrid.sendExpandCollapseRequest(proxy, args);
                    proxy._isInExpandCollapse = false;
                }
                var selectItem = proxy.selectedItem(), index;
                if (selectItem) {
                    var expanded = proxy.getExpandStatus(selectItem);
                    if (!expanded && !args.expanded) {
                        proxy._deSelectRowItem();
                        if (model.toolbarSettings.showToolbar) {
                            if (proxy.model.toolbarSettings.toolbarItems.indexOf("delete") !== -1) {
                                $(toolbar).ejToolbar('disableItem', $(toolbar).find(".e-deleteitem").parent()[0]);
                                if (proxy.model.toolbarSettings.toolbarItems.indexOf("indent") !== -1)
                                    $(toolbar).ejToolbar('disableItem', $(toolbar).find(".e-indent").parent()[0]);
                                if (proxy.model.toolbarSettings.toolbarItems.indexOf("outdent") !== -1)
                                    $(toolbar).ejToolbar('disableItem', $(toolbar).find(".e-outdent").parent()[0]);
                                if (proxy.model.toolbarSettings.toolbarItems.indexOf("edit") !== -1)
                                    $(toolbar).ejToolbar('disableItem', $(toolbar).find(".e-edititem").parent()[0]);
                            }
                        }
                    }
                    else {
                        proxy.updateSelectedItemIndex();
                    }
                }
            }
        },

        refreshRow: function (args) {
            var proxy = this;
            proxy._$ganttchartHelper.ejGanttChart("refreshRow", args.recordIndex);
        },

        _enableEditingEvents: function () {
            var proxy = this,
                model = proxy.model;
            //To off the  event while changing the editSettings dynamically in setModel
            proxy._off($("#" + proxy._id + "_dialogEdit"),
                    "click keypress", "#EditDialog_" + proxy._id + "_Save ,#EditDialog_" + proxy._id + "_Cancel,#EditDialog_" + proxy._id + "_Delete", proxy._buttonClick);

            proxy._off($("#" + proxy._id + "_dialogAdd"),
               "click keypress", "#AddDialog_" + proxy._id + "_Save ,#AddDialog_" + proxy._id + "_Cancel", proxy._buttonClick);

            if (model.editSettings.allowEditing|| model.editSettings.editMode == "dialogTemplate" ||
                (model.toolbarSettings.showToolbar && ((model.editSettings.allowAdding && model.toolbarSettings.toolbarItems.indexOf("add") !== -1) ||
                    (model.editSettings.allowEditing && model.toolbarSettings.toolbarItems.indexOf("index") !== -1)))) {
                
                proxy._on($("#" + proxy._id + "_dialogEdit"),
                    "click keypress", "#EditDialog_" + proxy._id + "_Save ,#EditDialog_" + proxy._id + "_Cancel,#EditDialog_" + proxy._id + "_Delete", proxy._buttonClick);

                proxy._on($("#" + proxy._id + "_dialogAdd"),
                   "click keypress", "#AddDialog_" + proxy._id + "_Save ,#AddDialog_" + proxy._id + "_Cancel", proxy._buttonClick);
                // $(proxy.element).on("click", ".e-icon", $.proxy(proxy._buttonClick, proxy));
            }
        },
        
        cancelEditCell: function () {

            var proxy = this;
            if ($("#ejTreeGrid" + proxy._id + "EditForm").length > 0)
                proxy._$treegridHelper.ejTreeGrid("cancelEditCell");
        },

        _keyPressed: function (action, target, e) {
        },

        _buttonClick: function (e) {

            if (e.type !="click" && e.keyCode !== undefined && e.keyCode != 13)
                return true;
            
            var proxy = this,   
                model = proxy.model,
                args = {};
            
            if (model.editSettings.allowEditing || model.editSettings.editMode == "dialogTemplate" ||
                (model.toolbarSettings.showToolbar && ((model.editSettings.allowAdding && model.toolbarSettings.toolbarItems.indexOf("add") !== -1) ||
                    (model.editSettings.allowEditing && model.toolbarSettings.toolbarItems.indexOf("index") !== -1)))) {

                if (e.target.id == "EditDialog_" + proxy._id + "_Save") {
                    if (!proxy._sendSaveRequest("Edit")) {
                        proxy._isAddEditDialogSave = true; // used for skip the actionBegin client side event while closing the dialog box
                        $("#" + proxy._id + "_dialogEdit").ejDialog("close");
                    }
                } else if (e.target.id == "EditDialog_" + proxy._id + "_Cancel") {
                    //To revert back automatically updated resource unit while cancel the edit field changes.
                    if (model.selectedItem.resourceInfo)
                        model.selectedItem._updateUnitWithWork(proxy);
                    $("#" + proxy._id + "_dialogEdit").ejDialog("close");
                }
                    //For delete option in editing dialog window
                else if (e.target.id == "EditDialog_" + proxy._id + "_Delete") {
                    var result;
                    if (model.allowSelection == false && !ej.isNullOrUndefined(proxy._contextMenuSelectedIndex)) {
                        result = proxy._$treegridHelper.ejTreeGrid("deleteRow", null, true, proxy._contextMenuSelectedIndex);
                    }else{
                        result = proxy._$treegridHelper.ejTreeGrid("deleteRow");
                    }

                    if (!(result == true)) {
                        proxy._isAddEditDialogSave = true;
                        $("#" + proxy._id + "_dialogEdit").ejDialog("close");
                    }
                }
                else if (e.target.id == "AddDialog_" + proxy._id + "_Save") {
                    if (!proxy._sendSaveRequest("Add"))
                        if (!this._duplicate && !this._wrongenddate) {
                            proxy._isAddEditDialogSave = true; // used for skip the actionBegin client side event while closing the dialog box
                            $("#" + proxy._id + "_dialogAdd").ejDialog("close");                            
                        }
                }
                else if (e.target.id == "AddDialog_" + proxy._id + "_Cancel") {
                  //  proxy._ids.splice(proxy._ids.length - 1, 1);
                    $("#" + proxy._id + "_dialogAdd").ejDialog("close");
                }
            }
            else {
                proxy._sendCancelRequest();
            }

            return false;
        },
        rowDrag: function (args) {
            var proxy = this;
            proxy.model.selectedCellIndexes = [];
            proxy._trigger("rowDrag", args);
        },
        rowDragStart: function (args) {
            var proxy = this;
            proxy._trigger("rowDragStart", args);
        },
        rowDragStop: function (args) {
            var proxy = this;
            proxy._trigger("rowDragStop", args);
        },
        cellSelecting: function (args) {
            var proxy = this, model = proxy.model;
            proxy._trigger("cellSelecting", args);           
        },
        cellSelected: function (args) {
            var proxy = this, model = proxy.model;
            proxy._trigger("cellSelected", args);
            model.selectedCellIndexes = proxy._$treegridHelper.ejTreeGrid("instance").model.selectedCellIndexes;
            proxy._rowIndexOfLastSelectedCell = model.selectedCellIndexes[0].rowIndex;
        },
        //trigger row selecting client side event
        rowSelecting: function (args) {
            var proxy = this, eventArgs = {}, model = this.model;
            if (proxy.model.rowSelecting && model.selectionMode == "row") {
                eventArgs.recordIndex = args.recordIndex;
                eventArgs.previousIndex = args.previousIndex;
                eventArgs.previousData = model.updatedRecords[args.previousIndex];
                eventArgs.data = model.updatedRecords[args.recordIndex];
                eventArgs.previousChartRow = proxy._$ganttchartHelper.ejGanttChart("getRowByIndex", args.previousIndex);
                eventArgs.previousGridRow = ej.TreeGrid.getRowByIndex(this, args.previousIndex);
                eventArgs.targetChartRow = proxy._$ganttchartHelper.ejGanttChart("getRowByIndex", args.recordIndex);
                eventArgs.targetGridRow = ej.TreeGrid.getRowByIndex(this, args.recordIndex);
                if (proxy._trigger("rowSelecting", eventArgs))
                    return false;
            }
            return true;
        },

        rowSelected: function (args) {
            var proxy = this, model = this.model,
                toolbar = $("#" + proxy._id + "_toolbarItems");
            if (model.allowSelection) {
                if (args.target == "ejTreeGrid")
                    proxy._$ganttchartHelper.ejGanttChart("selectRows", args.recordIndex);
                if (args.target == "ejGanttChart")
                    proxy._$treegridHelper.ejTreeGrid("selectRows", args.recordIndex);
            }
            var idx = args.recordIndex;
            this.selectedItem(args.data);
            this.selectedRowIndex(idx);
            if (proxy.model.toolbarSettings.showToolbar && args.requestType!="rowDragAndDrop") {
                if (proxy.model.readOnly == true) {
                    var disableItems = [];
                    disableItems.push($(toolbar).find(".e-deleteitem").parent()[0]);
                    disableItems.push($(toolbar).find(".e-addnewitem").parent()[0]);
                    disableItems.push($(toolbar).find(".e-edititem").parent()[0]);
                    $(toolbar).ejToolbar('disableItem', disableItems);

                }

                else {

                    if ((proxy.model.toolbarSettings.toolbarItems.indexOf("indent") !== -1 || proxy.model.toolbarSettings.toolbarItems.indexOf("outdent") !== -1) && proxy.model.allowSelection) {

                        proxy.updateIndentOutdentOption(args.data);
                    }

                    var enableItems = [];

                    if (proxy.model.editSettings.allowDeleting && proxy.model.allowSelection) {
                        if (proxy.model.toolbarSettings.toolbarItems.indexOf("delete") !== -1)
                            enableItems.push($(toolbar).find(".e-deleteitem").parent()[0]);
                    }
                    if (proxy.model.editSettings.allowAdding) {
                        if (proxy.model.toolbarSettings.toolbarItems.indexOf("add") !== -1)
                            enableItems.push($(toolbar).find(".e-addnewitem").parent()[0]);
                    }
                    if (proxy.model.editSettings.allowEditing && proxy.model.allowSelection && model.editSettings.beginEditAction != "click") {
                        if (proxy.model.toolbarSettings.toolbarItems.indexOf("edit") !== -1)
                            enableItems.push($(toolbar).find(".e-edititem").parent()[0]);
                    }

                    $(toolbar).ejToolbar('enableItem', enableItems);
                }
            }

            var eventArgs = {};
            eventArgs.recordIndex = args.recordIndex;
            data = $.extend({}, model.updatedRecords[args.recordIndex]);
            /* Delete the childRecords and parentItem from data because of avoid circular reference
               while performing postback in ASP.NET */
            delete data.childRecords; 
            delete data.parentItem;
            eventArgs.data = data;
            eventArgs.targetChartRow = proxy._$ganttchartHelper.ejGanttChart("getRowByIndex", args.recordIndex);
            eventArgs.targetGridRow = ej.TreeGrid.getRowByIndex(this, args.recordIndex);
            if (model.allowSelection && model.selectionMode == "row")
                proxy._trigger("rowSelected", eventArgs);
        },

        _treeGridRowHover: function (args) {
            var proxy = this;
            if (args.reason == "mouseenter")
                proxy._$ganttchartHelper.ejGanttChart("addRowHover", args.index);
            else if (args.reason == "mouseleave")
                proxy._$ganttchartHelper.ejGanttChart("removeRowHover");
        },

        updateIndentOutdentOption: function (ganttRecord) {
            var proxy = this,
                flatRecords = proxy.model.flatRecords;

            var recordIndex = flatRecords.indexOf(ganttRecord),
                previousGanttRecord;

            var toolbar = $("#" + proxy._id + "_toolbarItems"),
                indentIconElement = $(toolbar).find(".e-indent").parent()[0],
                outentIconElement = $(toolbar).find(".e-outdent").parent()[0];
            if (recordIndex === 0 || proxy.model.editSettings.allowIndent == false || proxy.model.readOnly == true) {
                if (indentIconElement)
                    $(toolbar).ejToolbar('disableItem', indentIconElement);

                if (outentIconElement)
                    $(toolbar).ejToolbar('disableItem', outentIconElement);
            }
            else {
                if (ganttRecord.level === 0 && proxy.model.editSettings.allowIndent == true) {
                    if (indentIconElement)
                        $(toolbar).ejToolbar('enableItem', indentIconElement);
                    if (outentIconElement)
                        $(toolbar).ejToolbar('disableItem', outentIconElement);
                }
                else {
                    previousGanttRecord = flatRecords[recordIndex - 1];
                    if ((ganttRecord.level - previousGanttRecord.level === 1) && proxy.model.editSettings.allowIndent == true) {
                        if (outentIconElement)
                            $(toolbar).ejToolbar('enableItem', outentIconElement);
                        if (indentIconElement)
                            $(toolbar).ejToolbar('disableItem', indentIconElement);
                    }

                    else if (proxy.model.editSettings.allowIndent == true) {
                        if (indentIconElement)
                            $(toolbar).ejToolbar('enableItem', indentIconElement);
                        if (outentIconElement)
                            $(toolbar).ejToolbar('enableItem', outentIconElement);
                    }
                }
            }
        },

        _ganttChartRowHover: function (args) {
            var proxy = this;
            if (args.reason == "mouseenter")
                proxy._$treegridHelper.ejTreeGrid("addRowHover", args.index);
            else if (args.reason == "mouseleave")
                proxy._$treegridHelper.ejTreeGrid("removeRowHover");
        },
        _removeChildRecordsPredecessor:function(record)
        {
            var proxy = this;
            if (record.hasChildRecords) {
                var length = record.childRecords.length, index = 0;
                for (index; index < length; index++) {
                    record.childRecords[index].predecessor && proxy._removePredecessor(record.childRecords[index].predecessor, record.childRecords[index]);
                    if(record.childRecords[index].hasChildRecords)
                    {
                        proxy._removeChildRecordsPredecessor(record.childRecords[index]);
                    }
                }
            }
        },
        getExpandedRecordCount: function (record, count)
        {
            var currentRecord, proxy = this;
            if (!record.hasChildRecords)
                return 0;
            for (var i = 0; i < record.childRecords.length; i++) {
                currentRecord = record.childRecords[i];
                if (proxy.getExpandStatus(currentRecord))
                    count++;
                
                if (currentRecord.hasChildRecords) {
                    count = proxy.getExpandedRecordCount(currentRecord, count);
                }
            }
            return count;
        },

        _updateExpandStatus:function()
        {
            var proxy = this,
                records = this.model.flatRecords,
            length = records.length, oldValue;
            for (var i = 0; i < length; i++) {
                oldValue = records[i].isExpanded;
                if (proxy.getExpandStatus(records[i]) !== records[i].isExpanded) {
                    records[i].isExpanded = proxy.getExpandStatus(records[i]);
                    if (records[i].isExpanded) {
                        proxy._totalCollapseRecordCount--;
                    }
                    else {
                        proxy._totalCollapseRecordCount++;
                    }
                }
            }
        },
        actionComplete: function (args) {
            var proxy = this,model = proxy.model,
                addedIndex = -1;
            proxy.model.updatedRecords = proxy.getUpdatedRecords();
            proxy.model.currentViewData = proxy.getCurrentViewData();
            proxy._gridRows = proxy.getRows();
            proxy._ganttChartRows = proxy.getGanttChartRows();
            proxy._totalCollapseRecordCount = proxy._$treegridHelper.ejTreeGrid("getCollapsedRecordCount");

            if (args.requestType === "searching" || args.requestType === "sorting") {
                proxy._isRefreshAddedRecord = false;
                proxy._$ganttchartHelper.ejGanttChart("clearConnectorLines");
                proxy._$ganttchartHelper.ejGanttChart("refreshHelper", proxy.model.currentViewData, proxy.model.updatedRecords, proxy._totalCollapseRecordCount);
                proxy._isValidationEnabled = false;
                proxy._connectorlineIds = [];
                proxy._connectorLinesCollection = [];
                proxy._createConnectorLinesCollection();
                if (this.isCriticalPathEnable == true) {
                    proxy._$ganttchartHelper.ejGanttChart("criticalConnectorLine", this.criticalPathCollection, this.detailPredecessorCollection, true, this.collectionTaskId);
                }
            }
            if (args.requestType == "sorting") {
                proxy._deSelectRowItem();
            }

            if (args.requestType === "delete") {
                proxy._isRefreshAddedRecord = false;
                this.dataSource(proxy._$treegridHelper.ejTreeGrid("getDataSource"));
                if (proxy._isDataManagerUpdate)
                    this._jsonData = proxy._$treegridHelper.ejTreeGrid("getUpdatedDataManagerData");
                proxy.model.flatRecords = proxy._$treegridHelper.ejTreeGrid("getFlatRecords");
                proxy.model.ids = proxy._$treegridHelper.ejTreeGrid("getUpdatedIds");
                proxy.model.updatedRecords = proxy.getUpdatedRecords();
                model.selectedItem = null;
                this.selectedRowIndex(-1);
                var childCount = 0,
                    expandedRecordCount=0;
                //Delete from parent collection if item is in parentsCollection
                if (model.parentRecords.indexOf(args.data) !== -1) {
                    model.parentRecords.splice(model.parentRecords.indexOf(args.data), 1);
                }
                //Delete predecessor from child records
                if (args.data.hasChildRecords) {
                    proxy._removeChildRecordsPredecessor(args.data)
                }
                //Delete Predecessor from record
                if (!args.isDragAndDropDelete)
                args.data.predecessor && proxy._removePredecessor(args.data.predecessor, args.data);
                //Update parent item if item has parent
                if (args.data.parentItem)
                {
                    parentRecord=args.data.parentItem;
                    if(args.data.parentItem.childRecords.length>0)
                    {
                        if (args.data.parentItem.isAutoSchedule)
                        proxy._updateParentItem(args.data);
                        else if(!args.data.parentItem.isAutoSchedule)
                            proxy._updateManualParentItem(args.data);
                    }else
                    {
                        parentRecord.expanded=false;
                        parentRecord.hasChildRecords = false;
                        proxy.refreshGanttRecord(parentRecord);
                    }
                }
                // To avoid refresh of gantt chart twice.
                if (args.isDragAndDropDelete)
                    return;
                proxy._isValidationEnabled = false;
                if (proxy.model.predecessorMapping) {
                    proxy._connectorlineIds = [];
                    proxy._connectorLinesCollection = [];
                    proxy._predecessorsCollection = [];
                    proxy._$ganttchartHelper.ejGanttChart("clearConnectorLines");
                    proxy._createConnectorLinesCollection();
                }
                if (this.isCriticalPathEnable == true) {
                    this.showCriticalPath(true, true);
                }
                //Scroller is not correctly updated before connector line cleared.
                proxy._$ganttchartHelper.ejGanttChart("refreshHelper", proxy.getCurrentViewData(), proxy.getUpdatedRecords(), proxy._totalCollapseRecordCount);

                proxy._updateToolbarOptions(); // for uypdating toolbar items after delete operation
                proxy.updateAltRow(proxy.getUpdatedRecords(), 0, 1);//for set e-alt-row style after deletion of element  
                if (this.isCriticalPathEnable == true) {
                    proxy._$ganttchartHelper.ejGanttChart("criticalConnectorLine", this.criticalPathCollection, this.detailPredecessorCollection, true, this.collectionTaskId);
                }
            }

            if (args.requestType === "selection") {
                proxy._$ganttchartHelper.ejGanttChart("selectRows", args.recordIndex);
            }

            if (args.requestType === "rowHover") {
                proxy._$ganttchartHelper.ejGanttChart("addRowHover", args.index);
            }
            
            if (args.requestType === "scroll") {
                
                proxy._$ganttchartHelper.ejGanttChart("onScrollHelper", args.delta);
            }
            if (args.requestType == "dragAndDrop") {
                proxy._isRefreshAddedRecord = false;
                this.dataSource(proxy._$treegridHelper.ejTreeGrid("getDataSource"));
                if (proxy._isDataManagerUpdate)
                    this._jsonData = proxy._$treegridHelper.ejTreeGrid("getUpdatedDataManagerData");
                model.flatRecords = proxy._$treegridHelper.ejTreeGrid("getFlatRecords");
                model.ids = proxy._$treegridHelper.ejTreeGrid("getUpdatedIds");
                model.updatedRecords = proxy.getUpdatedRecords();               
                var parentData = args.draggedRow.parentItem;
                if (args.droppedPosition == "insertAsChild") {
                    parentData.taskType = ej.Gantt.TaskType.FixedDuration;
                    parentData.effortDriven = "false";
                }
                if (model.predecessorMapping) {
                    //Remove predecessor information from parent of dropped record.
                    if (args.droppedPosition == "insertAsChild") {                       
                        parentData.predecessor && proxy._removePredecessor(parentData.predecessor, parentData);
                        parentData.item[model.predecessorMapping] = undefined;
                        parentData.predecessorsName = undefined;
                        parentData.predecessor = undefined;                        
                    }                    
                    proxy._isValidationEnabled = false;
                    proxy._connectorlineIds = [];
                    proxy._connectorLinesCollection = [];
                    proxy._$ganttchartHelper.ejGanttChart("clearConnectorLines");
                    proxy._createConnectorLinesCollection();
                    proxy._isValidationEnabled = true;
                }
                if (args.draggedRow.parentItem && args.draggedRow.parentItem.isAutoSchedule)
                    proxy._updateParentItem(args.draggedRow);
                else if (args.draggedRow.parentItem && !args.draggedRow.parentItem.isAutoSchedule)
                    proxy._updateManualParentItem(args.draggedRow);
                if (this.isCriticalPathEnable == true) {
                    this.showCriticalPath(true, true);
                }
                if (args.draggedRow)
                    proxy._$ganttchartHelper.ejGanttChart("refreshHelper", proxy.getCurrentViewData(), proxy.getUpdatedRecords(), proxy._totalCollapseRecordCount);
                if (this.isCriticalPathEnable == true) {
                    proxy._$ganttchartHelper.ejGanttChart("criticalConnectorLine", this.criticalPathCollection, this.detailPredecessorCollection, true, this.collectionTaskId);
                }
            }
            if (args.requestType === "save") {
                if (args._cAddedRecord) {
                    //Update WBS value while adding through ADD DIALOG
                    if (model.enableWBS && model.enableWBSPredecessor && model.predecessorMapping) {
                        proxy._$treegridHelper.ejTreeGrid("updateWBSPredecessor", args._cAddedRecord);
                    }
                    proxy._renderAddedRow(args.index, args._cAddedRecord);
                   

                    if (args._cAddedRecord.parentItem && args._cAddedRecord.parentItem.isAutoSchedule)
                        proxy._updateParentItem(args._cAddedRecord);
                    else if (args._cAddedRecord.parentItem && !args._cAddedRecord.parentItem.isAutoSchedule)
                        proxy._updateManualParentItem(args._cAddedRecord);

                    ej.TreeGrid.updateAltRow(proxy, model.currentViewData[0], 0, 0);

                    //proxy.updateAltRow(model.updatedRecords[0], 0, 0);

                    /* select newly added item */
                    proxy.selectRows(model.updatedRecords.indexOf(args._cAddedRecord));
                    addedIndex = proxy.selectedRowIndex();

                    /*trigger row events and taskbar event for new record*/
                    if (!model.enableVirtualization) {
                        var refreshArgs = {};
                        refreshArgs.index = refreshArgs.recordIndex = model.currentViewData.indexOf(args._cAddedRecord);
                        proxy.refreshRowData(refreshArgs);
                        proxy.refreshRow(refreshArgs);
                    }
                } else if (args._cModifiedData) {                    

                    if (args._cModifiedData.hasChildRecords && args._cModifiedData.isAutoSchedule) {
                        
                        args._cModifiedData.startDate = proxy._checkStartDate(args._cModifiedData.manualStartDate, args._cModifiedData);                        
                        args._cModifiedData.left = args._cModifiedData._calculateManualLeft(this);
                        args._cModifiedData.width = args._cModifiedData._calculateManualWidth(this);
                        args._cModifiedData.progressWidth = args._cModifiedData._getProgressWidth(args._cModifiedData.width, args._cModifiedData.status);
                        args._cModifiedData.endDate = args._cModifiedData.manualEndDate;
                        args._cModifiedData._calculateDuration(this);                                                
                    }
                    else if (args._cModifiedData.hasChildRecords && !args._cModifiedData.isAutoSchedule) {
                        args._cModifiedData.left = args._cModifiedData._calculateLeft(this);
                        args._cModifiedData.width = args._cModifiedData._calculateWidth(this);
                        args._cModifiedData._calculateDuration(this);
                        args._cModifiedData.manualStartDate = args._cModifiedData.startDate;
                        args._cModifiedData.manualEndDate = args._cModifiedData.endDate;
                        proxy._updateManualParentItem(args._cModifiedData, null, true);
                    }
                    else {
                        args._cModifiedData.startDate = proxy._checkStartDate(args._cModifiedData.startDate, args._cModifiedData);
                        args._cModifiedData.endDate = proxy._getEndDate(args._cModifiedData.startDate, args._cModifiedData.duration,args._cModifiedData.durationUnit, args._cModifiedData);
                        args._cModifiedData.left = args._cModifiedData._calculateLeft(this);
                        args._cModifiedData.width = args._cModifiedData._calculateWidth(this);
                        args._cModifiedData.progressWidth = args._cModifiedData._getProgressWidth(args._cModifiedData.width, args._cModifiedData.status);
                    }
                    //Update WBS value while editing through EDIT DIALOG
                    if (model.enableWBS && model.enableWBSPredecessor && model.predecessorMapping) {
                        proxy._$treegridHelper.ejTreeGrid("updateWBSPredecessor", args._cModifiedData);
                    }

                    proxy.refreshGanttRecord(args._cModifiedData);

                    if (args._cModifiedData.parentItem && args._cModifiedData.parentItem.isAutoSchedule)
                        proxy._updateParentItem(args._cModifiedData);
                    else if (args._cModifiedData.parentItem && !args._cModifiedData.parentItem.isAutoSchedule)
                        proxy._updateManualParentItem(args._cModifiedData);

                    if (args._cModifiedData.predecessor) {
                        if (args.previousValue) {
                            proxy._removeConnectorLine(args.previousValue, args._cModifiedData);
                        }
                    }
                }
                
                if (proxy.model.predecessorMapping) {

                    if ((args._cModifiedData && args._cModifiedData.predecessor)) {
                        proxy._isValidationEnabled = true;
                    }
                    else
                        proxy._isValidationEnabled = false;
                    if (args._cAddedRecord) {
                        if (args._cAddedRecord.predecessor) {
                            proxy._validatePredecessorDates(args._cAddedRecord);
                            proxy._addConnectorLine(args._cAddedRecord);
                        }
                        proxy._$ganttchartHelper.ejGanttChart("clearConnectorLines");
                        proxy._connectorlineIds = [];
                        proxy._connectorLinesCollection = [];
                        proxy._createConnectorLinesCollection();
                    } else {
                        if (args._cModifiedData) {
                            if (args.previousValue) {
                                proxy._removeConnectorLine(args.previousValue, args._cModifiedData);
                            }
                            proxy._addConnectorLine(args._cModifiedData);
                            if (args._cModifiedData.predecessor) {
                                if(proxy._isUpdateOffset)
                                    proxy._editedTaskBarItem = args._cModifiedData;
                                proxy._isMileStoneEdited = args._cModifiedData.isMilestone;
                                proxy._updatedConnectorLineCollection = [];
                                proxy._connectorlineIds = [];
                                proxy._validatePredecessor(args._cModifiedData,args.previousValue);
                                if (proxy._isUpdateOffset)
                                   proxy._editedTaskBarItem = null;
                                if (proxy._updatedConnectorLineCollection.length > 0) {
                                    proxy._$ganttchartHelper.ejGanttChart("appendConnectorLine", proxy._updatedConnectorLineCollection);
                                }
                            }
                            if (args._cModifiedData.parentItem && args._cModifiedData.parentItem.isAutoSchedule)
                                proxy._updateParentItem(args._cModifiedData);
                            else if(args._cModifiedData.parentItem && !args._cModifiedData.parentItem.isAutoSchedule)
                                proxy._updateManualParentItem(args._cModifiedData);
                        }
                    }
                }
                if (this.isCriticalPathEnable == true) {
                    proxy._$ganttchartHelper.ejGanttChart("criticalConnectorLine", this.criticalPathCollection, this.detailPredecessorCollection, false, this.collectionTaskId);
                    this.showCriticalPath(true);
                }
            }

            if (args.requestType === "validatePredecessor") {
                var result = proxy._editedPredecessorValidation(args);
                args.result = result;
                return;
            }
            proxy._ganttActionCompleteTrigger(args);
            // Update the scrollbar for focus the newly added record
            if (addedIndex >= 0) {
                proxy.focusOnTask(addedIndex);
            }
        },

        /*Update the scrollbar to focus the selected task item by it's index*/
        focusOnTask: function (index) {
            var proxy = this, model = proxy.model,
                ganttbody = proxy.element.find(".e-ganttviewerbodyContianer"),
                scroller = ganttbody.ejScroller("instance"),
                taskbarLeft = model.updatedRecords[index].left,
                width = scroller.model.width,
                scrollLeft = scroller.model.scrollLeft,
                hScrollbar = scroller._hScrollbar;
            if (hScrollbar) {
                if (hScrollbar.model.maximum < scrollLeft)
                    scrollLeft = hScrollbar.model.maximum;
                if (scrollLeft > taskbarLeft || (scrollLeft + width) < taskbarLeft) {
                    var left = taskbarLeft - (width / 2);
                    left = left < 0 ? 0 : left;
                    ganttbody.ejScroller("scrollX", left, true);
                }
            }
            proxy._$ganttchartHelper.ejGanttChart("updateScrollBar");
        },
        calculateEndDate: function (args) {
            var proxy = this;
            var endDate = this._getEndDate(proxy._checkStartDate(args.startDate, args.record),
                args.duration, args.durationUnit, args.record);
            proxy._$ganttchartHelper.ejGanttChart("updateEditedRecordEndDate", proxy._checkEndDate(endDate, args.record));
        },

        calculateDuration: function (args) {
            var proxy = this;
            var duration = this._getDuration(proxy._checkStartDate(args.startDate, args.record),
                           proxy._checkEndDate(args.endDate, args.record), args.durationUnit, args.isAutoSchedule);
            proxy._$ganttchartHelper.ejGanttChart("updateEditedRecordDuration", duration);
        },
        expandAllCollapseAllRequest:function(args)
        {
            var proxy = this,
                $gridEle = $(proxy.element),//.closest(".e-gantt"),
                gridInstance = $gridEle.ejGantt("instance"),
                gridId = $gridEle.attr('id');
                gridInstance._toolbarOperation(gridId + "_" + args.requestType);
        },

        chartactionComplete: function (args) {
            var proxy = this;

            proxy.model.updatedRecords = proxy.getUpdatedRecords();
            proxy.model.currentViewData = proxy.getCurrentViewData();

            if (args.requestType === "updateConnectors") {
                if (proxy.model.predecessorMapping) {
                    var ganttRecord = args.ganttRecord;
                    proxy._isMileStoneEdited = ganttRecord.isMilestone;
                    proxy._updatedConnectorLineCollection = [];
                    proxy._connectorlineIds = [];
                    proxy._editedTaskBarItem = ganttRecord;
                    proxy._validatePredecessor(ganttRecord);
                    if (proxy._updatedConnectorLineCollection.length > 0)
                        proxy._$ganttchartHelper.ejGanttChart("appendConnectorLine", proxy._updatedConnectorLineCollection);
                    proxy._editedTaskBarItem = null;
                }
            }

            if (args.requestType === "rowHover") {
                proxy._$treegridHelper.ejTreeGrid('addRowHover', args.index);
            }
            
            if (args.requestType === "scroll") {

                proxy._isTreeGridRendered = false;
                proxy._isGanttChartRendered = false;
                if (args.vscrollExsist && args.delta !== undefined)
                    proxy._$treegridHelper.ejTreeGrid('onScrollHelper', args.delta);

                proxy.model.updatedRecords = proxy.getUpdatedRecords();
                proxy.model.currentViewData = proxy.getCurrentViewData();

                if (proxy.model.enableVirtualization) {

                    if (proxy.model.predecessorMapping) {

                        if (proxy._connectorLinesCollection.length > 0) {
                            proxy._$ganttchartHelper.ejGanttChart("clearConnectorLines");
                        }
                        proxy._isValidationEnabled = false;
                        proxy._connectorlineIds = [];
                        proxy._connectorLinesCollection = [];
                        proxy._createConnectorLinesCollection();
                    }
                }
                proxy._isTreeGridRendered = true;
                proxy._isGanttChartRendered = true;
            }
            
            if (args.requestType === "selection") {
                proxy._$treegridHelper.ejTreeGrid("selectRows", args.recordIndex);
            }
            //for validate the predecessor on mouse hover and mouse up of second drag point
            if (args.requestType === "validatePredecessor") {
                var flag= proxy._editedPredecessorValidation(args);
                args.predecessorValidation = flag;
            }

            //on mouse up if validation is true then draw connector line
            if (args.requestType === "drawConnectorLine") {

                var currentPredecessor = args.toItem._calculatePredecessor(args.predecessor, this._durationUnitEditText, this.model.durationUnit);
                args.toItem.item[proxy.model.predecessorMapping] = args.predecessorString[0];
                args.toItem.predecessorsName = args.toItem.item[proxy.model.predecessorMapping];
                //Update WBS value while drawing the predecessor links
                if (model.enableWBS && model.enableWBSPredecessor) {
                    proxy._$treegridHelper.ejTreeGrid("updateWBSPredecessor", args.toItem);
                }
                if (!args.fromItem.predecessor) {// for parent item
                    args.fromItem['predecessor'] = currentPredecessor;
                }
                else {
                    args.fromItem.predecessor.push(currentPredecessor[0]);
                }
                if (args.toItem.predecessor)
                {
                    args.toItem.predecessor.push(currentPredecessor[0]);
                }
                else
                {
                    args.toItem.predecessor=[];
                    args.toItem.predecessor.push(currentPredecessor[0]);
                }

                proxy._isMileStoneEdited = args.toItem.isMilestone;
                proxy._updatedConnectorLineCollection = [];
                proxy._connectorlineIds = [];
                if (args.toItem.isAutoSchedule || proxy.model.validateManualTasksOnLinking)
                    proxy._isValidationEnabled = true;
                else
                    proxy._isValidationEnabled = false;
                proxy._validatePredecessor(args.toItem);
                if (proxy._updatedConnectorLineCollection.length > 0) {
                    proxy._$ganttchartHelper.ejGanttChart("appendConnectorLine", proxy._updatedConnectorLineCollection);
                }
                //Update predecessor cell value in treegrid while drawing a new connector line to/from manual task.
                if (!args.toItem.isAutoSchedule && !proxy.model.validateManualTasksOnLinking) {
                    var treegridObject = proxy._$treegridHelper.ejTreeGrid("instance");
                    ej.TreeGrid.refreshRow(treegridObject, proxy.model.currentViewData.indexOf(args.toItem));
                }
                /*update schedule dates on predecessor editing */
                var checkArgs = {};
                checkArgs.data = args.toItem;
                proxy._updateScheduleDatesOnEditing(checkArgs);
                if (this.isCriticalPathEnable == true) {
                    proxy._$ganttchartHelper.ejGanttChart("criticalConnectorLine", this.criticalPathCollection, this.detailPredecessorCollection, false, this.collectionTaskId);
                    this.showCriticalPath(true);
                }
        }
            proxy._ganttActionCompleteTrigger(args);
        },

        //Public method for hidding column using header text
        // argument headerText is header text of the column

        
        hideColumn:function(headerText)
        {
            var proxy = this;
            proxy._$treegridHelper.ejTreeGrid("hideColumn",headerText);
        },

		//Public method for showing column using header text
        // argument headerText is header text of the column

        
        showColumn: function (headerText) {
            var proxy = this;
            proxy._$treegridHelper.ejTreeGrid("showColumn", headerText);
        },
		 // public method for accessing tree grid clearColumnMenu method
        clearColumnMenu:function()
        {
            var proxy = this;
            proxy._$treegridHelper.ejTreeGrid("clearColumnMenu");
        },
        // public method for deleting row
        deleteRow: function () {
            var proxy = this;
            proxy._$treegridHelper.ejTreeGrid("deleteRow");
        },
        taskbarEditing: function (args) {
            
            this._trigger("taskbarEditing", args);
        },
        // public method for accessing _setInitialData Private method.
        setInitialData: function () {
            this._setInitialData();
        },

        sortColumn: function (columnName, columnSortDirection) {
            var proxy = this;
            proxy._$treegridHelper.ejTreeGrid("sortColumn", columnName, columnSortDirection);
        },

        clearSorting: function()
        {
            var proxy = this,
                model = proxy.model;
            proxy._$treegridHelper.ejTreeGrid("clearSorting");
        },

        "export": function (action, serverEvent, multipleExport) {
            var proxy = this, model=proxy.model;
            //proxy.model.isFromGantt = proxy._isFromGantt;
            //proxy._$treegridHelper.ejTreeGrid("export", action, serverEvent, multipleExport, proxy);
            var attr = { action: action, method: 'post', "data-ajax": "false" };
            $('form#' + proxy._id + 'export').remove();
            var form = ej.buildTag('form#' + proxy._id + 'export', "", null, attr);
            var ignoreOnExport = proxy.ignoreOnExport,
                   igonreLength = ignoreOnExport.length;
            if (!multipleExport) {
                var updatedRecords = model.updatedRecords,
                       currentViewData = model.currentViewData,
                       flatRecords = model.flatRecords,
                       parentRecords = model.parentRecords,
                       selectedItem = model.selectedItem,
                       selectedItems = model.selectedItems,
                       workUnit = model.workUnit;
                proxy._$treegridHelper.ejTreeGrid("contextMenuOperations", "Cancel");
                //proxy._contextMenuOperations("Cancel"); // Cancel the edit row or empty newly added row.
                // Delete the below internal items in model for avoid the circular reference while extend the model
                delete model.updatedRecords;
                delete model.currentViewData;
                delete model.flatRecords;
                delete model.parentRecords;
                delete model.selectedItem;
                delete model.selectedItems;
                delete model.workUnit;
                var modelClone = $.extend(true, {}, model);
                model.updatedRecords = updatedRecords;
                model.currentViewData = currentViewData;
                model.flatRecords = flatRecords;
                model.parentRecords = parentRecords;
                model.selectedItem = selectedItem;
                model.selectedItems = selectedItems;
                model.workUnit = workUnit;
                var columns = modelClone.columns,
                    columnLength = columns.length;
                for (var i = 0; i < columnLength; i++) {
                    if (modelClone.columns[i].editType != undefined) {
                        switch (columns[i].editType) {
                            case "stringedit":
                                columns[i].editType = "string";
                                break;
                            case "numericedit":
                                columns[i].editType = "numeric";
                                break;
                            case "dropdownedit":
                                columns[i].editType = "dropdown";
                                break;
                            case "booleanedit":
                                columns[i].editType = "boolean";
                                break;
                            default:
                                break;
                        }
                    }
                }              
               
                if (this.ignoreOnExport) {
                    for (var i = 0; i < igonreLength; i++) {
                        delete modelClone[ignoreOnExport[i]];
                    }
                }
            }
            if (ej.raiseWebFormsServerEvents) {
                var args = { model: modelClone, originalEventType: serverEvent };
                var clientArgs = { model: JSON.stringify(modelClone) };
                ej.raiseWebFormsServerEvents(serverEvent, args, clientArgs);
            }
            else {
                var ganttObjectArray = {};
                if (multipleExport) {
                    $('body').find('.e-gantt').each(function (index, object) {
                        var ganttObject = $(object).data('ejGantt');
                        if (!ej.isNullOrUndefined(ganttObject)) {
                            var gridmodel = ganttObject.model;
                            updatedRecords = gridmodel.updatedRecords;
                            flatRecords = gridmodel.flatRecords;
                            currentViewData = gridmodel.currentViewData;
                            parentRecords = gridmodel.parentRecords;
                            selectedItem = gridmodel.selectedItem;
                            selectedItems = gridmodel.selectedItems;
                            workUnit = model.workUnit;
                            // Delete the below internal items in model for avoid the circular reference while extend the model
                            delete gridmodel.updatedRecords;
                            delete gridmodel.flatRecords;
                            delete gridmodel.currentViewData;
                            delete gridmodel.parentRecords;
                            delete gridmodel.selectedItem;
                            delete gridmodel.selectedItems;
                            delete gridmodel.workUnit;
                            var modelClone = JSON.parse(JSON.stringify(gridmodel));
                            gridmodel.updatedRecords = updatedRecords;
                            gridmodel.flatRecords = flatRecords;
                            gridmodel.currentViewData = currentViewData;
                            gridmodel.parentRecords = parentRecords;
                            gridmodel.selectedItem = selectedItem;
                            gridmodel.selectedItems = selectedItems;
                            gridmodel.workUnit = workUnit;
                            columns = modelClone.columns;
                            columnLength = columns.length;
                            for (var i = 0; i < columnLength; i++) {
                                if (columns[i].editType != undefined) {
                                    switch (columns[i].editType) {
                                        case "stringedit":
                                            columns[i].editType = "string";
                                            break;
                                        case "numericedit":
                                            columns[i].editType = "numeric";
                                            break;
                                        case "dropdownedit":
                                            columns[i].editType = "dropdown";
                                            break;
                                        case "booleanedit":
                                            columns[i].editType = "boolean";
                                            break;
                                        default:
                                            break;
                                    }
                                }
                            }
                            if (ignoreOnExport) {
                                for (var i = 0; i < igonreLength; i++) {
                                    delete modelClone[ignoreOnExport[i]];
                                }
                                ganttObjectArray[index] = JSON.stringify(modelClone);
                                var inputAttr = { name: 'GanttModel', type: 'hidden', value: JSON.stringify(modelClone) }
                                var input = ej.buildTag('input', "", null, inputAttr);
                                form.append(input);
                            }
                        }
                    });
                }
                else {
                    var inputAttr = { name: 'GanttModel', type: 'hidden', value: JSON.stringify(modelClone) }
                    var input = ej.buildTag('input', "", null, inputAttr);
                    form.append(input);
                    form.append(this);
                }
                $('body').append(form);
                form.submit();
            }
            return true;
        },


        _refreshParent: function (item) {
            this.refreshGanttRecord(item);
            if (item.parentItem) {
                this._refreshParent(item.parentItem);
            }
        },

        taskbarEdited: function (args) {
            var proxy = this,
                ganttRecord = args.data, model = proxy.model,
                projectStartDate = new Date(proxy._projectStartDate),
                remainDays, remainDaysInDecimal,
                day, perDayHourUnit,
                headerType = model.scheduleHeaderSettings.scheduleHeaderType,
                headerValue = ej.Gantt.ScheduleHeaderType,
                durationUnitValue = ej.Gantt.DurationUnit,
                offset = 0;
            
            proxy._isValidationEnabled = false;
            
            if (args.dragging) {
                var editMode = "dragging";
                if (args.previousData.left !== ganttRecord.left) {
                    remainDays = ganttRecord.left % proxy._perDayWidth;
                    day = (ganttRecord.left - remainDays) / proxy._perDayWidth;
                    remainDaysInDecimal = remainDays / proxy._perDayWidth;
                    /*Rounding the decimal value for week-month-year schedule mode*/
                    if (headerType == headerValue.Week || headerType == headerValue.Month || headerType == headerValue.Year) {
                        if (remainDaysInDecimal <= 0.25) {
                            remainDaysInDecimal = 0;
                            ganttRecord.left = ganttRecord.left - remainDays;
                        }
                        else if (remainDaysInDecimal > 0.25 && remainDaysInDecimal <= 0.75) {
                            remainDaysInDecimal = 0.5;
                            var newRemainDays = remainDaysInDecimal * proxy._perDayWidth;
                            ganttRecord.left = ganttRecord.left - remainDays + newRemainDays;
                        }
                        else if (remainDaysInDecimal > 0.75) {
                            day += 1;
                            remainDaysInDecimal = 0;
                            ganttRecord.left = ganttRecord.left - remainDays + proxy._perDayWidth;
                        }
                    }
                    if (headerType == headerValue.Day || headerType == headerValue.Hour)
                        perDayHourUnit = 24;
                    else
                        perDayHourUnit = proxy._secondsPerDay / 3600;
                    /*Calculating the day decimal values in to hours and then minutes*/
                    if (perDayHourUnit && remainDaysInDecimal > 0) {
                        var perHourDecimalWidth = 1 / perDayHourUnit,
                            decimalWidthInHours = remainDaysInDecimal / perHourDecimalWidth,
                            inMinutes = Math.round(decimalWidthInHours * 60);
                    }
                    projectStartDate = ganttRecord._startDateUpdate(projectStartDate, day, inMinutes, proxy._workingTimeRanges, headerType);
                    ganttRecord.startDate = proxy._checkStartDate(projectStartDate, ganttRecord);
                    if (model.startDateMapping)
                        ganttRecord.item[model.startDateMapping] = ganttRecord.startDate;
                    ganttRecord._calculateEndDate(this);
                    ganttRecord.left = ganttRecord._calculateLeft(this);
                    ganttRecord.width = ganttRecord._calculateWidth(this);
                    if (!ganttRecord.hasChildRecords)
                        ganttRecord.progressWidth = ganttRecord._getProgressWidth(ganttRecord.width, ganttRecord.status);
                    proxy._isValidationEnabled = true;
                }

            } else if (args.rightResizing) {
                var editMode = "Resizing";
                if (args.previousData.width !== ganttRecord.width) {

                    if (headerType == headerValue.Day || headerType == headerValue.Hour) {
                        var tempStartDate = new Date(ganttRecord.startDate),
                                                         tempNewStartDate = new Date(ganttRecord.startDate), timeDiff, taskTempWidth;
                        tempNewStartDate.setHours(0, 0, 0, 0);
                        timeDiff = tempStartDate.getTime() - tempNewStartDate.getTime();
                        if (timeDiff > 0)
                            taskTempWidth = ganttRecord.width + ((timeDiff / (1000 * 60 * 60 * 24)) * proxy._perDayWidth);
                        else
                            taskTempWidth = ganttRecord.width;
                        remainDays = taskTempWidth % proxy._perDayWidth;
                        day = (taskTempWidth - remainDays) / proxy._perDayWidth;
                        perDayHourUnit = 24;
                    }
                    else {
                        remainDays = ganttRecord.width % proxy._perDayWidth,
                        day = (ganttRecord.width - remainDays) / proxy._perDayWidth;
                        perDayHourUnit = proxy._secondsPerDay / 3600;
                    }
                    remainDaysInDecimal = remainDays / proxy._perDayWidth,
                    startDate = proxy._getDateFromFormat(ganttRecord.startDate);
                    /*Rounding the decimal value for week-month-year schedule mode*/
                    if (headerType == headerValue.Week || headerType == headerValue.Month || headerType == headerValue.Year) {
                        if (remainDaysInDecimal <= 0.25) {
                            remainDaysInDecimal = 0;
                            ganttRecord.width = ganttRecord.width - remainDays;
                        }
                        else if (remainDaysInDecimal > 0.25 && remainDaysInDecimal <= 0.75) {
                            remainDaysInDecimal = 0.5;
                            var newRemainDays = remainDaysInDecimal * proxy._perDayWidth;
                            ganttRecord.width = ganttRecord.width - remainDays + newRemainDays;
                        }
                        else if (remainDaysInDecimal > 0.75) {
                            day += 1;
                            remainDaysInDecimal = 0;
                            ganttRecord.width = ganttRecord.width - remainDays + proxy._perDayWidth;
                        }
                    }
                    /*Calculating the remaining day decimal values in to hours and then minutes*/
                    if (perDayHourUnit && remainDaysInDecimal > 0) {
                        var perHourDecimalWidth = 1 / perDayHourUnit,
                            decimalWidthInHours = remainDaysInDecimal / perHourDecimalWidth,
                            inMinutes = Math.round(decimalWidthInHours * 60);
                    }
                    endDate = ganttRecord._endDateUpdate(startDate, day - 1, inMinutes, proxy._workingTimeRanges, headerType);
                    ganttRecord.endDate = proxy._checkEndDate(endDate, ganttRecord);
                    
                    if (model.endDateMapping)
                        ganttRecord.item[model.endDateMapping] = ganttRecord.endDate;
                    ganttRecord._calculateDuration(this);
                    ganttRecord.width = ganttRecord._calculateWidth(this);

                    if (!ganttRecord.hasChildRecords)
                        ganttRecord.progressWidth = ganttRecord._getProgressWidth(ganttRecord.width, ganttRecord.status);
                    proxy._updatedColumn = "duration";
                    proxy._updateResourceRelatedFields(ganttRecord);                    
                }

            } else if (args.leftResizing) {
                var editMode = "Resizing";
                if (args.previousData.left !== ganttRecord.left) {                    
                    remainDays = ganttRecord.left % proxy._perDayWidth;
                    day = (ganttRecord.left - remainDays) / proxy._perDayWidth;
                    remainDaysInDecimal = remainDays / proxy._perDayWidth;
                    /*Rounding the decimal value for week-month-year schedule mode*/
                    if (headerType == headerValue.Week || headerType == headerValue.Month || headerType == headerValue.Year) {
                        if (remainDaysInDecimal <= 0.25) {
                            remainDaysInDecimal = 0;
                            ganttRecord.left = ganttRecord.left - remainDays;
                        }

                        else if (remainDaysInDecimal > 0.25 && remainDaysInDecimal <= 0.75) {
                            remainDaysInDecimal = 0.5;
                            var newRemainDays = remainDaysInDecimal * proxy._perDayWidth;
                            ganttRecord.left = ganttRecord.left - remainDays + newRemainDays;
                        }
                        else if (remainDaysInDecimal > 0.75) {
                            day += 1;
                            remainDaysInDecimal = 0;
                            ganttRecord.left = ganttRecord.left - remainDays + proxy._perDayWidth;
                        }
                    }
                    if (headerType == headerValue.Day || headerType == headerValue.Hour)
                        perDayHourUnit = 24;
                    else
                        perDayHourUnit = proxy._secondsPerDay / 3600;
                    /*Calculating the day decimal values in to hours and then minutes*/
                    if (perDayHourUnit && remainDaysInDecimal > 0) {
                        var perHourDecimalWidth = 1 / perDayHourUnit,
                            decimalWidthInHours = remainDaysInDecimal / perHourDecimalWidth,
                            inMinutes = Math.round(decimalWidthInHours * 60);
                    }
                    projectStartDate = ganttRecord._startDateUpdate(projectStartDate, day, inMinutes, proxy._workingTimeRanges, headerType);
                    ganttRecord.startDate = proxy._checkStartDate(projectStartDate, ganttRecord);
                    if (model.startDateMapping)
                        ganttRecord.item[model.startDateMapping] = ganttRecord.startDate;
                    ganttRecord.endDate = proxy._checkEndDate(ganttRecord.endDate, ganttRecord);
                    if (ganttRecord.isAutoSchedule && model.includeWeekend == false && (headerType == headerValue.Hour || headerType == headerValue.Day))
                        ganttRecord._calculateEndDate(this);
                    ganttRecord._calculateDuration(this);
                    ganttRecord.left = ganttRecord._calculateLeft(this);
                    ganttRecord.width = ganttRecord._calculateWidth(this);
                    if (!ganttRecord.hasChildRecords)
                        ganttRecord.progressWidth = ganttRecord._getProgressWidth(ganttRecord.width, ganttRecord.status);                    
                    proxy._updatedColumn = "duration";
                    proxy._updateResourceRelatedFields(ganttRecord);
                }
            } 
            if (args.progressResizing) {
                if (args.previousData.status != args.data.status) {
                    ganttRecord.status = ganttRecord._getProgressPercent(ganttRecord.width, ganttRecord.progressWidth);
                    if (ganttRecord.parentItem) {
                        ganttRecord._updateParentProgress(ganttRecord.parentItem, model.progressMapping);
                    }
                    proxy._refreshParent(ganttRecord);
                }                
            }
            else {
                proxy._isValidationEnabled = true;
                proxy._updateEditedGanttRecord(ganttRecord);
                if (ganttRecord.predecessor) {
                    proxy._isMileStoneEdited = ganttRecord.isMilestone;
                    proxy._updatedConnectorLineCollection = [];
                    proxy._connectorlineIds = [];
                    proxy._editedTaskBarItem = ganttRecord;
                    if (model.enablePredecessorValidation)
                        proxy._validatePredecessor(ganttRecord);
                    else
                        proxy._validatePredecessorOnEditing(ganttRecord);

                    if (proxy._updatedConnectorLineCollection.length > 0) {
                        proxy._$ganttchartHelper.ejGanttChart("appendConnectorLine", proxy._updatedConnectorLineCollection);
                    }
                }
                proxy._editedTaskBarItem = null;

                if (!ganttRecord.isAutoSchedule) {
                    if (ganttRecord.hasChildRecords && !args.isChildren && !args.rightResizing) {
                        proxy._validateAutoChildRecords(args);
                    }
                }
                if (ganttRecord.parentItem && ganttRecord.parentItem.isAutoSchedule)
                    proxy._updateParentItem(ganttRecord, editMode);
                else if (ganttRecord.parentItem && !ganttRecord.parentItem.isAutoSchedule)
                    proxy._updateManualParentItem(ganttRecord, editMode);                
            }
            proxy.refreshGanttRecord(ganttRecord);
            proxy._trigger("taskbarEdited", args);
            if (!args.cancel && (args.leftResizing || args.rightResizing || args.dragging) && proxy._isValidationEnabled) {
                proxy._updateScheduleDatesOnEditing(args);
            }
            if (this.isCriticalPathEnable == true) {
                proxy._$ganttchartHelper.ejGanttChart("criticalConnectorLine", this.criticalPathCollection, this.detailPredecessorCollection, false, this.collectionTaskId);
                this.showCriticalPath(true);
            }
        },

        _validatePredecessorOnEditing: function (ganttRecord, manualOffsetEditing) {
            var proxy = this,
                model = proxy.model,
                currentTaskId = ganttRecord['taskId'].toString(),
                model = this.model,
                predecessorsCollection = ganttRecord['predecessor'],
                flatRecords = model.flatRecords,
                ids = model.ids,
                previousValue = null,
                predecessors = predecessorsCollection.filter(function (data) { return data.to === currentTaskId }),
                successors = predecessorsCollection.filter(function (data) { return data.from === currentTaskId }),
                predecessorLength = predecessors.length;

            for (count = 0; count < predecessorLength; count++) {
                predecessor = predecessors[count];
                isOffsetChanged = proxy._isOffsetChange(predecessor, previousValue, count);
                parentGanttRecord = flatRecords[ids.indexOf(predecessor.from)];//THis is going to exception when id is not corrct order
                record = flatRecords[ids.indexOf(predecessor.to)];
                if (manualOffsetEditing) {
                    proxy._validateChildGanttRecord(parentGanttRecord, record, predecessor, model.enablePredecessorValidation, isOffsetChanged);
                    manualOffsetEditing = false;
                }
                connectorLineId = "parent" + parentGanttRecord['taskId'] + "child" + record['taskId'];
                if (proxy._$ganttchartHelper)
                    proxy._$ganttchartHelper.ejGanttChart("removeConnectorline", connectorLineId);
            }
            for (count = 0; count < predecessorLength; count++) {
                predecessor = predecessors[count];
                parentGanttRecord = flatRecords[ids.indexOf(predecessor.from)];//THis is going to exception when id is not corrct order
                record = flatRecords[ids.indexOf(predecessor.to)];

                if ((model.enableVirtualization === false && (parentGanttRecord.isExpanded === false || record.isExpanded == false)))//(model.enableVirtualization === false && !parentGanttRecord.isExpanded && record.isExpanded === false)
                    continue;
                connectorLineObject = proxy._createConnectorLineObject(parentGanttRecord, record, predecessor);
                if (connectorLineObject) {
                    if (proxy._connectorlineIds.length > 0 && proxy._connectorlineIds.indexOf(connectorLineObject.ConnectorLineId) == -1) {

                        proxy._updatedConnectorLineCollection.push(connectorLineObject);
                        proxy._connectorlineIds.push(connectorLineObject.ConnectorLineId);
                    }
                    else if (proxy._connectorlineIds.length == 0) {
                        proxy._updatedConnectorLineCollection.push(connectorLineObject);
                        proxy._connectorlineIds.push(connectorLineObject.ConnectorLineId);
                    }
                    else if (proxy._connectorlineIds.indexOf(connectorLineObject.ConnectorLineId) != -1) {
                        var index = proxy._connectorlineIds.indexOf(connectorLineObject.ConnectorLineId);
                        proxy._updatedConnectorLineCollection[index] = connectorLineObject;
                    }
                }

            }

            var length = successors.length;

            for (count = 0; count < length; count++) {

                predecessor = successors[count];
                parentGanttRecord = flatRecords[ids.indexOf(predecessor.from)];
                record = flatRecords[ids.indexOf(predecessor.to)];
                connectorLineId = "parent" + parentGanttRecord['taskId'] + "child" + record['taskId'];
                isOffsetChanged = proxy._isOffsetChange(predecessor, previousValue, count);
                if (proxy._$ganttchartHelper)
                    proxy._$ganttchartHelper.ejGanttChart("removeConnectorline", connectorLineId);
                if (manualOffsetEditing) {
                    proxy._validateChildGanttRecord(parentGanttRecord, record, predecessor, model.enablePredecessorValidation, isOffsetChanged);
                    manualOffsetEditing = false;
                }
                if ((model.enableVirtualization === false && (parentGanttRecord.isExpanded === false || record.isExpanded == false)))
                    continue;
                connectorLineObject = proxy._createConnectorLineObject(parentGanttRecord, record, predecessor);
                if (connectorLineObject) {
                    if (proxy._connectorlineIds.length > 0 && proxy._connectorlineIds.indexOf(connectorLineObject.ConnectorLineId) == -1) {

                        proxy._updatedConnectorLineCollection.push(connectorLineObject);
                        proxy._connectorlineIds.push(connectorLineObject.ConnectorLineId);
                    }
                    else if (proxy._connectorlineIds.length == 0) {
                        proxy._updatedConnectorLineCollection.push(connectorLineObject);
                        proxy._connectorlineIds.push(connectorLineObject.ConnectorLineId);
                    }
                    else if (proxy._connectorlineIds.indexOf(connectorLineObject.ConnectorLineId) != -1) {
                        var index = proxy._connectorlineIds.indexOf(connectorLineObject.ConnectorLineId);
                        proxy._updatedConnectorLineCollection[index] = connectorLineObject;
                    }
                }

            }
        },

        _validateAutoChildRecords: function (args) {
            var proxy = this,
                item = args.data,
                prevItem = args.previousData,
                childItem = item.childRecords,
                arg = {},
                diffLeft = item.left - prevItem.left;
            for (var i = 0; i < childItem.length; i++) {

                if (childItem[i].isAutoSchedule && !childItem[i].hasChildRecords) {
                    arg.previousData = $.extend({}, childItem[i]);
                    childItem[i].left += diffLeft;
                    arg.data = childItem[i];
                    arg.dragging = true;
                    args.isChildren = true;
                    proxy.taskbarEdited(arg);
                }
            }
        },

        actionBegin: function (args) {

            var proxy = this;

            if (!proxy._trigger("actionBegin", args)) {

                if (args.requestType === "beginedit") {
                    proxy._sendEditRequest();
                }   
                
            }

        },

        _ganttActionCompleteTrigger: function (args) {
            this._trigger("actionComplete", args);
            if (!args.cancel && args.requestType === 'save') {
                if (args._cModifiedData) {
                    args.data = args._cModifiedData;
                }
                if (args._cAddedRecord) {
                    args.data = args._cAddedRecord;
                }
                this._updateScheduleDatesOnEditing(args);
            }
        },

        _queryCellInfo: function (args) {
            this._trigger("queryCellInfo", args);
        },

        _beginEdit: function (args) {
            var proxy = this,
                toolbar = $("#" + proxy._id + "_toolbarItems");
            if (!proxy._trigger("beginEdit", args)) {
                proxy._isinBeginEdit = true;
                if (proxy.model.toolbarSettings.showToolbar) {

                    var toolBarEnabledItems = [];

                    var cancelElement = $(toolbar).find(".e-cancel").parent()[0];
                    var saeveElement = $(toolbar).find(".e-saveitem").parent()[0];

                    if (cancelElement) {
                        toolBarEnabledItems.push(cancelElement);
                    }

                    if (saeveElement) {
                        toolBarEnabledItems.push(saeveElement);
                    }

                    $(toolbar).ejToolbar('enableItem', toolBarEnabledItems);
                    var disableToolItems = [];
                    if (proxy.model.editSettings.allowAdding && proxy.model.toolbarSettings.toolbarItems.indexOf("add") !== -1)
                        disableToolItems.push($(toolbar).find(".e-addnewitem").parent()[0]);
                    if (proxy.model.editSettings.allowEditing && proxy.model.toolbarSettings.toolbarItems.indexOf("edit") !== -1)
                        disableToolItems.push($(toolbar).find(".e-edititem").parent()[0]);
                    if (proxy.model.editSettings.allowDeleting && proxy.model.toolbarSettings.toolbarItems.indexOf("delete") !== -1)
                        disableToolItems.push($(toolbar).find(".e-deleteitem").parent()[0]);
                    $(toolbar).ejToolbar('disableItem', disableToolItems);
                }
            }
        },

        _endEdit: function (args) {
            var proxy = this,model=this.model;
            var toolbar = $("#" + proxy._id + "_toolbarItems");

            if (proxy._trigger("endEdit", args)) {
                var predecessorString = "";
                args.data[args.columnName] = args.previousValue;
                if (args.columnName === "predecessor") {
                    predecessorString = proxy._predecessorToString(args.data.predecessor, args.data);
                    args.data.item[args.columnObject.mappingName] = predecessorString;
                    args.data.predecessorsName = predecessorString;
                } else {
                    args.data.item[args.columnObject.mappingName] = args.previousValue;
                    if (args.columnName === "resourceInfo") {
                        proxy._updateResourceName(args.data);
                        proxy._updateResourceRelatedFields(args.data);
                    }
                }
            }
            else {
                proxy._updatedColumn = args.columnName;
                //Effort driven is always true for fixedWork type of calculation.
                if (args.columnName == "taskType" && args.value == "fixedWork")
                    args.data.effortDriven = "true";
                if (args.columnName === "duration" || args.columnName == "work")
                    proxy._updateResourceRelatedFields(args.data);

                if (args.columnName === "resourceInfo") {
                    proxy._updateResourceName(args.data);
                    proxy._updateResourceRelatedFields(args.data);
                    //update parent item while child works got updated, if duration is updated the
                    //corresponding parent will update automatically.
                    if (proxy._isDurationUpdated == false) {
                        var data = args.data,
                            isParent = args.data.hasChildRecords ? true : false;
                        if (isParent && data.isAutoSchedule)
                            proxy._updateParentItem(data, null, true);
                        else if (isParent && !data.isAutoSchedule)
                            proxy._updateManualParentItem(data, null, true);

                        if (data.parentItem && data.parentItem.isAutoSchedule)
                            proxy._updateParentItem(data, null, false);
                        else if(data.parentItem && !data.parentItem.isAutoSchedule)
                            proxy._updateManualParentItem(data, null, false);
                    }
                }

                if (args.isModified || proxy._isDurationUpdated) {
                    proxy.model.currentViewData = proxy._$treegridHelper.ejTreeGrid("getCurrentViewData");
                    if (args.data.isAutoSchedule || model.validateManualTasksOnLinking)
                        proxy._isValidationEnabled = true;
                    else
                        proxy._isValidationEnabled = false;
                    proxy._updateEditedGanttRecords(args);
                }
            }

            proxy._isDurationUpdated = false;
            proxy._isinBeginEdit = false;
            proxy.refreshGanttRecord(args.data);
            
            delete args.isModified;
            if (proxy.model.toolbarSettings.showToolbar) {
                var toolBarDisableItems = [];

                if (proxy.model.toolbarSettings.toolbarItems.indexOf("cancel") !== -1) {
                    toolBarDisableItems.push($(toolbar).find(".e-cancel").parent()[0]);
                }

                if (proxy.model.toolbarSettings.toolbarItems.indexOf("update") !== -1) {
                    toolBarDisableItems.push($(toolbar).find(".e-saveitem").parent()[0]);
                }
                
                $(toolbar).ejToolbar('disableItem', toolBarDisableItems);
            }

            if (!args.cancel && (args.columnName === "startDate" || args.columnName === "endDate" || args.columnName === "duration")) {
                proxy._updateScheduleDatesOnEditing(args);
            }
            if (!args.cancel && (args.columnName === "taskMode" || args.columnName === "startDate" || args.columnName === "endDate" || args.columnName === "duration" || args.columnName === "status" || args.columnName === "predecessor")) {
                if (this.isCriticalPathEnable == true) {
                    proxy._$ganttchartHelper.ejGanttChart("criticalConnectorLine", this.criticalPathCollection, this.detailPredecessorCollection, false, this.collectionTaskId);
                    this.showCriticalPath(true);
                }
            }
            // proxy._trigger("endEdit", args);
        },

        //updated the schedule dates while cellediting ,taskBarediting and dialogEditing and dialogAdding
        _updateScheduleDatesOnEditing:function(args)
        {
            var proxy = this,
                model = this.model,
                startDate = proxy._getDateFromFormat(args.data.startDate),
                endDate = proxy._getDateFromFormat(args.data.endDate),
                scheduleStartDate = proxy._projectStartDate,    //_getDateFromFormat(model.scheduleStartDate),
                scheduleEndDate = proxy._getDateFromFormat(model.scheduleEndDate),
                minStartDate, maxEndDate,
                isDateChanged = false,
                tempStartDate = model.scheduleStartDate,
                updatedDates,
                tempEndDate = model.scheduleEndDate;
            if(args.data.hasChildRecords && !args.data.isAutoSchedule){
                startDate = proxy._getDateFromFormat(args.data.manualStartDate),
                endDate = proxy._getDateFromFormat(args.data.manualEndDate)
            }            
                proxy._calculateDatesForScheduleCheck(startDate);
            if (!model.predecessorMapping) {
                if (!(startDate.getTime() >= scheduleStartDate.getTime()) || !(startDate.getTime() <= scheduleEndDate.getTime())) {
                    if (startDate.getTime() < scheduleStartDate.getTime()) {
                        minStartDate = startDate;
                        scheduleStartDate = startDate;
                    }
                    else {
                        maxEndDate = proxy._getDateFromFormat(args.data.startDate);
                        scheduleEndDate = proxy._getDateFromFormat(args.data.startDate);
                    }
                }
                if (!(endDate.getTime() >= scheduleStartDate.getTime()) || !(endDate.getTime() <= scheduleEndDate.getTime())) {
                    if (endDate.getTime() < scheduleStartDate.getTime())
                        minStartDate = endDate;
                    else
                        maxEndDate = endDate;
                }
                if (maxEndDate) {
                    isDateChanged = true;
                    tempEndDate = args.data._getFormatedDate(maxEndDate, model.dateFormat, model.locale);
                }
                if (minStartDate) {
                    isDateChanged = true;
                    tempStartDate = args.data._getFormatedDate(minStartDate, model.dateFormat, model.locale);
                }
                if (isDateChanged) {
                    updatedDates = proxy._updateScheduleDatesByTaskLables(proxy._getDateFromFormat(tempStartDate), proxy._getDateFromFormat(tempEndDate));
                    proxy.updateScheduleDates(args.data._getFormatedDate(updatedDates.minStartDate, model.dateFormat, model.locale), args.data._getFormatedDate(updatedDates.maxEndDate, model.dateFormat, model.locale));
                }
            }
            else {
                var editArgs = {};
                editArgs.onEditing = true;
                proxy._calculateScheduleDates(editArgs);
                proxy._calculateDatesForScheduleCheck(editArgs.minStartDate);
                if (editArgs.minStartDate.getTime() < scheduleStartDate) {
                    tempStartDate = args.data._getFormatedDate(editArgs.minStartDate, model.dateFormat, model.locale);
                    isDateChanged = true;
                }
                if(editArgs.maxEndDate.getTime() > scheduleEndDate)
                {
                    tempEndDate = args.data._getFormatedDate(editArgs.maxEndDate, model.dateFormat, model.locale);
                    isDateChanged = true;
                }
                if (isDateChanged)
                {
                    proxy.updateScheduleDates(tempStartDate, tempEndDate);
                }
            }
        },
        //add dates before edited dates for scheduleupdate 
        _calculateDatesForScheduleCheck:function(startdate)
        {
            var proxy = this, model = this.model,
                scheduleHeaderType = model.scheduleHeaderSettings.scheduleHeaderType,
                scheduleHeaderValue = ej.Gantt.ScheduleHeaderType;
               
            if (scheduleHeaderType == scheduleHeaderValue.Week) {

                startdate.setDate(startdate.getDate() - 3);
            }

            if (scheduleHeaderType == scheduleHeaderValue.Year) {
                startdate.setDate(startdate.getDate() - 5);
            }
            if (scheduleHeaderType == scheduleHeaderValue.Month) {
                startdate.setDate(startdate.getDate() - 3);
            }

            if (scheduleHeaderType == scheduleHeaderValue.Day) {
                startdate.setHours(startdate.getHours() - 2);
            }
            if (scheduleHeaderType == scheduleHeaderValue.Hour) {
                startdate.setMinutes(startdate.getMinutes() - 5);
            }
        }
        ,
        //update schedule dates by tool bar operation
        _updateScheduleDatesByToolBar:function(args)
        {
            var proxy = this, model = this.model,
                 startDate = args === "prevTimeSpan" ? proxy._projectStartDate : proxy._getDateFromFormat(proxy.model.scheduleStartDate);
                 endDate = proxy._getDateFromFormat(proxy.model.scheduleEndDate),
                 chartObject = $("#ejGanttChart" + proxy._id).ejGanttChart("instance"),
                 scheduleHeaderType = model.scheduleHeaderSettings.scheduleHeaderType,
                 scheduleHeaderValue = ej.Gantt.ScheduleHeaderType,
                 maxScrollWidth = 0;

            if (scheduleHeaderType == scheduleHeaderValue.Week) {
                if (args === "prevTimeSpan") {
                    startDate.setDate(startDate.getDate() - 6);
                }
                else {
                    endDate.setDate(endDate.getDate() + 7);
                }
            }

            if (scheduleHeaderType == scheduleHeaderValue.Year) {
                if (args === "prevTimeSpan")
                    startDate.setDate(startDate.getDate() - 360);
                else
                    endDate.setDate(endDate.getDate() + 365);
            }
            if (scheduleHeaderType == scheduleHeaderValue.Month) {
                if (args === "prevTimeSpan")
                    startDate.setMonth(startDate.getMonth() - 1);
                else
                    endDate.setDate(endDate.getDate() + 30);
            }
            if (scheduleHeaderType == scheduleHeaderValue.Day) {
                if (args === "prevTimeSpan")
                    startDate.setDate(startDate.getDate() - 1);
                else
                    endDate.setDate(endDate.getDate() + 1);
            }
            if (scheduleHeaderType == scheduleHeaderValue.Hour) {
                if (args === "prevTimeSpan")
                    startDate.setHours(startDate.getHours() - 1);
                else
                    endDate.setHours(endDate.getHours() + 1);
            }                                    
            if (args === "prevTimeSpan") {
                proxy.updateScheduleDates(proxy._getFormatedDate(startDate, model.dateFormat, model.locale), proxy._getFormatedDate(endDate, model.dateFormat, model.locale));
                chartObject._$bodyContainer.ejScroller("scrollX", 0, true);
                if (proxy.isCriticalPathEnable == true && model.predecessorMapping) {
                    proxy._$ganttchartHelper.ejGanttChart("criticalConnectorLine", proxy.criticalPathCollection, proxy.detailPredecessorCollection, true, proxy.collectionTaskId);
                }
            }
            else if (args === "nextTimeSpan") {
                proxy.updateScheduleDates(proxy._getFormatedDate(startDate, model.dateFormat, model.locale), proxy._getFormatedDate(endDate, model.dateFormat, model.locale));
                maxScrollWidth = chartObject.getMaxScrollWidth();
                chartObject._$bodyContainer.ejScroller("scrollX", maxScrollWidth, true);
                if (proxy.isCriticalPathEnable == true && model.predecessorMapping) {
                    proxy._$ganttchartHelper.ejGanttChart("criticalConnectorLine", proxy.criticalPathCollection, proxy.detailPredecessorCollection, true, proxy.collectionTaskId);
                }
            }
        },
        _rowDataBound: function (args) {
            this._trigger("rowDataBound", args);
        },
        _refreshToolBar: function () {
            var $toolbar = $("#" + this._id + "_toolbarItems");
            $toolbar.find("li").removeClass("e-hover");
        },

        _toolBarClick: function (sender) {
            var proxy = this,
                model=proxy.model,
                $ganttEle = $(this.itemsContainer).closest(".e-gantt"),
                ganttInstance = $ganttEle.ejGantt("instance"),
               ganttId = $ganttEle.attr('id'),
                toolbarObj = $("#" + ganttInstance._id + "_toolbarItems");

            ganttInstance._clearContextMenu();
            if (sender.event == undefined && sender.target.tagName == "INPUT" && sender.currentTarget.id == ganttId + "_search")
                return false;

            if (ganttInstance.model.dateFormat.toLowerCase().indexOf("hh") != -1)
                $.isFunction($.fn.ejDateTimePicker) && $("#" + ganttId + "EditForm").find(".e-datetimepicker").ejDateTimePicker("hide");
            else
                $.isFunction($.fn.ejDatePicker) && $("#" + ganttId + "EditForm").find(".e-datepicker").ejDatePicker("hide");
            var currentTarget = sender.currentTarget; var target = sender.target;
            var args = {
                itemName: currentTarget.title,
                currentTarget: currentTarget,
                model: ganttInstance.model,
            };

            if ($ganttEle.ejGantt("instance")._trigger("toolbarClick", args))
                return false;
            $(toolbarObj).ejToolbar('deselectItem', sender.currentTarget);
            switch (sender.currentTarget.id) {
                case ganttId + "_excelExport":
                    ganttInstance._toolbarOperation(ganttId + "_excelExport");
                    break;

                case ganttId + "_add":
                    ganttInstance._toolbarOperation(ganttId + "_add");
                    break;

                case ganttId + "_edit":
                    ganttInstance._toolbarOperation(ganttId + "_edit");
                    break;

                case ganttId + "_delete":
                    ganttInstance._toolbarOperation(ganttId + "_delete");
                    break;

                case ganttId + "_update":
                    ganttInstance._toolbarOperation(ganttId + "_update");
                    break;

                case ganttId + "_cancel":
                    ganttInstance._toolbarOperation(ganttId + "_cancel");
                    break;

                case ganttId + "_search":
                    ganttInstance._toolbarOperation(ganttId + "_search", $(sender.currentTarget).find("input").val());
                    break;

                case ganttId + "_indent":
                    ganttInstance._toolbarOperation(ganttId + "_indent");
                    break;

                case ganttId + "_outdent":
                    ganttInstance._toolbarOperation(ganttId + "_outdent");
                    break;
                    
                case ganttId + "_expandAll":
                    ganttInstance._toolbarOperation(ganttId + "_expandAll");
                    break;

                case ganttId + "_criticalPath":
                    if (!ganttInstance._enableDisableCriticalIcon) {
                        ganttInstance._toolbarOperation(ganttId + "_criticalEnable");
                    }
                    else if (ganttInstance._enableDisableCriticalIcon) {
                        ganttInstance._toolbarOperation(ganttId + "_criticalDisable");
                    }
                    break;

                case ganttId + "_collapseAll":
                    ganttInstance._toolbarOperation(ganttId + "_collapseAll");
                    break;
                case ganttId + "_prevTimeSpan":
                    ganttInstance._toolbarOperation(ganttId + "_prevTimeSpan");
                    break;
                case ganttId + "_nextTimeSpan":
                    ganttInstance._toolbarOperation(ganttId + "_nextTimeSpan");
                        break;
                    case "milestoneTemplate":
                        proxy._milestoneTemplate(options[option]);
                        break;
                    case "taskbarTemplate":
                        proxy._taskbarTemplate(options[option]);
                        break;
                    case "parentTaskbarTemplate":
                        proxy._parentTaskbarTemplate(options[option]);
                        break;
                }
            return false;
        },

        _toolbarOperation: function (operation, searchEle) {
            var $ganttEle = this.element,
                ganttObject = $ganttEle.ejGantt("instance"),
                //gridObject = $gridEle.ejTreeGrid("instance"),
                ganttId = $ganttEle.attr('id'),
                proxy = this,
                rowindex = proxy.selectedRowIndex();
            ganttObject._exportTo = ganttObject["export"];
            var toolbar = $("#" + proxy._id + "_toolbarItems");
            switch (operation) {

                case ganttId + "_add":
                    proxy._sendAddRequest();
                    break;

                case ganttId + "_edit":
                    proxy._sendEditRequest();
                    break;

                case ganttId + "_delete":
                    proxy.cancelEditCell();
                    proxy._$treegridHelper.ejTreeGrid("deleteRow");
                    proxy._isRefreshAddedRecord = false;

                    break;

                case ganttId + "_update":
                    proxy._$treegridHelper.ejTreeGrid("endEdit");
                    //gridObject.sendSaveRequest();

                    if (proxy.model.toolbarSettings.toolbarItems.indexOf("cancel") !== -1) {
                        proxy._disabledToolItems.push($(toolbar).find(".e-cancel").parent()[0]);
                    }

                    if (proxy.model.toolbarSettings.toolbarItems.indexOf("update") !== -1) {
                        proxy._disabledToolItems.push($(toolbar).find(".e-saveitem").parent()[0]);
                    }
                    $(toolbar).ejToolbar('disableItem', proxy._disabledToolItems);
                    
                    proxy._disabledToolItems = [];
                    
                    break;

                case ganttId + "_cancel":
                    proxy._$treegridHelper.ejTreeGrid("cancelEditCell");                                                            
                    proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                    break;

                case ganttId + "_criticalEnable":
                    proxy.showCriticalPath(true);
                    proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                    break;

                case ganttId + "_criticalDisable":
                    proxy.showCriticalPath(false);
                    proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                    break;

                case ganttId + "_search":
                    proxy.cancelEditCell();
                    if (proxy._searchString != searchEle) {
                        proxy._$treegridHelper.ejTreeGrid("search", searchEle);
                        proxy._searchString = searchEle;
                        proxy.updateSelectedItemIndex();
                        proxy._updateToolbarOptions();
                        proxy._isRefreshAddedRecord = false;
                    }
                    break;

                case ganttId + "_indent":
                    proxy._sendIndentRequest();
                    proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                    proxy._isRefreshAddedRecord = false;
                    break;

                case ganttId + "_outdent":
                    proxy._sendOutdentRequest();
                    proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                    proxy._isRefreshAddedRecord = false;
                    break;

                case ganttId + "_expandAll":
                    proxy._expandAll();
                    proxy.updateSelectedItemIndex();
                    proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                    break;

                case ganttId + "_collapseAll":
                    proxy._collapseAll();
                    proxy.updateSelectedItemIndex();
                    proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                    break;
                case ganttId + "_prevTimeSpan":
                    proxy._updateScheduleDatesByToolBar("prevTimeSpan");
                    proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                    break;
                case ganttId + "_nextTimeSpan":
                    proxy._updateScheduleDatesByToolBar("nextTimeSpan");
                    proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                    break;

                case ganttId + "_excelExport":
                    proxy._exportTo(ganttObject.model.exportToExcelAction, 'excelExporting', ganttObject.model.allowMultipleExporting);
                    break;

            }
            proxy._refreshToolBar();
            return false;
        },

        /* update selected ietm index when selected item row position changed */
        updateSelectedItemIndex: function () {
            var proxy = this, model = this.model, updatedRecords = model.updatedRecords,
                index;
            if(model.allowSelection && !ej.isNullOrUndefined(this.selectedItem()))
            {
                if (proxy.getExpandStatus(this.selectedItem())) {
                    index = updatedRecords.indexOf(this.selectedItem());
                    proxy.selectRows(index);
                }
                else
                {
                    proxy.selectRows(-1);
                }
            } else if (!model.allowSelection && !ej.isNullOrUndefined(this.selectedItem())) {
                proxy.selectRows(-1);
            }
        },

        clearSelection:function(){
            var proxy = this;
            proxy.model.selectedCellIndexes = [];
            proxy._$treegridHelper.ejTreeGrid("clearSelection");
        },

        selectCells: function (indexes, preservePreviousSelectedCells) {
            var proxy = this,
                model = proxy.model;
            if (model.selectionMode == "cell" && model.allowSelection) {
                proxy._$treegridHelper.ejTreeGrid("selectCells", indexes, preservePreviousSelectedCells);
            }
        },

        //select rows index of this item
        selectRows: function (index)
        {
            var proxy = this, model = this.model;

            if (model.selectionMode == "cell")
                return;

            if (index !== -1 && !ej.isNullOrUndefined(index) && index < model.updatedRecords.length) {
                var args = {};
                args.recordIndex = index;
                args.data = model.updatedRecords[args.recordIndex];
                args.target = "ejTreeGrid";
                if (proxy.rowSelecting(args)) {
                    proxy.rowSelected(args);
                    proxy._$treegridHelper.ejTreeGrid("selectRows", args.recordIndex);
                    proxy._$ganttchartHelper.ejGanttChart("selectRows", args.recordIndex);
                }
                proxy.updateIndentOutdentOption(args.data);
            }
            else if (index === -1) {
                proxy._deSelectRowItem();
                proxy._updateToolbarOptions();
            }
        },

        _setModel: function (options) {
            
            var proxy = this, option,
                model = proxy.model;
            
            for (option in options) {
                switch (option) {
                    case "sortSettings":
                        proxy._sendSortingRequest(options[option]);
                        break;
                    case "allowSorting":
                        proxy._sortingRequest(options[option]);
                        if (model.showColumnChooser && model.showColumnOptions)
                            proxy._$treegridHelper.ejTreeGrid("columnAddDialogTemplate");
                        break;
                    case "allowMultiSorting":
                        model.allowMultiSorting = options[option];
                        proxy._$treegridHelper.ejTreeGrid("model.allowMultiSorting", model.allowMultiSorting);
                        break;
                    case "destroy":
                        proxy.destroy();
                        break;
                    case "treeColumnIndex":
                        proxy._columnIndex(options[option]);
                        break;
                    case "allowGanttChartEditing":
                        proxy._ganttChartEditing(options[option]);
                        break;
                    case "enableProgressBarResizing":
                        proxy._resizeProgressbar(options[option]);
                        break;
                    case "enableTaskbarTooltip":
                        proxy._showTooltip(options[option]);
                        break;
                    case "enableTaskbarDragTooltip":
                        proxy._showEditingTooltip(options[option]);
                        break;                  
                    case "validateManualTasksOnLinking":
                        model.validateManualTasksOnLinking = options[option];
                        break;
                    case "enableAltRow":
                        proxy._updateAltRow(options[option]);
                        break;
                    case "locale":
                        model.flatRecords = [];
                        model.parentRecords = [];
                        proxy._clearContextMenu();
                        model.locale = options[option];
                        model.isRerender = true;
                        proxy.element.ejGantt("destroy").ejGantt(model);                        
                        break;
                    case "allowSelection":
                        model.allowSelection = options[option];
                        if (model.allowSelection) {
                            proxy._$treegridHelper.ejTreeGrid("instance").model.allowSelection = true;
                            proxy._$ganttchartHelper.ejGanttChart("instance").model.allowSelection = true;
                        }
                        else {
                            proxy._deSelectRowItem();
                            proxy._$treegridHelper.ejTreeGrid("instance").model.allowSelection = false;
                            proxy._$ganttchartHelper.ejGanttChart("instance").model.allowSelection = false;
                        }
                        proxy._updateToolbarOptions();
                        break;
                    case "editSettings":
                        $.extend(model.editSettings, options[option]);
                        proxy._updateEditSettings(options[option]);
                        proxy._initiateDialogTemplates();
                        proxy._enableEditingEvents();
                        break;
                    case "taskbarBackground":
                        proxy._updateTaskbarBackground(options[option]);
                        break;
                    case "progressbarBackground":
                        proxy._updateProgressbarBackground(options[option]);
                        break;
                    case "parentTaskbarBackground":
                        proxy._updateParentTaskbarBackground(options[option]);
                        break;
                    case "parentProgressbarBackground":
                        proxy._updateParentProgressbarBackground(options[option]);
                        break;
                    case "showTaskNames":
                        proxy._updateRenderTaskNames(options[option]);
                        break;
                    case "leftTaskLabelMapping":
                        proxy._refreshLeftTaskLabelMapping(options[option]);
                        break;

                    case "rightTaskLabelMapping":
                        proxy._refreshRightTaskLabelMapping(options[option]);
                        break;

                    case "leftTaskLabelTemplate":
                        proxy._refreshLeftTaskLabelTemplate(options[option]);
                        break;

                    case "rightTaskLabelTemplate":
                        proxy._refreshRightTaskLabelTemplate(options[option]);
                        break;
                    case "showProgressStatus":
                        proxy._updateRendeProgressStatus(options[option]);
                        break;
                    case "showResourceNames":
                        proxy._updateRenderResourceNames(options[option]);
                        break;
                    case "progressbarHeight":
                        proxy._updateProgressbarHeight(options[option]);
                        break;
                    case "baselineColor":
                        proxy._updateBaselineColor(options[option]);
                        break;
                    case "renderBaseline":
                        proxy._updateRenderBaseline(options[option]);
                        break;
                    case "allowColumnResize":
                        proxy._updateAllowColumnResize(options[option]);
                        break;
                    case "allowKeyboardNavigation":
                        proxy._updateAllowKeyboardNavigation(options[option]);
                        break;
                    case "selectedItem":
                        proxy._updateSelectedItem(options[option]);
                        break;
                    case "dataSource":
                        proxy._deSelectRowItem();
                        proxy._updateToolbarOptions();
                        this._refreshDataSource(options[option]);
                        if (proxy._enableDisableCriticalIcon) {
                            proxy.showCriticalPath(true);
                        }
                        break;
                    case "readOnly":
                        proxy._updateReadOnly(options[option]);
                        break;
                    case "showGridCellTooltip":
                        proxy._updateShowGridCellTooltip(options[option]);
                        break;
                    case "showGridExpandCellTooltip":
                        proxy._updateShowGridExpandCellTooltip(options[option]);
                        break;
                    case "highlightWeekends":
                        proxy._updateHighlightWeekends(options[option]);
                        break;
                    case "connectorLineBackground":
                        proxy._updateConnectorLineBackground(options[option]);
                        if (proxy._enableDisableCriticalIcon) {
                            proxy._$ganttchartHelper.ejGanttChart("criticalConnectorLine", this.criticalPathCollection, this.detailPredecessorCollection, true, this.collectionTaskId);
                        }
                        break;
                    case "connectorlineWidth":
                        proxy._updateConnectorlineWidth(options[option]);
                        if (proxy._enableDisableCriticalIcon) {
                            proxy._$ganttchartHelper.ejGanttChart("criticalConnectorLine", this.criticalPathCollection, this.detailPredecessorCollection, true, this.collectionTaskId);
                        }
                        break;
                    case "weekendBackground":
                        proxy._updateWeekendBackground(options[option]);
                        break;
                    case "enableContextMenu":
                        model.enableContextMenu = options[option];
                        proxy._clearContextMenu();
                        proxy._off(proxy.element, "contextmenu", proxy._rightClick);
                        if (model.enableContextMenu) {
                            proxy._on(proxy.element, "contextmenu", proxy._rightClick);
                        }
                        break;
                    case "enableResize":
                        if (model.enableResize) {
                            proxy.model.enableResize = options[option];
                            proxy._on($(window), "resize", proxy.windowResize);
                        }
                        else {
                            proxy._off($(window), "resize", proxy.windowResize);
                        }
                        break;
                    case "isResponsive":
                        if (model.isResponsive) {
                            proxy.model.isResponsive = options[option];
                            proxy._on($(window), "resize", proxy.windowResize);
                        }
                        else {
                            proxy._off($(window), "resize", proxy.windowResize);
                        }
                        break;
                    case "selectedRowIndex":
                        if (this.selectedRowIndex() === -1 || this.selectedRowIndex() === "") {
                            proxy._deSelectRowItem();
                            proxy._updateToolbarOptions();
                        }
                        else if (this.selectedRowIndex() !== -1 && !ej.isNullOrUndefined(this.selectedRowIndex()) && this.selectedRowIndex() < proxy.model.updatedRecords.length) {
                            var rowSelectingArgs = {};
                            rowSelectingArgs.recordIndex = proxy.selectedRowIndex();
                            rowSelectingArgs.previousIndex = model.selectedItem ? model.updatedRecords.indexOf(model.selectedItem) : -1;
                            if (proxy.rowSelecting(rowSelectingArgs)) {
                                var args = {};
                                args.recordIndex = this.selectedRowIndex();
                                args.data = proxy.model.updatedRecords[args.recordIndex];
                                args.target = "ejTreeGrid";
                                proxy._$treegridHelper.ejTreeGrid("selectRows", args.recordIndex);
                                proxy.rowSelected(args);
                            }
                        }
                        break;
                    case "selectedCellIndexes":
                        if (model.allowSelection && model.selectionMode == "cell") {
                            proxy.selectCells(options[option]);
                        }
                        break;
                    case "selectionMode":
                        if (model.allowSelection) {
                            proxy.clearSelection();
                            proxy._$treegridHelper.ejTreeGrid("selectRows", -1);
                            proxy._$ganttchartHelper.ejGanttChart("selectRows", -1);
                            model.selectedItem = null;
                            model.selectionMode = options[option];
                            proxy._$treegridHelper.ejTreeGrid("option", "selectionMode", options[option]);
                            proxy._$ganttchartHelper.ejGanttChart("option", "selectionMode", options[option]);
                            if (options[option] == "row")
                                proxy._$treegridHelper.ejTreeGrid("instance").model.selectionSettings.selectionType = "single";
                            proxy._updateToolbarOptions();
                        }
                        break;
                    case "selectionType":
                        if (model.allowSelection) {
                            proxy.clearSelection();
                            if (model.selectionMode == "cell") {
                                model.selectionType = options[option];
                                proxy._$treegridHelper.ejTreeGrid("instance").model.selectionSettings.selectionType = options[option];
                            }
                            else {
                                model.selectionType = "single"
                                proxy._$treegridHelper.ejTreeGrid("instance").model.selectionSettings.selectionType = "single";
                            }
                        }
                        break;
                    case "showColumnChooser":
                        model.showColumnChooser = options[option];
                        proxy._$treegridHelper.ejTreeGrid("setModel", {"showColumnChooser":model.showColumnChooser});
                        break;
                    case "showColumnOptions":
                        model.showColumnOptions = options[option];
                        proxy._$treegridHelper.ejTreeGrid("setModel", { "showColumnOptions": model.showColumnOptions });
                        break;
                    case "splitterPosition":
                        proxy.setSplitterPosition(proxy._splitterPosition());
                        break;
                    case "addDialogFields":
                        if (model.editSettings.allowAdding) {
                            model.addDialogFields = options[option];
                            proxy.addDialogTemplate();
                        }
                        break;
                    case "dragTooltip":
                        proxy._$treegridHelper.ejTreeGrid("setModel", { "dragTooltip": options[option] });
                        break;

                    case "allowDragAndDrop":
                        model.allowDragAndDrop = options[option];
                        proxy._$treegridHelper.ejTreeGrid("setModel", { "allowDragAndDrop": model.allowDragAndDrop });
                        break;
                    case "editDialogFields":
                        if (model.editSettings.allowEditing) {
                            model.editDialogFields = options[option];
                            proxy.editDialogTemplate();
                        }
                        break;
                    case "toolbarSettings":
                        $.extend(proxy.model.toolbarSettings, options[option]);
                        proxy._updateToolbar();
                        break;
                    case "holidays":
                        model.holidays = options[option];
                        proxy._refreshHolidays();
                        break;
                    case "stripLines":
                        model.stripLines = options[option];
                        proxy._updateStripLines();
                        break;
                    case "splitterSettings":
                        $.extend(model.splitterSettings, options[option]);
                        if (!proxy.splitterPosition())
                            proxy.setSplitterIndex(model.splitterSettings.index);
                        else
                            proxy.setSplitterPosition(proxy.splitterPosition());
                        break;
                    case "enablePredecessorValidation":
                        model.enablePredecessorValidation = options[option];
                        break;
                    case "sizeSettings":
                        this._calculateDimensions();
                        this.windowResize();
                        break;
                    case "dayWorkingTime":
                        model.dayWorkingTime = options[option].slice();
                        model.flatRecords = [];
                        model.parentRecords = [];
                        model.updatedRecords = [];
                        model.ids = [];
                        model.scheduleStartDate = model.scheduleStartDate;
                        model.scheduleEndDate = model.scheduleEndDate;
                        proxy._storedIndex = -1;
                        proxy.selectedRowIndex(-1);
                        proxy._predecessorsCollection = [];
                        proxy.element.ejGantt("destroy").ejGantt(model);
                        break;
                    case "workUnit":
                        model.workUnit = options[option];
                        this._updateWorkUnit();
                        break;
                    case "resources":                        
                        proxy._updateResourcesData(options[option]);
                        break;
                }
            }
        },

        _updateResourcesData: function (updatedResources) {
            var proxy = this, model = proxy.model, ganttObj, columnIndex = -1,
                columns = proxy.getColumns();
            model.resources = $.extend(true, [], updatedResources);

            $.each(columns, function (index, column) {
                if (column.mappingName == model.resourceInfoMapping) {
                    columnIndex = index;
                    return;
                }
            });
            if (columnIndex > -1) columns[columnIndex]["dropdownData"] = model.resources;
            flatRecords = model.flatRecords.slice();
            flatRecords.reverse();
            ganttObj = ej.Gantt.GanttRecord.prototype;
            $.each(flatRecords, function (index, record) {
                if (record.resourceInfo && record.resourceInfo.length > 0) {                    
                    record.resourceInfo = ganttObj._setResourceInfo(record.item[model.resourceInfoMapping], model.resourceIdMapping, model.resourceNameMapping, model.resourceUnitMapping, model.resources);
                    proxy._updateResourceName(record);
                    proxy._updateResourceRelatedFields(record);
                    if (record.hasChildRecords) {
                        if (record.isAutoSchedule)
                            proxy._updateParentItem(record, null, true);
                        else if (!record.isAutoSchedule)
                            proxy._updateManualParentItem(record, null, true);
                    }
                    else
                        proxy.refreshGanttRecord(record);                   
                }                
            });            
        },       

        //Change work unit for whole project using set model.
        _updateWorkUnit: function () {
            var proxy = this, model = proxy.model,
                flatRecords = model.flatRecords,              
                currentViewData = proxy.getCurrentViewData(),
                treegridObject = proxy._$treegridHelper.ejTreeGrid("instance");
            treegridObject.model.workUnit = model.workUnit;
            for (var index = 0; index < flatRecords.length; index++) {
                var record = flatRecords[index],
                    currentRecordIndex = currentViewData.indexOf(record);
                record._updateWorkWithDuration(proxy);
                if (record.parentItem)
                    proxy._updateParentItem(record);
                if (currentRecordIndex != -1)
                    ej.TreeGrid.refreshRow(treegridObject, currentRecordIndex);
            }
        },
        /*Data binding method for dynamic update of dataSource*/
        _dataBindingForSetModel: function () {
            var proxy = this, model = proxy.model;
            if (this.dataSource() == null) {
                this.dataSource([]);
            }
            if (this.dataSource() instanceof ej.DataManager) {
                var query = this._columnToSelect();
                var queryPromise = this.dataSource().executeQuery(query);
                queryPromise.done(ej.proxy(function (e) {
                    if (proxy.dataSource().dataSource.offline) {
                        proxy._retrivedData = proxy.dataSource().dataSource.json;
                    } else {
                        proxy._retrivedData = e.result;
                    }
                    
                    if ((model.taskIdMapping.length > 0) && (model.parentTaskIdMapping.length > 0)) {
                        var dataArray = proxy.dataSource();
                        //cloning the datasource                   
                        var data = [];
                        for (var i in dataArray) {
                            var tempData = dataArray[i];
                            data.push($.extend(true, {}, tempData));
                            if (tempData[model.taskIdMapping]) proxy._taskIds.push(tempData[model.taskIdMapping]);
                        }

                        if (!model.childMapping) model.childMapping = "Children";
                        proxy._reconstructDatasource(data);                     
                    }
                    else {
                        proxy.secondaryDatasource = proxy._retrivedData;
                    }
                    proxy._createGanttRecords(proxy.secondaryDatasource);
                    proxy._refreshGanttWithNewRecords();
                }));
            }
            else if (this.dataSource().length > 0) {
                if ((model.taskIdMapping.length > 0) && (model.parentTaskIdMapping.length > 0)) {
                    var dataArray = proxy.dataSource();
                    //cloning the datasource                   
                    var data = [];
                    for (var i in dataArray) {
                        var tempData = dataArray[i];
                        data.push($.extend(true, {}, tempData));
                        if (tempData[model.taskIdMapping]) proxy._taskIds.push(tempData[model.taskIdMapping]);
                    }

                    if (!model.childMapping) model.childMapping = "Children";
                    proxy._reconstructDatasource(data);
                    proxy._createGanttRecords(proxy.secondaryDatasource);
                }
                else {
                    proxy._createGanttRecords(this.dataSource());
                }
                this._refreshGanttWithNewRecords();
            } else {
                this._refreshGanttWithNewRecords();
            }
        },
        /*Refresh all Gantt rows on new data source update*/
        _refreshGanttWithNewRecords: function () {
            var proxy = this,
                model = this.model,
                args = {};
            this._updatePredecessors();
            this._$treegridHelper.ejTreeGrid("setUpdatedRecords", model.flatRecords, model.updatedRecords, model.ids, model.parentRecords, this.dataSource());
            this._$treegridHelper.ejTreeGrid("processBindings");
            proxy.model.updatedRecords = proxy.getUpdatedRecords();
            proxy.model.currentViewData = proxy.getCurrentViewData();
            proxy._gridRows = proxy.getRows();
            proxy._totalCollapseRecordCount = proxy._$treegridHelper.ejTreeGrid("getCollapsedRecordCount");
            this._$ganttchartHelper.ejGanttChart("setUpdatedRecords", model.currentViewData, model.updatedRecords, model.flatRecords, model.ids);
            this._calculateScheduleDates();
            this.updateScheduleDates(model.scheduleStartDate, this.model.scheduleEndDate);
            args.requestType = ej.TreeGrid.Actions.Refresh;
            proxy._$treegridHelper.ejTreeGrid("sendDataRenderingRequest", args);
            this._isFromSetModel = false;
        },
        /*Method to update the data source dynamically*/
        _refreshDataSource: function (dataSource) {
            var proxy = this;
            this.resetModelCollections();
            this.dataSource(dataSource);
            this._isFromSetModel = true;
            proxy.secondaryDatasource = [];
            proxy._retrivedData = this.dataSource();
            this._dataBindingForSetModel();
        },

        resetModelCollections: function () {
            var proxy = this,
                model = proxy.model;
            model.dataSource = [];
            model.flatRecords = [];
            model.parentRecords = [];
            model.updatedRecords = [];
            model.ids = [];
            model.scheduleStartDate = model.scheduleStartDate;
            model.scheduleEndDate = model.scheduleEndDate;
            proxy._storedIndex = -1;
            proxy.selectedRowIndex(-1);
            proxy._predecessorsCollection = [];
        },
        /* refresh holidays collections */
        _refreshHolidays: function () {
            var proxy = this,
                model = this.model, updatedDates;
            proxy._holidaysList = proxy._getHoliday();
            proxy._stringHolidays = proxy._getStringHolidays();

            updatedDates = proxy._updateScheduleDatesByHolidays(new Date(proxy._projectStartDate), new Date(proxy._projectEndDate));
            if (updatedDates.startDate.getTime() !== proxy._projectStartDate.getTime() || updatedDates.endDate.getTime() !== proxy._projectEndDate.getTime()) {
                var ganttObject = proxy._$ganttchartHelper.data("ejGanttChart");
                ganttObject.model.holidays = model.holidays;
                proxy.updateScheduleDates(updatedDates.startDate, updatedDates.endDate);
            }
            else {
                /* prevent refresh parent Item on update the child records */
                proxy._isTreeGridRendered = false;
                proxy._isGanttChartRendered = false;

                /* Update Left and Width Value of all records with new holidays*/
                proxy._updateGanttRecords();

                proxy._$ganttchartHelper.ejGanttChart("refreshHelper", proxy.model.currentViewData, proxy.model.updatedRecords, proxy._totalCollapseRecordCount);
                /* refresh the connector line collection */
                if (model.predecessorMapping) {
                    proxy._$ganttchartHelper.ejGanttChart("clearConnectorLines");
                    proxy._connectorlineIds = [];
                    proxy._connectorLinesCollection = [];
                    proxy._isValidationEnabled = false;
                    proxy._createConnectorLinesCollection();
                    proxy._isValidationEnabled = true;
                }
                /*refresh the holiday container */
                this._$ganttchartHelper.ejGanttChart("refreshHolidays", model.holidays);
                proxy._isTreeGridRendered = true;
                proxy._isGanttChartRendered = true;
            }

            /* refresh chart and Treegrid part */
            proxy._$treegridHelper.ejTreeGrid("renderRecords");
        },

        /* refreh the strip lines collection */
        _updateStripLines : function()
        {
            var proxy = this, model = this.model, updatedDates;

            updatedDates = proxy._updateScheduleDatesByStripLines(new Date(proxy._projectStartDate), new Date(proxy._projectEndDate));

            if (updatedDates.startDate.getTime() !== proxy._projectStartDate.getTime() || updatedDates.endDate.getTime() !== proxy._projectEndDate.getTime()) {
                var ganttObject = proxy._$ganttchartHelper.data("ejGanttChart");
                ganttObject.model.stripLines = model.stripLines;
                proxy.updateScheduleDates(updatedDates.startDate, updatedDates.endDate);
            }
            else {
                this._$ganttchartHelper.ejGanttChart("refreshStripLines", this.model.stripLines);
            }
        },
        _updateWeekendBackground: function (bgcolor) {
            var proxy = this;
            this.model.weekendBackground = bgcolor;
            proxy._$ganttchartHelper.ejGanttChart("updateWeekendBackground", bgcolor);

        },

        _updateConnectorlineWidth: function (lineWidth) {
            var proxy = this;
            this.model.connectorlineWidth = lineWidth;
            proxy._$ganttchartHelper.ejGanttChart("updateConnectorlineWidth", lineWidth);
            proxy._$ganttchartHelper.ejGanttChart("clearConnectorLines");
            proxy._$ganttchartHelper.ejGanttChart("renderConnectorLines",
                proxy._connectorLinesCollection);

        },

        _updateConnectorLineBackground: function (bgcolor) {
            var proxy = this;
            this.model.connectorLineBackground = bgcolor;
            proxy._$ganttchartHelper.ejGanttChart("updateConnectorLineBackground", bgcolor);
            proxy._$ganttchartHelper.ejGanttChart("clearConnectorLines");
            proxy._$ganttchartHelper.ejGanttChart("renderConnectorLines",
                proxy._connectorLinesCollection);

        },

        _updateHighlightWeekends: function (bool) {
            var proxy = this;
            this.model.highlightWeekends = bool;
            proxy._$ganttchartHelper.ejGanttChart("updateHighlightWeekends", bool);
        },

        _updateReadOnly:function(bool){
            var proxy = this;
            proxy._$treegridHelper.ejTreeGrid("updateReadOnly", bool);
            proxy._$ganttchartHelper.ejGanttChart("updateReadOnly", bool);
            proxy._updateToolbarOptions();
        },
        _updateShowGridCellTooltip: function (bool) {
            var proxy = this;
            proxy._$treegridHelper.ejTreeGrid("updateShowGridCellTooltip", bool);
        },

        _updateShowGridExpandCellTooltip: function (bool) {
            var proxy = this;
            proxy._$treegridHelper.ejTreeGrid("updateShowGridExpandCellTooltip", bool);
        },

        _updateSelectedItem: function (item) {
            var proxy = this,
                args = {};
            if (item[proxy.model.taskIdMapping] != null) {


                args.recordIndex =proxy.model.ids.indexOf((item[proxy.model.taskIdMapping]).toString());
                args.item = proxy.model.flatRecords[args.recordIndex];
                args.target = "ejTreeGrid";
                proxy.rowSelected(args);
                proxy._$treegridHelper.ejTreeGrid("selectRows", args.recordIndex);
                proxy._$ganttchartHelper.ejGanttChart("selectRows", args.recordIndex);
                proxy._$ganttchartHelper.ejGanttChart("updateSelectedItem", args.recordIndex);
            }
        },

        /* udpate allowKeyboardNavigation API value in treegrid and chart side */
        _updateAllowKeyboardNavigation: function (bool) {
            var proxy = this;
            proxy._$treegridHelper.ejTreeGrid("updateAllowKeyboardNavigation", bool);
            proxy._$ganttchartHelper.ejGanttChart("updateAllowKeyboardNavigation", bool);
        },
        
        _updateAllowColumnResize: function (bool) {
            var proxy = this;
            proxy._$treegridHelper.ejTreeGrid("updateAllowColumnResize", bool);
        },
        
        _updateProgressbarHeight: function (height) {
            var proxy = this;
            this.model.progressbarHeight = height;
            proxy._$ganttchartHelper.ejGanttChart("updateProgressbarHeight", height);
        },
        
        _updateBaselineColor: function (color) {
            var proxy = this;
            this.model.baselineColor = color;
            proxy._$ganttchartHelper.ejGanttChart("updateBaselineColor", color);
        },
        
        _updateRenderBaseline: function (bool) {
            var proxy = this, model=proxy.model;
            this.model.renderBaseline = bool;
            proxy._$ganttchartHelper.ejGanttChart("updateRenderBaseline", bool);
            proxy._$ganttchartHelper.ejGanttChart("renderConnectorLines",
                proxy._connectorLinesCollection);
            //Show Baseline columns in TreeGrid Side.
            if (model.renderBaseline) {
                proxy.setColumns(proxy.createTreeGridColumns());
                proxy._trigger("load");
            }
            //Delete Baseline Columns From TreeGrid.
            if (!model.renderBaseline) {
                var baselineStartDateColumIndex = proxy._columns.map(function (e) { return e.field }).indexOf("baselineStartDate");
                proxy._columns.splice(baselineStartDateColumIndex, 1);
                var baselineEndDateColumIndex = proxy._columns.map(function (e) { return e.field }).indexOf("baselineEndDate");                
                proxy._columns.splice(baselineEndDateColumIndex, 1);
            }
            //Update Column Collection of Gantt in TreeGrid side.
            proxy._$treegridHelper.ejTreeGrid("updateColumns", proxy._columns);
            proxy.addDialogTemplate();
            proxy.editDialogTemplate();
        },
        
        _updateRenderTaskNames: function (bool) {
            var proxy = this;
            this.model.showTaskNames = bool;
            proxy._$ganttchartHelper.ejGanttChart("updateRenderTaskNames", bool);
        },
        _refreshLeftTaskLabelMapping: function (leftLabel) {
            var proxy = this;
            this.model.leftTaskLabelMapping = leftLabel;
            proxy._$ganttchartHelper.ejGanttChart("refreshLeftTaskLabelMapping", leftLabel);
        },
        _refreshRightTaskLabelMapping: function (rightLabel) {
            var proxy = this;
            this.model.rightTaskLabelMapping = rightLabel;
            proxy._$ganttchartHelper.ejGanttChart("refreshRightTaskLabelMapping", rightLabel);
        },
        _refreshLeftTaskLabelTemplate: function (leftLabelTemplate) {
            var proxy = this;
            this.model.leftTaskLabelTemplate = leftLabelTemplate;
            proxy._$ganttchartHelper.ejGanttChart("refreshLeftTaskLabelTemplate", leftLabelTemplate);
        },
        _refreshRightTaskLabelTemplate: function (rightLabelTemplate) {
            var proxy = this;
            this.model.rightTaskLabelTemplate = rightLabelTemplate;
            proxy._$ganttchartHelper.ejGanttChart("refreshRightTaskLabelTemplate", rightLabelTemplate);
        },
        
        _updateRendeProgressStatus: function (bool) {
            var proxy = this;
            this.model.showProgressStatus = bool;
            proxy._$ganttchartHelper.ejGanttChart("updateRendeProgressStatus", bool);
        },
        
        _updateRenderResourceNames: function (bool) {
            var proxy = this;
            this.model.showResourceNames = bool;
            proxy._$ganttchartHelper.ejGanttChart("updateRenderResourceNames", bool);
        },
        
        _updateTaskbarBackground: function (bgcolor) {
            var proxy = this;
            this.model.taskbarBackground = bgcolor;
            proxy._$ganttchartHelper.ejGanttChart("updateTaskbarBackground", bgcolor);
        },

        _updateProgressbarBackground: function (bgcolor) {
            var proxy = this;
            this.model.progressbarBackground = bgcolor;
            proxy._$ganttchartHelper.ejGanttChart("updateProgressbarBackground", bgcolor);
        },

        _updateParentTaskbarBackground: function (bgcolor) {
            var proxy = this;
            this.model.parentTaskbarBackground = bgcolor;
            proxy._$ganttchartHelper.ejGanttChart("updateParentTaskbarBackground", bgcolor);
        },

        _updateParentProgressbarBackground: function (bgcolor) {
            var proxy = this;
            this.model.parentProgressbarBackground = bgcolor;
            proxy._$ganttchartHelper.ejGanttChart("updateParentProgressbarBackground", bgcolor);
        },
        
        _updateEditSettings: function (edit) {
            var proxy = this;
            proxy._$ganttchartHelper.ejGanttChart("updateEditSettings", edit);
            proxy._$treegridHelper.ejTreeGrid("updateEditSettings", edit);
            proxy._updateToolbarOptions();
            
        },
        
        _updateRowSelection: function (bool) {
            var proxy = this;
            proxy._$treegridHelper.ejTreeGrid("updateRowSelection", bool);
        },

        _updateAltRow: function (bool) {
            var proxy = this;
            proxy._$treegridHelper.ejTreeGrid("option", "enableAltRow", bool);
        },

        //Insert templated row in DOM for newly added record
        _renderAddedRow: function (index, data)
        {
            var proxy = this, model = this.model;
            model.currentViewData = proxy._$treegridHelper.ejTreeGrid("getUpdatedCurrentViewData");
            proxy._$ganttchartHelper.ejGanttChart("setUpdatedRecords", model.currentViewData, model.updatedRecords, model.flatRecords, model.ids);
            if (model.enableVirtualization) {
                var tempArgs = {};
                tempArgs.requestType = ej.TreeGrid.Actions.Refresh;
                proxy._$treegridHelper.ejTreeGrid("sendDataRenderingRequest", tempArgs);
                proxy._$ganttchartHelper.ejGanttChart("refreshHelper", model.currentViewData, model.updatedRecords, proxy._totalCollapseRecordCount);
            }
            else {
                proxy._$treegridHelper.ejTreeGrid("renderNewAddedRow", index, data);
                proxy._$ganttchartHelper.ejGanttChart("renderNewAddedRow", index, data);
            }
            proxy._$treegridHelper.ejTreeGrid("updateHeight");
            proxy._gridRows = proxy.getRows();
            proxy._ganttChartRows = proxy.getGanttChartRows();
        },
        
        /* get visible child record count in udpated records */
        _getVisibleChildRecordCount:function(data,count,collection)
        {
            var proxy = this, model = this.model, childRecords, length;;

            if (data.hasChildRecords) {
                childRecords = data.childRecords;
                length = childRecords.length;
                for (var i = 0; i < length; i++) {
                    if (collection.indexOf(childRecords[i]) !== -1)
                        count++;
                    if (childRecords[i].hasChildRecords) {
                        count = proxy._getVisibleChildRecordCount(childRecords[i], count, collection);
                    }
                }
            }
            else {
                if (collection.indexOf(data) !== -1) {
                    count++;
                }
            }
            return count;
        },

        /* validate predecessor value of adding record*/
        _validateAddRecordPrecessorValue :function(args){
            var proxy = this, data = args.data, model = this.model;
            /* Validate the predecessor value*/
            if (model.predecessorMapping && data[model.predecessorMapping] && data[model.predecessorMapping].length > 0) {
                var validateArgs = {};
                validateArgs.currentRecord = args.currentRecord;
                validateArgs.predecessorString = data[model.predecessorMapping].split(",");
                if (!proxy._editedPredecessorValidation(validateArgs)) {
                    data[model.predecessorMapping] = "";
                    args.currentRecord.predecessor = null;
                    args.currentRecord.predecessorsName = "";
                    return false;
                }
                else {
                    return true;
                }
            } else {
                return true;
            }
        },
        
        openAddDialog: function () {
            this.cancelEditCell();
            this._sendAddRequest();
        },

        
        openEditDialog: function () {
            this.cancelEditCell();
            this._sendEditRequest();
        },
        
        
        searchItem: function (searchString) {
            var proxy = this;
            proxy.cancelEditCell();
            if (proxy._searchString != searchString) {
                proxy._$treegridHelper.ejTreeGrid("search", searchString);
                proxy._searchString = searchString;
                $("#gantt_search input").val(searchString);
            }
        },
        
        
        addRecord: function (data, rowPosition) {
            var proxy = this, model = this.model,
                selectedRowIndex = model.selectionMode == "row" ? this.selectedRowIndex() : proxy._rowIndexOfLastSelectedCell,
                selectedItem = model.updatedRecords[selectedRowIndex], _cAddedRecord,
                taskIdMapping = model.taskIdMapping,
                updatedRecords = model.updatedRecords,
                flatRecords = model.flatRecords,
                parentRecords = model.parentRecords,
                ids = model.ids,
                dataSource =this.dataSource(),
                level = 0, insertIndex, validateArgs = {},
                parentItem, nextBelowItemInflatRecords, nextBelowItemInUpdatedRecords;
            proxy.clearSelection();
            /* clear if treegrid is in edit state*/
            proxy.cancelEditCell();
            if (ej.isNullOrUndefined(dataSource) || ej.isNullOrUndefined(dataSource[0]))
            {
                this.dataSource([]);
                dataSource = this.dataSource();
            }
            if (Object.prototype.toString.call(data) !== "[object Object]") {
                data = {};
            }

            if (selectedRowIndex === -1 && (rowPosition === ej.Gantt.AddRowPosition.AboveSelectedRow
                 || rowPosition === ej.Gantt.AddRowPosition.BelowSelectedRow
                 || rowPosition === ej.Gantt.AddRowPosition.Child) || !rowPosition) {
                rowPosition = ej.Gantt.AddRowPosition.Top;
            }

            /*Validate Task Id of data*/
            if (data[taskIdMapping]) {
                if(model.ids.indexOf(data[taskIdMapping].toString()) != -1) {
                    data[taskIdMapping] = null;
                } else {
                    data[taskIdMapping] = isNaN(parseInt(data[taskIdMapping])) ? null : parseInt(data[taskIdMapping]);
                }
            }

            //Add default value for missing fields
            proxy._updateAddData(data, rowPosition);
            //get updated json data of data manager from TreeGrid 
            if (proxy._isDataManagerUpdate)
                proxy._jsonData = proxy._$treegridHelper.ejTreeGrid("getUpdatedDataManagerData");

            switch (rowPosition) {
                case ej.Gantt.AddRowPosition.Top:
                    level = 0;
                    parentItem = null;
                    _cAddedRecord = proxy._createGanttRecord(data, level);
                    _cAddedRecord.index = _cAddedRecord.taskId;

                    //validate predecessor of new record
                    validateArgs.data = data;
                    validateArgs.currentRecord = _cAddedRecord;
                    if (!proxy._validateAddRecordPrecessorValue(validateArgs) && proxy._isinAddnewRecord) {
                        return false;
                    }

                    /*record update*/
                    flatRecords.splice(0, 0, _cAddedRecord);
                    updatedRecords.splice(0, 0, _cAddedRecord);
                    ids.splice(0, 0, _cAddedRecord.taskId.toString());
                    parentRecords.splice(0, 0, _cAddedRecord);
                    /*data source update*/
                    if (proxy._isDataManagerUpdate) {
                        proxy._jsonData.splice(0, 0, _cAddedRecord.item);
                    } else {
                        dataSource.splice(0, 0, _cAddedRecord.item);
                    }
                    insertIndex = 0;
                    break;

                case ej.Gantt.AddRowPosition.Bottom:
                    level = 0;
                    parentItem = null;
                    _cAddedRecord = proxy._createGanttRecord(data, level);
                    _cAddedRecord.index = _cAddedRecord.taskId;

                    //validate predecessor of new record
                    validateArgs.data = data;
                    validateArgs.currentRecord = _cAddedRecord;
                    if (!proxy._validateAddRecordPrecessorValue(validateArgs) && proxy._isinAddnewRecord) {
                        return false;
                    }

                    /*record update*/
                    flatRecords.push(_cAddedRecord);
                    updatedRecords.push(_cAddedRecord);
                    ids.push(_cAddedRecord.taskId.toString());
                    parentRecords.push(_cAddedRecord);
                    /*data source update*/
                    if (proxy._isDataManagerUpdate) {
                        proxy._jsonData.push(_cAddedRecord.item);
                    } else {
                        dataSource.push(_cAddedRecord.item);
                    }
                    insertIndex = updatedRecords.indexOf(_cAddedRecord);
                    break;

                case ej.Gantt.AddRowPosition.AboveSelectedRow:
                    level = selectedItem.level;
                    parentItem = selectedItem.parentItem;
                    _cAddedRecord = proxy._createGanttRecord(data, level, parentItem);
                    _cAddedRecord.index = _cAddedRecord.taskId;

                    //validate predecessor of new record
                    validateArgs.data = data;
                    validateArgs.currentRecord = _cAddedRecord;
                    if (!proxy._validateAddRecordPrecessorValue(validateArgs) && proxy._isinAddnewRecord) {
                        return false;
                    }
                    var childIndex, recordIndex, updatedCollectionIndex;
                    /*Record Updates*/
                    recordIndex = flatRecords.indexOf(selectedItem);
                    updatedCollectionIndex = updatedRecords.indexOf(selectedItem);
                    flatRecords.splice(recordIndex, 0, _cAddedRecord);
                    updatedRecords.splice(updatedCollectionIndex, 0, _cAddedRecord);
                    ids.splice(recordIndex, 0, _cAddedRecord.taskId.toString());

                    if (!ej.isNullOrUndefined(parentItem)) {
                        childIndex = parentItem.childRecords.indexOf(selectedItem);
                        /*Child collection update*/
                        parentItem.childRecords.splice(childIndex, 0, _cAddedRecord);
                        if (!model.parentTaskIdMapping) {
                            parentItem.item[model.childMapping].splice(childIndex, 0, _cAddedRecord.item);
                        }
                        else {
                            _cAddedRecord.item[model.parentTaskIdMapping] = _cAddedRecord.parentItem.taskId;
                            if (proxy._isDataManagerUpdate) {
                                proxy._jsonData.push(_cAddedRecord.item);

                            } else {
                                dataSource.push(_cAddedRecord.item);
                            }
                        }
                    } else {
                        /* Parent records collection and data source update*/
                        parentRecords.splice(parentRecords.indexOf(selectedItem), 0, _cAddedRecord);
                        if (proxy._isDataManagerUpdate) {
                            proxy._jsonData.splice(proxy._jsonData.indexOf(selectedItem.item), 0, _cAddedRecord.item);
                        }
                        else {
                            dataSource.splice(dataSource.indexOf(selectedItem.item), 0, _cAddedRecord.item);
                        }
                    }
                    insertIndex = updatedCollectionIndex;
                    break;
                case ej.Gantt.AddRowPosition.BelowSelectedRow:
                    level = selectedItem.level;
                    parentItem = selectedItem.parentItem;
                    _cAddedRecord = proxy._createGanttRecord(data, level, parentItem);
                    _cAddedRecord.index = _cAddedRecord.taskId;

                    //validate predecessor of new record
                    validateArgs.data = data;
                    validateArgs.currentRecord = _cAddedRecord;
                    if (!proxy._validateAddRecordPrecessorValue(validateArgs) && proxy._isinAddnewRecord) {
                        return false;
                    }

                    //find next item position
                    var currentItemIndex = flatRecords.indexOf(selectedItem)

                    if (selectedItem.hasChildRecords) {
                        dataChildCount = proxy._$treegridHelper.ejTreeGrid("getChildCount", selectedItem, 0);
                        recordIndex = currentItemIndex + dataChildCount + 1;
                        updatedCollectionIndex = updatedRecords.indexOf(selectedItem) + proxy._getVisibleChildRecordCount(selectedItem, 0, updatedRecords) + 1;

                    } else {
                        recordIndex = currentItemIndex + 1;
                        updatedCollectionIndex = updatedRecords.indexOf(selectedItem) + 1;
                    }

                    /* Record collection update */
                    flatRecords.splice(recordIndex, 0, _cAddedRecord);
                    updatedRecords.splice(updatedCollectionIndex, 0, _cAddedRecord);
                    ids.splice(recordIndex, 0, _cAddedRecord.taskId.toString());

                    /* data Source update */
                    if (!ej.isNullOrUndefined(parentItem)) {
                        childIndex = parentItem.childRecords.indexOf(selectedItem);
                        /*Child collection update*/
                        parentItem.childRecords.splice(childIndex + 1, 0, _cAddedRecord);
                        if (!model.parentTaskIdMapping) {
                            parentItem.item[model.childMapping].splice(childIndex + 1, 0, _cAddedRecord.item);
                        }
                        else {
                            _cAddedRecord.item[model.parentTaskIdMapping] = _cAddedRecord.parentItem.taskId;
                            if (proxy._isDataManagerUpdate) {
                                proxy._jsonData.push(_cAddedRecord.item);

                            } else {
                                dataSource.push(_cAddedRecord.item);
                            }
                        }
                    } else {
                        /* Parent records collection and data source update*/
                        parentRecords.splice(parentRecords.indexOf(selectedItem) + 1, 0, _cAddedRecord);
                        if (proxy._isDataManagerUpdate) {
                            proxy._jsonData.splice(proxy._jsonData.indexOf(selectedItem.item) + 1, 0, _cAddedRecord.item);
                        }
                        else {
                            dataSource.splice(dataSource.indexOf(selectedItem.item) + 1, 0, _cAddedRecord.item);
                        }
                    }
                    insertIndex = updatedCollectionIndex;
                    break;
                case ej.Gantt.AddRowPosition.Child:
                    level = selectedItem.level + 1;
                    parentItem = selectedItem;
                    _cAddedRecord = proxy._createGanttRecord(data, level, parentItem);
                    _cAddedRecord.index = _cAddedRecord.taskId;

                    //validate predecessor of new record
                    validateArgs.data = data;
                    validateArgs.currentRecord = _cAddedRecord;
                    if (!proxy._validateAddRecordPrecessorValue(validateArgs) && proxy._isinAddnewRecord) {
                        return false;
                    }

                    //find next item position
                    var currentItemIndex = flatRecords.indexOf(selectedItem)

                    if (selectedItem.hasChildRecords) {
                        dataChildCount = proxy._$treegridHelper.ejTreeGrid("getChildCount", selectedItem, 0);
                        recordIndex = currentItemIndex + dataChildCount + 1;
                        //Expand Add record's parent item 
                        if (!selectedItem.expanded) {
                            var expanargs = {};
                            expanargs.expanded = true;
                            expanargs.data = selectedItem;
                            proxy._isInAdd = true;
                            proxy.expanding(expanargs);
                            proxy._isInAdd = false;
                            updatedRecords = proxy.getUpdatedRecords();
                        }
                        updatedCollectionIndex = updatedRecords.indexOf(selectedItem) + proxy._getVisibleChildRecordCount(selectedItem, 0, updatedRecords) + 1;

                    } else {
                        selectedItem.hasChildRecords = true;
                        selectedItem.childRecords = [];
                        selectedItem.expanded = true;
                        if (!model.parentTaskIdMapping) {
                            selectedItem.item[model.childMapping] = [];
                        }
                        selectedItem.isMilestone = false;
                        recordIndex = currentItemIndex + 1;
                        updatedCollectionIndex = updatedRecords.indexOf(selectedItem) + 1;
                        selectedItem.predecessor && proxy._updatePredecessorOnIndentOutdent(selectedItem);
                    }
                  
                    /* Record collection update */
                    flatRecords.splice(recordIndex, 0, _cAddedRecord);
                    updatedRecords.splice(updatedCollectionIndex, 0, _cAddedRecord);
                    ids.splice(recordIndex, 0, _cAddedRecord.taskId.toString());

                    /* data Source update */
                    if (!ej.isNullOrUndefined(parentItem)) {
                        childIndex = parentItem.childRecords.indexOf(selectedItem);
                        /*Child collection update*/
                        parentItem.childRecords.splice(childIndex + 1, 0, _cAddedRecord);
                        if (!model.parentTaskIdMapping) {
                            parentItem.item[model.childMapping].splice(childIndex + 1, 0, _cAddedRecord.item);
                        }
                        else {
                            _cAddedRecord.item[model.parentTaskIdMapping] = _cAddedRecord.parentItem.taskId;
                            if (proxy._isDataManagerUpdate) {
                                proxy._jsonData.push(_cAddedRecord.item);

                            } else {
                                dataSource.push(_cAddedRecord.item);
                            }
                        }
                    }
                    insertIndex = updatedCollectionIndex;
                    break;
            }

            //Clear previously selected Item
            proxy._deSelectRowItem()

            /*Updated record collections in treegrid side*/
            proxy._$treegridHelper.ejTreeGrid("setUpdatedRecords", model.flatRecords, model.updatedRecords, model.ids, model.parentRecords, this.dataSource());

            /* Trigger action complete event for further updated*/
            var eventArgs = {};
            eventArgs.requestType = "save";
            eventArgs._cAddedRecord = eventArgs.addedRecord = _cAddedRecord;
            eventArgs.index = insertIndex;
            proxy.actionComplete(eventArgs);

            if (model.enableWBS) {
                proxy.updateWBSdetails();
            }
            /*Set flag for refresh newly added record in non virtalization mode*/
            var treeGridObject = proxy._$treegridHelper.ejTreeGrid("instance");
            if (model.enableVirtualization === false &&
                (treeGridObject.model.sortSettings.sortedColumns.length > 0 || treeGridObject._searchString.length > 0)) {
                proxy._isRefreshAddedRecord = true;
            }
            //Maintain index of newly added row to update scrollbar while selection mode is cell.
            if (model.selectionMode == "cell") {
                var selectedRowIndex = model.updatedRecords.indexOf(_cAddedRecord);
                proxy._$treegridHelper.ejTreeGrid("updateScrollBar", selectedRowIndex);
            }
            else
                /* scroll to new added record */
                proxy._$treegridHelper.ejTreeGrid("updateScrollBar");
            //For dialog add reference
            return true;
        },
        
        /*Update the WBS value of all the records that are below the newly added row*/
        updateWBSdetails: function (targetedRow, isOutdentMinus, isReRenderWBSPred) {
            var proxy = this,
                model = proxy.model,
                dataW = targetedRow ? targetedRow : model.selectionMode == "row" ? model.selectedItem : model.updatedRecords[proxy._rowIndexOfLastSelectedCell];
                      //^^ during indent-outdent    ^^ Newly added row
                newWBS = dataW["WBS"];
           
            //Updating the WBS value of other records that are below the newly added row
            var childItems, markedIndex, markedRecords, dataS, dataLength;
            if (dataW.parentItem) {
                childItems = dataW.parentItem.childRecords;
                markedIndex = childItems.indexOf(dataW);
                dataS = childItems;
                dataLength = dataS.length;
            } else if (model.flatRecords.length) {
                var flatData = model.flatRecords,
                    Level0 = flatData.filter(function (item) {
                        return item && item.level == 0;
                    });
                dataS = Level0;
                markedIndex = dataS.indexOf(dataW);
                dataLength = dataS.length;
            }
            if (isOutdentMinus)
                markedRecords = dataS.slice(markedIndex, dataLength);
            else
                markedRecords = dataS.slice(markedIndex + 1, dataLength);
            if (markedRecords.length) {
                var lastVal = newWBS.lastIndexOf('.') != -1 ? parseInt(newWBS.substr(newWBS.lastIndexOf('.') + 1)) : parseInt(newWBS),
                    parentVal = dataW.parentItem ? dataW.parentItem.WBS : null;
                if (isOutdentMinus && !isReRenderWBSPred)
                    lastVal--;
                else if (isOutdentMinus && isReRenderWBSPred)
                    lastVal = lastVal; // Here we no need to change the last digit of WBS value to update WBS, because it is in updated state
                else
                    lastVal++;
                proxy.reCalculateWBS(markedRecords, lastVal, parentVal);
            }
        },
        
        deleteItem: function () {
            var proxy = this;
            proxy.cancelEditCell();
            proxy._$treegridHelper.ejTreeGrid("deleteRow");
        },

        expandAllItems: function () {
            this.cancelEditCell();
            this._expandAll();
            this.updateSelectedItemIndex();
            this._$treegrid.focus();
        },

        collapseAllItems:function() {
            this._collapseAll();
            this.updateSelectedItemIndex();
            this._$treegrid.focus();
        },
        
          
        indentItem: function () {
            var proxy = this, model = this.model,
                flatRecords = proxy.model.flatRecords,
                ganttRecord = model.selectedItem, indentFlag = true;
            if (model.editSettings.allowIndent == false) {
                return true;
            }

            if (ganttRecord) {
                var recordIndex = flatRecords.indexOf(ganttRecord),
                previousGanttRecord;
                if (recordIndex === 0) {
                    indentFlag = false;
                }
                else {
                    if (ganttRecord.level === 0) {
                        indentFlag = true;
                    }
                    else {
                        previousGanttRecord = flatRecords[recordIndex - 1];
                        if (ganttRecord.level - previousGanttRecord.level === 1) {
                            indentFlag = false;
                        }
                        else {
                            indentFlag = true;
                        }
                    }
                }
            }
            if (indentFlag) {
                this._sendIndentRequest();
            } else {
                return false;
            }
        },

        
        outdentItem:function() {
            this._sendOutdentRequest();
        },
        
        //Updating the Gantt Columns from TreeGrid Columns.
        updateGanttColumns: function (tColumns) {
            var proxy = this,
                model = proxy.model;                
            model.columns = tColumns;
            proxy._columns = tColumns;
        },
        
        cancelEdit:function() {
            this.sendCancelRequest();
        },
        

        
        expandCollapseRecord: function (taskId) {
            var proxy = this, args = {},
                record, model = this.model, expandStatus,
                currentViewIndex, $gridRow, $chartRow;

            record = model.flatRecords[model.ids.indexOf(taskId.toString())];

            if (!ej.isNullOrUndefined(record) && record.hasChildRecords) {
                var args = {};
                args.expanded = record.expanded == true ? false : true;
                expandStatus = proxy.getExpandStatus(record);

                /*If the record is within expanded parent item*/
                if (expandStatus) {
                    args.data = record;
                    if (args.expanded) {
                        proxy.expanding(args);
                    } else {
                        proxy.collapsing(args);
                    }
                }
                /*If the record is within collapsed parent item*/
                else {
                    record.expanded = args.expanded;
                    currentViewIndex = model.currentViewData.indexOf(record);
                    if (currentViewIndex != -1 && !model.enableVirtualization) {
                        $gridRow = $(proxy.getRows()[currentViewIndex]);
                        if (record.expanded) {
                            $gridRow.find(".e-treegridcollapse").removeClass('e-treegridcollapse').addClass('e-treegridexpand');
                            $gridRow.removeClass('e-treegridrowcollapse').addClass('e-treegridrowexpand');
                        } else {
                            $gridRow.find(".e-treegridexpand").removeClass('e-treegridexpand').addClass('e-treegridcollapse');
                            $gridRow.removeClass('e-treegridrowexpand').addClass('e-treegridrowcollapse');
                        }
                    }
                }
            }
        },

        
        saveEdit: function () {
            var proxy = this;
            proxy._$treegridHelper.ejTreeGrid("endEdit");
        },

       // Set the splitter position based on column index.
        setSplitterIndex: function(index)
        {
            var proxy = this,
                model = proxy.model,
                columns = proxy.getColumns(),
                columnWidth = 0,
                treegridContent = $("#ejTreeGrid" + proxy._id + "e-gridcontent");
            columnIndex = parseInt(index);
            if (columnIndex > -1 && columnIndex < columns.length)
            {
                for (var i = 0; i <= columnIndex; i++)
                    columnWidth += columns[i].width;
                if (columnWidth > proxy._ganttWidth) {
                    columnWidth = 0;
                    for (var i = 0; i <= columnIndex; i++) {
                        if ((columnWidth + columns[i].width) <= proxy._ganttWidth) {
                            columnWidth += columns[i].width;
                            index = i;
                        }
                        else {
                            model.splitterSettings.index = index;
                            break;
                        }
                    }
                }
                else
                    model.splitterSettings.index = columnIndex;
                //Check tree grid side have horizontal scrollbar or not.
                if (treegridContent.ejScroller("isHScroll"))
                    treegridContent.ejScroller("scrollLeft", 0);
                proxy.setSplitterPosition(columnWidth.toString());
            }
        },

        // calculation to find critical path.

        showCriticalPath: function (isShown, isRefreshed) {

            var proxy = this, modelRecordIds = this.model.ids, flatRecords = this.model.flatRecords;

            // execute if we enable critical path.
            if (isShown == true) {
                this.isCriticalPathEnable = true;

                // execute if the flat records contains task.
                if (flatRecords.length != 0) {

                    var totalPredecessorsCollection = [], individualPredecessorLength, taskid, todate, fromdateID, collection = [], collectionTaskId = [], criticalPathIds = [],
                        checkBeyondEnddate = [], totalPredecessorsCollectionId = [], taskBeyondEnddate = [], updatedRecords = this.model.flatRecords,
                        parentRecords = this.model.parentRecords, predecessorTaskBeyondEnddate = [], just1 = 0, dateDifference = 0,
                         mediater2 = 0, fromDataObject = [], checkEndDate, checkEndDateTaskid;


                    checkEndDate = this.model.parentRecords[0].endDate;

                    if (this.model.parentRecords[0].manualEndDate > this.model.parentRecords[0].endDate && !this.model.parentRecords[0].isAutoSchedule)
                        checkEndDate = this.model.parentRecords[0].manualEndDate;

                    checkEndDateTaskid = this.model.parentRecords[0].taskId;

                    // Find the total project endDate
                    for (var js = 1; js < parentRecords.length; js++) {
                        if (parentRecords[js].endDate >= checkEndDate) {
                            checkEndDate = parentRecords[js].endDate;
                            checkEndDateTaskid = parentRecords[js].taskId;
                        }
                        if (!parentRecords[js].isAutoSchedule) {
                            if (parentRecords[js].manualEndDate >= checkEndDate) {
                                checkEndDate = parentRecords[js].manualEndDate;
                                checkEndDateTaskid = parentRecords[js].taskId;
                            }
                        }
                    }

                    // find the taskes that ends on total project end date that stored in checkBeyondEnddate
                    // find the taskes with predecessor that stored in totalPredecessorsCollectionId.
                    for (var kk = 0; kk < updatedRecords.length; kk++) {
                        updatedRecords[kk].isCritical = false;
                        dateDifference = proxy._getDuration(updatedRecords[kk].endDate, checkEndDate, updatedRecords[kk].durationUnit, updatedRecords[kk].isAutoSchedule);
                        updatedRecords[kk].slack = dateDifference + " " + updatedRecords[kk].durationUnit;
                        if (updatedRecords[kk].endDate >= checkEndDate) {
                            checkBeyondEnddate.push(updatedRecords[kk].taskId);
                        }
                        if (updatedRecords[kk].predecessor) {
                            if (updatedRecords[kk].predecessor.length != 0) {
                                totalPredecessorsCollection.push(updatedRecords[kk]);
                                totalPredecessorsCollectionId.push(updatedRecords[kk].taskId);
                            }
                        }
                    }

                    // seperate the predecessor connected taskes from the individual taskes that ends on total project end date 
                    for (var ss = 0; ss < checkBeyondEnddate.length; ss++) {
                        if (totalPredecessorsCollectionId.indexOf(checkBeyondEnddate[ss]) == -1) {
                            mediater2 = modelRecordIds.indexOf(checkBeyondEnddate[ss].toString());
                            if (flatRecords[mediater2].status < 100)
                                flatRecords[mediater2].isCritical = true;
                            flatRecords[mediater2].slack = 0 + flatRecords[mediater2].durationUnit;
                            taskBeyondEnddate.push(checkBeyondEnddate[ss]);
                        }
                        else
                            predecessorTaskBeyondEnddate.push(checkBeyondEnddate[ss])
                    }
                    var predecessorLength = totalPredecessorsCollection.length, endTask = [];

                    // find the detail collection of predecessor for each taskes that stored in collection.
                    for (var x = 0; x < predecessorLength; x++) {
                        var to = -1, from = -1, toPredecessor = -1, fromPredecessor = -1;
                        individualPredecessorLength = totalPredecessorsCollection[x].predecessor.length,
                         taskid = parseInt(totalPredecessorsCollection[x].taskId), currentIndex = x;

                        for (var y = 0; y < individualPredecessorLength; y++) {
                            if (totalPredecessorsCollection[x].predecessor[y].from == taskid) {
                                if (to == -1) {
                                    if (!totalPredecessorsCollection[x].predecessor[y].offset) {
                                        to = totalPredecessorsCollection[x].predecessor[y].to;
                                        toPredecessor = totalPredecessorsCollection[x].predecessor[y].predecessorsType;
                                    } else {
                                        to = totalPredecessorsCollection[x].predecessor[y].to + ":" + totalPredecessorsCollection[x].predecessor[y].offset + totalPredecessorsCollection[x].predecessor[y].offsetDurationUnit;
                                        toPredecessor = totalPredecessorsCollection[x].predecessor[y].predecessorsType;
                                    }
                                } else {
                                    if (!totalPredecessorsCollection[x].predecessor[y].offset) {

                                        to = to + "," + totalPredecessorsCollection[x].predecessor[y].to;
                                        toPredecessor = toPredecessor + "," + totalPredecessorsCollection[x].predecessor[y].predecessorsType;
                                    } else {
                                        to = to + "," + totalPredecessorsCollection[x].predecessor[y].to + ":" + totalPredecessorsCollection[x].predecessor[y].offset + totalPredecessorsCollection[x].predecessor[y].offsetDurationUnit;
                                        toPredecessor = toPredecessor + "," + totalPredecessorsCollection[x].predecessor[y].predecessorsType;
                                    }
                                }
                            }
                            if (totalPredecessorsCollection[x].predecessor[y].to == taskid) {
                                if (from == -1) {
                                    if (!totalPredecessorsCollection[x].predecessor[y].offset) {

                                        from = totalPredecessorsCollection[x].predecessor[y].from;
                                        fromPredecessor = totalPredecessorsCollection[x].predecessor[y].predecessorsType;
                                    } else {
                                        from = totalPredecessorsCollection[x].predecessor[y].from + ":" + totalPredecessorsCollection[x].predecessor[y].offset + totalPredecessorsCollection[x].predecessor[y].offsetDurationUnit;
                                        fromPredecessor = totalPredecessorsCollection[x].predecessor[y].predecessorsType;
                                    }
                                } else {
                                    if (!totalPredecessorsCollection[x].predecessor[y].offset) {
                                        from = from + "," + totalPredecessorsCollection[x].predecessor[y].from;
                                        fromPredecessor = fromPredecessor + "," + totalPredecessorsCollection[x].predecessor[y].predecessorsType;
                                    } else {

                                        from = from + "," + totalPredecessorsCollection[x].predecessor[y].from + ":" + totalPredecessorsCollection[x].predecessor[y].offset + totalPredecessorsCollection[x].predecessor[y].offsetDurationUnit;
                                        fromPredecessor = fromPredecessor + "," + totalPredecessorsCollection[x].predecessor[y].predecessorsType;
                                    }
                                }
                            }
                        }
                        if (from == -1) {
                            from = null;
                            fromPredecessor = null;
                        }
                        if (to == -1) {
                            to = null;
                            toPredecessor = null;
                        }
                        collection.push({ from: from, fromPredecessor: fromPredecessor, taskid: taskid, to: to, toPredecessor: toPredecessor, currentIndex: currentIndex, slack: null, ff: 0, fs: 0, enddate: null, fsslack: 0 });
                        collectionTaskId.push(parseInt(taskid));
                    }
                    var collectionLength = collection.length, indexenddate = 0, num;

                    // find the predecessors connected taskes that does not contains any successor.
                    for (var z = 0; z < collectionLength; z++) {
                        if (!collection[z].to) {
                            num = collection[z].taskid;
                            indexenddate = modelRecordIds.indexOf(num.toString());
                            dateDifference = proxy._getDuration(flatRecords[indexenddate].endDate, checkEndDate, "minute",flatRecords[indexenddate].isAutoSchedule);
                            collection[z].slack = dateDifference;
                            collection[z].fs = -1;
                            collection[z].enddate = flatRecords[indexenddate].endDate;
                            endTask.push({ fromdata: collection[z].from, todateID: collection[z].taskid, fromDataPredecessor: collection[z].fromPredecessor });

                        }
                    }
                    for (var k = 0; k < endTask.length; k++) {
                        fromDataObject.push(endTask[k]);
                        proxy._slackCalculation(fromDataObject, collection, collectionTaskId, checkEndDate, flatRecords, modelRecordIds);
                    }
                    criticalPathIds = proxy._finalCriticalPath(collection, taskBeyondEnddate, flatRecords, modelRecordIds);
                    this.criticalPathCollection = criticalPathIds;
                    this.detailPredecessorCollection = collection;
                    this.collectionTaskId = collectionTaskId;
                    if (!isRefreshed) {
                        this._$ganttchartHelper.ejGanttChart("criticalDataMapping", criticalPathIds, isShown, collection, collectionTaskId);
                        this._$ganttchartHelper.ejGanttChart("criticalPathColor", criticalPathIds, isShown, collection, collectionTaskId);
                        proxy._$treegridHelper.ejTreeGrid("refresh");
                    } else if (isRefreshed) {
                        this._$ganttchartHelper.ejGanttChart("criticalDataMapping", criticalPathIds, isShown, collection, collectionTaskId);
                      //proxy._$treegridHelper.ejTreeGrid("refresh");
                    }
                    proxy._enableDisableCriticalIcon = true;
                }
                else {
                    var criticalPathIds = [], collection = [], collectionTaskId = [];
                    if (!isRefreshed) {
                        this._$ganttchartHelper.ejGanttChart("criticalDataMapping", criticalPathIds, isShown, collection, collectionTaskId);
                        this._$ganttchartHelper.ejGanttChart("criticalPathColor", criticalPathIds, isShown, collection, collectionTaskId);
                        this._$treegridHelper.ejTreeGrid("refresh");
                    } else if (isRefreshed) {
                        this._$ganttchartHelper.ejGanttChart("criticalDataMapping", criticalPathIds, isShown, collection, collectionTaskId);
                      //proxy._$treegridHelper.ejTreeGrid("refresh");
                    }
                    proxy._enableDisableCriticalIcon = true;
                }
            }

            // execute if we disable critical path
            if (isShown == false) {
                var criticalPathIds = [], collection = [], collectionTaskId = [], distructIndex = 0;
                this.isCriticalPathEnable = false;
                for (var zs = 0; zs < proxy.criticalPathCollection.length ; zs++) {
                    distructIndex = modelRecordIds.indexOf(proxy.criticalPathCollection[zs].toString());
                    flatRecords[distructIndex].isCritical = false;
                }
                if (!isRefreshed) {
                    this._$ganttchartHelper.ejGanttChart("criticalDataMapping", criticalPathIds, isShown, collection, collectionTaskId);
                    this._$ganttchartHelper.ejGanttChart("criticalPathColor", criticalPathIds, isShown, collection, collectionTaskId);
                    this._$treegridHelper.ejTreeGrid("refresh");
                } else if (isRefreshed) {
                    this._$ganttchartHelper.ejGanttChart("criticalDataMapping", criticalPathIds, isShown, collection, collectionTaskId);
                  //proxy._$treegridHelper.ejTreeGrid("refresh");
                }
                proxy._enableDisableCriticalIcon = false;
            }
        },

        // calculation to find critical task ids with the help of slack values.
        _finalCriticalPath: function (collection, taskBeyondEnddate, flatRecords, modelRecordIds) {
            var proxy = this;
            var criticalPathIds = [], index;
            for (var x = 0; x < collection.length; x++) {
                index = modelRecordIds.indexOf(collection[x].taskid.toString());
                if (flatRecords[index].durationUnit == "day") {
                    flatRecords[index].slack = collection[x].slack / 60 / (proxy._secondsPerDay / 3600)
                    if (flatRecords[index].slack % 1 != 0)
                        flatRecords[index].slack = flatRecords[index].slack.toFixed(2) + " day";
                    else
                        flatRecords[index].slack = flatRecords[index].slack + " day";
                }
                else if (flatRecords[index].durationUnit == "hour") {
                    flatRecords[index].slack = collection[x].slack / 60;
                    if (flatRecords[index].slack % 1 != 0)
                        flatRecords[index].slack = flatRecords[index].slack.toFixed(2) + " hour";
                    else
                        flatRecords[index].slack = flatRecords[index].slack + " hour";
                }
                else {
                    flatRecords[index].slack = collection[x].slack + " minutes";
                }
                if ((collection[x].slack <= 0)) {

                    if (flatRecords[index].status < 100) {
                        flatRecords[index].isCritical = true;
                        criticalPathIds.push(collection[x].taskid);
                    }
                }
            }
            criticalPathIds = criticalPathIds.concat(taskBeyondEnddate);
            return criticalPathIds;
        },

        // calculation to find slack values.
        _slackCalculation: function (fromDataObject, collection, collectionTaskId, checkEndDate, flatRecords, modelRecordIds) {
            var proxy = this, fromDateArray = fromDataObject[0].fromdata.split(","), fromDataPredecessor = fromDataObject[0].fromDataPredecessor.split(","),
                fromDateArray1 = [], fromTaskIdIndex, totaskId, arraylength = fromDateArray.length, prevTaskEnddate, ffslack, mediater, holidayCount, diffInMilliSec, dateDifference, offsetInMillSec;
            for (xx = 0; xx < arraylength; xx++) {
                fromDateArray1 = fromDateArray[xx].split(":");
                fromTaskIdIndex = collectionTaskId.indexOf(parseInt(fromDateArray1[0]));
                totaskId = collectionTaskId.indexOf(parseInt(fromDataObject[0].todateID));

                // calculate slack value for the task contains predecessor connection in "finish to start".
                if (fromDataPredecessor[xx] == "FS") {
                    indexfromtaskid = modelRecordIds.indexOf(fromDateArray1[0].toString());
                    indexenddate = modelRecordIds.indexOf(fromDataObject[0].todateID.toString());
                    if (flatRecords[indexfromtaskid].endDate > flatRecords[indexenddate].startDate)
                        dateDifference = -(proxy._getDuration(flatRecords[indexenddate].startDate, flatRecords[indexfromtaskid].endDate, "minute",flatRecords[indexfromtaskid].isAutoSchedule));
                    else
                        dateDifference = proxy._getDuration(flatRecords[indexfromtaskid].endDate, flatRecords[indexenddate].startDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule);

                    // execute if the slack value is not set initially.
                    if (ej.isNullOrUndefined(collection[fromTaskIdIndex].slack)) {

                        // execute if the offset value is not given.
                        if (fromDateArray1.length <= 1) {
                            if (collection[totaskId].slack + dateDifference < 0) {
                                collection[fromTaskIdIndex].slack = 0;
                            }
                            else {
                                collection[fromTaskIdIndex].slack = collection[totaskId].slack + dateDifference;
                            }
                        }
                            // execute if the offset value is given.
                        else if (fromDateArray1.length > 1) {
                            if (fromDateArray1[1].indexOf("hour") != -1)
                                offsetInMillSec = parseInt(fromDateArray1[1]) * 60;
                            else if (fromDateArray1[1].indexOf("day") != -1)
                                offsetInMillSec = parseInt(fromDateArray1[1]) * (proxy._secondsPerDay / 3600) * 60;
                            else
                                offsetInMillSec = parseInt(fromDateArray1[1]);

                            collection[fromTaskIdIndex].slack = collection[totaskId].slack + dateDifference;
                            collection[fromTaskIdIndex].slack = collection[fromTaskIdIndex].slack - (offsetInMillSec);
                            if (collection[fromTaskIdIndex].slack < 0)
                                collection[fromTaskIdIndex].slack = 0;
                        }
                        collection[fromTaskIdIndex].fs = 1;
                        collection[fromTaskIdIndex].fsslack = collection[fromTaskIdIndex].slack;
                        collection[fromTaskIdIndex].enddate = flatRecords[indexfromtaskid].startDate;;
                    }

                        // execute if the current calculated slack value is less than the previous slack value.
                    else if (collection[fromTaskIdIndex].slack > dateDifference && collection[fromTaskIdIndex].slack != 0) {

                        // execute if the offset value is not given.
                        if (fromDateArray1.length <= 1) {
                            if (collection[totaskId].slack + dateDifference < 0) {
                                collection[fromTaskIdIndex].slack = 0;
                            }
                            else {
                                collection[fromTaskIdIndex].slack = collection[totaskId].slack + dateDifference;
                            }
                        }

                            // execute if the offset value is given.
                        else if (fromDateArray1.length > 1) {

                            if (fromDateArray1[1].indexOf("hour") != -1)
                                offsetInMillSec = parseInt(fromDateArray1[1]) * 60;
                            else if (fromDateArray1[1].indexOf("day") != -1)
                                offsetInMillSec = parseInt(fromDateArray1[1]) * (proxy._secondsPerDay / 3600) * 60;
                            else
                                offsetInMillSec = parseInt(fromDateArray1[1]);

                            collection[fromTaskIdIndex].slack = collection[totaskId].slack + dateDifference;
                            collection[fromTaskIdIndex].slack = collection[fromTaskIdIndex].slack - (offsetInMillSec);
                            if (collection[fromTaskIdIndex].slack < 0)
                                collection[fromTaskIdIndex].slack = 0;
                        }
                        collection[fromTaskIdIndex].fs = 1;
                        collection[fromTaskIdIndex].fsslack = collection[fromTaskIdIndex].slack;
                        collection[fromTaskIdIndex].enddate = flatRecords[indexfromtaskid].startDate;;
                    }
                    if (flatRecords[indexfromtaskid].endDate >= checkEndDate && flatRecords[indexfromtaskid].endDate <= checkEndDate) {
                        collection[fromTaskIdIndex].slack = 0;
                    }
                }

                //  calculate slack value for the task contains predecessor connection in "start to start".
                if (fromDataPredecessor[xx] == "SS") {
                    indexfromtaskid = modelRecordIds.indexOf(fromDateArray1[0].toString());

                    // It execute if the task is in auto mode.
                    if (flatRecords[indexfromtaskid].isAutoSchedule) {
                        indexenddate = modelRecordIds.indexOf(fromDataObject[0].todateID.toString());
                        if (flatRecords[indexfromtaskid].startDate > flatRecords[indexenddate].startDate)
                            dateDifference = -(proxy._getDuration(flatRecords[indexenddate].startDate, flatRecords[indexfromtaskid].startDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule));
                        else
                            dateDifference = proxy._getDuration(flatRecords[indexfromtaskid].startDate, flatRecords[indexenddate].startDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule);

                        // It execute while the slack value is not set to the corresponding task. 
                        if (ej.isNullOrUndefined(collection[fromTaskIdIndex].slack)) {
                            if (fromDateArray1.length <= 1) {
                                if (collection[totaskId].slack + dateDifference < 0) {
                                    collection[fromTaskIdIndex].slack = 0;
                                }
                                else {
                                    collection[fromTaskIdIndex].slack = collection[totaskId].slack + dateDifference;
                                }
                            } else if (fromDateArray1.length > 1) {
                                if (fromDateArray1[1].indexOf("hour") != -1)
                                    offsetInMillSec = parseInt(fromDateArray1[1]) * 60;
                                else if (fromDateArray1[1].indexOf("day") != -1)
                                    offsetInMillSec = parseInt(fromDateArray1[1]) * (proxy._secondsPerDay / 3600) * 60;
                                else
                                    offsetInMillSec = parseInt(fromDateArray1[1]);

                                collection[fromTaskIdIndex].slack = collection[totaskId].slack + dateDifference;
                                collection[fromTaskIdIndex].slack = collection[fromTaskIdIndex].slack - (offsetInMillSec);
                                if (collection[fromTaskIdIndex].slack < 0)
                                    collection[fromTaskIdIndex].slack = 0;
                            }
                            collection[fromTaskIdIndex].fs = 1;
                            collection[fromTaskIdIndex].fsslack = collection[fromTaskIdIndex].slack;
                            collection[fromTaskIdIndex].enddate = flatRecords[indexfromtaskid].startDate;;
                        }
                            //It execute while already the slack value is set and it is higher than the datedifference. 
                        else if (collection[fromTaskIdIndex].slack > dateDifference && collection[fromTaskIdIndex].slack != 0) {
                            if (fromDateArray1.length <= 1) {
                                if (collection[totaskId].slack + dateDifference < 0) {
                                    collection[fromTaskIdIndex].slack = 0;
                                }
                                else {
                                    collection[fromTaskIdIndex].slack = collection[totaskId].slack + dateDifference;
                                }
                            } else if (fromDateArray1.length > 1) {

                                if (fromDateArray1[1].indexOf("hour") != -1)
                                    offsetInMillSec = parseInt(fromDateArray1[1]) * 60;
                                else if (fromDateArray1[1].indexOf("day") != -1)
                                    offsetInMillSec = parseInt(fromDateArray1[1]) * (proxy._secondsPerDay / 3600) * 60;
                                else
                                    offsetInMillSec = parseInt(fromDateArray1[1]);

                                collection[fromTaskIdIndex].slack = collection[totaskId].slack + dateDifference;
                                collection[fromTaskIdIndex].slack = collection[fromTaskIdIndex].slack - (offsetInMillSec);
                                if (collection[fromTaskIdIndex].slack < 0)
                                    collection[fromTaskIdIndex].slack = 0;
                            }
                            collection[fromTaskIdIndex].fs = 1;
                            collection[fromTaskIdIndex].fsslack = collection[fromTaskIdIndex].slack;
                            collection[fromTaskIdIndex].enddate = flatRecords[indexfromtaskid].startDate;;
                        }
                    }
                        // It execute if the task is in not an auto mode task.
                    else if (!flatRecords[indexfromtaskid].isAutoSchedule) {
                        enddate = 0;
                        dateDifference = proxy._getDuration(flatRecords[indexfromtaskid].endDate, checkEndDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule);
                        if (ej.isNullOrUndefined(collection[fromTaskIdIndex].slack)) {
                            collection[fromTaskIdIndex].slack = dateDifference;
                        }
                        else if (collection[fromTaskIdIndex].slack > dateDifference && collection[fromTaskIdIndex].slack != 0) {
                            collection[fromTaskIdIndex].slack = dateDifference;
                        }
                    }
                    if (flatRecords[indexfromtaskid].endDate >= checkEndDate && flatRecords[indexfromtaskid].endDate <= checkEndDate) {
                        collection[fromTaskIdIndex].slack = 0;
                    }
                }

                //  calculate slack value for the task contains predecessor connection in "finish to finish".
                if (fromDataPredecessor[xx] == "FF") {

                    // execute if the previous task is from finish to start or finish to finish state.
                    if (collection[totaskId].fs == 1 || collection[totaskId].ff == 1 || collection[totaskId].fs == -1) {
                        indexfromtaskid = modelRecordIds.indexOf(fromDateArray1[0].toString());
                        indexenddate = modelRecordIds.indexOf(fromDataObject[0].todateID.toString());

                        if (collection[totaskId].fs == 1) {
                            prevTaskEnddate = flatRecords[indexenddate].endDate;
                            ffslack = collection[totaskId].slack;
                        }
                        else if (collection[totaskId].ff == 1) {
                            prevTaskEnddate = flatRecords[indexenddate].endDate;
                            ffslack = collection[totaskId].slack;
                        }
                        if (collection[totaskId].fs == -1) {
                            prevTaskEnddate = collection[totaskId].enddate;
                            ffslack = collection[totaskId].slack;
                        }
                        if (prevTaskEnddate > flatRecords[indexfromtaskid].endDate)
                            dateDifference = -(proxy._getDuration(flatRecords[indexfromtaskid].endDate, prevTaskEnddate, "minute", flatRecords[indexfromtaskid].isAutoSchedule));
                        else
                            dateDifference = proxy._getDuration(prevTaskEnddate, flatRecords[indexfromtaskid].endDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule);

                        // set the slack value if the slack value is not set initially.
                        if (ej.isNullOrUndefined(collection[fromTaskIdIndex].slack)) {

                            // execute if the offset value is not given.
                            if (fromDateArray1.length <= 1) {
                                if (ffslack - dateDifference < 0) {
                                    collection[fromTaskIdIndex].slack = 0;
                                }
                                else {
                                    collection[fromTaskIdIndex].slack = ffslack - dateDifference;
                                }
                            }
                                // execute if the offset value is given.
                            else if (fromDateArray1.length > 1) {

                                if (fromDateArray1[1].indexOf("hour") != -1)
                                    offsetInMillSec = parseInt(fromDateArray1[1]) * 60;
                                else if (fromDateArray1[1].indexOf("day") != -1)
                                    offsetInMillSec = parseInt(fromDateArray1[1]) * (proxy._secondsPerDay / 3600) * 60;
                                else
                                    offsetInMillSec = parseInt(fromDateArray1[1]);

                                collection[fromTaskIdIndex].slack = collection[totaskId].slack - dateDifference;
                                collection[fromTaskIdIndex].slack = collection[fromTaskIdIndex].slack - (offsetInMillSec);
                                if (collection[fromTaskIdIndex].slack < 0)
                                    collection[fromTaskIdIndex].slack = 0;
                            }
                            collection[fromTaskIdIndex].ff = 1;
                            collection[fromTaskIdIndex].enddate = prevTaskEnddate;
                            collection[fromTaskIdIndex].fsslack = ffslack;
                        }
                            // overright the slack value if the current calculated slack value is less than the previous slack value.
                        else if (collection[fromTaskIdIndex].slack > dateDifference && collection[fromTaskIdIndex].slack != 0) {

                            // execute if the offset value is not given.
                            if (fromDateArray1.length <= 1) {
                                if (ffslack - dateDifference < 0) {
                                    collection[fromTaskIdIndex].slack = 0;
                                }
                                else {
                                    collection[fromTaskIdIndex].slack = ffslack - dateDifference;
                                }
                            }
                                // execute if the offset value is given.
                            else if (fromDateArray1.length > 1) {

                                if (fromDateArray1[1].indexOf("hour") != -1)
                                    offsetInMillSec = parseInt(fromDateArray1[1]) * 60;
                                else if (fromDateArray1[1].indexOf("day") != -1)
                                    offsetInMillSec = parseInt(fromDateArray1[1]) * (proxy._secondsPerDay / 3600) * 60;
                                else
                                    offsetInMillSec = parseInt(fromDateArray1[1]);

                                collection[fromTaskIdIndex].slack = collection[totaskId].slack - dateDifference;
                                collection[fromTaskIdIndex].slack = collection[fromTaskIdIndex].slack - (offsetInMillSec);
                                if (collection[fromTaskIdIndex].slack < 0)
                                    collection[fromTaskIdIndex].slack = 0;
                            }
                            collection[fromTaskIdIndex].ff = 1;
                            collection[fromTaskIdIndex].enddate = prevTaskEnddate;
                            collection[fromTaskIdIndex].fsslack = ffslack;
                        }
                    }
                        // execute if the previous task is from start to start or start to finish state.
                    else {
                        indexfromtaskid = modelRecordIds.indexOf(fromDateArray1[0].toString());
                        dateDifference = proxy._getDuration(flatRecords[indexfromtaskid].endDate, checkEndDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule);

                        // execute if the slack value is not set initially.
                        if (ej.isNullOrUndefined(collection[fromTaskIdIndex].slack)) {
                            // execute if the offset value is not given.
                            if (fromDateArray1.length <= 1) {
                                if (ej.isNullOrUndefined(collection[fromTaskIdIndex].slack))
                                    collection[fromTaskIdIndex].slack = dateDifference;
                                else if (collection[fromTaskIdIndex].slack > dateDifference)
                                    collection[fromTaskIdIndex].slack = dateDifference;

                            }
                                // execute if the offset value is given.
                            else if (fromDateArray1.length > 1) {
                                if (fromDateArray1[1].indexOf("hour") != -1)
                                    offsetInMillSec = parseInt(fromDateArray1[1]) * 60;
                                else if (fromDateArray1[1].indexOf("day") != -1)
                                    offsetInMillSec = parseInt(fromDateArray1[1]) * (proxy._secondsPerDay / 3600) * 60;
                                else
                                    offsetInMillSec = parseInt(fromDateArray1[1]);

                                collection[fromTaskIdIndex].slack = dateDifference;
                                collection[fromTaskIdIndex].slack = collection[fromTaskIdIndex].slack - (offsetInMillSec);
                                if (collection[fromTaskIdIndex].slack < 0)
                                    collection[fromTaskIdIndex].slack = 0;
                            }
                        }
                            // execute if the current calculated slack value is less than the previous slack value.
                        else if (collection[fromTaskIdIndex].slack > dateDifference && collection[fromTaskIdIndex].slack != 0) {
                            // execute if the offset value is not given.
                            if (fromDateArray1.length <= 1) {
                                if (ej.isNullOrUndefined(collection[fromTaskIdIndex].slack))
                                    collection[fromTaskIdIndex].slack = dateDifference;
                                else if (collection[fromTaskIdIndex].slack > dateDifference)
                                    collection[fromTaskIdIndex].slack = dateDifference;
                            }
                                // execute if the offset value is not given.
                            else if (fromDateArray1.length > 1) {
                                if (fromDateArray1[1].indexOf("hour") != -1)
                                    offsetInMillSec = parseInt(fromDateArray1[1]) * 60;
                                else if (fromDateArray1[1].indexOf("day") != -1)
                                    offsetInMillSec = parseInt(fromDateArray1[1]) * (proxy._secondsPerDay / 3600) * 60;
                                else
                                    offsetInMillSec = parseInt(fromDateArray1[1]);

                                collection[fromTaskIdIndex].slack = dateDifference;
                                collection[fromTaskIdIndex].slack = collection[fromTaskIdIndex].slack - (offsetInMillSec);
                                if (collection[fromTaskIdIndex].slack < 0)
                                    collection[fromTaskIdIndex].slack = 0;
                            }
                        }
                        collection[fromTaskIdIndex].ff = 1;
                    }
                    if (flatRecords[indexfromtaskid].endDate >= checkEndDate && flatRecords[indexfromtaskid].endDate <= checkEndDate) {
                        collection[fromTaskIdIndex].slack = 0;
                    }
                }

                //  calculate slack value for the task contains predecessor connection in "start to finish".
                if (fromDataPredecessor[xx] == "SF") {
                    indexfromtaskid = modelRecordIds.indexOf(fromDateArray1[0].toString());

                    //It execute if the task is an auto mode task.
                    if (flatRecords[indexfromtaskid].isAutoSchedule) {
                        //execute if the slack value is not set initially.
                        if (ej.isNullOrUndefined(collection[fromTaskIdIndex].slack)) {
                            // execute if the offset value is not given.
                            if (fromDateArray1.length <= 1) {
                                // execute if the previous task does no has sucessor. 
                                if (ej.isNullOrUndefined(collection[totaskId].to)) {
                                    indexfromtaskid = modelRecordIds.indexOf(fromDateArray1[0].toString());
                                    dateDifference = proxy._getDuration(flatRecords[indexfromtaskid].endDate, checkEndDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule);
                                    collection[fromTaskIdIndex].slack = dateDifference;
                                }
                                    // execute if the previous task has sucessor.
                                else if (!ej.isNullOrUndefined(collection[totaskId].to)) {
                                    indexfromtaskid = modelRecordIds.indexOf(fromDateArray1[0].toString());
                                    indexenddate = modelRecordIds.indexOf(fromDataObject[0].todateID.toString());
                                    if (flatRecords[indexenddate].endDate > flatRecords[indexfromtaskid].startDate)
                                        dateDifference = -(proxy._getDuration(flatRecords[indexfromtaskid].startDate, flatRecords[indexenddate].endDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule));
                                    else
                                        dateDifference = proxy._getDuration(flatRecords[indexenddate].endDate, flatRecords[indexfromtaskid].startDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule);
                                    if (collection[totaskId].slack + dateDifference < 0) {
                                        collection[fromTaskIdIndex].slack = 0;
                                    }
                                    else {
                                        collection[fromTaskIdIndex].slack = collection[totaskId].slack + dateDifference;
                                    }
                                }
                            }
                                // execute if the offset value is given.
                            else if (fromDateArray1.length > 1) {
                                indexfromtaskid = modelRecordIds.indexOf(fromDateArray1[0].toString());
                                indexenddate = modelRecordIds.indexOf(fromDataObject[0].todateID.toString());
                                if (flatRecords[indexenddate].endDate > flatRecords[indexfromtaskid].endDate) {
                                    if (flatRecords[indexfromtaskid].startDate > flatRecords[indexenddate].endDate)
                                        dateDifference = -(proxy._getDuration(flatRecords[indexenddate].endDate, flatRecords[indexfromtaskid].startDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule));
                                    else
                                        dateDifference = proxy._getDuration(flatRecords[indexfromtaskid].startDate, flatRecords[indexenddate].endDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule);
                                } else {
                                    dateDifference = proxy._getDuration(flatRecords[indexfromtaskid].endDate, checkEndDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule);
                                }
                                if (fromDateArray1[1].indexOf("hour") != -1)
                                    offsetInMillSec = parseInt(fromDateArray1[1]) * 60;
                                else if (fromDateArray1[1].indexOf("day") != -1)
                                    offsetInMillSec = parseInt(fromDateArray1[1]) * (proxy._secondsPerDay / 3600) * 60;
                                else
                                    offsetInMillSec = parseInt(fromDateArray1[1]);

                                collection[fromTaskIdIndex].slack = collection[totaskId].slack + dateDifference;
                                collection[fromTaskIdIndex].slack = collection[fromTaskIdIndex].slack - (offsetInMillSec);
                                if (collection[fromTaskIdIndex].slack < 0)
                                    collection[fromTaskIdIndex].slack = 0;
                            }
                            collection[fromTaskIdIndex].fs = 1;
                            collection[fromTaskIdIndex].fsslack = collection[fromTaskIdIndex].slack;
                            collection[fromTaskIdIndex].enddate = flatRecords[indexfromtaskid].startDate;
                        }
                        else {

                            if (fromDateArray1.length <= 1) {
                                if (ej.isNullOrUndefined(collection[totaskId].to)) {
                                    indexfromtaskid = modelRecordIds.indexOf(fromDateArray1[0].toString());
                                    dateDifference = proxy._getDuration(flatRecords[indexfromtaskid].endDate, checkEndDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule);
                                } else if (!ej.isNullOrUndefined(collection[totaskId].to)) {
                                    indexfromtaskid = modelRecordIds.indexOf(fromDateArray1[0].toString());
                                    indexenddate = modelRecordIds.indexOf(fromDataObject[0].todateID.toString());
                                    if (flatRecords[indexenddate].endDate > flatRecords[indexfromtaskid].startDate)
                                        dateDifference = -(proxy._getDuration(flatRecords[indexfromtaskid].startDate, flatRecords[indexenddate].endDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule));
                                    else
                                        dateDifference = proxy._getDuration(flatRecords[indexenddate].endDate, flatRecords[indexfromtaskid].startDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule);

                                }
                                // execute if the current calculated slack value is less than the previous slack value.
                                if (collection[fromTaskIdIndex].slack > dateDifference && collection[fromTaskIdIndex].slack != 0) {
                                    if (ej.isNullOrUndefined(collection[totaskId].to)) {
                                        collection[fromTaskIdIndex].slack = dateDifference;
                                    } else if (!ej.isNullOrUndefined(collection[totaskId].to)) {
                                        if (collection[totaskId].slack + dateDifference < 0) {
                                            collection[fromTaskIdIndex].slack = 0;
                                        }
                                        else {
                                            collection[fromTaskIdIndex].slack = collection[totaskId].slack + dateDifference;
                                        }
                                    }
                                }
                            } else if (fromDateArray1.length > 1) {
                                indexfromtaskid = modelRecordIds.indexOf(fromDateArray1[0].toString());
                                indexenddate = modelRecordIds.indexOf(fromDataObject[0].todateID.toString());

                                if (flatRecords[indexenddate].endDate > flatRecords[indexfromtaskid].endDate) {
                                    if (flatRecords[indexfromtaskid].startDate > flatRecords[indexenddate].endDate)
                                        dateDifference = -(proxy._getDuration(flatRecords[indexenddate].endDate, flatRecords[indexfromtaskid].startDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule));
                                    else
                                        dateDifference = proxy._getDuration(flatRecords[indexfromtaskid].startDate, flatRecords[indexenddate].endDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule);
                                } else {
                                    dateDifference = proxy._getDuration(flatRecords[indexfromtaskid].endDate, checkEndDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule);
                                }
                                // execute if the current calculated slack value is less than the previous slack value.
                                if (collection[fromTaskIdIndex].slack > dateDifference && collection[fromTaskIdIndex].slack != 0) {
                                    if (fromDateArray1[1].indexOf("hour") != -1)
                                        offsetInMillSec = parseInt(fromDateArray1[1]) * 60;
                                    else if (fromDateArray1[1].indexOf("day") != -1)
                                        offsetInMillSec = parseInt(fromDateArray1[1]) * (proxy._secondsPerDay / 3600) * 60;
                                    else
                                        offsetInMillSec = parseInt(fromDateArray1[1]);

                                    collection[fromTaskIdIndex].slack = collection[totaskId].slack + dateDifference;
                                    collection[fromTaskIdIndex].slack = collection[fromTaskIdIndex].slack - (offsetInMillSec);
                                    if (collection[fromTaskIdIndex].slack < 0)
                                        collection[fromTaskIdIndex].slack = 0;
                                }
                            }
                            collection[fromTaskIdIndex].fs = 1;
                            collection[fromTaskIdIndex].fsslack = collection[fromTaskIdIndex].slack;
                            collection[fromTaskIdIndex].enddate = flatRecords[indexfromtaskid].startDate;
                        }
                    }
                        //It execute if the task is an auto mode task.
                    else if (!flatRecords[indexfromtaskid].isAutoSchedule) {
                        dateDifference = proxy._getDuration(flatRecords[indexfromtaskid].endDate, checkEndDate, "minute", flatRecords[indexfromtaskid].isAutoSchedule);
                        if (ej.isNullOrUndefined(collection[fromTaskIdIndex].slack)) {
                            collection[fromTaskIdIndex].slack = dateDifference;
                        }
                        else if (collection[fromTaskIdIndex].slack > dateDifference && collection[fromTaskIdIndex].slack != 0) {
                            collection[fromTaskIdIndex].slack = dateDifference;
                        }
                    }
                    if (flatRecords[indexfromtaskid].endDate >= checkEndDate && flatRecords[indexfromtaskid].endDate <= checkEndDate) {
                        collection[fromTaskIdIndex].slack = 0;
                    }
                }
                if (collection[fromTaskIdIndex].from)
                    fromDataObject.push({ fromdata: collection[fromTaskIdIndex].from, todateID: collection[fromTaskIdIndex].taskid, fromDataPredecessor: collection[fromTaskIdIndex].fromPredecessor });
            }
            if (fromDataObject) {
                fromDataObject.splice(0, 1);
                if (fromDataObject.length > 0)
                    proxy._slackCalculation(fromDataObject, collection, collectionTaskId, checkEndDate, flatRecords, modelRecordIds);
            }
        },

        setSplitterPosition: function(width)
        {
            var proxy = this,
                model = proxy.model,
                leftPansize = 0,
                rightPaneSize = 0;
                ganttWidth = parseInt(proxy._ganttWidth) - proxy._totalBorderWidth,
                isPercentage = false;
            if (!ej.isNullOrUndefined(width)) {
                if (width.indexOf("%") != -1){
                    leftPaneSize = parseInt(width);
                    isPercentage = true;
                }
                else
                {
                    leftPaneSize = parseInt(width) / proxy._ganttWidth * 100;
                    isPercentage = false;
                }
                leftPaneSize = isNaN(leftPaneSize) ? 0 : leftPaneSize;
                
                //Check the grid width is less than or equal to 100% of gantt width.
                if (leftPaneSize <= 100)
                {
                    leftPaneSize = leftPaneSize < 0 ? 0 : leftPaneSize;
                    //Here 9 is the splitter span width
                    rightPaneSize = 100 - leftPaneSize - (9 / ganttWidth * 100);
                    // Check the right pane size is less than or equal to 0.
                    // if it is less than 0 mean adjust rightpane size is 0 and left pane size is 100
                    if (rightPaneSize <= 0)
                    {
                        if (isPercentage)
                            proxy.splitterPosition("100%");
                        else
                            proxy.splitterPosition(ganttWidth.toString());
                        leftPaneSize = 100 - (9 / ganttWidth * 100);
                        rightPaneSize = 0;
                    }
                    else if (rightPaneSize > 0) {
                        if (isPercentage)
                            proxy.splitterPosition(Math.round(leftPaneSize) + "%");
                        else
                            proxy.splitterPosition(Math.round((leftPaneSize * proxy._ganttWidth / 100)).toString());
                    }
                    var splitter = $("#e-ejSpliter" + proxy._id).ejSplitter("instance");
                    // Set left and right pane size to ejSplitter
                    splitter.model.properties[0].paneSize = leftPaneSize+"%";
                    splitter.model.properties[1].paneSize = rightPaneSize + "%";
                    splitter.refresh();
                    proxy._$treegridHelper.ejTreeGrid("refreshScroller", Math.round((leftPaneSize * ganttWidth) / 100));
                    proxy._$ganttchartHelper.ejGanttChart("refreshScroller", splitter.model.properties[1].paneSize - 1);
                    proxy._clearContextMenu();
                }
                else
                {
                    var splitter = $("#e-ejSpliter" + proxy._id).ejSplitter("instance");
                    var leftPaneSize = splitter.model.properties[0].paneSize;
                    var rightPaneSize = splitter.model.properties[1].paneSize;
                    if (parseInt(rightPaneSize) == 0)
                    {
                        if (isPercentage)
                            proxy.splitterPosition("100%");
                        else
                            proxy.splitterPosition(ganttWidth.toString());
                    }
                    else
                    {
                        if (isPercentage)
                            proxy.splitterPosition(Math.round((parseInt(leftPaneSize) / ganttWidth * 100)) + "%");
                        else
                            proxy.splitterPosition((leftPaneSize).toString());
                    }

                }
                proxy._splitterPosition(proxy.splitterPosition());
            }
        },

        _showTooltip: function (boolValue) {
            var proxy = this;
            this.model.enableTaskbarTooltip = boolValue;
            proxy._$ganttchartHelper.ejGanttChart("showTooltip", boolValue);
        },

        _showEditingTooltip: function (boolValue) {
            var proxy = this;
            this.model.enableTaskbarDragTooltip = boolValue;
            proxy._$ganttchartHelper.ejGanttChart("showEditingTooltip", boolValue);
        },
        
        _ganttChartEditing:function(boolValue) {
            var proxy = this;
            proxy.model.allowGanttChartEditing = boolValue;
            proxy._$ganttchartHelper.ejGanttChart("ganttChartEditing", boolValue);
        },
        
        _resizeProgressbar: function (boolValue) {
            var proxy = this;
            proxy.model.enableProgressBarResizing = boolValue;
            proxy._$ganttchartHelper.ejGanttChart("resizeProgressbar", boolValue);

        },

        _milestoneTemplate: function (value) {
            var proxy = this;
            proxy.model.milestoneTemplate = value;
            proxy._$ganttchartHelper.ejGanttChart("changeMilestoneTemplate", proxy.model.milestoneTemplate);
        },

        _taskbarTemplate: function (value) {
            var proxy = this;
            proxy.model.taskbarTemplate = value;
            proxy._$ganttchartHelper.ejGanttChart("changeTaskbarTemplate", proxy.model.taskbarTemplate);
        },

        _parentTaskbarTemplate: function (value) {
            var proxy = this;
            proxy.model.parentTaskbarTemplate = value;
            proxy._$ganttchartHelper.ejGanttChart("changeParentTaskbarTemplate", proxy.model.parentTaskbarTemplate);
        },
        _sendSortingRequest: function(sortSettings) {
            var proxy = this, columnName, columnSortDirection;
            columnName = sortSettings.sortedColumns[0].field;
            columnSortDirection = sortSettings.sortedColumns[0].direction;
            proxy._$treegridHelper.ejTreeGrid("sortColumn", columnName, columnSortDirection);
        },
        
        _sortingRequest: function (boolValue) {
            var proxy = this, model = proxy.model, sorting;
            proxy.model.allowSorting = boolValue;           
            proxy._$treegridHelper.ejTreeGrid("sortSetting", boolValue);
        },
        _columnIndex: function (value) {
            var proxy = this;
            proxy._$treegridHelper.ejTreeGrid("columnIndex", value);
        },
        sendCancelRequest: function () {
            var proxy = this,
                toolbar = $("#" + proxy._id + "_toolbarItems");
            proxy._$treegridHelper.ejTreeGrid("cancelEditCell");

            if (proxy.model.toolbarSettings.toolbarItems.indexOf("cancel") !== -1) {
                proxy._disabledToolItems.push($(toolbar).find(".e-cancel").parent()[0]);
            }

            if (proxy.model.toolbarSettings.toolbarItems.indexOf("save") !== -1) {
                proxy._disabledToolItems.push($(toolbar).find(".e-saveitem").parent()[0]);
            }

            $(toolbar).ejToolbar('disableItem', proxy._disabledToolItems);
            proxy._disabledToolItems = [];
        },
        
        _sendAddRequest: function () {
            
            var proxy = this,                
                columns = proxy._columns,
                length = columns.length,
                columnCount = 0,
                cloneData = {},
                fieldData = {},
                args = {};
            proxy._isinAddnewRecord = true;
            
            for (columnCount; columnCount < length; columnCount++)
                columns[columnCount].mappingName && (cloneData[columns[columnCount].mappingName] = "");

            args.data = cloneData;
            args.requestType = "add";
            proxy.renderedEditDialog(args);
        },

        _sendEditRequest: function ($tr) {
            var proxy = this,
                model = proxy.model,
                args={},
                data;
            
            if (ej.isNullOrUndefined($tr)) {
                proxy._currentTrIndex = model.selectionMode == "row" ? this.selectedRowIndex() : proxy._rowIndexOfLastSelectedCell;
                proxy._$currentTr = $(proxy._$treegridHelper.ejTreeGrid("getRows")).eq(this.selectedRowIndex());
            } else {
                proxy._currentTrIndex = $tr.index();
                proxy._$currentTr = $tr;
            }
            data = proxy.getUpdatedRecords()[proxy._currentTrIndex];

            args.data = data;
            args.requestType = "beginedit";
            if (args.data)
                proxy.renderedEditDialog(args);
        },
        _updateAddData: function (obj, rowPosition)
        {
            var proxy = this, model = this.model, id, startDate;
           
            if (!obj[model.taskIdMapping])
            {
                id= model.flatRecords.length;
                id = proxy._getNewTaskId(id);
                obj[model.taskIdMapping] = id;
            }

            if (model.taskNameMapping && !obj[model.taskNameMapping]) {
                obj[model.taskNameMapping] = proxy._newTaskTexts["newTaskName"] + " " + obj[model.taskIdMapping];
            }

            if (!obj[model.startDateMapping]) {
                obj[model.startDateMapping] = model.scheduleStartDate;
            }

            if (model.durationMapping && ej.isNullOrUndefined(obj[model.durationMapping])) {
                if (!obj[model.endDateMapping])
                    obj[model.durationMapping] = "5";
            }
            if (model.progressMapping) {
                obj[model.progressMapping] = obj[model.progressMapping] ? (obj[model.progressMapping] > 100 ? 100 : obj[model.progressMapping]) : 0;
            }

            if (!obj[model.endDateMapping] && model.endDateMapping) {

                if (!obj[model.durationMapping]) {
                    var startDate = proxy._getDateFromFormat(model.scheduleStartDate);
                    startDate.setDate(startDate.getDate() + 4);
                    obj[model.endDateMapping] = ej.format(startDate, this.model.dateFormat, this.model.locale);
                }
            }
            if (model.enableWBS && !obj["WBS"]) {
                obj["WBS"] = proxy._getNewWBSid(rowPosition);
            }
             if(model.enableWBS && !obj["WBS"])
            {
                obj["WBS"] = proxy._getNewWBSid(rowPosition);
             }
             if (!ej.isNullOrUndefined(model.selectedItem)) {
                 obj["taskType"] = model.selectedItem.taskType;
                 obj["effortDriven"] = model.selectedItem.effortDriven;
             }
        },
        _sendSaveRequest: function (saveType) {
            var obj = {},
                doc = document,
                proxy = this,
                model = proxy.model,
                index = 0,
                formelement,
                length,
                editedRowWrap,
                columnName,
                $element,
                startdate,
                enddate,
                column,
                value, dialogId, treeGridId, resourceGridId, customGridId, noteRteId,
                args = {},
                generalColumns, generalColumnsLength, customColumns, customColumnsLength;
            this._duplicate = false;
            this._wrongenddate = false;
            if (saveType === "Add")
            {
                formelement = doc.querySelectorAll("#" + proxy._id + "GeneralAddForm", "#" + proxy._id + "PredecessorAddForm", "#" + proxy._id + "ReosurceAddForm", "#" + proxy._id + "CustomFieldsAddForm");
                length = formelement && formelement.length;
                dialogId = "Add";
                treeGridId = "#treegrid" + proxy._id + "predecessorAdd";
                resourceGridId = "#treegrid" + proxy._id + "resourceAdd";
                customGridId = "#treegrid" + proxy._id + "customFieldAdd";
                noteRteId = "#" + proxy._id + "AddAreaNotes";
                $element = $("#" + proxy._id + "taskId" + dialogId);             
                column = ej.TreeGrid.getColumnByField(proxy._columns, "taskId");
                proxy._cellEditColumn = column;
                generalColumns = proxy._addDialogGeneralColumns;
                generalColumnsLength = generalColumns.length;
                customColumns = proxy._addDialogCustomColumns;
                customColumnsLength = customColumns.length;
                if (column && $element.length>0)
                    value = proxy.getCurrentEditCellData($element, column.dropdownData);

                if (proxy.model.ids.indexOf(value) != -1 && value)
                    this._duplicate = true;
                else if (value) {
                    this._duplicate = false;
                }

                if (!this.addFormValidate())
                    return true;
            }
            else
            {
                formelement = doc.getElementById(proxy._id + "GeneralEditForm");
                length = formelement && formelement.length;
                treeGridId = "#treegrid" + proxy._id + "predecessorEdit";
                resourceGridId = "#treegrid" + proxy._id + "resourceEdit";
                customGridId = "#treegrid" + proxy._id + "customFieldEdit";
                noteRteId = "#" + proxy._id + "EditAreaNotes";
                dialogId = "Edit";
                generalColumns = proxy._editDialogGeneralColumns;
                generalColumnsLength = generalColumns.length;
                customColumns = proxy._editDialogCustomColumns;
                customColumnsLength = customColumns.length;

                if (!this.editFormValidate())
                    return true;
            }
            editedRowWrap = $(formelement).closest('div');                    
                      
            if (!this._duplicate) {


                for (var count = 0; count < generalColumnsLength; count++) {
                    $element = $(formelement).find("#" + proxy._id + generalColumns[count].field + dialogId);
                    if ($element.length > 0) {
                        proxy._cellEditColumn = generalColumns[count];
                        if (proxy._cellEditColumn.field == "duration" || proxy._cellEditColumn.field == "startDate" || proxy._cellEditColumn.field == "endDate") {
                            obj[generalColumns[count].mappingName] = this._editedDialogRecord[proxy._cellEditColumn.field];
                            if (proxy._cellEditColumn.field == "duration" && model.durationUnitMapping) {
                                obj[model.durationUnitMapping] = this._editedDialogRecord.durationUnit;
                            }
                            continue;
                        }
                        value = proxy.getCurrentEditCellData($element, generalColumns[count].dropdownData); // formelement[index].value;
                        if (proxy._isinAddnewRecord === false && generalColumns[count].mappingName === proxy.model.predecessorMapping) {
                            args.previousValue = proxy._updatePredecessorValue(obj, value);
                        }
                        /*Validate progress value is null or undefined*/
                        if (generalColumns[count].mappingName === proxy.model.progressMapping && ej.isNullOrUndefined(value))
                            value = 0;
                        if (proxy._cellEditColumn.field == "work" || proxy._cellEditColumn.field == "taskType" || proxy._cellEditColumn.field == "effortDriven")
                            obj[generalColumns[count].field] = value;
                        else
                        obj[generalColumns[count].mappingName] = value;
                    }
                }

                // Get the custom column values from custom column table.
                if ($(customGridId).length) {
                    var data = $(customGridId).ejTreeGrid("model.updatedRecords");
                    for (var count = 0; count < customColumnsLength; count++) {
                        if (customColumns[count].editType == "dropdownedit")
                            obj[customColumns[count].mappingName] = data[count].value;
                        else
                            obj[customColumns[count].mappingName] = data[count].text;
                    }
                }
                // Adding notes value to newly added task.
                var noteRte = $(noteRteId);
                if (noteRte.length) {
                    obj[model.notesMapping] = noteRte.ejRTE("getHtml");
                    obj[model.notesMapping + "Text"] = noteRte.ejRTE("getText");;
                }

                date1 = proxy._getDateFromFormat(obj[model.startDateMapping]);
                date2 = proxy._getDateFromFormat(obj[model.endDateMapping]);
                var diffdays=0;
                if (date1 && date2)
                    diffdays = date2.getTime() - date1.getTime();
                if (diffdays < 0)
                    this._wrongenddate = true;
                else
                    this._wrongenddate = false;
                if (!this._wrongenddate) {
                    // when adding new task resource value changes.
                    var resourceGrid = $(resourceGridId), resourceFlag = true;
                    if (resourceGrid.length > 0) {
                        var resource = [];
                        var data = $(resourceGridId).ejTreeGrid("option", "dataSource"),
                            selectedRowIndex = $(resourceGridId).ejTreeGrid("option", "selectedRowIndex");
                        $.each(data, function (indx, value) {
                            if (value.name != null && value.name != "") {
                                var index = $.map(model.resources, function (resource, index) {
                                    if (resource[model.resourceIdMapping].toString() == value.name) {
                                        return index;
                                    }
                                });
                                
                                var newResource = model.resources[index[0]];
                                if (saveType === "Add") {
                                    resource.push(newResource[model.resourceIdMapping]);
                                    newResource[model.resourceUnitMapping] = value.unit;
                                    proxy._newRecordResourceCollection.push(newResource);
                                }
                                    //update duration, work, resource units of a task, while add/remove/changes in existing resource unit.
                                else {
                                    var ganttModel = proxy.model,
                                        ganttRecord = ganttModel.selectedItem,
                                        resourceInfo = ganttRecord.resourceInfo,
                                        resourceIdMapping = ganttModel.resourceIdMapping;

                                    if (ej.isNullOrUndefined(resourceInfo) || resourceInfo.length != data.length)
                                        proxy._isResourceAddedOrRemoved = true;

                                    if (resourceInfo) {
                                        for (var index = 0; index < resourceInfo.length; index++) {
                                            if (resourceInfo[index][resourceIdMapping] === newResource[resourceIdMapping]) {
                                                var resourceIndex = index;
                                                break;
                                            }
                                            else
                                                var resourceIndex = -1;
                                        }
                                    } else {
                                        resourceInfo = [];
                                    }
                                    if ((ej.isNullOrUndefined(resourceIndex) || resourceIndex == -1) &&  resourceInfo.length != data.length) {
                                        var ganttRecordResource = $.extend({}, newResource);
                                        ganttModel.selectedItem._updateResourceUnit(newResource, ganttRecordResource, model.resourceUnitMapping);
                                        //Unit for newly selected resource should be 100, even there is a defined unit for the selected resource.
                                        ganttRecordResource[model.resourceUnitMapping] = 100;
                                        resourceInfo.push(ganttRecordResource);                                        
                                    }
                                    if (resourceInfo[indx][model.resourceUnitMapping] != data[indx].unit)
                                        proxy._isExistingUnitIsUpdated = true;

                                    resourceInfo[indx][model.resourceIdMapping] = parseInt(data[indx].name);
                                    resourceInfo[indx][model.resourceNameMapping] = model.resources[parseInt(data[indx].name)-1][model.resourceNameMapping];
                                    resourceInfo[indx][model.resourceUnitMapping] = data[indx].unit;
                                    resource.push(resourceInfo[indx]);

                                    //update duration as per changes in existing resources unit before adding new resources.
                                    if (proxy._isExistingUnitIsUpdated) {
                                        if (!ganttRecord.isAutoSchedule || ganttRecord.taskType == "fixedDuration")
                                            ganttRecord._updateWorkWithDuration(proxy);
                                        else
                                            ganttRecord._updateDurationWithWork(proxy);
                                        obj.Duration = ganttRecord.duration;
                                        obj.work = ganttRecord.work;
                                        proxy._editedDialogRecord.duration = ganttRecord.duration;
                                        proxy._editedDialogRecord.work = ganttRecord.work;
                                        proxy._isExistingUnitIsUpdated = false;
                                    }
                                }
                            }
                            else {
                                resourceFlag = false;
                                return false;
                            }
                        });
                        if (resourceFlag)
                            obj[model.resourceInfoMapping] = resource;
                        else {
                            alert(proxy._alertTexts["dialogResourceAlert"]);
                            return true;
                        }
                }

                if (!obj[model.taskIdMapping] && saveType === "Edit")
                    obj[model.taskIdMapping] = proxy._editedDialogRecord.taskId;

                args.data = obj;

                //getting predecessor from edit dialog table    
                var prdecessor_validation_flag = false;
                var results = [], resultFlag = false;
                if (model.predecessorMapping)
                {
                    if (saveType === "Edit") {
                        resultFlag = model.editDialogFields.length === 0 ? true : false;
                        results = $.grep(model.editDialogFields, function (val, idx) {
                            return (val.field === model.predecessorMapping);
                        });
                    } else if (saveType === "Add")
                    {
                        resultFlag = model.addDialogFields.length === 0 ? true : false;
                        results = $.grep(model.addDialogFields, function (val, idx) {
                            return (val.field === model.predecessorMapping);
                        });
                    }
                }
                if (results.length > 0 || resultFlag)
                {
                    var pre = [];
                    var taskNameFlag = true;

                    /* save tree grid if it is in edit mode */
                    if ($(treeGridId).ejTreeGrid("model.isEdit")) {
                        $(treeGridId).ejTreeGrid("saveCell");
                    }

                    pre = $(treeGridId).ejTreeGrid("option", "dataSource");
                    $.each(pre, function (idx, value) {
                        if (ej.isNullOrUndefined(value.id) || ej.isNullOrUndefined(value.name) || ej.isNullOrUndefined(value.type) || !(value.id.length > 0 && value.name.length && value.type.length))
                        {
                            taskNameFlag = false;
                        }
                    });
                    if (taskNameFlag) {
                        var predecessorColl = [], predecessorString = [];//from,to,offset,predecessorType,isdrawn                        
                        types = proxy._predecessorCollectionText;
                        var tempType;
                        for (var i = 0; i < pre.length; i++) {
                            var predecessor = {};
                            predecessor["from"] = obj.taskID;
                            predecessor["to"] = pre[i].id;
                            predecessor["isdrawn"] = false;
                            predecessor["offset"] = pre[i].offset;
                            for (var j = 0; j < types.length; j++) {
                                if (pre[i].type == types[j].text) {
                                    predecessor["predecessorType"] = types[j].id;
                                    tempType = types[j].id;
                                    break;
                                }
                            }
                            var tem = pre[i].id + tempType//+data[i].lags.toString();
                            pre[i].offset = pre[i].offset;
                            if (pre[i].offset !== 0) {
                                if (pre[i].offset < 0)
                                    tem += pre[i].offset.toString();
                                else
                                    tem += "+" + pre[i].offset.toString();
                            }
                            predecessorString.push(tem);
                            predecessorColl.push(predecessor);
                        }
                        args.predecessorString = predecessorString;
                    } else {
                        //Break here and give notification to users
                        alert(proxy._alertTexts["predecessorAddingValidationAlert"]);
                        return true;
                    }
                    //Validate predecessoe for editing
                    if (proxy._isinAddnewRecord === false) {
                        args.currentRecord = model.selectionMode == "row" ? this.selectedItem() : model.updatedRecords[proxy._rowIndexOfLastSelectedCell];
                        if(proxy._editedPredecessorValidation(args))
                        {
                            args.previousValue = proxy._updatePredecessorValue(obj, predecessorString.join(','));
                        }
                        else {
                            alert(proxy._alertTexts["predecessorEditingValidationAlert"]);
                            return true;
                        }
                    }
                    obj[model.predecessorMapping] = predecessorString.join(',');
                }

                args.requestType = ej.TreeGrid.Actions.Save;
                args.recordIndex = (this.selectedRowIndex() !== -1) ? this.selectedRowIndex() : -1;
                if (proxy._trigger("actionBegin", args))
                    return true;
                if (saveType === "Edit") {
                    args._cModifiedData = proxy._updateRecord(obj);
                    if (proxy._editedDialogRecord) {
                        args._cModifiedData.startDate = new Date(proxy._editedDialogRecord.startDate);
                        args._cModifiedData.endDate = new Date(proxy._editedDialogRecord.endDate);
                        args._cModifiedData.duration = proxy._editedDialogRecord.duration;                        
                        args._cModifiedData.durationUnit = proxy._editedDialogRecord.durationUnit;
                        if (proxy._isResourceAddedOrRemoved)
                            proxy._updateResourceRelatedFields(args._cModifiedData);
                        model.durationUnitMapping && (args._cModifiedData.item[model.durationUnitMapping] = proxy._editedDialogRecord.durationUnit);
                        proxy._editedDialogRecord = null;
                    }
                    if (args.data[model.endDateMapping] && (ej.isNullOrUndefined(args.data[model.durationMapping]) || args.data[model.durationMapping] === "") && proxy._isDurationUpdated == false) {
                        args._cModifiedData.startDate = proxy._checkStartDate(args._cModifiedData.startDate, args._cModifiedData);
                        args._cModifiedData.endDate = proxy._checkEndDate(args._cModifiedData.endDate, args._cModifiedData);
                        args._cModifiedData._calculateDuration(this);
                    }
                    /*Milestone status update if start date,end date , duration fields not given in edit dialog fields*/
                    if (args._cModifiedData.duration == 0 && args._cModifiedData.startDate.getTime() == args._cModifiedData.endDate.getTime())
                        args._cModifiedData.isMilestone = true;
                    else
                        args._cModifiedData.isMilestone = false;

                    args.modifiedRecord = args._cModifiedData;                    
                    proxy.actionComplete(args);
                }
                else if (saveType === "Add") {
                    var rowPosition = proxy._addPosition != null ? proxy._addPosition : model.editSettings.rowPosition;
                    if (!proxy.addRecord(obj, rowPosition)) {
                        alert(proxy._alertTexts["predecessorEditingValidationAlert"]);
                        return true;
                    }
                }  
                proxy._cModifiedData = null;
                proxy._cAddedRecord = null;
                proxy._primaryKeyValues = [];
                proxy._isinAddnewRecord = false;
                proxy._isResourceAddedOrRemoved = false;
                return false;
                }
                else {
                    alert(proxy._alertTexts["dateValidationAlert"]);
                    return true;
                }
            }
            else {
                alert(proxy._alertTexts["idValidationAlert"]);
                return true;
            }   
        },

        _recordReturnerByID:function(id)
        {
            var proxy = this,
                records = proxy.model.flatRecords;
            for (var i = 0; i < records.length; i++) {
                if (records[i].taskId.toString() === id.toString()) {
                    return records[i]
                }
            }
            return null;

        },
        _editedPredecessorValidation: function (args) {

            var proxy = this,
                flag = true,
                recordId = args.currentRecord.taskId, currentId,
                predecessor = args.predecessorString.join(','), predecessorIdArray;
            if (predecessor.length > 0) {
                predecessorIdArray = proxy._idFromPredecessor(predecessor);
                for (var count = 0; count < predecessorIdArray.length; count++) {
                    //Check edited item has parent item in predecessor collection
                    var editingData = args.currentRecord;
                    if (editingData && editingData.parentItem) {
                        if (predecessorIdArray.indexOf(editingData.parentItem.taskId.toString()) !== -1) {
                            return false;
                        }
                    }
                    // Check if predecessor exist more then one 
                    var tempIdArray = predecessorIdArray.slice(0),checkArray=[],countFlag=true;
                    $.each(tempIdArray, function (index, value) { 
                        if(checkArray.indexOf(value)===-1)
                            checkArray.push(value);
                        else
                            countFlag = false;
                    });
                    if (countFlag === false) {
                        return false;

                    }
                    //Cyclick check  
                    currentId = predecessorIdArray[count];
                    var visitedIdArray = [];
                    var predecessorCollection = predecessorIdArray.slice(0);
                    predecessorCollection.splice(count, 1);


                    while (currentId !== null) {
                        var currentIdArray = [], currentIdIndex;
                        if (visitedIdArray.indexOf(currentId) === -1)
                        {
                            currentRecord = proxy._recordReturnerByID(currentId);
                            //Predecessor id not in records collection
                            if (ej.isNullOrUndefined(currentRecord))
                                return false;
                          //  var currentPredecessor="";
                            if (!ej.isNullOrUndefined(currentRecord.predecessor) && currentRecord.predecessor.length>0)
                            {
                                $.each(currentRecord.predecessor, function (index, value) {
                                    if (currentRecord.taskId.toString() !== value.from) {
                                        currentIdArray.push(value.from.toString());
                                        currentIdIndex = index;
                                    }
                                });
                            //    currentPredecessor=currentRecord.predecessor[0].from
                            }
                            if (recordId.toString() === currentRecord.taskId.toString() || currentIdArray.indexOf(recordId.toString()) !== -1) { // || predecessorCollection.indexOf(currentPredecessor) !== -1
                                //cycylic occurs//break;
                                return false;
                            }
                            visitedIdArray.push(currentId);
                            if (!ej.isNullOrUndefined(currentRecord.predecessor) && currentRecord.predecessor.length > 0) {
                                var result;
                                if (currentIdArray.length > 1) {
                                    result=this._predecessorValidation(currentIdArray, args);
                                }
                                else if (currentIdArray.length == 1)
                                    currentId = currentRecord.predecessor[currentIdIndex].from;

                                if (result === false) {
                                    return false;
                                }
                            }
                            else
                                break;
                        }
                        else
                        {
                            break;
                        }
                    }
                }
            }
            return flag;
        },

        _predecessorValidation: function (predecessor,args) {
            var proxy = this;
            var recordId = args.currentRecord.taskId;
            for (var count = 0; count < predecessor.length; count++) {
                currentId = predecessor[count];
                var visitedIdArray = [];
                var predecessorCollection = predecessor.slice(0);
                predecessorCollection.splice(count, 1);

                while (currentId !== null) {
                    var currentIdArray = [];
                    if (visitedIdArray.indexOf(currentId) === -1) {
                        currentRecord = proxy._recordReturnerByID(currentId);
                        //Predecessor id not in records collection
                        if (ej.isNullOrUndefined(currentRecord))
                            return false;

                        if (!ej.isNullOrUndefined(currentRecord.predecessor) && currentRecord.predecessor.length > 0) {
                            $.each(currentRecord.predecessor, function (index, value) {
                                if (currentRecord.taskId.toString() !== value.from)
                                    currentIdArray.push(value.from.toString());
                            });
                        }
                        if (recordId.toString() === currentRecord.taskId.toString() || currentIdArray.indexOf(recordId.toString()) !== -1) { // || predecessorCollection.indexOf(currentPredecessor) !== -1
                            //cycylic occurs//break;
                            return false;
                        }
                        visitedIdArray.push(currentId);
                        if (!ej.isNullOrUndefined(currentRecord.predecessor) && currentRecord.predecessor.length > 0) {
                            currentId = currentRecord.predecessor[0].from;
                        }
                        else
                            break;
                    }
                    else {
                        break;
                    }
                }
            }
            return true;
            
        },
        _sendCancelRequest: function () {
            var proxy = this,
                model=proxy.model,
                args = {};

            if (model.dateFormat.toLowerCase().indexOf("hh") != -1)
                $("#" + proxy._id + "EditForm").find(".e-datepicker").ejDateTimePicker("destroy");
            else
                $("#" + proxy._id + "EditForm").find(".e-datepicker").ejDatePicker("destroy");

            args.requestType = ej.TreeGrid.Actions.Cancel;
            proxy._$treegridHelper.ejTreeGrid("processBindings", args);
            proxy._primaryKeyValues = [];
            proxy.model.currentData = null;
        },
        
        _updatePredecessorValue: function (obj, value) {
            var proxy = this,
                prevPredecessors,
                modifiedPredecessors,
                length=0,
                predecessor,
                ganttPredecessor = [],
                count = 0,
                selectedItem = model.selectionMode == "row" ? proxy.selectedItem() : model.updatedRecords[proxy._rowIndexOfLastSelectedCell];
            prevPredecessors = selectedItem["predecessor"];

            if (value.length > 0) {
                modifiedPredecessors = selectedItem._calculatePredecessor(value, this._durationUnitEditText, this.model.durationUnit);
            }
            if (modifiedPredecessors)
                length = modifiedPredecessors.length;

            var index = 0, prevPrdecessorlength=0;
            if(prevPredecessors)
                prevPrdecessorlength = prevPredecessors.length;


            for (index = 0; index < prevPrdecessorlength; index++) {
                predecessor = prevPredecessors[index];
                if (predecessor.from === selectedItem.taskId.toString()) {
                    ganttPredecessor.push(predecessor);
                }
            }
            for (count = 0; count < length; count++) {
                ganttPredecessor.push(modifiedPredecessors[count]);
            }
            selectedItem.predecessor = ganttPredecessor;
            if (proxy.model.predecessorMapping) {
                selectedItem.item[proxy.model.predecessorMapping] = value;
                selectedItem.predecessorsName = value;
            }

            return prevPredecessors;          //
        },


        getCurrentEditCellData: function ($element, dropdownData) {
            var proxy = this, model = proxy.model, date;
            if ($("#" + proxy._id + "EditForm").length || $("#" + proxy._id + "GeneralAddForm").length || $("#" + proxy._id + "GeneralEditForm").length) {
                var cellValue="";// $element = $("#" + proxy._id + proxy._columnFieldName), 
                switch (proxy._cellEditColumn.editType) {
                    case ej.TreeGrid.EditingType.String:
                        cellValue = $element.val();
                        break;
                    case ej.TreeGrid.EditingType.Numeric:
                        cellValue = $element.ejNumericTextbox("getValue");
                        break;
                    case ej.TreeGrid.EditingType.Dropdown:
                        if ($element.attr("id").indexOf("resourceInfo") > 0) {
                            cellValue = proxy._getSelectedItem($element.ejDropDownList("model.selectedItems"), dropdownData);
                        }
                        else if ($element.attr("id").indexOf("taskMode") > 0) {
                            cellValue = $element.ejDropDownList("model.value") == "true" ? true : false;
                        }
                        else
                            cellValue = $element.ejDropDownList("model.value");
                        break;
                    case ej.TreeGrid.EditingType.Boolean:
                        cellValue = $element.is(':checked');
                        break;

                    case ej.TreeGrid.EditingType.DatePicker:
                        date = $element.ejDatePicker("model.value");

                        if (proxy._cellEditColumn && !proxy._cellEditColumn.format) {
                            cellValue = proxy.getFormatedDate(date);
                        } else {
                            cellValue = date;
                        }
                        break;
                    case ej.TreeGrid.EditingType.DateTimePicker:
                        date = $element.ejDateTimePicker("model.value");
                        if (proxy._cellEditColumn && !proxy._cellEditColumn.format) {
                            cellValue = cellValue = proxy.getFormatedDate(date);
                        } else {
                            cellValue = date;
                        }
                        break;
                    case ej.TreeGrid.EditingType.Maskedit:
                        cellValue = $element.ejMaskEdit("model.value");
                        break;
                }
                return cellValue;
            }
            return null;
        },


        _getSelectedItem: function (indexArray, dropDownData) {
            var count = 0,
                length = indexArray.length,
                    selectedItems = [];
            if (dropDownData) {
                for (count = 0; count < length; count++) {
                    $.each(dropDownData, function (index, resourceInfo) {
                        if (indexArray[count] === index) {
                            selectedItems.push(resourceInfo);
                        }
                    });
                }
            }

            return selectedItems;
        },

        _getDropDownText: function (column,indexArray) {
            var count = 0,
                length, editParams, value, text,
                dropDownData = column.dropdownData;
            indexArray = indexArray.split(","),
            selectedDropDownText = [];
            length = indexArray.length;
            editParams = column.editParams;
            if (editParams && editParams.fields) {
                text = editParams.fields.text ? editParams.fields.text : "text";
                value = editParams.fields.value ? editParams.fields.value : "value";
            }
            else {
                value = "value";
                text = "text";
            }
            for (var i = 0; i < length; i++) {
                $.each(dropDownData, function (index, data) {
                    if (!ej.isNullOrUndefined(data[value])) {
                        if (indexArray[i] === data[value].toString()) {
                            selectedDropDownText.push(data[text]);
                            return false;
                        }
                    }
                    else
                    {
                        if (indexArray[i] === data[text].toString()) {
                            selectedDropDownText.push(data[text].toString());
                            return false;
                        }
                    }
                });
            }
            return selectedDropDownText.join(",");
        },
        _updateRecord: function (data) {
            var proxy = this, model = this.model,
                columns=proxy._columns,
               length,
                index = 0,
                targetIndex = model.selectionMode == "row" ? this.selectedRowIndex() : proxy._rowIndexOfLastSelectedCell,
                ganttRecord = proxy.getUpdatedRecords()[targetIndex];
            proxy._isUpdateOffset = false;

            if (model.editDialogFields.length > 0) {
                var filteredColumns = [];
                var count = 0, resultColumn;
                for (; count < model.editDialogFields.length; count++) {
                    resultColumn = $.grep(proxy._columns, function (val) {
                        return val.mappingName === model.editDialogFields[count].field;
                    });
                    resultColumn.length && filteredColumns.push(resultColumn[0]);
                }
                columns = filteredColumns;
            }
            length = columns.length;

            for (index = 0; index < length; index++) {

                if (columns[index].field.toString() === "predecessor")
                    continue;
                //for predecessor from edit dialog window 
                if ((columns[index].field == "startDate")) {
                    if(ganttRecord[columns[index].field].getTime() != data[columns[index].mappingName].getTime())
                        proxy._isUpdateOffset = true;
                }
                if (columns[index].field == "endDate"){
                    if (ganttRecord[columns[index].field].getTime() != data[columns[index].mappingName].getTime())
                        proxy._isUpdateOffset = true;
                }
                if (columns[index].field == "duration") {
                    if (ganttRecord[columns[index].field] != data[columns[index].mappingName])
                        proxy._isUpdateOffset = true;
                }
                if (columns[index].field == "taskMode") {
                    ganttRecord["isAutoSchedule"] = !data[model.taskSchedulingModeMapping];                    
                }
                if (columns[index].mappingName != model.baselineStartDateMapping && columns[index].mappingName != model.baselineEndDateMapping && 
                    columns[index].field != "work" && columns[index].field != "taskType") {
                    ganttRecord[columns[index].field] = data[columns[index].mappingName];
                    ganttRecord.item[columns[index].mappingName] = data[columns[index].mappingName];//field
                }
                if (columns[index].field == "work" || columns[index].field == "taskType" || columns[index].field == "effortDriven")
                    ganttRecord[columns[index].field] = data[columns[index].field];
                if (columns[index].field.toString() === "resourceInfo")
                    proxy._updateResourceName(ganttRecord);
                if (columns[index].field.toString() === "notesText") {
                    ganttRecord["notes"] = data[model.notesMapping];
                    ganttRecord.item[model.notesMapping] = data[model.notesMapping];
                }
            }
            return ganttRecord;
            
        },

        _sendIndentRequest: function () {

            var proxy = this,
                model = proxy.model,
                data = proxy.getCurrentData(),
                args = {},
                eveargs = {},
                previousGanttRecord,
                isRefresh = false,
                treeGridObject = proxy._$treegridHelper.ejTreeGrid("instance");
            proxy.cancelEditCell();
            if (ej.isNullOrUndefined(data)) {
                alert(proxy._alertTexts["indentAlert"]);
            }
            else {
                previousGanttRecord = model.flatRecords[model.flatRecords.indexOf(data) - 1];
                args.data = data;
                args.requestType = "indent"
                if (!proxy._trigger("actionBegin", args)) {

                    if (data.parentItem) {
                        var childIndex = data.parentItem.childRecords.indexOf(data);
                        data.parentItem.childRecords.splice(childIndex, 1);
                        if (!model.parentTaskIdMapping)
                            data.parentItem.item[model.childMapping].splice(childIndex, 1);
                    } else {
                        if (this.dataSource() instanceof ej.DataManager) {
                            if (this.dataSource().dataSource.offline && this.dataSource().dataSource.json) {
                                var dataSourceIndex = this.dataSource().dataSource.json.indexOf(data.item);
                                if (!model.parentTaskIdMapping)
                                    this.dataSource().dataSource.json.splice(dataSourceIndex, 1);
                            }
                            else if (proxy._isDataManagerUpdate) {
                                var dataSourceIndex = proxy._jsonData.indexOf(data.item);
                                if (!model.parentTaskIdMapping) {
                                    proxy._jsonData = proxy._$treegridHelper.ejTreeGrid("getUpdatedDatamanagerData");
                                    proxy._jsonData.splice(dataSourceIndex, 1);
                                }
                            }
                        }
                        else {
                            var dataSourceIndex = this.dataSource().indexOf(data.item);
                            if (!model.parentTaskIdMapping)
                                this.dataSource().splice(dataSourceIndex, 1);
                        }
                    }
                    if (data.level === previousGanttRecord.level) {
                        if (previousGanttRecord.childRecords) {
                            if (!previousGanttRecord.expanded) {
                                previousGanttRecord.childRecords.splice(previousGanttRecord.childRecords.length, 0, data);
                                data.parentItem = previousGanttRecord;
                                if (!model.parentTaskIdMapping)
                                    previousGanttRecord.item[model.childMapping].splice(previousGanttRecord.childRecords.length, 0, data.item);
                                else
                                    data.item[model.parentTaskIdMapping] = previousGanttRecord.taskId;
                            }
                        } else {
                            previousGanttRecord.childRecords = [];
                            previousGanttRecord.childRecords.push(data);
                            previousGanttRecord.expanded = true;
                            previousGanttRecord.taskType = ej.Gantt.TaskType.FixedDuration;
                            previousGanttRecord.effortDriven = "false";                            
                            data.parentItem = previousGanttRecord;
                            previousGanttRecord.item[model.childMapping] = [];
                            if (!model.parentTaskIdMapping)
                                previousGanttRecord.item[model.childMapping].push(data.item);
                            else
                                data.item[model.parentTaskIdMapping] = previousGanttRecord.taskId;
                        }
                    } else if (previousGanttRecord.level - data.level === 1) {
                        previousGanttRecord.parentItem.childRecords.splice(previousGanttRecord.parentItem.childRecords.length, 0, data);
                        if (!model.parentTaskIdMapping)
                            previousGanttRecord.parentItem.item[model.childMapping].splice(previousGanttRecord.parentItem.childRecords.length, 0, data.item);
                        else
                            data.item[model.parentTaskIdMapping] = previousGanttRecord.parentItem.taskId;
                        data.parentItem = previousGanttRecord.parentItem;
                    } else if (previousGanttRecord.level - data.level > 1) {

                        var parentItem = proxy.getParentItem(previousGanttRecord, data.level);
                        parentItem.childRecords.splice(parentItem.childRecords.length, 0, data);
                        if (!model.parentTaskIdMapping)
                            parentItem.item[model.childMapping].splice(parentItem.childRecords.length, 0, data.item);
                        else
                            data.item[model.parentTaskIdMapping] = parentItem.taskId;
                        data.parentItem = parentItem;

                    }

                    if (data.parentItem.isMilestone) {
                        data.parentItem.isMilestone = false;
                    }
                    previousGanttRecord.hasChildRecords = previousGanttRecord.childRecords ? previousGanttRecord.childRecords.length > 0 : false;
                    data.level += 1;

                    if (treeGridObject._searchString.length > 0 || treeGridObject.model.sortSettings.sortedColumns.length > 0) {
                        isRefresh = true;
                    }
                    proxy.updateLevel(data, +1, isRefresh);

                    if (!isRefresh)
                        proxy.refreshGanttRecord(data);

                    //update parent recordsCollections
                    if (previousGanttRecord.level === 0) {
                        if (model.parentRecords.indexOf(previousGanttRecord) === -1) {
                            model.parentRecords.push(previousGanttRecord);
                        }
                    }
                    if (data.level > 0) {
                        if (model.parentRecords.indexOf(data) !== -1) {
                            var idx = model.parentRecords.indexOf(data);
                            model.parentRecords.splice(idx, 1);
                        }
                    }
                    //Update parentitem
                    if (data.parentItem && data.parentItem.isAutoSchedule) {
                        proxy._updateParentItem(data);
                    }
                    else if (data.parentItem && !data.parentItem.isAutoSchedule)
                        proxy._updateManualParentItem(data)
                    
                    //Remove child predecessor from Parent item
                    if (data.parentItem && data.parentItem.predecessor && model.predecessorMapping) {
                        proxy._updatePredecessorOnIndentOutdent(data.parentItem);
                    }
                    if (!isRefresh)
                        proxy.refreshGanttRecord(previousGanttRecord);



                    if (!proxy.getExpandStatus(data)) {
                        var expanargs = {};
                        expanargs.expanded = true;
                        expanargs.data = data.parentItem;
                        proxy.expanding(expanargs);
                    }
                    proxy._$treegridHelper.ejTreeGrid("setUpdatedRecords", model.flatRecords, model.updatedRecords, model.ids, model.parentRecords, this.dataSource());
                    if (isRefresh) {
                        

                        args.requestType = "indent";
                        //update oudented reocords as per searching and sorting
                        proxy._$treegridHelper.ejTreeGrid("processBindings", args);
                        var tempArgs = {};
                        tempArgs.requestType = ej.TreeGrid.Actions.Refresh;
                        proxy._$treegridHelper.ejTreeGrid("sendDataRenderingRequest", tempArgs);
                        proxy.model.updatedRecords = proxy.getUpdatedRecords();
                        proxy.model.currentViewData = proxy.getCurrentViewData();
                        proxy._$ganttchartHelper.ejGanttChart("setUpdatedRecords", model.currentViewData, model.updatedRecords, model.flatRecords, model.ids);
                        proxy._$ganttchartHelper.ejGanttChart("refreshHelper", model.currentViewData, model.updatedRecords, proxy._totalCollapseRecordCount);
                        proxy.updateAltRow(model.updatedRecords, 0, 1);
                    }

                    if (model.predecessorMapping) {
                        proxy._isValidationEnabled = false;
                        proxy._connectorlineIds = [];
                        proxy._connectorLinesCollection = [];
                        proxy._$ganttchartHelper.ejGanttChart("clearConnectorLines");
                        proxy._createConnectorLinesCollection();
                    }

                    //row selection
                    var rowToindex = model.updatedRecords.indexOf(data);
                    var $ganttChartRows = proxy.getGanttChartRows();
                    args = {
                        rowElement: $ganttChartRows.eq(rowToindex),
                        data: proxy.model.selectedItem,
                        recordIndex: rowToindex
                    };

                    proxy._$ganttchartHelper.ejGanttChart("selectRows", args.recordIndex);
                    proxy._$treegridHelper.ejTreeGrid("selectRows", args.recordIndex);
                    this.selectedItem(args.data);
                    this.selectedRowIndex(args.recordIndex);
                    if (model.allowSelection && model.selectionMode != "cell")
                        proxy.updateIndentOutdentOption(data);
                    if (model.enableWBS) {
                        var parentVal = data.parentItem.WBS,
                            inRowIndex = data.parentItem.childRecords.length,
                            target = [data];
                        //Updating WBS for the indent record
                        proxy.reCalculateWBS(target, inRowIndex, parentVal);
                        //Updating WBS for corresponding below records
                        proxy.updateWBSdetails(data.parentItem);
                    }
                    eveargs.data = data;
                    eveargs.requestType = "indent";
                    this._trigger("actionComplete", eveargs);
                }
            }
            if (this.isCriticalPathEnable == true) {
                proxy._$ganttchartHelper.ejGanttChart("criticalConnectorLine", this.criticalPathCollection, this.detailPredecessorCollection, false, this.collectionTaskId);
                this.showCriticalPath(true);
            }
        },
        
        _updatePredecessorOnIndentOutdent:function(parentRecord)
        {

            var proxy = this, len = parentRecord.predecessor.length,
                predecessorCollection = parentRecord.predecessor,
                predecessorIndex,
                childRecord,
                id,
                updatedPredecessor = [];
            for (var count = 0; count < len; count++) {
                //remove predecessor connect with parent item
                if (predecessorCollection[count].to === parentRecord.taskId.toString()) {
                    childRecord = proxy.model.flatRecords[proxy.model.ids.indexOf(predecessorCollection[count].from)];
                    predecessorIndex = childRecord.predecessor.indexOf(predecessorCollection[count]);
                    childRecord.predecessor.splice(predecessorIndex, 1);
                    id = "parent" + childRecord['taskId'] + "child" + parentRecord['taskId'];
                    proxy._$ganttchartHelper.ejGanttChart("removeConnectorline", id);
                }
                    //remove predecessor if parent record as predecessor of it's child record
                else if (predecessorCollection[count].from === parentRecord.taskId.toString()) {
                    childRecord = proxy.model.flatRecords[proxy.model.ids.indexOf(predecessorCollection[count].to)];
                    if (parentRecord.childRecords.indexOf(childRecord) !== -1) {
                        predecessorIndex = childRecord.predecessor.indexOf(predecessorCollection[count]);
                        childRecord.predecessor.splice(predecessorIndex, 1);
                        var stringPredecessor = proxy._predecessorToString(childRecord.predecessor, childRecord);
                        childRecord.item[model.predecessorMapping] = stringPredecessor;
                        childRecord.predecessorsName = stringPredecessor;
                        if (model.enableWBS && model.enableWBSPredecessor) {
                            proxy._$treegridHelper.ejTreeGrid("updateWBSPredecessor", childRecord);
                        }
                        id = "parent" + parentRecord['taskId'] + "child" + childRecord['taskId'];
                        proxy._$ganttchartHelper.ejGanttChart("removeConnectorline", id);
                        proxy.refreshGanttRecord(childRecord);
                    }
                    else
                    {
                        updatedPredecessor.push(predecessorCollection[count]);
                    }
                }
            }
            parentRecord.predecessor = updatedPredecessor;
            parentRecord.item[model.predecessorMapping] = "";
            parentRecord.predecessorsName = "";
            if (model.enableWBS && model.enableWBSPredecessor) {
                parentRecord["WBSPredecessor"] = "";
                parentRecord["item"]["WBSPredecessor"] = "";
            }

            //if (updatedPredecessor.length > 0) {
            //    proxy._updatedConnectorLineCollection = [];
            //    proxy._connectorlineIds = [];
            //    proxy._validatePredecessor(parentRecord);
            //    if (proxy._updatedConnectorLineCollection.length > 0) {
            //        proxy._$ganttchartHelper.ejGanttChart("appendConnectorLine", proxy._updatedConnectorLineCollection);
            //    }
            //}
        },
        
        _removePredecessor:function(predecessor,record)
        {
            var proxy = this, length = predecessor.length, count = 0, model = proxy.model, parentGanttRecord, childGanttRecord;
            for (count; count < length; count++)
            {
                if (predecessor[count].from !== record.taskId.toString())
                {
                    childGanttRecord = proxy.model.flatRecords[proxy.model.ids.indexOf(predecessor[count].from)];  //index st
                }
                else if (predecessor[count].to !== record.taskId.toString())
                {
                    childGanttRecord = proxy.model.flatRecords[proxy.model.ids.indexOf(predecessor[count].to)]
                }

                if (childGanttRecord) {
                    var cIndex = childGanttRecord.predecessor.indexOf(predecessor[count]);
                    if (cIndex !== -1)
                        childGanttRecord.predecessor.splice(cIndex, 1);

                    if (childGanttRecord.item[model.predecessorMapping]) {
                        childGanttRecord.item[model.predecessorMapping] = proxy._predecessorToString(childGanttRecord.predecessor, childGanttRecord);
                        childGanttRecord.predecessorsName = childGanttRecord.item[model.predecessorMapping];
                        if (model.enableWBS && model.enableWBSPredecessor)
                            proxy._$treegridHelper.ejTreeGrid("updateWBSPredecessor", childGanttRecord);
                        proxy.refreshGanttRecord(childGanttRecord);
                    }
                }
            }

        },

        _predecessorToString:function(predecessorCollection,record)
        {
            var proxy = this, predecessorString=[],count=0,length=predecessorCollection.length;
            
            for (count; count < length;count++)
            {
                if(record.taskId.toString()!==predecessorCollection[count].from)
                    {
                        var tem = predecessorCollection[count].from + predecessorCollection[count].predecessorsType;
                        predecessorCollection[count].offset = isNaN(predecessorCollection[count].offset) ? 0 : predecessorCollection[count].offset;

                        if (predecessorCollection[count].offset !== 0) {
                            if (predecessorCollection[count].offset < 0)
                                tem += predecessorCollection[count].offset.toString()+"d";
                            else if (predecessorCollection[count].offset > 0)
                                tem += "+" + predecessorCollection[count].offset.toString()+"d";
                        }
                        predecessorString.push(tem);
                }
            }
           
            return predecessorString.join(',');
        },
        //get the parentItem of selected ganttRecord to perform the indent operation
        
        getParentItem:function(ganttRecord,level) {

            var proxy = this;

            if (ganttRecord.parentItem.level === level)
                return ganttRecord.parentItem;

            return proxy.getParentItem(ganttRecord.parentItem, level);
        },

        //Change the position or index for the outdent element 
        getSubChangeIndex: function (itemLevel, itemIndex, item) {
            var proxy = this, changetoIndex;
            for (var items = 0; items < proxy.model.updatedRecords.length; items++) {
                if (proxy.model.updatedRecords[items].level == itemLevel && proxy.model.updatedRecords[items].index > itemIndex) {
                    if (item.parentItem && proxy.model.updatedRecords[items].parentItem.taskId == item.parentItem.taskId)
                        changetoIndex = proxy.model.updatedRecords[items].index;
                    break;
                }
            }
            return changetoIndex;
        },

        //get the next sample level item from 
        _nextSameLevelItem:function(data,totRecords)
        {
            var proxy = this,
                level = data.parentItem.level, dataIndex = totRecords.indexOf(data), nextItem;
            for (i = dataIndex; i < totRecords.length; i++)
            {
                if (level === totRecords[i].level || level > totRecords[i].level) {
                    nextItem = totRecords[i];
                    break;
                }
            }
            return nextItem;
        },

        //Indent operation for gantt records
        _sendOutdentRequest: function () {
            var proxy = this,
                model = proxy.model,
                data = proxy.getCurrentData(),
                args = {},
                eveargs = {},
                updateNextItem,
                rowNextItem,
                updateInsertIndex,
                rowInsertIndex,
                dataUpdatedRecordIndex,
                dataRowIndex,
                outParent,
                childDataIndex,
                insertParentItem,
                rowNextItemChildIndex,
                dataChildCount, splicedRows, splicedIds;
            proxy.cancelEditCell();
            if (ej.isNullOrUndefined(data)) {
                alert(proxy._alertTexts["outdentAlert"]);
            } else {
                args.data = data;
                args.requestType = "outdent";
                if (!proxy._trigger("actionBegin", args)) {
                    if (data.level === 0 || model.editSettings.allowIndent == false)
                        return;
                    else {
                        //find where to insert data
                        rowNextItem = proxy._nextSameLevelItem(data, model.flatRecords);
                        dataRowIndex = model.flatRecords.indexOf(data);

                        outParent = data.parentItem;
                        childDataIndex = data.parentItem.childRecords.indexOf(data);
                        insertParentItem = data.parentItem.parentItem;
                        rowNextItemChildIndex = insertParentItem && data.parentItem.parentItem.childRecords.indexOf(rowNextItem);

                        //remove data from current parent item
                        data.parentItem.childRecords.splice(childDataIndex, 1);

                        if(!model.parentTaskIdMapping)
                            data.parentItem.item[model.childMapping].splice(childDataIndex, 1);

                        if (data.parentItem.childRecords.length == 0) {

                            data.parentItem.childRecords = null;
                            data.parentItem.expanded = false;
                            data.parentItem.hasChildRecords = false;
                        }
                        else
                        {
                            if (data.parentItem && data.parentItem.isAutoSchedule)
                                proxy._updateParentItem(data.parentItem.childRecords[0]);
                            else if (data.parentItem && !data.parentItem.isAutoSchedule)
                                proxy._updateManualParentItem(data.parentItem.childRecords[0])                            
                        }

                        //add to next parent item
                        if (insertParentItem) {
                            if (rowNextItemChildIndex != -1)
                            insertParentItem.childRecords.splice(rowNextItemChildIndex, 0, data);
                            else
                                insertParentItem.childRecords.push(data);
                            if (!model.parentTaskIdMapping) {
                                if (rowNextItemChildIndex != -1)
                                insertParentItem.item[model.childMapping].splice(rowNextItemChildIndex, 0, data.item);
                            else
                                    insertParentItem.item[model.childMapping].push(data.item);
                            }
                            else
                                data.item[model.parentTaskIdMapping] = insertParentItem.taskId;

                            data.parentItem = insertParentItem;
                        } else {

                            if (this.dataSource() instanceof ej.DataManager) {
                                if (this.dataSource().dataSource.offline && this.dataSource().dataSource.json) {
                                    if (!model.parentTaskIdMapping)
                                        this.dataSource().dataSource.json.push(data.item);
                                }
                                else if (proxy._isDataManagerUpdate) {
                                    if (!model.parentTaskIdMapping) {
                                        proxy._jsonData = proxy._$treegridHelper.ejTreeGrid("getUpdatedDatamanagerData");
                                        proxy._jsonData.push(data.item);
                                    }
                                }
                            } else {
                                if (!model.parentTaskIdMapping)
                                    if (rowNextItem) {
                                        var index = this.dataSource().indexOf(rowNextItem.item);
                                        this.dataSource().splice(index, 0, data.item);
                                    }
                                    else
                                        this.dataSource().push(data.item);
                            }
                            data.parentItem = null;
                            if (model.parentTaskIdMapping)
                                data.item[model.parentTaskIdMapping] = null;

                        }

                        //Records updates _rows collections
                        dataChildCount = proxy._$treegridHelper.ejTreeGrid("getChildCount", data, 0);
                        splicedRows = model.flatRecords.splice(dataRowIndex, dataChildCount + 1);
                        splicedIds = model.ids.splice(dataRowIndex, dataChildCount + 1);

                        if (rowNextItem) {
                            rowInsertIndex = model.flatRecords.indexOf(rowNextItem);
                        }
                        else {
                            rowInsertIndex = model.flatRecords.length;
                        }

                        if (data.hasChildRecords && data.childRecords.length > 0) {

                            for (i = 0; i < splicedRows.length; i++) {
                                model.flatRecords.splice(rowInsertIndex, 0, splicedRows[i]);
                                model.ids.splice(rowInsertIndex, 0, splicedIds[i]);
                                splicedRows[i].level -= 1;
                                rowInsertIndex++;
                            }
                        }
                        else {
                            model.flatRecords.splice(rowInsertIndex, 0, splicedRows[0]);
                            model.ids.splice(rowInsertIndex, 0, splicedIds[0]);
                            splicedRows[0].level -= 1;
                        }
                        //update parentitem of selected item after changing of its child 
                        if (data.parentItem) {
                            //change the structure of milestone after outdent
                            if (data.parentItem.isMilestone) {
                                data.parentItem.isMilestone = false;
                            }
                            if (data.parentItem && data.parentItem.isAutoSchedule)
                                proxy._updateParentItem(data);
                            else if (data.parentItem && !data.parentItem.isAutoSchedule)
                                proxy._updateManualParentItem(data);
                        }

                        if (data.hasChildRecords) {
                            if (data.isAutoSchedule)
                                proxy._updateParentItem(data, null, true);
                            else
                                proxy._updateManualParentItem(data, null, true);
                        }

                        //update parent recordsCollections
                        if (data.level === 0) {
                            if (model.parentRecords.indexOf(data) === -1) {
                                model.parentRecords.push(data);
                            }
                        }

                        //update predecessor
                        if (data.predecessor && data.predecessor.length > 0 && model.predecessorMapping && data.hasChildRecords) {
                            proxy._updatePredecessorOnIndentOutdent(data)
                        }

                        if (model.enableVirtualization) {
                            model.updatedRecords = proxy._$treegridHelper.ejTreeGrid("getExpandedRecords", model.flatRecords);
                        }
                        else {
                            model.updatedRecords = model.flatRecords.slice();
                        }

                        //Refreshing the Gantt and TreeGrid data
                        proxy._$treegridHelper.ejTreeGrid("setUpdatedRecords", model.flatRecords, model.updatedRecords, model.ids, model.parentRecords,this.dataSource());
                        args.requestType = "outdent";
                        //update oudented reocords as per searching and sorting
                        proxy._$treegridHelper.ejTreeGrid("processBindings", args);
                        var tempArgs = {};
                        tempArgs.requestType = ej.TreeGrid.Actions.Refresh;
                        proxy._$treegridHelper.ejTreeGrid("sendDataRenderingRequest", tempArgs);

                        proxy.model.updatedRecords = proxy.getUpdatedRecords();
                        proxy.model.currentViewData = proxy.getCurrentViewData();
                        proxy._$ganttchartHelper.ejGanttChart("setUpdatedRecords", model.currentViewData, model.updatedRecords, model.flatRecords, model.ids);
                        if (proxy.model.predecessorMapping) {
                            proxy._isValidationEnabled = false;
                            proxy._connectorlineIds = [];
                            proxy._connectorLinesCollection = [];
                            proxy._$ganttchartHelper.ejGanttChart("clearConnectorLines");
                            proxy._createConnectorLinesCollection();
                        }

                        proxy._$ganttchartHelper.ejGanttChart("refreshHelper", model.currentViewData, model.updatedRecords, proxy._totalCollapseRecordCount);
                        proxy.updateAltRow(model.updatedRecords, 0, 1);

                        //   Making the outdented row as selected row 
                        var rowToindex = model.updatedRecords.indexOf(data);
                        var $ganttChartRows = proxy.getGanttChartRows();
                        args = {
                            data: proxy.model.selectedItem,
                            recordIndex: rowToindex
                        };

                        proxy._$ganttchartHelper.ejGanttChart("selectRows", args.recordIndex);
                        proxy._$treegridHelper.ejTreeGrid("selectRows", args.recordIndex);
                        this.selectedItem(args.data);
                        this.selectedRowIndex(args.recordIndex);
                        if (model.allowSelection && model.selectionMode != "cell")
                            proxy.updateIndentOutdentOption(data);
                        if (model.enableWBS) {                           
                            //Updating WBS for the old siblings
                            var oldNxtSibling = outParent.childRecords && outParent.childRecords[childDataIndex];
                            if (oldNxtSibling)
                                proxy.updateWBSdetails(oldNxtSibling, true);
                            //Updating WBS for other records that are below the outdented item
                            proxy.updateWBSdetails(outParent);
                            //Again update the WBS for the updated WBSPredecessor value
                            if (oldNxtSibling)
                                proxy.updateWBSdetails(oldNxtSibling, true, true);
                        }
                        eveargs.data = data;
                        eveargs.requestType = "outdent";
                        this._trigger("actionComplete", eveargs);
                    }
                }
            }
            if (this.isCriticalPathEnable == true) {
                this.showCriticalPath(true, true);
                proxy._$ganttchartHelper.ejGanttChart("criticalConnectorLine", this.criticalPathCollection, this.detailPredecessorCollection, true, this.collectionTaskId);
            }
        },
        
        _refreshChildLevel: function (ganttRecord) {

            var proxy = this,
                count = 0,
                childRecords = ganttRecord.childRecords,
                length = childRecords.length,
                record;

            for (count = 0; count < length; count++) {
                record = childRecords[count];                
                proxy.refreshGanttRecord(record);
                if (record.hasChildRecords) {
                    proxy._refreshChildLevel(record);
                }
            }
        },

        _updateChildLevel:function(ganttRecord) {

            var proxy = this,
                count = 0,
                childRecords = ganttRecord.childRecords,
                length = childRecords.length,
                record;
            
            for (count = 0; count < length; count++) {
                record = childRecords[count];                
                record.level = record.level - 1;
                // proxy.refreshGanttRecord(record);
                if (record.hasChildRecords) {
                    proxy._updateChildLevel(record);
                }
            }
        },

        _removeChildRecords:function(ganttRecord,index){

            if (ganttRecord.parentItem) {
                var proxy = this,
                    model = proxy.model,
                    childIndex = 0,
                    record,
                    addedChildGanttRecordCount = 0,
                    length = 0;
                parentChildRecords = ganttRecord.parentItem.childRecords,
                parentChildRecordsLength = parentChildRecords && parentChildRecords.length;

                for (childIndex = index; childIndex < parentChildRecordsLength; childIndex++) {

                    record = parentChildRecords[childIndex];


                    if (record) {

                        if (ganttRecord.childRecords) {

                            length = ganttRecord.childRecords.length;
                            ganttRecord.childRecords.splice(length, 0, record);
                            if (!model.parentTaskIdMapping)
                                ganttRecord.item[model.childMapping].splice(length, 0, record.item);
                            else
                                record.item[model.parentTaskIdMapping] = ganttRecord.taskId;
                        } else {
                            ganttRecord.childRecords = [];
                            ganttRecord.item[model.childMapping] = [];
                            ganttRecord.childRecords.push(record);
                            if (!model.parentTaskIdMapping)
                                ganttRecord.item[model.childMapping].push(record.item);
                            else
                                record.item[model.parentTaskIdMapping] = ganttRecord.taskId;
                        }
                        record.parentItem = ganttRecord;                                             
                        addedChildGanttRecordCount++;
                    }
                }

                if (ganttRecord.parentItem.childRecords) {

                    ganttRecord.parentItem.childRecords.splice(index, addedChildGanttRecordCount);
                    if(!model.parentTaskIdMapping)
                        ganttRecord.parentItem.item[model.childMapping].splice(index, addedChildGanttRecordCount);
                    if (ganttRecord.parentItem.childRecords.length == 0) {
                        ganttRecord.parentItem.childRecords = null;
                        ganttRecord.parentItem.expanded = false;
                        ganttRecord.parentItem.hasChildRecords = false;
                        proxy.refreshGanttRecord(ganttRecord.parentItem);
                    }
                }
            }
        },

        updateChildGanttRecordLevel: function (data,index) {
            var childIndex = 0, proxy = this, model = proxy.model,
                parentChildRecords = data.parentItem&& data.parentItem.parentItem&& data.parentItem.parentItem.childRecords,
                parentChildRecordsLength =parentChildRecords&&parentChildRecords.length,
                addedChildRecordCount = 0;
            for (childIndex = index; childIndex < parentChildRecordsLength; childIndex++) {
                var childGanttRecord = parentChildRecords[childIndex];
                if (childGanttRecord.childRecords) {
                    childGanttRecord.childRecords.splice(childGanttRecord.childRecords.length, 0, childGanttRecord);
                    childGanttRecord.item[model.childMapping].splice(childGanttRecord.childRecords.length, 0, childGanttRecord.item);
                }
                else {
                    childGanttRecord.childRecords = [];
                    childGanttRecord.item[model.childMapping] = [];
                    if (childGanttRecord) {
                        childGanttRecord.childRecords.push(childGanttRecord);
                        childGanttRecord.item[model.childMapping].push(childGanttRecord.item);
                    }
                }
                proxy.refreshGanttRecord(data.parentItem);
                data.parentItem = childGanttRecord;
                ++addedChildGanttRecordCount;
            }
            data.parentItem.childRecords.splice(index, addedChildGanttRecordCount);
            if (data.parentItem.childRecords.length == 0) {
                data.parentItem.childRecords = null;
                data.parentItem.expanded = false;
                data.parentItem.hasChildRecords = false;
            }

            proxy.refreshGanttRecord(data.parentItem);

        },

        updateLevel: function (childGanttRecord, offset, isRefresh) {
            var proxy = this,
                count = 0,
                childRecords = childGanttRecord.childRecords,
                length =childRecords&& childRecords.length,
                ganttRecord;
            for (count; count < length; count++) {
                ganttRecord = childRecords[count];
                ganttRecord.level += offset;
                if (!isRefresh)
                    proxy.refreshGanttRecord(ganttRecord);
                if (ganttRecord.childRecords) 
                    proxy.updateLevel(ganttRecord, offset, isRefresh);
            }
        },

        addNewGanttRecord:function() {
            var proxy = this, eventArgs = {},newRecord;
            newRecord = this.model.flatRecords[this.model.flatRecords.length].item;
            eventArgs.requestType = "save";
            eventArgs._cAddedRecord = eventArgs.addedRecord = jQuery.extend(true, {}, newRecord);
            eventArgs.recordIndex = index + 1;
            proxy.subContextMenuAction(eventArgs);
            proxy._clearContextMenu();
        },
        getExpandStatus: function (record) {

            var parentRecord = record.parentItem;

            if (parentRecord != null) {

                if (parentRecord.expanded === false) {
                    return false;
                } else if (parentRecord.parentItem) {

                    if (parentRecord.parentItem.expanded === false) {
                        return false;
                    } else {
                        return this.getExpandStatus(parentRecord.parentItem);
                    }

                } else return true;
            } else return true;
        },
        subContextMenuAction: function (args) {
            var proxy = this,
                model = proxy.model,
            data = $.extend(true, {}, proxy._contextMenuSelectedItem.item), rowPosition;
            if (!model.durationUnitMapping)
                data.duration = this._getDurationStringValue(proxy._contextMenuSelectedItem);
            delete data[model.childMapping];
            delete data[model.predecessorMapping];
            delete data["WBSPredecessor"];
            delete data[model.taskNameMapping];
            
            if (args.position === "Below") {
                rowPosition = ej.Gantt.AddRowPosition.BelowSelectedRow;
            } else {
                rowPosition = ej.Gantt.AddRowPosition.AboveSelectedRow;
            }
            /*Assign or update WBS value*/
            if (model.enableWBS)
                data["WBS"] = proxy._getNewWBSid(rowPosition);
            proxy.addRecord(data, rowPosition);
        },

        /* To recalculate the WBS value */
        reCalculateWBS: function (selectedRecords, lastDigit, parentWBS) {
            var proxy = this, model = proxy.model, final;

            if (parentWBS) {
                for (var i = 0; i < selectedRecords.length; i++) {
                    final = lastDigit + i;
                    selectedRecords[i]["WBS"] = parentWBS + "." + final;
                    selectedRecords[i]["item"]["WBS"] = parentWBS + "." + final;
                    if (model.enableWBSPredecessor && model.predecessorMapping)
                        proxy._getPredecessorIds(selectedRecords[i]);
                    proxy.refreshGanttRecord(selectedRecords[i]);
                    if (selectedRecords[i].hasChildRecords)
                        proxy._updateChildWBS(selectedRecords[i])
                }
            }
            else {
                for (var i = 0; i < selectedRecords.length; i++) {
                    final = (lastDigit + i).toString();
                    selectedRecords[i]["WBS"] = final;
                    selectedRecords[i]["item"]["WBS"] = final;
                    if (model.enableWBSPredecessor && model.predecessorMapping)
                        proxy._getPredecessorIds(selectedRecords[i]);
                    proxy.refreshGanttRecord(selectedRecords[i]);
                    if (selectedRecords[i].hasChildRecords)
                        proxy._updateChildWBS(selectedRecords[i])
                }
            }
        },

        _updateChildWBS: function (parentRecord) {
            var proxy = this, model = proxy.model,
                childRecs = parentRecord.childRecords,
                pWBS = parentRecord["WBS"];
            for (var c = 0; c < childRecs.length; c++) {
                childRecs[c]["WBS"] = pWBS + "." + (c + 1);
                childRecs[c]["item"]["WBS"] = pWBS + "." + (c + 1);
                if (model.enableWBSPredecessor && model.predecessorMapping)
                    proxy._getPredecessorIds(childRecs[c]);
                proxy.refreshGanttRecord(childRecs[c]);
                if (childRecs[c].hasChildRecords) {
                    proxy._updateChildWBS(childRecs[c])
                }
            }
        },

        /*Get all the predecessor rows that are matching the taskId*/
        _getPredecessorIds: function (pData) {
            var proxy = this,
                model = proxy.model,
                dataTID = pData.taskId,
                flatDatas = model.flatRecords,
                targetRecords = flatDatas.filter(function (item) {
                    if (item["predecessorsName"]) {
                        var prdcList = item["predecessorsName"].split(',');
                        for (var p = 0; p < prdcList.length; p++) {
                            var ref = prdcList[p].match(/(\d+|[A-z]+)/g),
                                refId = +ref[0];
                            if (refId == dataTID)
                                return item;
                        }
                    }
                });
            if (targetRecords.length) {
                for (t = 0; t < targetRecords.length; t++) {
                    proxy._$treegridHelper.ejTreeGrid("updateWBSPredecessor", targetRecords[t]);
                    proxy.refreshGanttRecord(targetRecords[t]);
                }
            }
        },

        /*Get new WBS id for newly adding row*/
        _getNewWBSid: function (rowPosition) {
            var proxy = this,
                model = proxy.model,
                data = model.selectionMode == "row" ? model.selectedItem : model.updatedRecords[proxy._rowIndexOfLastSelectedCell], //selected row item before adding the new row
                newWBS;
            if (data)
                newWBS = data["WBS"];//Same WBS value to new row if it is AboveSelectedRow
            else
                newWBS = 1;// While adding new row without selecting the row (i.e. Adding to the TOP)

            //Creating new WBS value to new row if the AddRowPosition is BelowSelectedRow
            if (data && rowPosition == ej.Gantt.AddRowPosition.BelowSelectedRow) {
                var lastVal = newWBS.lastIndexOf('.') != -1 ? parseInt(newWBS.substr(newWBS.lastIndexOf('.') + 1)) : parseInt(newWBS),
                    newLastVal = lastVal + 1;                
                if (data.parentItem) {
                    var parentVal = data.parentItem ? data.parentItem.WBS : null;
                    newWBS = parentVal + '.' + newLastVal;
                }
                else {
                    newWBS = newLastVal;
                }               
            }
            return newWBS.toString();
        },

        _getNewTaskId: function (taskId) {
            var proxy = this, tempTaskId;
            if (proxy.model.ids.indexOf(taskId.toString()) == -1) {              
                return taskId == 0 ? 1 : taskId;
            } else {
                taskId++;
                tempTaskId = proxy._getNewTaskId(taskId);
                return tempTaskId;
            }
        },

        contextMenuAction: function (args) {
            var proxy = this;
            if (args.requestType == "contextMenuAdd")
                proxy._sendAddRequest();
            if (args.requestType == "contextMenuIndent")
                proxy._sendIndentRequest();
            if (args.requestType == "contextMenuOutdent")
                proxy._sendOutdentRequest();
            if (args.requestType == "contextMenuDelete")
                proxy._$treegridHelper.ejTreeGrid("deleteRow", null, true, proxy._contextMenuSelectedIndex);
            if (args.requestType == "contextMenuTaskDetails")
                proxy._sendEditRequest();
        },

        _renderContextMenu: function (e, index, item) {

            var proxy = this,
                eventArgs = {},
                args = {},
                posx,
				subposx,
                posy, addItemPositionY,addItemIndex,
                contextMenu,
                contextMenuUList,
                length, columnIndex;
            proxy._contextMenuSelectedIndex = index;
            proxy._contextMenuSelectedItem = item;
            proxy._contextMenuEvent = e;
            columnIndex = proxy._$treegridHelper.ejTreeGrid("getCellIndex", e);
            if (!e) e = window.event;
            if (e.pageX || e.pageY) {
                subposx = posx = e.pageX;
                posy = e.pageY;
            } else if (e.clientX || e.clientY) {
                subposx = posx = e.clientX + document.body.scrollLeft
                    + document.documentElement.scrollLeft;
                posy = e.clientY + document.body.scrollTop
                    + document.documentElement.scrollTop;
            }

            var ganttOffset = this._$treegridHelper.ejTreeGrid("getOffsetRect", proxy.element[0]);
            ganttOffset.bottom = ganttOffset.top + this.element[0].offsetHeight;
            ganttOffset.right = ganttOffset.left + $(this.element).width();            
            args.requestType = "ContextMenuOpen";
            args.contextMenuItems = proxy._contextMenuItems;
            args.columnIndex = columnIndex;
            args.item = proxy._contextMenuSelectedItem;
            args.targetElement = e;
            args.index = index;
            if (proxy._trigger("contextMenuOpen", args))
                return;

            proxy._activeMenuItemId = null;
            proxy._contextMenuItems = args.contextMenuItems;
            if (proxy._contextMenuItems.length == 0)
                return;
            contextMenu = ej.buildTag("div.e-contextmenu", "", {
                'display': 'table',
                'position': 'absolute',
                'border-width': '1px',
                'border-style': 'solid',
                'z-index': proxy._$treegridHelper.ejTreeGrid("getmaxZindex") + 1,
            }, { "id": proxy._id + "_ContextMenu" });

            //Get zero th level menu items
            var parentMenuItems = args.contextMenuItems.filter(function (value) {
                if (value.parentMenuId == null || value.parentMenuId == undefined)
                    return true;
            });

            contextMenuUList = ej.buildTag("ul", $.render[proxy._id + "contextMenuTemplate"](parentMenuItems), {
                'margin': '0px',
                'padding-left': '0px'
            }, {
                'data-icon': false,
                'type': 'none',
                'data-role': 'list-divider'
            });
            contextMenu.append(contextMenuUList);
            $(document.body).append(contextMenu);

            var contextMenuHeight = $(contextMenu).height(),
                contextMenuWidth = $(contextMenu).width(),
                contextMenuItems = contextMenu.find(".e-menuitem");

            if (ganttOffset.left > posx || (ganttOffset.right < (posx + contextMenuWidth))) {

                if (ganttOffset.right < (posx + contextMenuWidth)) {
                    posx = posx - contextMenuWidth;
                }
                if (posx < 0) {
                    posx = ganttOffset.left + 10;
                }
            }

            if (ganttOffset.bottom < posy + (30 * parentMenuItems.length)) {
                var tempPosY = posy - (30 * parentMenuItems.length);
                if (tempPosY > 0) {
                    posy = tempPosY;
                }
            }

            else if (($(window).height() + $(window).scrollTop()) < posy + contextMenuHeight)
                posy = posy - contextMenuHeight;

            contextMenu.css({ 'left': posx + 'px', 'top': posy + 'px', });
            contextMenuItems.css({ 'width': contextMenuWidth + 2 });
            proxy._$treegridHelper.ejTreeGrid('setFocusOnTreeGridElement');
            $(contextMenu).css({ 'height': 'auto' });
            proxy._on(contextMenu, "contextmenu", function (argsE) {
                argsE.preventDefault();
            });

            //click event handlers for contextmenu items and subcontextmenu items
            $(contextMenuItems).click(function () {
                proxy._contextMenuClickHandler(this);
            });

            //Mouseenter and mouse leave handler for contextmenu items and Subcontextmenuitems
            $(contextMenuItems).mouseenter(function () {
                if (!$(this).hasClass("e-disable")) {
                    contextMenu.find(".e-contextmenu-mouseover").removeClass("e-contextmenu-mouseover");
                    $(this).addClass("e-contextmenu-mouseover");
                    proxy._activeMenuItemId = $(this).attr("id");
                    proxy._showSubContextMenu(this, args.contextMenuItems);
                }
            });

            e.preventDefault();
        },
        //Show SubContext menu for selected Menu items
        _showSubContextMenu: function (element, menuItems) {
            var model = this.model,
                proxy = this,
                currentMenuItem = [],
                menuId = $(element).attr("id"),
                subContextMenu, subContextMenuUList, subMenuItems = [], subContextMenuItems;

            subMenuItems = menuItems.filter(function (value) {
                if (value.menuId == menuId)
                    currentMenuItem = value;
                if (value.parentMenuId == menuId)
                    return true;
            });

            if (!currentMenuItem.parentMenuId)
                $(".e-innerContextmenu").remove();

            if (currentMenuItem.parentMenuId) {
                this._removeContextMenu(currentMenuItem, menuItems);
            }

            if (subMenuItems.length > 0) {
                subContextMenu = ej.buildTag("div.e-innerContextmenu", "", {
                    'display': 'table',
                    'position': 'absolute',
                    'border-width': '1px',
                    'border-style': 'solid',
                    'z-index': proxy._$treegridHelper.ejTreeGrid("getmaxZindex") + 1,
                }, { "id": this._id + "_SubContextMenu" + menuId });

                subContextMenuUList = ej.buildTag("ul", $.render[proxy._id + "contextMenuTemplate"](subMenuItems), {
                    'margin': '0px',
                    'padding-left': '0px'
                }, {
                    'data-icon': false,
                    'type': 'none',
                    'data-role': 'list-divider'
                });
                subContextMenu.append(subContextMenuUList);
                $(document.body).append(subContextMenu);
                var subMenuOffset = proxy._getSubContextMenuPosition(element, subContextMenu);
                $(subContextMenu).css({ "top": subMenuOffset.top, "left": subMenuOffset.left });
                subContextMenuItems = subContextMenu.find(".e-menuitem");
                subContextMenuItems.css({ 'width': $(subContextMenu).width() + 2 });
                $(subContextMenuItems).mouseenter(function () {
                    if (!$(this).hasClass("e-disable")) {
                        proxy._showSubContextMenu(this, menuItems);
                        $(this).closest(".e-innerContextmenu").find(".e-contextmenu-mouseover").removeClass("e-contextmenu-mouseover");
                        $(this).addClass("e-contextmenu-mouseover");
                        proxy._activeMenuItemId = $(this).attr("id");
                    }
                });
                proxy._on(subContextMenu, "contextmenu", function (argsE) {
                    argsE.preventDefault();
                });
                $(subContextMenuItems).click(function () {
                    proxy._contextMenuClickHandler(this);
                });
            }
        },
        _removeContextMenu: function (menuItem, menuItems) {

            var currentMeuItemContainer = $("#" + this._id + "_SubContextMenu" + menuItem.parentMenuId),
                expandedMenu = $(currentMeuItemContainer).find(".e-contextmenu-mouseover");
            if ($(expandedMenu).length > 0) {
                var innerMenu = menuItems.filter(function (value) {
                    if (value.menuId == $(expandedMenu).attr("id"))
                        return true;
                });
                if (innerMenu.length > 0) {
                    var nextLevelItem = menuItems.filter(function (value) {
                        if (value.parentMenuId == innerMenu[0].menuId)
                            return true;
                    });
                    if (nextLevelItem.length > 0)
                        this._removeContextMenu(nextLevelItem[0], menuItems);
                }
                $("#" + this._id + "_SubContextMenu" + $(expandedMenu).attr("id")).remove();
            }
        },
        _getSubContextMenuPosition: function (element, subMenu) {
            var model = this.model,
                subContextMenuWidth = $(subMenu).width(),
                 subContextMenuHeight = $(subMenu).height(),
                elementOffset = this._$treegridHelper.ejTreeGrid("getOffsetRect", element), subMenuOffset = { top: "", left: "" },
                parentElement = $(element).closest(".e-contextmenu"),
                posx, posy,
                contextMenuWidth;
            if (parentElement.length == 0)
                parentElement = $(element).closest(".e-innerContextmenu");
            contextMenuWidth = $(parentElement).width();
            subMenuOffset.top = elementOffset.top - 1;
            subMenuOffset.left = elementOffset.left + $(parentElement).width() + 1;
            posx = subMenuOffset.left;

            //Edge detection for context menu
            var treeGridOffset = this._$treegridHelper.ejTreeGrid("getOffsetRect", this.element[0]);
            treeGridOffset.bottom = treeGridOffset.top + this.element[0].offsetHeight;
            treeGridOffset.right = treeGridOffset.left + $(this.element).width();
            if (treeGridOffset.left > posx || (treeGridOffset.right < (posx + subContextMenuWidth))) {
                if (treeGridOffset.right < (posx + subContextMenuWidth)) {
                    posx = posx - contextMenuWidth - subContextMenuWidth - 5;
                }
                if (posx > 0) {
                    subMenuOffset.left = posx;
                }
            }
            if (treeGridOffset.bottom < subMenuOffset.top + subContextMenuHeight) {
                var tempPosY = (subMenuOffset.top + subContextMenuHeight) - treeGridOffset.bottom;
                tempPosY = subMenuOffset.top - tempPosY - 2;
                if (tempPosY > 0) {
                    subMenuOffset.top = tempPosY;
                }
            }

            return subMenuOffset;
        },
        //Click event handler for context menu items
        _contextMenuClickHandler: function (target) {
            var choice = $(target).attr('id'),
                proxy = this,
                eventArgs = {};
            if (!$(target).hasClass("e-disable") && $(target).find(".e-expander").length == 0) {
                switch (choice) {
                    case "Task":
                        eventArgs.requestType = "contextMenuTaskDetails";
                        proxy.contextMenuAction(eventArgs);
                        proxy._clearContextMenu();
                        break;
                    case "Indent": eventArgs.requestType = "contextMenuIndent";
                        proxy.contextMenuAction(eventArgs);
                        proxy._clearContextMenu();
                        proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                        break;
                    case "Outdent": eventArgs.requestType = "contextMenuOutdent";
                        proxy.contextMenuAction(eventArgs);
                        proxy._clearContextMenu();
                        proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                        break;
                    case "Delete": eventArgs.requestType = "contextMenuDelete";
                        proxy.contextMenuAction(eventArgs);
                        proxy._clearContextMenu();
                        proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                        break;
                    case "Above": eventArgs.requestType = "save";
                        eventArgs.position = "Above";
                        proxy.subContextMenuAction(eventArgs);
                        proxy._clearContextMenu();
                        proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                        break;
                    case "Below": eventArgs.requestType = "save";
                        eventArgs.position = "Below";
                        proxy.subContextMenuAction(eventArgs);
                        proxy._clearContextMenu();
                        proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                        break;
                    case "Open":
                        eventArgs.requestType = "contextMenuAdd";
                        proxy.contextMenuAction(eventArgs);
                        proxy._clearContextMenu();
                        proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                        break;
                    case "Add":
                        proxy._setInitialData();
                        break;
                    default:
                        eventArgs.data = proxy._contextMenuSelectedItem;
                        proxy._triggerMenuEventHandler(choice, eventArgs);
                        proxy._clearContextMenu();
                        break;
                }
            }
        },
        //Call custom context menu event handlers
        _triggerMenuEventHandler:function(menuId,eventArgs){
            var proxy = this,
                contextMenuItems = proxy._contextMenuItems,
                currentMenuItemCollection, menuItem;

            if (!ej.isNullOrUndefined(contextMenuItems)) {
                currentMenuItemCollection = contextMenuItems.filter(function (value) {
                    //convert menu id to string since id accepts only string values
                    if (value.menuId.toString() === menuId)
                        return true;
                });

                if (currentMenuItemCollection.length > 0) {
                    menuItem = currentMenuItemCollection[0];
                    eventArgs.menuId = menuId;
                    var fn = menuItem.eventHandler;
                    if (fn) {
                        if (typeof fn === "string") {
                            fn = ej.util.getObject(fn, window);
                        }
                        if ($.isFunction(fn)) {
                            args = ej.event("customContextMenuHandler", this.model, eventArgs);
                            fn.call(this, args);
                        }
                    }

                }
            }
        },
        _setInitialData: function () {
            var eventArgs = {}, proxy = this,
                model = proxy.model;
            if (model.flatRecords.length == 0) {
                proxy.addRecord();
                proxy._clearContextMenu();
            }
        },

        //Updated the all child records expandstatus on expandCollapse
        updateConnectorLines: function ($gridRows, expanded) {
            var proxy = this,
                length = $gridRows.length / 2,
                count = 0,
                row,
                index,
                record;
            
            for (count = 0; count < length; count++) {
                row = $gridRows[count];
                index = $(proxy._gridRows).index(row);
                if (index !== -1) {
                    record = proxy.model.currentViewData[index];
                    record.isExpanded = expanded;                  
                }
            }
                   
        },

        updateAltRow: function (ganttRecord, recordIndex, offset) {
            var proxy = this,
                count = 0,
                currentViewData = proxy.model.currentViewData,
                length = currentViewData.length,
                isAltRow = ganttRecord.isAltRow,
                record,
                $gridRows = $(proxy._gridRows);
            for (count = recordIndex + offset; count < length; count++) {
                if ($($gridRows[count]).css('display') === "none")
                    continue;
                record = currentViewData[count];
                record.isAltRow = !isAltRow;
                isAltRow = record.isAltRow;
                if (isAltRow)
                    $($gridRows[count]).addClass('e-alt-row');
                else
                    $($gridRows[count]).removeClass('e-alt-row');
            }
        },
        renderedEditDialog: function (args) {
            var proxy = this,
                model = this.model,
                columns = model.columns,
                length = columns.length,
                fieldData = {};
            switch (args.requestType) {
                case ej.TreeGrid.Actions.Add:
                    var temp = document.createElement('div'),
                        dialog = $("#" + proxy._id + "_dialogAdd");
                    $(temp).addClass("e-addedrow");
                    temp.innerHTML = $.render[proxy._id + "_JSONDialogAddingTemplate"](args.data);
                    $(dialog).html($(temp));
                    var evntArgs = {};
                    evntArgs.cssClass = model.cssClass;
                    evntArgs.enableModal = true;
                    evntArgs.width = "650px";
                    evntArgs.height = "418px";
                    evntArgs.enableResize = false;
                    evntArgs.contentSelector = "#" + proxy._id;
                    evntArgs.rtl = model.rtl;
                    evntArgs.showOnInit = false;
                    evntArgs.allowKeyboardNavigation = false;
                    evntArgs.beforeClose = function (args) {
                        if (proxy._closeAddEditDialog(args, "Add"))
                            args.cancel = true; // Cancel the add dialog box close.
                        else
                            proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                    },
                    title = proxy._editDialogTexts["addFormTitle"];
                    evntArgs.title = title;
                    proxy._editedDialogRecord = {};
                    var tab = $("#" + proxy._id + "AddTab");
                    $(tab).ejTab({
                        headerSize: "25px",
                        height: "315px",
                        heightAdjustMode: ej.Tab.HeightAdjustMode.None,
                        locale: model.locale,
                        itemActive: function (args) {
                            var activeHeader = $(args.activeHeader).find("a").attr("href");
                            if (activeHeader == "#" + proxy._id + "AddNotes") {
                                $("#" + proxy._id + "AddAreaNotes_Iframe").height("202");
                            }
                            else if (activeHeader == "#" + proxy._id + "AddCustomFields") {
                                var treeGrid = $("#treegrid" + proxy._id + "customFieldAdd").ejTreeGrid("instance");
                                treeGrid.getScrollElement().ejScroller("refresh");
                                treeGrid._updateScrollCss();
                            }
                        }
                    });
                    $(tab).find("div.e-content").css("overflow", "visible");
                    $(tab).find("div.e-hidebottom.e-addborderbottom.e-content").css("height", "286px");
                    $(dialog).ejDialog(evntArgs);
                    var dialogArgs = {};
                    dialogArgs.data = args.data;
                    dialogArgs.rowPosition = model.editSettings.rowPosition;
                    dialogArgs.requestType = "beforeOpenAddDialog";
                    dialogArgs.element = $("#" + proxy._id + "_dialogAdd");
                    if (!proxy._trigger("actionBegin", dialogArgs)) {
                        for (var columnCount = 0; columnCount < length; columnCount++)
                            fieldData[columns[columnCount].field] = dialogArgs.data[columns[columnCount].mappingName];
                        args.data = fieldData;
                        proxy._refreshEditForm(args);
                        dialogArgs.data = args.data;
                        dialogArgs.requestType = "OpenAddDialog";
                        dialogArgs.element = $("#" + proxy._id + "_dialogAdd");
                        if (!proxy._trigger("actionBegin", dialogArgs)) {
                            var dialogWrapper = $("#" + proxy._id + "_dialogAdd_wrapper");
                            $(dialog).find(".e-addedrow").css("overflow", "visible");
                            dialogWrapper.addClass("e-ganttdialog");
                            $(dialog).ejDialog("refresh");
                            dialogWrapper.find(".e-dialog-scroller").css("height", "373px");
                            $(dialog).ejDialog("open");
                        }
                    }
                    proxy._addPosition = dialogArgs.rowPosition;
                    var tempDate = this._getDateFromFormat(model.scheduleStartDate);
                    if (this._getSecondsInDecimal(tempDate) != this._defaultStartTime) {
                        this._setTime(this._defaultStartTime, tempDate);
                    }
                    this._editedDialogRecord.isUpdatedFromDialog = false;
                    proxy._editedDialogRecord.startDate = args.data.startDate !="" ?args.data.startDate : this._checkStartDate(new Date(tempDate));
                    proxy._editedDialogRecord.endDate = args.data.endDate !=""? args.data.endDate: new Date(proxy._editedDialogRecord.startDate);
                    proxy._editedDialogRecord.duration = args.data.duration != "" ? args.data.duration : 0;
                    proxy._editedDialogRecord.durationUnit = model.durationUnit;

                    break;
                case ej.TreeGrid.Actions.BeginEdit:
                    var temp = document.createElement('div'),
                        dialog = $("#" + proxy._id + "_dialogEdit");
                    $(temp).addClass("e-editedrow");
                    temp.innerHTML = $.render[proxy._id + "_JSONDialogEditingTemplate"](args.data);
                    $(dialog).html($(temp));
                    var evntArgs = {};
                    evntArgs.cssClass = proxy.model.cssClass;
                    evntArgs.rtl = model.rtl;
                    evntArgs.width = "650px";
                    evntArgs.height = "418px";
                    evntArgs.enableResize = false;
                    evntArgs.contentSelector = "#" + proxy._id;
                    evntArgs.enableModal = true;
                    evntArgs.showOnInit = false;
                    evntArgs.allowKeyboardNavigation = false;
                    evntArgs.beforeClose = function (args) {
                        if (proxy._closeAddEditDialog(args, "Edit"))
                            args.cancel = true; // Cancel the add dialog box close.
                        else
                            proxy._$treegrid.ejTreeGrid('setFocusOnTreeGridElement');
                    };
                    if (model.selectionMode == "row")
                        var selectedItem = proxy.selectedItem()
                    else
                        var selectedItem = proxy.model.updatedRecords[proxy._rowIndexOfLastSelectedCell];
                    var title = proxy._editDialogTexts["editFormTitle"];
                    evntArgs.open = function () {
                        var dialog = this, id = this._id;
                        var titleElement = $("#" + id + "_title").children(".e-title");
                        titleElement.width("450px");
                        titleElement.css({ "word-wrap": "normal", "text-overflow": "ellipsis", "white-space": "nowrap", "display": "inline-block", "overflow-x": "hidden", "float": "left" });
                        titleElement.attr("title", title);
                    };
                    evntArgs.title = title;
                    var tab = $("#" + proxy._id + "EditTab");
                    $(tab).ejTab({
                        headerSize: "25px",
                        height: "315px",
                        heightAdjustMode: ej.Tab.HeightAdjustMode.None,
                        locale: model.locale,
                        itemActive: function (args) {
                            var activeHeader = $(args.activeHeader).find("a").attr("href");
                            if (activeHeader == "#" + proxy._id + "EditNotes") {
                                $("#" + proxy._id + "EditAreaNotes_Iframe").height("202");
                            }
                            else if (activeHeader == "#" + proxy._id + "EditCustomFields") {
                                var treeGrid = $("#treegrid" + proxy._id + "customFieldEdit").ejTreeGrid("instance");
                                treeGrid.getScrollElement().ejScroller("refresh");
                                treeGrid._updateScrollCss();
                            }
                        }
                    });
                    $(tab).find("div.e-content").css("overflow", "visible");
                    $(tab).find("div.e-hidebottom.e-addborderbottom.e-content").css("height", "286px");
                    $(dialog).ejDialog(evntArgs);
                    var dialogArgs = {};
                    dialogArgs.data = args.data;
                    dialogArgs.requestType = "beforeOpenEditDialog";
                    dialogArgs.element = $("#" + proxy._id + "_dialogEdit");
                    if (!proxy._trigger("actionBegin", dialogArgs)) {
                        proxy._editedDialogRecord = jQuery.extend({}, selectedItem);
                        this._editedDialogRecord.isUpdatedFromDialog = false;
                        proxy._refreshEditForm(args);
                        dialogArgs.data = args.data;
                        dialogArgs.requestType = "openEditDialog";
                        dialogArgs.element = $("#" + proxy._id + "_dialogEdit");
                        if (!proxy._trigger("actionBegin", dialogArgs)) {
                            var dialogWrapper = $("#" + proxy._id + "_dialogEdit_wrapper");
                            $(dialog).find(".e-editedrow").css("overflow", "visible");
                            dialogWrapper.addClass("e-ganttdialog");
                            $(dialog).ejDialog("refresh");
                            dialogWrapper.find(".e-dialog-scroller").css("height", "373px");
                            $(dialog).ejDialog("open");
                        }
                    }
                    this._editedDialogRecord.isUpdatedFromDialog = false;
                    break;                    
            }
        },

        _closeAddEditDialog: function (args, type) {
            var proxy = this;
            if (proxy._isAddEditDialogSave)
                proxy._isAddEditDialogSave = false;
            else {
                var eventArgs = {};
                if (type === "Add")
                    eventArgs.requestType = "closeAddDialog";
                else
                    eventArgs.requestType = "closeEditDialog";
                return proxy._trigger("actionBegin", eventArgs);
            }
        },
        editFormValidate: function () {
            if ($.isFunction($.validator))
                return $("#" + this._id + "GeneralEditForm").validate().form();
            return true;
        },

        addFormValidate: function () {
            if ($.isFunction($.validator))
                return $("#" + this._id + "GeneralAddForm").validate().form();
            return true;
        },
        getCurrentData: function () {
            var proxy = this,
                updatedRecords = proxy.getUpdatedRecords(),
                currentRowIndex = proxy.model.selectionMode == "row" ? this.selectedRowIndex() : proxy._rowIndexOfLastSelectedCell;
            return updatedRecords && updatedRecords[currentRowIndex];
        },

        getCurrentViewData: function () {
            return this._$treegridHelper.ejTreeGrid("getCurrentViewData");
        },

        getUpdatedCurrentViewData: function () {
            return this._$treegridHelper.ejTreeGrid("getUpdatedCurrentViewData");
        },

        getRows: function () {
            return this._$treegridHelper.ejTreeGrid("getRows");
        },
        
        getSelectedCells: function () {
            return this._$treegridHelper.ejTreeGrid("getSelectedCells");
        },

        getGanttChartRows: function() {
            return this._$ganttchartHelper.ejGanttChart("getGanttChartRows");
        },

        getUpdatedRecords: function () {
            return this._$treegridHelper.ejTreeGrid("getUpdatedRecords");
        },

        _getToolBarHeight: function () {
            var toolbarH = 0;
            if (this.model.toolbarSettings.showToolbar) {
                toolbarH = this.element.find(".e-gantttoolbar").height();
            }
            return toolbarH;
        },

        _initValidator: function () {
            var gridObject = this;
            $("#" + this._id + "EditForm").validate({
                errorClass: 'e-field-validation-error',
                errorElement: 'div',
                wrapper: "div",
                errorPlacement: function (error, element) {
                    var $td = element.closest("td"), $container = $(error).addClass("e-error")
                    , $tail = ej.buildTag("div.e-errortail e-toparrow");
                    $td.find(".e-error").remove();
                    element.hasClass("e-numerictextbox") ? $container.insertAfter(element.closest(".e-numeric")) : $container.insertAfter(element);
                    $container.prepend($tail);
                    gridObject.model.editSettings.editMode != "normal" && $container.offset({ left: element.offset().left });
                    $container.fadeIn("slow");
                },

            });
        },

        setValidation: function () {
            this._initValidator();
            for (var i = 0; i < this._columns.length; i++) {
                if (!ej.isNullOrUndefined(this._columns[i]["validationRules"])) {
                    this.setValidationToField(this._columns[i].field, this._columns[i].validationRules);
                }
            }
        },

        setValidationToField: function (name, rules) {
            var ele = $("#" + this._id + name).length > 0 ? $("#" + this._id + name) : $("#" + name);
            ele.rules("add", rules);
            var validator = $("#" + this._id + "EditForm").validate();
            if (!ej.isNullOrUndefined(rules["required"])) {
                validator.settings.messages["Name"] = {};
                validator.settings.messages["Name"]["required"] = ej.TreeGrid.getColumnByField(proxy._columns, name).headerText + " is required";
            }
        },

        _createConnectorLinesCollection: function (args) {

            var proxy = this,
                model = this.model,
                recordLength = model.currentViewData.length,
                count,
                prdecessorIndex = -1,
                predecessorsCollection,
                ganttRecord,
                connectorLinesCollection = proxy._predecessorsCollection,
                connectorLinesLength = connectorLinesCollection.length,
                x = connectorLinesLength / 2,
                connectorLinesCount,
                enableVirtualization = model.enableVirtualization,
                record;


            if (model.enableVirtualization && args === "Load") {
                //THis is done for validate all the record during load time
                recordLength = model.updatedRecords.length;
                for (count = 0; count < recordLength; count++) {
                    ganttRecord = model.updatedRecords[count];
                    predecessorsCollection = ganttRecord["predecessor"];
                    if (predecessorsCollection) {
                        record = ganttRecord;
                        proxy._addPredecessorsCollection(ganttRecord, predecessorsCollection);
                    }
                }
            }
            else {

                for (count = 0; count < recordLength; count++) {
                    ganttRecord = model.currentViewData[count];
                    if (enableVirtualization === false && ganttRecord.isExpanded === false)
                        continue;
                    if (model.currentViewData.indexOf(ganttRecord) !== -1) {
                        predecessorsCollection = ganttRecord["predecessor"];
                        if (predecessorsCollection) {
                            record = ganttRecord;
                            proxy._addPredecessorsCollection(ganttRecord, predecessorsCollection);
                        }
                    }
                }

            }
            proxy._$ganttchartHelper && proxy._$ganttchartHelper.ejGanttChart("renderConnectorLines", proxy._connectorLinesCollection);
        },

        _addPredecessorsCollection: function (ganttRecord, predecessorsCollection) {
            var proxy = this,
                predecessorsLength,
                predecessorCount,
                predecessor,
                parentGanttRecord,
                childGanttRecord,
                model = proxy.model,
                connectorObj = {},
                predecessorValue = [],
                flatRecords = model.flatRecords,
                updatedRecords = model.updatedRecords,
                ids = model.ids;

            if (predecessorsCollection) {

                predecessorsLength = predecessorsCollection.length;

                for (predecessorCount = 0; predecessorCount < predecessorsLength; predecessorCount++) {

                    predecessor = predecessorsCollection[predecessorCount];


                    parentGanttRecord = flatRecords[ids.indexOf(predecessor.from)];
                    childGanttRecord = flatRecords[ids.indexOf(predecessor.to)];

                        if (!model.enableVirtualization) {
                            if ((parentGanttRecord && parentGanttRecord.isExpanded === false) || 
                                (childGanttRecord && childGanttRecord.isExpanded === false))
                                continue;
                        }

                        if (proxy._isValidationEnabled && !proxy._isInExpandCollapse && childGanttRecord)
                           proxy._validatePredecessorDates(childGanttRecord);
                }

                //for calculate auto schedule only validation is enough  
                if (!proxy._enableCreateCollection)
                    return;

				// for correct re draw the alreadey created line in multiple predecessor for same task
                var count = 0;
                 $.each(predecessorsCollection, function (inx, value) {

                    if (value.to === ganttRecord.taskId.toString()) {
                        count++;
                    }
                    return count;
                });
				
				
				
                    for (predecessorCount = 0; predecessorCount < predecessorsLength; predecessorCount++) {

                        predecessor = predecessorsCollection[predecessorCount];
						if (count > 1)
                        {
                            predecessor.isdrawn = false;
                        }
						
						parentGanttRecord = flatRecords[ids.indexOf(predecessor.from)];
						childGanttRecord = flatRecords[ids.indexOf(predecessor.to)];

                    if (updatedRecords.indexOf(parentGanttRecord) === -1 || updatedRecords.indexOf(childGanttRecord) == -1)
                                continue;

                            if (!model.enableVirtualization) {
                                if (parentGanttRecord.isExpanded === false || childGanttRecord.isExpanded === false)
                                    continue;
                            }

                            //if (proxy._isValidationEnabled && !proxy._isInExpandCollapse)
                            //    proxy._validateChildGanttRecord(parentGanttRecord, childGanttRecord, predecessor);

                        if (parentGanttRecord && childGanttRecord) {

                            connectorObj = proxy._createConnectorLineObject(parentGanttRecord, childGanttRecord, predecessor);
                          
                            if (connectorObj) {

                                if (proxy._connectorlineIds.length > 0 && proxy._connectorlineIds.indexOf(connectorObj.ConnectorLineId) == -1) {

                                    proxy._connectorLinesCollection.push(connectorObj);
                                    proxy._connectorlineIds.push(connectorObj.ConnectorLineId);
                                }
                                else if (proxy._connectorlineIds.length == 0) {
                                    proxy._connectorLinesCollection.push(connectorObj);
                                    proxy._connectorlineIds.push(connectorObj.ConnectorLineId);
                                }
                                else if (proxy._connectorlineIds.indexOf(connectorObj.ConnectorLineId) != -1) {
                                    var index = proxy._connectorlineIds.indexOf(connectorObj.ConnectorLineId);
                                    proxy._connectorLinesCollection[index] = connectorObj;
                                }
                                predecessor.isdrawn = true;
                            }
                        }
                   // }
                }

            }
          
        },
        //create connector line object collection for rendering
        _createConnectorLineObject: function (parentGanttRecord, childGanttRecord, predecessor) {
            var connectorObj = {},
                proxy = this,
                model = proxy.model,
                parentTop,
                childTop,
                updatedRecords = model.updatedRecords,
                parentIndex = updatedRecords.indexOf(parentGanttRecord),
                childIndex = updatedRecords.indexOf(childGanttRecord),
                count = 0,
                index = 0;
            
            if (parentIndex === -1 || childIndex === -1){
                return;
            }
            if (!model.enableVirtualization) {
                var collapsedCount = 0;
                if (childIndex > parentIndex) {
                    
                    for (count = 0; count < parentIndex; count++) {
                        if (updatedRecords[count].isExpanded===false)
                            ++collapsedCount;
                    }
                    index = parentIndex;
                    parentIndex -= collapsedCount;
                    
                    for (index; index < childIndex; index++) {
                        if (updatedRecords[index].isExpanded === false)
                            ++collapsedCount;
                    }
                    childIndex -= collapsedCount;
                }
                else if (parentIndex > childIndex) {
                    for (count = 0; count < childIndex; count++) {
                        if (updatedRecords[count].isExpanded === false)
                            ++collapsedCount;
                    }
                    index = childIndex;
                    childIndex -= collapsedCount;
                    
                    for (index ; index < parentIndex; index++) {
                        if (updatedRecords[index].isExpanded === false)
                            ++collapsedCount;
                    }
                    parentIndex -= collapsedCount;
                }
            }

            if (parentIndex != -1 && childIndex != -1) {
                parentTop = parentIndex * model.rowHeight;
                childTop = childIndex * model.rowHeight;
                connectorObj["ParentLeft"] = parentGanttRecord['left'];
                connectorObj["ChildLeft"] = childGanttRecord['left'];
                connectorObj["ParentWidth"] = parentGanttRecord['width'] == 0 || parentGanttRecord['isMilestone'] ? proxy._milesStoneWidth : parentGanttRecord['width'];
                connectorObj["ChildWidth"] = childGanttRecord['width'] == 0 || childGanttRecord['isMilestone'] ? proxy._milesStoneWidth : childGanttRecord['width'];
                connectorObj["ParentTop"] = parentTop;
                connectorObj["ChildTop"] = childTop;
                connectorObj["Height"] = parentTop > childTop ? parentTop - childTop : childTop - parentTop;
                connectorObj["Type"] = predecessor.predecessorsType;
                connectorObj["ConnectorLineId"] = "parent"+ parentGanttRecord['taskId'] + "child" + childGanttRecord['taskId'];                
                connectorObj["milestoneParent"] = parentGanttRecord.isMilestone ? true : false;
                connectorObj["milestoneChild"] = childGanttRecord.isMilestone ? true : false;
                
                return connectorObj;
            }
        },

        /* get date after weekend and holidays */
        _getDateAfterWeekendHolidays: function (date, isAutoSchedule)
        {
            var proxy = this, model = this.model,
                holidays = this._getStringHolidays(),
                tempDate = new Date(date),
                isDateUpdated = false,
                formatedDate;
            tempDate.setHours(0,0,0,0);
            formatedDate = this._getFormatedDate(tempDate, model.dateFormat, model.locale);
            
            /* Holiday checking */
            if (isAutoSchedule && holidays.indexOf(formatedDate) != -1) {
                date.setDate(date.getDate() + 1);
                isDateUpdated = true;
            }

            /* Weekend updates */
            if (isAutoSchedule && model.includeWeekend === false) {
                if (date.getDay() == 0) {
                    date.setDate(date.getDate() + 1);
                    isDateUpdated = true;
                }
                else if (date.getDay() == 6) {
                    date.setDate(date.getDate() + 2);
                    isDateUpdated = true;
                }
            }

            /* if Date modified check for another turn */
            if (isDateUpdated)
                return this._getDateAfterWeekendHolidays(date, isAutoSchedule)
            else
                return date;
        },

        /*get date before holidays and weekends */
        _getDateBeforeWeekendHolidays: function (date, isAutoSchedule) {
            var proxy = this, model = this.model,
                holidays = this._getStringHolidays(),
                tempDate = new Date(date),
                isDateUpdated = false,
                formatedDate;
            tempDate.setHours(0, 0, 0, 0);
            formatedDate = this._getFormatedDate(tempDate, model.dateFormat, model.locale);

            /* Holiday checking */
            if (isAutoSchedule && holidays.indexOf(formatedDate) != -1) {
                date.setDate(date.getDate() - 1);
                isDateUpdated = true;
            }

            /* Weekend updates */
            if (isAutoSchedule && model.includeWeekend === false) {
                if (date.getDay() == 0) {
                    date.setDate(date.getDate() - 2);
                    isDateUpdated = true;
                }
                else if (date.getDay() == 6) {
                    date.setDate(date.getDate() - 1);
                    isDateUpdated = true;
                }
            }

            /* if Date modified check for another turn */
            if (isDateUpdated)
                return this._getDateBeforeWeekendHolidays(date, isAutoSchedule)
            else
                return date;
        },
        /* update date as per offset value */
        _updateDateByOffset: function (date, predecessor, isMilestone, record)
        {
            var resultDate,
                offsetValue = predecessor.offset,
                durationUnit = predecessor.offsetDurationUnit;
                if (offsetValue < 0) {
                    resultDate = this._getStartDate(this._checkEndDate(date, record), (offsetValue * -1), durationUnit, record);
            } else {
                    resultDate = this._getEndDate(date, offsetValue, durationUnit, record);
                if (!isMilestone)
                    resultDate = this._checkStartDate(resultDate, record);
            }
            return resultDate;
        },

        /* update StartDate by using duration and enddate with weekends and holidays*/
        _setStartDateByDurationEndDate:function(ganttRecord)
        {
            var proxy = this,
                model = this.model,
                headerType = model.scheduleHeaderSettings.scheduleHeaderType,
                headerValue = ej.Gantt.ScheduleHeaderType,
                duartionUnit = model.durationUnit,
                isAutoSchedule = ganttRecord.isAutoSchedule,
                duration = duartionUnit == ej.Gantt.DurationUnit.Day ? ganttRecord.duration - 1 : ganttRecord.duration;

            if (ganttRecord.isMilestone)
                ganttRecord.startDate = ganttRecord.endDate;
            else {
                var tempEndDate = new Date(ganttRecord.endDate);
                //To calculate the Child Gantt record start date from its end date.
                for (var i = 0; i < duration; i++) {
                    if (duartionUnit == ej.Gantt.DurationUnit.Hour)
                        tempEndDate.setHours(tempEndDate.getHours() - 1);
                    else if (duartionUnit == ej.Gantt.DurationUnit.Day)
                        tempEndDate.setDate(tempEndDate.getDate() - 1);
                    else if (duartionUnit == ej.Gantt.DurationUnit.Minute)
                        tempEndDate.setMinutes(tempEndDate.getMinutes() - 1);
                    tempEndDate = this._getDateBeforeWeekendHolidays(tempEndDate, isAutoSchedule);
                }
                ganttRecord.startDate = new Date(tempEndDate);
            }
        },
        //Validate the child Gantt Record
        _validateChildGanttRecord: function (parentGanttRecord, childGanttRecord, predecessor, predecessorValidation,offsetChanged) {
            var proxy = this,
            model = proxy.model,
            predecessorType;

            if (proxy._editedTaskBarItem === childGanttRecord) {
                return;
            }
            switch (predecessor.predecessorsType) {

                case 'SS':
                    var currentTaskId = childGanttRecord['taskId'].toString(),
                        predecessorsCollection = childGanttRecord['predecessor'],
                        childPredecessor = predecessorsCollection.filter(function (data) { return data.to === currentTaskId }),
                        minStartDate = proxy._getPredecessorDate(childGanttRecord, childPredecessor, predecessor.predecessorsType);

                    childGanttRecord.startDate = new Date(minStartDate);
                    childGanttRecord._calculateEndDate(this);
                    childGanttRecord.left = childGanttRecord._calculateLeft(this);
                    childGanttRecord.width = childGanttRecord._calculateWidth(this);
                    childGanttRecord.progressWidth = childGanttRecord._calculateProgressWidth(childGanttRecord.width, childGanttRecord.status);
                    break;

                case 'SF':
                    var currentTaskId = childGanttRecord['taskId'].toString(),
                        predecessorsCollection = childGanttRecord['predecessor'],
                        childPredecessor = predecessorsCollection.filter(function (data) { return data.to === currentTaskId }),
                        minStartDate = proxy._getPredecessorDate(childGanttRecord, childPredecessor, predecessor.predecessorsType);

                    childGanttRecord.startDate = new Date(minStartDate);
                    childGanttRecord._calculateEndDate(this);
                    childGanttRecord.left = childGanttRecord._calculateLeft(this);
                    childGanttRecord.width = childGanttRecord._calculateWidth(this);
                    childGanttRecord.progressWidth = childGanttRecord._calculateProgressWidth(childGanttRecord.width, childGanttRecord.status);
                    break;

                case 'FS':

                    var predecessorsCollection = childGanttRecord['predecessor'],
                        currentTaskId = childGanttRecord['taskId'].toString(),
                        childPredecessor = predecessorsCollection && predecessorsCollection.filter(function (data) { return data.to === currentTaskId }),
                        maxStartDate = proxy._getPredecessorDate(childGanttRecord, childPredecessor, predecessor.predecessorsType);

                    childGanttRecord.startDate = new Date(maxStartDate);
                    childGanttRecord._calculateEndDate(this);
                    childGanttRecord.left = childGanttRecord._calculateLeft(this);
                    childGanttRecord.width = childGanttRecord._calculateWidth(this);
                    childGanttRecord.progressWidth = childGanttRecord._calculateProgressWidth(childGanttRecord.width, childGanttRecord.status);

                    break;

                case 'FF':
                    var currentTaskId = childGanttRecord['taskId'].toString(),
                        predecessorsCollection = childGanttRecord['predecessor'],
                        childPredecessor = predecessorsCollection && predecessorsCollection.filter(function (data) { return data.to === currentTaskId });
                    childGanttRecord.startDate = proxy._getPredecessorDate(childGanttRecord, childPredecessor, predecessor.predecessorsType);
                    childGanttRecord._calculateEndDate(this);
                    childGanttRecord.left = childGanttRecord._calculateLeft(this);
                    childGanttRecord.width = childGanttRecord._calculateWidth(this);
                    childGanttRecord.progressWidth = childGanttRecord._calculateProgressWidth(childGanttRecord.width, childGanttRecord.status);
                    break;
            }
            this._updateItemValueInRecord(childGanttRecord);            

            if (childGanttRecord.parentItem && childGanttRecord.parentItem.isAutoSchedule)
                proxy._updateParentItem(childGanttRecord);
            else if (childGanttRecord.parentItem && !childGanttRecord.parentItem.isAutoSchedule)
                proxy._updateManualParentItem(childGanttRecord)
            if (proxy._isTreeGridRendered || proxy._isGanttChartRendered) {
                proxy.refreshGanttRecord(childGanttRecord);
            }
        },

        //calulate the offset based on parent task and child task date
        _calculateOffset:function(parentDate,childDate)
        {
            var proxy = this,
                model = proxy.model,
                dayDifference = proxy._daydiff(parentDate, childDate);
            if (!model.includeWeekend){
                var weekEndCount = proxy._calculateWeekendCount(parentDate, dayDifference);
                dayDifference = (dayDifference > 0) ? (dayDifference - weekEndCount) : (dayDifference + weekEndCount);
            }
            if (model.holidays.length) {
                var holidayCount = proxy._calculateHolidayCount(parentDate, childDate);
                dayDifference = (dayDifference > 0) ? (dayDifference - holidayCount) : (dayDifference + holidayCount);
            }
            return dayDifference;
        },

        /*Get validated start of task on all predecessor type*/
        _getValidatedStartDate: function (ganttRecord, parentGanttRecord, predecessor) {
            var type = predecessor.predecessorsType,
                offset = predecessor.offset,
                tempDate, returnStartDate;
            switch (type) {
                case "FS":
                    tempDate = new Date(parentGanttRecord.endDate);
                    if (!ganttRecord.isMilestone || offset != 0)
                        tempDate = this._checkStartDate(tempDate, ganttRecord);
                    if (offset != 0)
                        tempDate = this._updateDateByOffset(tempDate, predecessor, ganttRecord.isMilestone, ganttRecord);
                    if (!ganttRecord.isMilestone)
                        returnStartDate = this._checkStartDate(tempDate, ganttRecord);
                    else
                        returnStartDate = new Date(tempDate);
                    break;
                case "FF":
                    tempDate = new Date(parentGanttRecord.endDate);
                    if (offset != 0)
                        tempDate = this._updateDateByOffset(tempDate, predecessor, ganttRecord.isMilestone);                    
                    tempDate = this._updateDateByOffset(tempDate, predecessor, ganttRecord.isMilestone, ganttRecord);
                    tempDate = this._checkEndDate(tempDate, ganttRecord);
                    returnStartDate = this._getStartDate(tempDate, ganttRecord.duration, ganttRecord.durationUnit, ganttRecord);
                    break;
                case "SF":
                    tempDate = new Date(parentGanttRecord.startDate);
                    if (offset != 0)
                        tempDate = this._updateDateByOffset(tempDate, predecessor, ganttRecord.isMilestone, ganttRecord);
                    if (!ganttRecord.isMilestone)
                        tempDate = this._checkEndDate(tempDate, ganttRecord);
                    returnStartDate = this._getStartDate(tempDate, ganttRecord.duration, ganttRecord.durationUnit, ganttRecord);
                    break;
                case "SS":
                    tempDate = new Date(parentGanttRecord.startDate);
                    if (offset != 0)
                        tempDate = this._updateDateByOffset(tempDate, predecessor, ganttRecord.isMilestone, ganttRecord);
                    if (!ganttRecord.isMilestone)
                        returnStartDate = this._checkStartDate(tempDate, ganttRecord);
                    else
                        returnStartDate = tempDate;
                    break;
            }
            return returnStartDate;
        },
        //Get maximum or minimum date as per predecessor type
        _getPredecessorDate: function (ganttRecord, predecessorsCollection) {
            var minStartDate = null, model = this.model,
                maxStartDate = null,
                length, i,
                flatRecords = model.flatRecords,
                ids = model.ids,
                tempStartDate,
                parentGanttRecord,
                childGanttRecord,
                validatedpredecessor = predecessorsCollection.filter(function (data) {
                    if (data.to === ganttRecord.taskId.toString())
                        return true;
                });

            if (validatedpredecessor) {
                length = validatedpredecessor.length;
                for (i = 0; i < length; i++) {
                    predecessor = validatedpredecessor[i];
                    parentGanttRecord = flatRecords[ids.indexOf(predecessor.from)];
                    childGanttRecord = flatRecords[ids.indexOf(predecessor.to)];
                    tempStartDate = this._getValidatedStartDate(childGanttRecord, parentGanttRecord, predecessor);
                    if (maxStartDate == null)
                        maxStartDate = new Date(tempStartDate);
                    else if (tempStartDate.getTime() > maxStartDate.getTime())
                        maxStartDate = new Date(tempStartDate);
                }
            }
            return maxStartDate;
        },

        _setBeforeWeekend: function(date) {
            if (date.getDay() == 0)
                date.setDate(date.getDate() - 2);
            else if (date.getDay() == 6)
                date.setDate(date.getDate() - 1);
        },
        
        _setAfterWeekend: function(date) {
            if (date.getDay() == 0)
                date.setDate(date.getDate() + 1);
            else if (date.getDay() == 6)
                date.setDate(date.getDate() + 2);
        },
        
        _updateEditedGanttRecords: function (args) {
            var proxy = this, model = proxy.model,
                ganttRecord = args.data,
                startDate = new Date(ganttRecord.startDate),
                isAutoSchedule = ganttRecord.isAutoSchedule,
                isPredecessorsModified = false;

            if (args.columnName === "startDate") {
                var previousData = $.extend({}, args.data)
                startDate = proxy._checkStartDate(startDate, ganttRecord);
                ganttRecord.startDate = new Date(startDate);
                if (model.startDateMapping)
                    ganttRecord.item[model.startDateMapping] = ganttRecord.startDate;
                ganttRecord._calculateEndDate(this);
                ganttRecord.left = ganttRecord._calculateLeft(this);
                ganttRecord.width = ganttRecord._calculateWidth(this);// model.holidays
                if (!ganttRecord.hasChildRecords)
                    ganttRecord.progressWidth = ganttRecord._calculateProgressWidth(ganttRecord.width, ganttRecord.status);
                else {
                    var arg = {};
                    arg.previousData = previousData;
                    arg.data = ganttRecord;
                    proxy._validateAutoChildRecords(arg);
                }
                if (ganttRecord.parentItem && ganttRecord.parentItem.isAutoSchedule)
                    proxy._updateParentItem(ganttRecord);
                else if (ganttRecord.parentItem && !ganttRecord.parentItem.isAutoSchedule)
                    proxy._updateManualParentItem(ganttRecord);
            }

            else if (args.columnName === "endDate") {
                //validate start date
                var endDate = new Date(ganttRecord.endDate);
                if (endDate.getHours() == 0 && this._defaultEndTime != 86400)
                    this._setTime(this._defaultEndTime, endDate);
                endDate = this._checkEndDate(endDate, ganttRecord);
                ganttRecord.endDate = new Date(endDate);
                if (model.endDateMapping)
                    ganttRecord.item[model.endDateMapping] = ganttRecord.endDate;
                if (ganttRecord.isMilestone) {
                    ganttRecord.startDate = this._checkStartDate(ganttRecord.startDate, ganttRecord);
                    model.startDateMapping && (ganttRecord.item[model.startDateMapping] = ganttRecord.startDate);
                }

                if (startDate.getTime() <= endDate.getTime()) {
                    ganttRecord._calculateDuration(this);
                    ganttRecord.width = ganttRecord._calculateWidth(this);                    
                    if (!ganttRecord.hasChildRecords)
                        ganttRecord.progressWidth = ganttRecord._calculateProgressWidth(ganttRecord.width, ganttRecord.status);

                    if (ganttRecord.parentItem && ganttRecord.parentItem.isAutoSchedule)
                        proxy._updateParentItem(ganttRecord);
                    else if (ganttRecord.parentItem && !ganttRecord.parentItem.isAutoSchedule)
                        proxy._updateManualParentItem(ganttRecord);
                }
                else
                {
                    ganttRecord.endDate = args.previousValue;
                    ganttRecord.item[model.endDateMapping] = args.previousValue;
                }
                if (ganttRecord.duration === 0)
                    ganttRecord.isMilestone = true;
                else
                    ganttRecord.isMilestone = false;
                
                proxy._updateResourceRelatedFields(ganttRecord);
            }
            
            else if (args.columnName == "duration" || proxy._isDurationUpdated) {
                var currentDuration = ganttRecord.duration;
                if (currentDuration != 0 && ganttRecord.isMilestone) {
                    ganttRecord.startDate = this._checkStartDate(ganttRecord.startDate, ganttRecord);
                    model.startDateMapping && (ganttRecord.item[model.startDateMapping] = ganttRecord.startDate);
                }
                    ganttRecord._calculateEndDate(this);

                if (currentDuration === 0) {
                    ganttRecord.isMilestone = true;
                } else {
                    ganttRecord.isMilestone = false;
                }
                ganttRecord.width = ganttRecord._calculateWidth(this);
                if (!ganttRecord.hasChildRecords)
                    ganttRecord.progressWidth = ganttRecord._calculateProgressWidth(ganttRecord.width, ganttRecord.status);

                if (ganttRecord.parentItem && ganttRecord.parentItem.isAutoSchedule)
                    proxy._updateParentItem(ganttRecord);
                else if (ganttRecord.parentItem && !ganttRecord.parentItem.isAutoSchedule)
                    proxy._updateManualParentItem(ganttRecord);
            }

            else if (args.columnName == "predecessor") {
                isPredecessorsModified = true;
                if (args.previousValue) {
                    proxy._removeConnectorLine(args.previousValue, ganttRecord);
                }
                proxy._addConnectorLine(ganttRecord);
            }

            else if (args.columnName == "status") {
                ganttRecord.status = ganttRecord.status > 100 ? 100 : ganttRecord.status;
                if (!ganttRecord.hasChildRecords)
                    ganttRecord.progressWidth = proxy._getProgressWidth(ganttRecord.width, ganttRecord.status);
                if (ganttRecord.parentItem && ganttRecord.parentItem.isAutoSchedule) {                    
                    proxy._updateParentItem(ganttRecord);
                }
                else if (ganttRecord.parentItem && !ganttRecord.parentItem.isAutoSchedule) {                    
                    proxy._updateManualParentItem(ganttRecord);
                }
            }
            else if (args.columnName == "taskMode") {
                proxy._updateGanttRecord(ganttRecord);
            }
            //proxy._updateEditedGanttRecord(ganttRecord);
            if (ganttRecord.predecessor) {
                
                proxy._isMileStoneEdited = ganttRecord.isMilestone;
                proxy._updatedConnectorLineCollection = [];
                proxy._connectorlineIds = [];
                if (args.columnName === "predecessor") {
                    if (model.enablePredecessorValidation)
                        proxy._validatePredecessor(ganttRecord, args.previousValue);
                    else{
                        var manualOffsetEditing=true;
                        proxy._validatePredecessorOnEditing(ganttRecord, manualOffsetEditing);
                    }
                }
                else
                    proxy._validatePredecessor(ganttRecord, undefined, "successor");
                if (proxy._updatedConnectorLineCollection.length > 0) {
                    proxy._$ganttchartHelper.ejGanttChart("appendConnectorLine", proxy._updatedConnectorLineCollection);
                }
            }
            proxy._isValidationEnabled = false;
            
            proxy.refreshGanttRecord(ganttRecord);
        },

        _removeConnectorLine: function (predecessor,ganttRecord) {
            var proxy = this,
                model = this.model,
                connectorLineId,
                parentGanttRecord,
                record,
                i = 0,
                length = predecessor && predecessor.length,
                index = -1,
                flatRecords = model.flatRecords,
                ids = model.ids;
                
            for (i = 0; i < length; i++) {
                parentGanttRecord = flatRecords[ids.indexOf(predecessor[i].from)];
                record = flatRecords[ids.indexOf(predecessor[i].to)];
                
                if (ganttRecord.taskId.toString() === predecessor[i].to.toString()) {
                    
                    index = parentGanttRecord.predecessor.indexOf(predecessor[i]);
                    index >= 0 && parentGanttRecord.predecessor.splice(index, 1);
                }

                if (parentGanttRecord && record) {
                    connectorLineId = "parent"+parentGanttRecord['taskId'] + "child" + record['taskId'];
                    proxy._$ganttchartHelper.ejGanttChart("removeConnectorline", connectorLineId);
                }
            }
        },

        _addConnectorLine:function(ganttRecord) {
            var proxy = this,
                count = 0,
                model = proxy.model,
                predecessors = ganttRecord.predecessor,
                length,
                predecessor,
                flatRecords = model.flatRecords,
                ids = model.ids,
                successorGanttRecord;

            if (predecessors) {

                length = predecessors.length;

                for (count = 0; count < length; count++) {

                    predecessor = predecessors[count];
                    
                    if (predecessor.to === ganttRecord.taskId.toString()) {
                        successorGanttRecord = flatRecords[ids.indexOf(predecessor.from)];
                    }

                    if (successorGanttRecord) {
                        if (successorGanttRecord.predecessor) {
                            successorGanttRecord.predecessor.push(predecessor);
                        } else {
                            successorGanttRecord.predecessor = [];
                            successorGanttRecord.predecessor.push(predecessor);
                            proxy._predecessorsCollection.push(successorGanttRecord);
                        }
                    }
                }
            }
        },

        _calculateUpdatedDate: function (modifiedDate, offset) {
            var proxy = this, model = proxy.model,
                durationUnitValue = ej.Gantt.DurationUnit,
                i = 0;
            if (offset > 0) {
                for (i; i < offset; i++) {
                    if (model.durationUnit == durationUnitValue.Day) {
                        modifiedDate = proxy.dateUpdate(modifiedDate, 1, 0);
                    }
                    else if (model.durationUnit == durationUnitValue.Hour) {
                        modifiedDate = proxy.dateUpdate(modifiedDate, 0, 1);
                    }
                    else if (model.durationUnit == durationUnitValue.Minute) {
                        modifiedDate = proxy.dateUpdate(modifiedDate, 0, 0, 1);
                    }
                    if (modifiedDate.getDay() == 0)
                        modifiedDate.setDate(modifiedDate.getDate() + 1);
                    else if (modifiedDate.getDay() == 6)
                        modifiedDate.setDate(modifiedDate.getDate() + 2);
                }
            } else {
                var dateOffset = (-1) * offset;
                for (i = 0; i < dateOffset; i++) {
                    if (model.durationUnit == durationUnitValue.Day) {
                        modifiedDate = proxy.dateUpdate(modifiedDate, -1, 0);
                    }
                    else if (model.durationUnit == durationUnitValue.Hour) {
                        modifiedDate = proxy.dateUpdate(modifiedDate, 0, -1);
                    }

                    if (modifiedDate.getDay() == 0)
                        modifiedDate.setDate(modifiedDate.getDate() - 2);
                    else if (modifiedDate.getDay() == 6)
                        modifiedDate.setDate(modifiedDate.getDate() - 1);
                }
            }
            modifiedDate = new Date(modifiedDate);
            return modifiedDate;
        },

        _updateEditedGanttRecord: function (ganttRecord) {
            var proxy = this;
            if (ganttRecord.predecessor) {
                var predecessorsCollection = ganttRecord.predecessor,
                    count = 0,
                    length = predecessorsCollection.length,
                    predecessor,
                    parentGanttRecord,
                    record,
                    connectorLineId,
                    connectorLineObject,
                    model = proxy.model,
                    flatRecords = model.flatRecords,
                    ids = model.ids;

                for (count = 0; count < length; count++) {
                    proxy._updatedConnectorLineCollection = [];
                    proxy._connectorlineIds = [];
                    predecessor = predecessorsCollection[count];
                    if (predecessor.to === ganttRecord['taskId'].toString()) {

                        parentGanttRecord = flatRecords[ids.indexOf(predecessor.from)];
                        record = flatRecords[ids.indexOf(predecessor.to)];
                        
                        if (parentGanttRecord && record) {
                            connectorLineId = "parent" + parentGanttRecord['taskId'] + "child" + record['taskId'];
                            proxy._$ganttchartHelper.ejGanttChart("removeConnectorline", connectorLineId);
                            connectorLineObject = proxy._createConnectorLineObject(parentGanttRecord, record, predecessor);
                            if (connectorLineObject) {
                                if (proxy._connectorlineIds.length > 0 && proxy._connectorlineIds.indexOf(connectorLineObject.ConnectorLineId) == -1) {

                                    proxy._updatedConnectorLineCollection.push(connectorLineObject);
                                    proxy._connectorlineIds.push(connectorLineObject.ConnectorLineId);
                                }
                                else if (proxy._connectorlineIds.length == 0) {
                                    proxy._updatedConnectorLineCollection.push(connectorLineObject);
                                    proxy._connectorlineIds.push(connectorLineObject.ConnectorLineId);
                                }
                                proxy._$ganttchartHelper.ejGanttChart("appendConnectorLine", proxy._updatedConnectorLineCollection);
                            }
                        }
                        
                    }
                }
            }
        },
        

        _updateGanttRecord: function (ganttRecord) {
            var proxy = this,
                model = proxy.model;

            if (ganttRecord.hasChildRecords && ganttRecord.isAutoSchedule) {
                ganttRecord.startDate = proxy._checkStartDate(ganttRecord.manualStartDate, ganttRecord);                
                ganttRecord.left = ganttRecord._calculateManualLeft(this);
                ganttRecord.width = ganttRecord._calculateManualWidth(this);
                ganttRecord.progressWidth = ganttRecord._calculateProgressWidth(ganttRecord.width, ganttRecord.status);                
                ganttRecord.endDate = ganttRecord.manualEndDate;
                ganttRecord._calculateDuration(this);
            }
            else if (ganttRecord.hasChildRecords && !ganttRecord.isAutoSchedule) {                
                ganttRecord.left = ganttRecord._calculateLeft(this);
                ganttRecord.width = ganttRecord._calculateWidth(this);
                ganttRecord._calculateDuration(this);
                ganttRecord.manualStartDate = ganttRecord.startDate;
                ganttRecord.manualEndDate = ganttRecord.endDate;                
                proxy._updateManualParentItem(ganttRecord, null, true);
            }
            else {
                ganttRecord.startDate = proxy._checkStartDate(ganttRecord.startDate, ganttRecord);
                ganttRecord.endDate = this._getEndDate(ganttRecord.startDate, ganttRecord.duration, ganttRecord.durationUnit, ganttRecord);
                ganttRecord.left = ganttRecord._calculateLeft(this);
                ganttRecord.width = ganttRecord._calculateWidth(this);
                ganttRecord.progressWidth = ganttRecord._calculateProgressWidth(ganttRecord.width, ganttRecord.status);
            }
            if (ganttRecord.parentItem && ganttRecord.parentItem.isAutoSchedule)
                proxy._updateParentItem(ganttRecord);
            if (ganttRecord.parentItem && !ganttRecord.parentItem.isAutoSchedule)
                proxy._updateManualParentItem(ganttRecord);

            proxy.refreshGanttRecord(ganttRecord);
        },

        refreshGanttRecord: function (ganttRecord) {
            var proxy = this;
            if (proxy._isTreeGridRendered) {
                proxy.model.currentViewData = proxy.getCurrentViewData();
                var index = proxy.model.currentViewData.indexOf(ganttRecord);
                var treegridObject = proxy._$treegridHelper.ejTreeGrid("instance");
                treegridObject.model.allowSelection = proxy.model.allowSelection;
                ej.TreeGrid.refreshRow(treegridObject, index);
                if (proxy._isGanttChartRendered) {
                    proxy._$ganttchartHelper.ejGanttChart("refreshRow", index);
                }
                //Client side event is triggerd for upadte the server side database
                var eventArgs = {};
                eventArgs.data = ganttRecord;
                eventArgs.item = ganttRecord.item;
                eventArgs.requestType = "recordUpdate";
                proxy._trigger("actionComplete",eventArgs);
            }
        },

        _updateManualParentItem: function (ganttRecord, editmode, isParent) {

            var proxy = this,
                parentGanttRecord = isParent ? ganttRecord : ganttRecord.parentItem,
                model = proxy.model,
                headerType = model.scheduleHeaderSettings.scheduleHeaderType,
                headerValue = ej.Gantt.ScheduleHeaderType,
                prevStartDate = new Date(parentGanttRecord.startDate),
                prevManualStartDate = new Date(parentGanttRecord.manualStartDate),
                currentStartDate = new Date(ganttRecord.startDate),
                prevEndDate = new Date(parentGanttRecord.endDate),
                prevManualEndDate = new Date(parentGanttRecord.manualEndDate),
                currentEndDate = new Date(ganttRecord.endDate);                    
           
            if (currentStartDate.getTime() < prevManualStartDate.getTime()) {
                parentGanttRecord.manualStartDate = ganttRecord.startDate;                
            }

            if (currentEndDate.getTime() > prevEndDate.getTime() && proxy._isLoad) {
                dateDiff = proxy._daydiff(prevEndDate, currentEndDate);                                
            }

            if (currentEndDate.getTime() > prevManualEndDate.getTime()) {
                parentGanttRecord.manualEndDate = ganttRecord.endDate;
                dateManualDiff = proxy._daydiff(prevManualEndDate, currentEndDate);                
            }

            var count = 0,
                childRecords = parentGanttRecord.childRecords,
                length = childRecords && childRecords.length,
                childGanttRecord,
                index = null,
                minStartDate = null,
                maxEndDate = null,
                parentProgress = 0,
                milestoneCount = 0,
                totalProgress = 0,               
                childCompletedWorks = 0;

            for (count = 0; count < length; count++) {

                childGanttRecord = childRecords[count];

                if (minStartDate === null) {
                    minStartDate = new Date(childGanttRecord.startDate);
                }
                if (maxEndDate === null) {
                    maxEndDate = new Date(childGanttRecord.endDate);
                    index = model.flatRecords.indexOf(childGanttRecord);
                }
                if (childGanttRecord.endDate.getTime() > maxEndDate.getTime()) {
                    maxEndDate = new Date(childGanttRecord.endDate);
                    index = model.flatRecords.indexOf(childGanttRecord);
                }
                if (childGanttRecord.startDate.getTime() < minStartDate.getTime()) {
                    minStartDate = new Date(childGanttRecord.startDate);
                }

                childCompletedWorks += parseInt(childGanttRecord.work);

                if (!childGanttRecord.isMilestone)
                    totalProgress += parseInt(childGanttRecord.status);
                else
                    milestoneCount++;
            }

            if (prevManualStartDate.getTime() !== minStartDate.getTime()) {
                parentGanttRecord.manualStartDate = new Date(minStartDate);                
            }

            if (prevManualEndDate.getTime() != maxEndDate.getTime()) {
                parentGanttRecord.manualEndDate = new Date(maxEndDate);                
            }
           
            if (proxy._isLoad) {
                parentGanttRecord._calculateDuration(this);
                parentGanttRecord.width = parentGanttRecord._calculateWidth(this);
            }
                
            parentGanttRecord.left = parentGanttRecord._calculateLeft(this);
            parentGanttRecord.manualLeft = parentGanttRecord._calculateManualLeft(this);
            parentGanttRecord._calculateManualDuration(this);
            parentGanttRecord.manualWidth = parentGanttRecord._calculateManualWidth(this);            

            //update parent works 
            parentGanttRecord._updateWorkWithDuration(proxy);
            //Add child works to parent
            parentGanttRecord.work += childCompletedWorks;

            //Calculate progressWidth after left and width calulation            
            var taskCount = length - milestoneCount;
            parentProgress = taskCount > 0 ? (totalProgress / taskCount) : 0;
            parentGanttRecord.progressWidth = proxy._getProgressWidth(parentGanttRecord.manualWidth, parentProgress);
            parentGanttRecord.status = Math.floor(parentProgress);

            if (model.progressMapping)
                parentGanttRecord.item[model.progressMapping] = parentGanttRecord.status;

            if (proxy._isTreeGridRendered || proxy._isGanttChartRendered)
                proxy.refreshGanttRecord(parentGanttRecord);

            if (parentGanttRecord.parentItem && parentGanttRecord.parentItem.isAutoSchedule && !isParent) {
                proxy._updateParentItem(parentGanttRecord);
            }
            else if (parentGanttRecord.parentItem && !parentGanttRecord.parentItem.isAutoSchedule && !isParent)
                proxy._updateManualParentItem(parentGanttRecord,editmode);
        },

        _updateParentItem: function (ganttRecord, editmode, isParent) {

            var proxy = this,
                parentGanttRecord = isParent ? ganttRecord : ganttRecord.parentItem,                               
                model = proxy.model,
                headerType = model.scheduleHeaderSettings.scheduleHeaderType,
                headerValue = ej.Gantt.ScheduleHeaderType,
                prevStartDate = new Date(parentGanttRecord.startDate),
                currentStartDate = new Date(ganttRecord.startDate),
                prevEndDate = new Date(parentGanttRecord.endDate),
                currentEndDate = new Date(ganttRecord.endDate);
                            
            
            if (currentStartDate.getTime() < prevStartDate.getTime()) {
                parentGanttRecord.startDate = ganttRecord.startDate;
                if (model.startDateMapping)
                    parentGanttRecord.item[model.startDateMapping] = parentGanttRecord.startDate;                
            }

            if (currentEndDate.getTime() > prevEndDate.getTime()) {                
                dateDiff = proxy._daydiff(prevEndDate, currentEndDate);
                parentGanttRecord.endDate = ganttRecord.endDate;
                if(model.endDateMapping)
                    parentGanttRecord.item[model.endDateMapping] = parentGanttRecord.endDate;

            }

            var count = 0,
                childRecords = parentGanttRecord.childRecords,
                length = childRecords && childRecords.length,
                childGanttRecord,
                index = null,
                minStartDate = null,
                maxEndDate = null,
                parentProgress = 0,
                milestoneCount = 0,
                totalProgress = 0,               
                childCompletedWorks = 0;

            for (count = 0; count < length; count++) {

                childGanttRecord = childRecords[count];
                var startDate = childGanttRecord.startDate,
                                    endDate = childGanttRecord.endDate;

                if (childGanttRecord.hasChildRecords && !childGanttRecord.isAutoSchedule) {
                    startDate = childGanttRecord.startDate.getTime() > childGanttRecord.manualStartDate.getTime() ?
                                    childGanttRecord.manualStartDate : childGanttRecord.startDate;
                }

                if (childGanttRecord.hasChildRecords && !childGanttRecord.isAutoSchedule) {
                    endDate = childGanttRecord.endDate.getTime() < childGanttRecord.manualEndDate.getTime() ?
                                    childGanttRecord.manualEndDate : childGanttRecord.endDate;
                }

                if (minStartDate === null) {
                    minStartDate = new Date(startDate);
                }
                if (maxEndDate === null) {
                    maxEndDate = new Date(endDate);
                    index = model.flatRecords.indexOf(childGanttRecord);
                }
                if (endDate.getTime() > maxEndDate.getTime()) {
                    maxEndDate = new Date(endDate);
                    index = model.flatRecords.indexOf(childGanttRecord);
                }
                if (startDate.getTime() < minStartDate.getTime()) {
                    minStartDate = new Date(startDate);
                }

                childCompletedWorks += parseInt(childGanttRecord.work);

                if (!childGanttRecord.isMilestone) {
                    totalProgress += parseInt(childGanttRecord.status);
                }
                else
                    milestoneCount++;
            }

            if (prevStartDate.getTime() !== minStartDate.getTime()) {
                parentGanttRecord.startDate = new Date(minStartDate);
                if (model.startDateMapping)
                    parentGanttRecord.item[model.startDateMapping] = parentGanttRecord.startDate;
            }
            
            if (prevEndDate.getTime() != maxEndDate.getTime()) {                                                       
                parentGanttRecord.endDate = new Date(maxEndDate);
                if(model.endDateMapping)
                    parentGanttRecord.item[model.endDateMapping] = parentGanttRecord.endDate;

            }

            parentGanttRecord._calculateDuration(this);
            parentGanttRecord.left = parentGanttRecord._calculateLeft(this);
            parentGanttRecord.width = parentGanttRecord._calculateWidth(this);
            if (milestoneCount == parentGanttRecord.childRecords.length) {
                if (parentGanttRecord.startDate.getTime() == parentGanttRecord.endDate.getTime())
                    parentGanttRecord.width = Math.floor((model.rowHeight - 6) / 2) * 2; //milestone width
                else
                    parentGanttRecord.width += Math.floor((model.rowHeight - 6) / 2) * 2
            }

            //Calculate progressWidth after Left and width calculation
            var taskCount = length - milestoneCount;
            parentProgress = taskCount > 0 ? (totalProgress / taskCount) : 0;            
            parentGanttRecord.progressWidth = proxy._getProgressWidth(parentGanttRecord.width, parentProgress);
            parentGanttRecord.status = Math.floor(parentProgress);

            //update parent works 
            parentGanttRecord._updateWorkWithDuration(proxy);
            //Add child works to parent
            parentGanttRecord.work += childCompletedWorks;

            //Default Values of Parent tasks.
            parentGanttRecord.taskType = ej.Gantt.TaskType.FixedDuration;
            parentGanttRecord.effortDriven = "false";

            if (model.progressMapping)
                parentGanttRecord.item[model.progressMapping] = parentGanttRecord.status;

            if (proxy._isTreeGridRendered || proxy._isGanttChartRendered)
                proxy.refreshGanttRecord(parentGanttRecord);

            if (parentGanttRecord.parentItem && parentGanttRecord.parentItem.isAutoSchedule && !isParent) {
                proxy._updateParentItem(parentGanttRecord);
            }
            else if (parentGanttRecord.parentItem && !parentGanttRecord.parentItem.isAutoSchedule && !isParent)
                proxy._updateManualParentItem(parentGanttRecord);
        },
        UpdatePredecessor: function () {
            var proxy = this;
            proxy._updatedRecordsDateByPredecessor();
            
            proxy._$ganttchartHelper.ejGanttChart("clearConnectorLines");
            proxy._connectorLinesCollection = [];
            proxy._createConnectorLinesCollection();
            proxy._$ganttchartHelper.ejGanttChart("renderConnectorLines",
                proxy._connectorLinesCollection);
        },

        /* updated all records dates as per predecessor and successor collections */
        _updatedRecordsDateByPredecessor:function()
        {
            var proxy = this, model = this.model,
                flatRecords = model.flatRecords, length = flatRecords.length;
            for (var count = 0; count < length ; count++) {
                (flatRecords[count].predecessor && flatRecords[count].item[model.predecessorMapping]) && proxy._validatePredecessorDates(flatRecords[count]);
            }
        },

        /* updated the record dates as per predecessor and successor collections */
        _validatePredecessorDates: function (childGanttRecord) {

            var proxy = this, model = proxy.model;

            if (childGanttRecord.predecessor) {

                var predecessorsCollection = childGanttRecord['predecessor'],
                    count,
                    parentGanttRecord,
                    record = null,
                    isValidated = false,
                    predecessor,
                    lowestOffset,
                    flatRecords = model.flatRecords,
                    ids = model.ids;

                var currentTaskId = childGanttRecord['taskId'].toString(),
                    predecessors = predecessorsCollection.filter(function (data) { return data.to === currentTaskId }),
                    successors = predecessorsCollection.filter(function (data) { return data.from === currentTaskId });
                var predecessorLength = predecessors.length;

                for (count = 0; count < predecessorLength; count++) {
                    predecessor = predecessors[count];
                    parentGanttRecord = flatRecords[ids.indexOf(predecessor.from)];
                    record = flatRecords[ids.indexOf(predecessor.to)];
                    proxy._validateChildGanttRecord(parentGanttRecord, record, predecessor);
                }

                var length = successors.length;

            }
        },


        _validatePredecessor: function (childGanttRecord, previousValue, validationOn) {

            var proxy = this, model = proxy.model;

            if (childGanttRecord.predecessor) {

                var predecessorsCollection = childGanttRecord['predecessor'],
                    count,                    
                    parentGanttRecord,
                    record=null,
                    connectorLineId,
                    isValidated = false,
                    predecessor,
                    connectorLineObject,
                    lowestOffset,
                    flatRecords = model.flatRecords,
                    ids = model.ids,
                     isOffsetChanged = false;

                var currentTaskId = childGanttRecord['taskId'].toString(),

                    predecessors = predecessorsCollection.filter(function (data) { return data.to === currentTaskId }),
                    successors = predecessorsCollection.filter(function (data) { return data.from === currentTaskId });
               var predecessorLength = predecessors.length;

                for (count = 0; count < predecessorLength; count++) {
                    predecessor = predecessors[count];
                    isOffsetChanged = proxy._isOffsetChange(predecessor, previousValue, count);
                    parentGanttRecord = flatRecords[ids.indexOf(predecessor.from)];//THis is going to exception when id is not corrct order
                    record = flatRecords[ids.indexOf(predecessor.to)];
                    connectorLineId = "parent" + parentGanttRecord['taskId'] + "child" + record['taskId'];
                    if (proxy._$ganttchartHelper)
                        proxy._$ganttchartHelper.ejGanttChart("removeConnectorline", connectorLineId);

                   if (record.isAutoSchedule || model.validateManualTasksOnLinking)
                       proxy._isValidationEnabled = true;
                   else
                       proxy._isValidationEnabled = false;
                   if ((childGanttRecord.taskId.toString() === predecessor.to || childGanttRecord.taskId.toString() === predecessor.from) &&
                       (!validationOn || validationOn == "predecessor") && proxy._isValidationEnabled)
                       proxy._validateChildGanttRecord(parentGanttRecord, record, predecessor, model.enablePredecessorValidation, isOffsetChanged);
                }
                for (count = 0; count < predecessorLength; count++) {
                    predecessor = predecessors[count];
                    parentGanttRecord = flatRecords[ids.indexOf(predecessor.from)];//THis is going to exception when id is not corrct order
                    record = flatRecords[ids.indexOf(predecessor.to)];
             
                    if ((model.enableVirtualization === false && (parentGanttRecord.isExpanded === false || record.isExpanded == false)))//(model.enableVirtualization === false && !parentGanttRecord.isExpanded && record.isExpanded === false)
                        continue;
                    connectorLineObject = proxy._createConnectorLineObject(parentGanttRecord, record, predecessor);
                    if (connectorLineObject) {
                        if (proxy._connectorlineIds.length > 0 && proxy._connectorlineIds.indexOf(connectorLineObject.ConnectorLineId) == -1) {

                            proxy._updatedConnectorLineCollection.push(connectorLineObject);
                            proxy._connectorlineIds.push(connectorLineObject.ConnectorLineId);
                        }
                        else if (proxy._connectorlineIds.length == 0) {
                            proxy._updatedConnectorLineCollection.push(connectorLineObject);
                            proxy._connectorlineIds.push(connectorLineObject.ConnectorLineId);
                        }
                        else if (proxy._connectorlineIds.indexOf(connectorLineObject.ConnectorLineId) != -1) {
                            var index = proxy._connectorlineIds.indexOf(connectorLineObject.ConnectorLineId);
                            proxy._updatedConnectorLineCollection[index] = connectorLineObject;
                        }
                    }                   

                }

                var length = successors.length;

                for (count = 0; count < length; count++) {

                    predecessor = successors[count];
                    parentGanttRecord = flatRecords[ids.indexOf(predecessor.from)];
                    record = flatRecords[ids.indexOf(predecessor.to)];
                    connectorLineId = "parent" + parentGanttRecord['taskId'] + "child" + record['taskId'];
                    isOffsetChanged = proxy._isOffsetChange(predecessor, previousValue, count);
                    if (record.isAutoSchedule || model.validateManualTasksOnLinking)
                        proxy._isValidationEnabled = true;
                    else
                        proxy._isValidationEnabled = false;
                    if (proxy._$ganttchartHelper)
                        proxy._$ganttchartHelper.ejGanttChart("removeConnectorline", connectorLineId);
                    if (validationOn != "predecessor" && proxy._isValidationEnabled)
                        proxy._validateChildGanttRecord(parentGanttRecord, record, predecessor, model.enablePredecessorValidation, isOffsetChanged);
                    if ((model.enableVirtualization === false && (parentGanttRecord.isExpanded === false || record.isExpanded == false)))
                        continue;
                    connectorLineObject = proxy._createConnectorLineObject(parentGanttRecord, record, predecessor);
                    if (connectorLineObject) {
                        if (proxy._connectorlineIds.length > 0 && proxy._connectorlineIds.indexOf(connectorLineObject.ConnectorLineId) == -1) {

                            proxy._updatedConnectorLineCollection.push(connectorLineObject);
                            proxy._connectorlineIds.push(connectorLineObject.ConnectorLineId);
                        }
                        else if (proxy._connectorlineIds.length == 0) {
                            proxy._updatedConnectorLineCollection.push(connectorLineObject);
                            proxy._connectorlineIds.push(connectorLineObject.ConnectorLineId);
                        }
                        else if (proxy._connectorlineIds.indexOf(connectorLineObject.ConnectorLineId) != -1) {
                            var index = proxy._connectorlineIds.indexOf(connectorLineObject.ConnectorLineId);
                            proxy._updatedConnectorLineCollection[index] = connectorLineObject;
                        }
                    }

                    record && proxy._validatePredecessor(record, undefined, "successor");

                }                
            }
        },
       
        // Check whether the predecessor offset is changed or not.
        _isOffsetChange: function (predecessor, previousValue, count)
        {
            var proxy = this,
                model = proxy.model,
                isOffsetChanged = false;
            if (!model.enablePredecessorValidation) {
                if (previousValue && previousValue.length) {
                    var predecessorOffset = predecessor.offset ? parseInt(predecessor.offset) : 0,
                        previousPredecessor = previousValue[count],
                        previousPredecessorOffset = previousPredecessor.offset ? parseInt(previousPredecessor.offset) : 0;
                    isOffsetChanged = predecessorOffset != previousPredecessorOffset ? true : false;

                }
                else if (ej.isNullOrUndefined(previousValue)) {
                    isOffsetChanged = false;
                }
                else
                    isOffsetChanged = true;
            }
            return isOffsetChanged;
        },
        _calculateDateDifference: function (emptyDate, dateDiff) {
            var differenceCount = dateDiff >= 0 ? dateDiff : (-1 * dateDiff),
                offset = 0;
            
            if (dateDiff > 0)
                offset = differenceCount - this._calculateWeekendCount(emptyDate, dateDiff);
            else
                offset = dateDiff + this._calculateWeekendCount(emptyDate, dateDiff);
            return offset;
        },

        _calculateWeekendCount: function (emptyDate, dateDiff) {
            var differenceCount = dateDiff >= 0 ? dateDiff : (-1 * dateDiff),
                weekendCount = 0,
                i = 0;
            
            if (dateDiff > 0) {
                for (i = 0; i < dateDiff; i++) {
                    if (emptyDate.getDay() == 0) {
                        weekendCount++;
                        emptyDate.setDate(emptyDate.getDate() + 1);
                    }
                    else if (emptyDate.getDay() == 6) {
                        weekendCount += 2;
                        ++i;
                        emptyDate.setDate(emptyDate.getDate() + 2);
                    } else
                        emptyDate.setDate(emptyDate.getDate() + 1);
                }
            }
            else {
                for (i = 0; i < differenceCount; i++) {
                    emptyDate.setDate(emptyDate.getDate() - 1);
                    if (emptyDate.getDay() == 0 || emptyDate.getDay() == 6) {
                        weekendCount += 1;
                    }
                }
            }
            return weekendCount;
        },

        _daydiff: function (first, second) {
            return ((new Date(second) - new Date(first)) / (1000 * 60 * 60 * 24));
        },

        //Calcualte the number of holidays between two dates
        _calculateHolidayCount: function (first, second) {
            var proxy = this,
                model = proxy.model,
                holidays = model.holidays,
                length = holidays.length,
                startDate = (first < second) ? first : second,
                endDate = (first > second) ? first : second,
                holidayCount = 0;
            for (var count = 0; count < length; count++) {
                if (proxy._getDateFromFormat(holidays[count].day) >= startDate && proxy._getDateFromFormat(holidays[count].day) <= endDate) {
                    holidayCount++
                }
            }
            return holidayCount;
        },


        dateUpdate: function (date, days, hours, minutes) {
            if (!minutes)
                minutes = 0;
            return new Date(
                date.getFullYear(),
                date.getMonth(),
                date.getDate() + days,
                date.getHours() + hours,
                date.getMinutes() + minutes,
                date.getSeconds(),
                date.getMilliseconds()
            );
        },
        
        //refresh treegrid and gantt rows
        _refreshChartAndGridRows: function ()
        {
            var proxy = this, model = this.model;
            proxy._$treegridHelper.ejTreeGrid("processBindings");
            var tempArgs = {};
            tempArgs.requestType = ej.TreeGrid.Actions.Refresh;
            proxy._$treegridHelper.ejTreeGrid("sendDataRenderingRequest", tempArgs);
            proxy.model.updatedRecords = proxy.getUpdatedRecords();
            proxy.model.currentViewData = proxy.getCurrentViewData();
            collapsedRecordCount = proxy._$treegridHelper.ejTreeGrid("getCollapsedRecordCount");
            proxy._totalCollapseRecordCount = collapsedRecordCount;
            height = (proxy.model.updatedRecords.length - collapsedRecordCount) * model.rowHeight;
            proxy._$ganttchartHelper.ejGanttChart("setUpdatedRecords", model.currentViewData, model.updatedRecords, model.flatRecords, model.ids);
            proxy._$ganttchartHelper.ejGanttChart("refreshHelper", model.currentViewData, model.updatedRecords, proxy._totalCollapseRecordCount);
            if (!proxy._isInAdd) {
                proxy._$treegridHelper.ejTreeGrid("updateHeight");
                proxy._$ganttchart.ejGanttChart("updateHeight", height);
                proxy._$ganttchartHelper.ejGanttChart("setCollapsedRecordCount", collapsedRecordCount);
                proxy._$ganttchartHelper.ejGanttChart("refreshGridLinesTable", proxy.model.updatedRecords.length - collapsedRecordCount);
                if (model.enableAltRow && model.currentViewData.length > 0)
                    ej.TreeGrid.updateAltRow(proxy, model.currentViewData[0], 0, 0);

                if (model.predecessorMapping) {
                    proxy._isValidationEnabled = false;
                    proxy._connectorlineIds = [];
                    proxy._connectorLinesCollection = [];
                    proxy._$ganttchartHelper.ejGanttChart("clearConnectorLines");
                    proxy._createConnectorLinesCollection();
                }
            }
        },
        //Refresh gantt after expnadAll or collapseAll operation
        _refreshGanttOnExpandCollapseAll:function()
        {
            var proxy = this,
                args = {},
                model = this.model,
                collapsedRecordCount = 0,
                height = 0;

            if (model.enableVirtualization) {
                args.requestType = ej.TreeGrid.Actions.ExpandCollapse;
                proxy._$treegridHelper.ejTreeGrid("updateAltRowOnCollapseAll");
                proxy._$treegridHelper.ejTreeGrid("sendDataRenderingRequest", args);
                model.updatedRecords = proxy.getUpdatedRecords();
                model.currentViewData = proxy.getCurrentViewData();
                proxy._$ganttchartHelper.ejGanttChart("clearConnectorLines");
                proxy._$ganttchartHelper.ejGanttChart("refreshHelper", proxy.model.currentViewData, proxy.model.updatedRecords);
                proxy._$treegridHelper.ejTreeGrid("updateHeight");
            } else {
                //If need refresh chart if record is added after searching or sorting
                if (proxy._isRefreshAddedRecord) {
                    proxy._refreshChartAndGridRows();
                    proxy._isRefreshAddedRecord = false;
                    return;
                }
                collapsedRecordCount = proxy._$treegridHelper.ejTreeGrid("getCollapsedRecordCount");
                proxy._totalCollapseRecordCount = collapsedRecordCount;
                height = (proxy.model.updatedRecords.length - collapsedRecordCount) * model.rowHeight;
                proxy._$ganttchartHelper.ejGanttChart("clearConnectorLines");
                proxy._$treegridHelper.ejTreeGrid("updateHeight");
                proxy._$ganttchart.ejGanttChart("updateHeight", height);
                proxy._$ganttchartHelper.ejGanttChart("setCollapsedRecordCount", collapsedRecordCount);
                proxy._$ganttchartHelper.ejGanttChart("refreshGridLinesTable", proxy.model.updatedRecords.length - collapsedRecordCount);
                if (model.enableAltRow && model.currentViewData.length > 0)
                    ej.TreeGrid.updateAltRow(proxy, model.currentViewData[0], 0, 0);
            }
            if (model.predecessorMapping) {
                proxy._isValidationEnabled = false;
                proxy._connectorlineIds = [];
                proxy._connectorLinesCollection = [];
                proxy._createConnectorLinesCollection();
            }
            if (proxy.isCriticalPathEnable == true) {
                proxy._$ganttchartHelper.ejGanttChart("criticalConnectorLine", proxy.criticalPathCollection, proxy.detailPredecessorCollection, true, proxy.collectionTaskId);
            }
        },
        //Collapse all parent and inner level parent records
        _collapseAll: function () {
            var proxy = this,
                model = proxy.model,
                count = 0,
                ganttRecord,
                args = {},
                enableVirtualization = model.enableVirtualization,
                $gridRows = proxy.getRows(),
                $rowElement = null;

            proxy._$treegridHelper.ejTreeGrid("cancelEditCell"); // Cancel the edit cell, if it is in edit mode.
            proxy._gridRows = $gridRows;
            proxy._isInExpandCollapse = true;
            proxy._isInExpandCollapseAll = true;
            //loop excecute for iterate the GanttRecords preseent in the Gantt Control            
            for (count = 0; count < proxy.model.parentRecords.length; count++) {
                    ganttRecord = proxy.model.parentRecords[count];
                    args.data = ganttRecord;
                    args.recordIndex = count;
                    args.expanded = false;
                    if (ganttRecord.hasChildRecords) {
                        proxy._expandCollapseInnerLevelRecord(ganttRecord, args.expanded);
                        ganttRecord.expanded && ej.TreeGrid.sendExpandCollapseRequest(proxy, args);
                    }
            }
            if (model.flatRecords.length > 0)
                proxy._refreshGanttOnExpandCollapseAll();

            proxy._isInExpandCollapse = false;
            proxy._isInExpandCollapseAll = false;
        },
        //expand or collapse all inner level parent records
        _expandCollapseInnerLevelRecord:function(record,expanded)
        {
            var proxy = this,
                length = record.childRecords.length,
                tempArgs = {};

            for (var count = 0; count < length; count++) {
                if (record.childRecords[count].hasChildRecords) {
                    proxy._expandCollapseInnerLevelRecord(record.childRecords[count], expanded);
                    tempArgs.data = record.childRecords[count];
                    tempArgs.expanded = expanded;
                    if(record.childRecords[count].expanded !== expanded)
                        ej.TreeGrid.sendExpandCollapseRequest(proxy, tempArgs);

                }
            }
        },


        //Method for expand all the GanttRecords
        
        _expandAll: function () {
            
            var proxy = this,
                model = proxy.model,
                count = 0,
                ganttRecord,
                args = {},
                enableVirtualization = model.enableVirtualization,
                parentRecords = model.parentRecords,
                length = parentRecords.length;

            proxy._isInExpandCollapse = true;
            proxy._isInExpandCollapseAll = true;
            //loop excecute for iterate the GanttRecords present in the Gantt Control

            for (count = 0; count < length; count++) {
                ganttRecord = parentRecords[count];
                args.data = ganttRecord;
                args.recordIndex = count;
                args.expanded = true;
                if (ganttRecord.hasChildRecords ) {
                    proxy._expandCollapseInnerLevelRecord(ganttRecord, args.expanded);
                    if(!ganttRecord.expanded)
                        ej.TreeGrid.sendExpandCollapseRequest(proxy, args);
                }
            }
            if (model.flatRecords.length > 0)
                proxy._refreshGanttOnExpandCollapseAll();

            proxy._isInExpandCollapse = false;
            proxy._isInExpandCollapseAll = false;
        },
        _getDateFromFormat: function (date) {
            
            if (date == null)
                return;

            if (typeof date === "object") {
                return new Date(date);
            }
            if (date) {
                return ej.parseDate(date, this.model.dateFormat, this.model.locale) == null ?
                    new Date(date) : ej.parseDate(date, this.model.dateFormat, this.model.locale);
            }
        },
        _getFormatedDate: function (dateObject, dateformat, locale) {
            return ej.format(dateObject, dateformat, locale);
        },

        
        _destroy: function () {
            var proxy = this;
            //Unbind all events binded to Document and window and chart side and TreeGrid side
            this.element.off();
            proxy._off($(window), "resize", proxy.windowResize);
            $("#" + proxy._id + "_dialogEdit").data("ejDialog") && $("#" + proxy._id + "_dialogEdit").data("ejDialog").destroy();
            $("#" + proxy._id + "_dialogAdd").data("ejDialog") && $("#" + proxy._id + "_dialogAdd").data("ejDialog").destroy();
            $("#" + proxy._id + "_dialogAdd").remove();
            $("#" + proxy._id + "_dialogEdit").remove();
            $("#" + this._id + "_toolbarItems_Main").remove();
            $("#" + this._id + "_dialogEdit_wrapper").remove();
            $("#" + this._id + "startDateEdit_popup").remove();
            $("#" + this._id + "endDateEdit_popup").remove();
            $("#" + this._id + "startDateAdd_popup").remove();
            $("#" + this._id + "endDateAdd_popup").remove();
            $("#" + this._id + "taskTypeEdit_popup_wrapper").remove();
            $("#" + this._id + "_dialogAdd_wrapper").remove();
            $("#" + this._id + "effortDrivenEdit_popup_wrapper").remove();
            //Chart side
            var ganttChartObj = proxy._$ganttchartHelper.ejGanttChart("instance");
            ganttChartObj.destroy();
            //TreeGrid side
            var treeGridObj = proxy._$treegridHelper.ejTreeGrid("instance");
            treeGridObj.destroy();
            proxy.element.empty().removeClass("e-gantt-core e-gantt " + proxy.model.cssClass);
        },
        _updateToolbar: function () {
            var proxy = this,
                model = proxy.model;
            $("#" + proxy._id + "_toolbarItems").remove();
            if (model.toolbarSettings.showToolbar) {
                proxy._renderToolBar().insertBefore($("#e-ejSpliter" + proxy._id));
                proxy._updateToolbarOptions("");
            }
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9) {
                proxy._totalBorderHeight = model.toolbarSettings.showToolbar ? 3 : 2;//top,bottom,toolbar div
            } else {
                proxy._totalBorderHeight = model.toolbarSettings.showToolbar ? 1 : 0;//top box-sizing:border-box includes it's border
            }
            proxy._$treegridHelper.ejTreeGrid("cancelEditCell");
            //Calculate the viewport height based on toolbar height
            //Change the tree grid and gantt chart container height based on view port height
            var toolbar = $("#" + proxy._id + "_toolbarItems"),
                ganttbody = proxy.element.find(".e-ganttviewerbodyContianer"),
                gantthead = proxy.element.find(".e-ganttviewerheaderContainer"),
                treegridcontent = ("#ejTreeGrid" + proxy._id + "e-gridcontent"),
                splitter = $("#e-ejSpliter" + proxy._id),
                height = $(proxy.element).height() - proxy._totalBorderHeight,
                viewPortHeight = height - gantthead.height() - 2 - toolbar.height(), // 2 is border width
                top = ganttbody.ejScroller("option", "scrollTop"),
                left = ganttbody.ejScroller("option", "scrollLeft");
            ganttbody.ejScroller({
                height: viewPortHeight
            });
            ganttHeight = height - toolbar.height();
            splitter.height(ganttHeight);
            $("#ejTreeGrid" + proxy._id).height(ganttHeight);
            $("#ejGanttChart" + proxy._id).height(ganttHeight);
            $(treegridcontent).height(viewPortHeight);
            ganttbody.height(viewPortHeight);
            $(treegridcontent).ejScroller("refresh");
            ganttbody.ejScroller("option", "scrollTop", top);
            ganttbody.ejScroller("option", "scrollLeft", left);
            proxy._$treegridHelper.ejTreeGrid("updateViewPortHeight");
            proxy._$ganttchartHelper.ejGanttChart("updateViewPortHeight");
            if (proxy.model.enableVirtualization) {
                proxy._$treegridHelper.ejTreeGrid("processBindings");
                var tempArgs = {};
                tempArgs.requestType = ej.TreeGrid.Actions.Refresh;
                proxy._$treegridHelper.ejTreeGrid("sendDataRenderingRequest", tempArgs);
                proxy._$ganttchartHelper.ejGanttChart("refreshHelper", proxy.model.currentViewData, proxy.model.updatedRecords);
                proxy._$ganttchartHelper.ejGanttChart("onScrollHelper", top);
            }
            proxy._clearContextMenu();
        },
        /*Get string value from record*/
        _getDurationStringValue: function (data) {
            var val = "";
            if (data.duration != null && data.duration != undefined)
                val += data.duration + " ";
            if (data.durationUnit != null && data.durationUnit != undefined) {
                var multiple = data.duration != 1;
                if (data.durationUnit == "day")
                    val += multiple ? this._durationUnitTexts.days : this._durationUnitTexts.day;
                else if (data.durationUnit == "hour")
                    val += multiple ? this._durationUnitTexts.hours : this._durationUnitTexts.hour;
                else
                    val += multiple ? this._durationUnitTexts.minutes : this._durationUnitTexts.minute;
            }
            return val;
        }
        


    });
    
    ej.Gantt.EditingType = {
        String: "stringedit",
        Boolean: "booleanedit",
        Numeric: "numericedit",
        Dropdown: "dropdownedit",
        DatePicker: "datepicker",
        DateTimePicker: "datetimepicker",
        Maskedit: "maskedEdit"
    };

    ej.Gantt.ToolbarItems = {
        Add: "add",
        Edit: "edit",
        Delete: "delete",
        Update: "update",
        Cancel: "cancel",
        Search: "search",
        Indent: "indent",
        Outdent: "outdent",
        ExpandAll: "expandAll",
        CollapseAll: "collapseAll",
        PrevTimeSpan: "prevTimeSpan",
        NextTimeSpan: "nextTimeSpan",
        NextTimeSpan: "nextTimeSpan",
        CriticalPath: "criticalPath",
        ExcelExport: "excelExport"
    };

    ej.Gantt.ScheduleHeaderType = {
        Year: "year",
        Month: "month",
        Week: "week",
        Day: "day",
        Hour:"hour"
    };

    ej.Gantt.minutesPerInterval = {
        Auto:"auto",
        OneMinute: "oneMinute",
        FiveMinutes: "fiveMinutes",
        FifteenMinutes: "fifteenMinutes",
        ThirtyMinutes:"thirtyMinutes"
    };

    ej.Gantt.DurationUnit = {
        Day: "day",
        Hour: "hour",
        Minute:"minute"
    };
    ej.Gantt.WorkUnit = {
        Day: "days",
        Hour: "hours",
        Minute: "minutes"
    };
    ej.Gantt.TaskType = {
        FixedUnit: "fixedUnit",
        FixedWork: "fixedWork",
        FixedDuration: "fixedDuration"
    }
    ej.Gantt.workingTimeScale = {
        TimeScale8Hours: "TimeScale8Hours",
        TimeScale24Hours: "TimeScale24Hours",
    };

    ej.Gantt.AddRowPosition = {
        Top: "top",
        Bottom: "bottom",
        AboveSelectedRow: "aboveselectedrow",
        BelowSelectedRow: "belowselectedrow",
        Child:"child"
    };

    //Enum for Edit Action of TreeGrid.
    ej.Gantt.BeginEditAction = {
        DblClick: "dblClick",
        Click: "click"
    };

    //Enum Value of selectionType.
    ej.Gantt.SelectionType = {
        Single: "single",
        Multiple:"multiple"
    };

    //Enum Value of selectionType.
    ej.Gantt.TimescaleRoundMode = {
        Auto:"auto",
        Year: "year",
        Month: "month",
        Week:"week"
    };


    //Enum Value of selectionMode.
    ej.Gantt.SelectionMode = {
        Row: "row",
        Cell: "cell"
    };

    ej.Gantt.TaskSchedulingMode = {
        Auto: "auto",
        Manual: "manual",
        Custom: "custom"
    };

    ej.Gantt.Locale = ej.Gantt.Locale || {};

    ej.Gantt.Locale["default"] = ej.Gantt.Locale["en-US"] = {

        //string to display with dataSource contains 0 objects
        emptyRecord: "No records to display",

        alertTexts: {
            indentAlert: "There is no gantt record is selected to perform the Indent",
            outdentAlert: "There is no gantt record is selected to perform the Outdent",
            predecessorEditingValidationAlert: "Cyclic Dependency Occured, Please Check The Predecessor",
            predecessorAddingValidationAlert: "Fill all the columns in predecessor table",
            idValidationAlert: "Duplicate ID",
            dateValidationAlert: "Invalid End date",
            dialogResourceAlert: "Fill All the columns in resource table"
        },

        //headerText to be displayed in treegrid
        columnHeaderTexts: {
            taskId: "ID",
            taskName: "Task Name",
            startDate: "Start Date",
            endDate: "End Date",
            resourceInfo: "Resources",
            duration: "Duration",
            status: "Progress",
            taskMode: "Task Mode",
            subTasksStartDate: "SubTasks Start Date",
            subTasksEndDate: "SubTasks End Date",
            scheduleStartDate: "Schedule Start Date",
            scheduleEndDate: "Schedule End Date",
            predecessor: "Predecessors",
            type: "Type",
            offset: "Offset",
            baselineStartDate: "Baseline Start Date",
            baselineEndDate: "Baseline End Date",
            WBS: "WBS",
            WBSPredecessor: "WBS Predecessor",
            dialogCustomFieldName: "Column Name",
            dialogCustomFieldValue: "Value",
            notes: "Notes",
            taskType: "Task Type",
            work: "Work",
            unit:"Unit",
            effortDriven: "Effort Driven"
        },

        //string to display in dialog 
        editDialogTexts: {
            addFormTitle: "New Task",
            editFormTitle: "Task Information",
            saveButton: "Save",
            deleteButton: "Delete Task",
            cancelButton: "Cancel",
            addPredecessor: "Add New",
            removePredecessor: "Remove"
        },

        //string to display in column add dialog 
        columnDialogTexts: {
            field: "Field",
            headerText: "Header Text",
            editType: "Edit Type",
            filterEditType: "Filter Edit Type",
            allowFiltering: "Allow Filtering",
            allowFilteringBlankContent: "Allow Filtering Blank Content",
            allowSorting: "Allow Sorting",
            visible: "Visible",
            width: "Width",
            textAlign: "Text Alignment",
            headerTextAlign: "Header Text Alignment",
            columnsDropdownData: "Column Dropdown Data",
            dropdownTableText: "Text",
            dropdownTableValue: "Value",
            addData: "Add",
            deleteData: "Remove",
            allowCellSelection:"Allow Cell Selection"
        },

        //string to be displayed in Toolbox's tooltip 
        toolboxTooltipTexts: {
            addTool: "Add",
            editTool: "Edit",
            saveTool: "Update",
            deleteTool: "Delete",
            cancelTool: "Cancel",
            searchTool: "Search",
            indentTool: "Indent",
            outdentTool: "Outdent",
            expandAllTool: "ExpandAll",
            collapseAllTool: "CollapseAll",
            nextTimeSpanTool: "Next Timespan",
            prevTimeSpanTool: "Previous Timespan",
            prevTimeSpanTool: "Previous Timespan",
            criticalPathTool: "Critical Path",
			excelExportTool:"Excel Export"
        },

        //string to be displayed in taskbar tooltip for duration unit 
        durationUnitTexts: {           
            days: "days",
            hours: "hours",
            minutes: "minutes",
            day: "day",
            hour: "hour",
            minute: "minute",
        },
        durationUnitEditText: { minute: ["m", "min", "minute", "minutes"], hour: ["h", "hr", "hour", "hours"], day: ["d", "dy", "day", "days"] },

        //string to be displayed in taskbar tooltip for duration unit 
        workUnitTexts: {
            days: "days",
            hours: "hours",
            minutes: "minutes"           
        },

        //String to be displayed in default type drop down.
        taskTypeTexts: {
            fixedWork: "Fixed Work",
            fixedUnit: "Fixed Units",
            fixedDuration: "Fixed Duration"
        },

        //String to be displayed in effort drven drop down box.
        effortDrivenTexts: {
            yes: "Yes",
            no: "No"
        },

        //string to be displayed in context menu 
        contextMenuTexts: {
            taskDetailsText: "Task Details...",
            addNewTaskText: "Add New Task",
            indentText: "Indent",
            outdentText: "Outdent",
            deleteText: "Delete",
            aboveText: "Above",
            belowText: "Below"
        },

        //Name to be displayed for New Task while adding  
        newTaskTexts: {           
            newTaskName: "New Task"
        },

        //string to be displayed in column menu 
        columnMenuTexts: {
            sortAscendingText: "Sort Ascending",
            sortDescendingText: "Sort Descending",
            columnsText: "Columns",
            insertColumnLeft: "Insert Column Left",
            insertColumnRight: "Insert Column Right",
            deleteColumn: "Delete Column",
            renameColumn: "Rename Column"
        },

        taskModeTexts: {
            manual: "Manual",
            auto: "Auto"
        },

        //string to be displayed in column add dialog title 
        columnDialogTitle: {
            insertColumn: "Insert Column",
            deleteColumn: "Delete Column",
            renameColumn: "Rename Column"
        },

        //Locale Text for delete confirm dialog
        deleteColumnText: "Are you sure you want to delete this column?",
        okButtonText: "OK",
        cancelButtonText: "Cancel",
        confirmDeleteText: "Confirm Delete",

        predecessorEditingTexts: {
            fromText: "From",
            toText : "To"
        },

        dialogTabTitleTexts: {
            generalTabText: "General",
            predecessorsTabText: "Predecessors",
            resourcesTabText: "Resources",
            customFieldsTabText: "Custom Fields",
            notesTabText:"Notes"
        },
        predecessorCollectionText: [
                { id: "SS", text: "Start-Start", value: "Start-Start" },
                { id: "SF", text: "Start-Finish", value: "Start-Finish" },
                { id: "FS", text: "Finish-Start", value: "Finish-Start" },
                { id: "FF", text: "Finish-Finish", value: "Finish-Finish" }
            ],        
    };

    /*-----Initialize the GanttRecord object--------------*/

    ej.Gantt.GanttRecord = function () {
        var proxy = this;
        proxy.taskId = null;
        proxy.taskName = null;
        proxy.startDate = null;
        proxy.endDate = null;
        proxy.duration = null;
        proxy.isMilestone = false;
        proxy.status = null;
        proxy.predecessor = null;
        proxy.resourceInfo = null;
        proxy.parentItem = null;
        proxy.isSelected = false;
        proxy.childRecords = null;
        proxy.hasChildRecords = false;
        proxy.expanded = false;
        proxy.level = 0;
        proxy.left = 0;
        proxy.width = 0;
        proxy.progressWidth = 0;
        proxy.item = null;
        proxy.baselineLeft = 0;
        proxy.baselineWidth = 0;
        proxy.baselineStartDate = null;
        proxy.baselineEndDate = null;
        proxy.isCritical = false,
        proxy.slack = null,
        proxy.isReadOnly = false;
        proxy.hasFilteredChildRecords = true;
        proxy.taskbarBackground = null;
        proxy.progressbarBackground = null;
        proxy.parentProgressbarBackground = null;
        proxy.cellBackgroundColor = null;
        proxy.rowBackgroundColor = null;
        proxy.treeMappingName = [];
        proxy.dragState = true;
        proxy.isSelected = false;
        proxy.durationUnit = "";
        proxy.isAutoSchedule = true;
        proxy.manualStartDate = null;
        proxy.manualEndDate = null;
        proxy.manualLeft = 0;
        proxy.manualDuration = 0;
        proxy.manualWidth = 0;
    }

    ej.Gantt.GanttRecord.prototype = {

        //calculate the left position of the taskbar
        _calculateLeft: function (ganttObj) {
            return ganttObj._getTaskLeft(this.startDate);
        },

        _calculateManualLeft: function (ganttObj) {
            return ganttObj._getTaskLeft(this.manualStartDate);
        },

        //calculate the left margin of the baseLine element.
        _calculateBaselineLeft: function (ganttObj) {
            var beginDate = new Date(this.baselineStartDate),
                endDate = new Date(this.baselineEndDate);
            if (beginDate && endDate) {
                return ganttObj._getTaskLeft(beginDate);
            } else {
                return 0;
            }
        },

        _updateHoliday: function (date, holidays, model) {
            var j = 0,
                length = holidays && holidays.length;

            if (length > 0) {

                for (j = 0; j < length; j++) {
                    var tempDate = new Date(date);

                    tempDate.setHours(0, 0, 0, 0);

                    if (this._getFormatedDate(holidays[j], model.dateFormat, model.locale) == this._getFormatedDate(date, model.dateFormat, model.locale)) {
                        date.setDate(date.getDate() + 1);
                    }
                }
                if ((model.includeWeekend == false) && (date.getDay() == 6)) {
                    date.setDate(date.getDate() + 2);
                }
            }
        },

        _calculateGanttRecordLeft: function (startDate, projectStartDate, dayWidth) {
            var proxy = this,
                diffDate = proxy._daydiff(projectStartDate, startDate);
            return (diffDate * dayWidth);
        },

        _calculateReverseLeft: function (projectStartDate, dayWidth, includeWeekend, dateformat) {
            var diffDate,
                proxy = this,
                enddatecount = 0,
                startdate = proxy.startDate,
                duration = proxy.duration && parseInt(proxy.duration);

            if (startdate == null) {

                startdate = new Date(proxy.endDate);
                startdate.setDate(startdate.getDate() - duration);
            }
            if (includeWeekend == false) {

                var emptyDate = new Date(proxy.endDate);

                for (var i = 0; i < duration; i++) {

                    if (emptyDate.getDay() == 0) {
                        enddatecount += 2;
                        emptyDate.setDate(emptyDate.getDate() - 2);
                    }
                    else if (emptyDate.getDay() == 6) {
                        enddatecount++;
                    }
                    emptyDate.setDate(emptyDate.getDate() - 1);
                }
                startdate = new Date(proxy.endDate);
                enddatecount = duration === 0 ? 1 : enddatecount;
                startdate.setDate(startdate.getDate() - (duration + enddatecount - 1));
            }
            proxy.startDate = new Date(startdate);
            diffDate = Math.ceil((startdate - projectStartDate) / 86400000);
            return (diffDate * dayWidth);
        },

        _calculateReverseWidth: function (dayWidth, dateFormat, includeWeekend, holidays) {

            var proxy = this,
                enddatecount = 0,
                diffDate,
                emptyDate,
                i = 0,
                startdate = proxy.startDate,
                duration = proxy.duration && parseInt(proxy.duration),
                enddate = proxy.endDate;

            if (startdate == null) {
                startdate = new Date(enddate);
                startdate.setDate(startdate.getDate() - duration + 1);

            }

            if (includeWeekend == false) {

                emptyDate = new Date(enddate);

                for (i = 0; i < duration; i++) {

                    if (emptyDate.getDay() == 0) {

                        enddatecount += 2;
                        emptyDate.setDate(emptyDate.getDate() - 2);

                    } else if (emptyDate.getDay() == 6) {
                        enddatecount++;
                    }

                    emptyDate.setDate(emptyDate.getDate() - 1);

                }

                startdate = new Date(enddate);
                startdate.setDate(startdate.getDate() - (duration + enddatecount - 1));
            }

            if (holidays != null && holidays.length > 0) {

                emptyDate = new Date(startdate);

                for (i = 0; i < duration; i++) {

                    emptyDate.setDate(emptyDate.getDate() + 1);

                    for (var j = 0; j < holidays.length; j++) {

                        if (proxy._getDateFromFormat(holidays[j].day).getDate() == emptyDate.getDate()) {
                            enddatecount++;
                        }

                    }

                    if ((includeWeekend == false) && (emptyDate.getDay() == 0 || emptyDate.getDay() == 6)) {
                        enddatecount++;
                    }

                }

                enddate = new Date(proxy.startDate);
                enddate.setDate(enddate.getDate() + (duration + enddatecount - 1));
            }

            diffDate = Math.ceil((new Date(enddate) - (proxy.startDate)) / 86400000) + 1;

            return (diffDate) * dayWidth;
        },

        _calculateWidth: function (ganttObj) {
            var proxy = this,
                startdate = new Date(proxy.startDate),
                enddate = new Date(proxy.endDate);
            return ganttObj._getTaskWidth(startdate, enddate);
        },

        _calculateManualWidth: function (ganttObj) {
            var proxy = this,
                manualStartDate = new Date(proxy.manualStartDate),
                manualEndDate = new Date(proxy.manualEndDate);
            return ganttObj._getTaskWidth(manualStartDate, manualEndDate);
        },

        _calculateBaseLineWidth: function (ganttObj) {
            var proxy = this,
               startdate = new Date(this.baselineStartDate),
                   enddate = new Date(this.baselineEndDate);
            return ganttObj._getTaskWidth(startdate, enddate);
        },
        _getFormatedDate: function (dateObject, dateformat, locale) {
            return ej.format(dateObject, dateformat, locale);
        },

        _getDateFromFormat: function (dateString, dateformat, locale) {
            if (dateString) {
                return ej.parseDate(dateString, dateformat, locale) == null ?
                    new Date(dateString) : ej.parseDate(dateString, dateformat, locale);
            }
        },

        _calculateProgressWidth: function (parentWidth, percent) {
            return (parentWidth * percent) / 100;
        },

        _setResourceInfo: function (resourceIdcollection, resourceIdMapping, resourceNameMapping, resourceUnitMapping, resourcecollection) {

            var proxy=this, count = 0,
            resources = [];

            for (count; count < resourceIdcollection.length; count++) {

                var resource = resourcecollection.filter(function (resourceInfo) {
                    return resourceIdcollection[count] === resourceInfo[resourceIdMapping];
                });

                var ganttRecordResource = $.extend({}, resource[0]);
                if (resource.length) {
                    resources.push(ganttRecordResource);
                    proxy._updateResourceUnit(resource[0], ganttRecordResource, resourceUnitMapping);
                }
                else {
                    resourceIdcollection.splice(count, 1);
                    count--;
                }
            }
            return resources;
        },
        _updateResourceUnit: function (resource, ganttRecordResource, resourceUnitMapping) {          
            if (resourceUnitMapping != "") {
                if (ej.isNullOrUndefined(resource[resourceUnitMapping]))
                    ganttRecordResource[resourceUnitMapping] = 100;
            }
            else                
                ganttRecordResource.unit = 100;            
        },
        _updateEndDate: function (prevStartDate, includeWeekend, dateFormat) {
            var proxy = this,
                formatedPrevStartDate = new Date(prevStartDate),
                formatedStartDate = new Date(proxy.startDate),
                diff = proxy._daydiff(formatedPrevStartDate, formatedStartDate),
            endDate = new Date(proxy.endDate),
            weekendCount = 0;

            if (includeWeekend == false) {
                var count = 0;
                for (count; count <= diff; count++) {
                    endDate.setDate(endDate.getDate() + 1);
                    if (endDate.getDay() == 0 || endDate.getDay() == 6)
                        weekendCount += 1;
                }
            }

            var modifiedEndDate = proxy.endDate;
            modifiedEndDate.setDate(modifiedEndDate.getDate() + diff + weekendCount);
            proxy.endDate = new Date(modifiedEndDate);
        },

        _calculateFormatedDate: function (date, format, locale) {
            return ej.format(date, format, locale);
        },

        _updateParentProgress: function (parent, progressMapping) {
            var parentProgress = 0,
                childRecords = parent.childRecords,
                childCount = childRecords ? childRecords.length : 0,
                totalProgress = 0,
                milesStoneCount = 0,
                taskCount = 0;

            if (childRecords) {
                for (var i = 0; i < childCount; i++) {
                    if (!childRecords[i].isMilestone)
                        totalProgress += parseInt(childRecords[i].status);
                    else
                        milesStoneCount += 1;
                }
                taskCount = childCount - milesStoneCount;
                parentProgress = taskCount > 0 ? (totalProgress / taskCount) : 0;
                if (isNaN(parentProgress))
                    parentProgress = 0;
                var width = parent.isAutoSchedule ? parent.width : parent.manualWidth;
                parent.progressWidth = this._getProgressWidth(width, parentProgress);
                parent.status = Math.floor(parentProgress);
                if (progressMapping)
                    parent.item[progressMapping] = parent.status;
            }
            if (parent.parentItem) {
                this._updateParentProgress(parent.parentItem, progressMapping);
            }
        },


        _getProgressWidth: function (parentwidth, percent) {
            return (parentwidth * percent) / 100;
        },

        _calculatePredecessor: function (string, durationUnitLabels, defaultDurationUnit) {
            var collection = [],
                match,
                obj = {},
                values,
                to = this.taskId.toString(),
                offsetvalue,
                ganttRecord = this;
            if (typeof string === 'string')
            {
                string.split(',').forEach(function (el) {
                    values = el.split('+');
                    offsetvalue = '+';
                    if (el.indexOf('-') >= 0) {
                        values = el.split('-');
                        offsetvalue = '-';
                    }
                    match = values[0].match(/(\d+|[A-z]+)/g);
                    obj = {
                        from: match[0],
                        predecessorsType: match.length > 1 ? match[1].toUpperCase() : "FS",
                        offset: values.length > 1 ? offsetvalue + "" + values[1] : "0",
                        isdrawn: false,
                        to: to
                    };
                    var offsetUnits = ganttRecord._getOffsetDurationUnit(obj.offset, durationUnitLabels, defaultDurationUnit);
                    obj.offset = offsetUnits.duration;
                    obj.offsetDurationUnit = offsetUnits.durationUnit;
                    collection.push(obj);
                });
           }
            return collection;
        },
        /*Get duration and duration unit value from tasks*/
        _getOffsetDurationUnit: function (val, durationUnitLabels, defaultDurationUnit) {
            var duration = 0,
                  durationUnit = defaultDurationUnit;

            if (typeof val == "string") {
                var values = val.match(/(-?\d*\.*\d+|[A-z]+)/g);
                if (values && values.length <= 2) {
                    duration = parseFloat(values[0]);
                    durationUnit = values[1] ? values[1].toLowerCase() : "";
                    if (durationUnitLabels.minute.indexOf(durationUnit) != -1)
                        durationUnit = ej.Gantt.DurationUnit.Minute;
                    else if (durationUnitLabels.hour.indexOf(durationUnit) != -1)
                        durationUnit = ej.Gantt.DurationUnit.Hour;
                    else if (durationUnitLabels.day.indexOf(durationUnit) != -1)
                        durationUnit = ej.Gantt.DurationUnit.Day;
                    else
                        durationUnit = defaultDurationUnit;
                }
            } else {
                duration = val;
                durationUnit = defaultDurationUnit;
            }
            if (isNaN(duration)) {
                duration = 0;
                durationUnit = ej.Gantt.DurationUnit.Day;
            }
            var output = {};
            output.duration = duration;
            output.durationUnit = durationUnit;
            return output;
        },

        _updateGanttRecord: function (startDateMappingName, endDateMappingName, durationMappingName, includeWeekend, scheduleStartDay, perDayWidth, dateFormat, holidays) {
            var proxy = this,
                remainDays = proxy.left % perDayWidth,
                day = (proxy.left - remainDays) / perDayWidth,holiday
                startDate = new Date(scheduleStartDay);

            startDate.setDate(scheduleStartDay.getDate() + day);

            if (startDate.getDay() == 0)
                startDate.setDate(startDate.getDate() + 1);
            else if (startDate.getDay() == 6)
                startDate.setDate(startDate.getDate() + 2);

            proxy.startDate = new Date(startDate);
            proxy.left = proxy._calculateLeft(this);
            proxy.width = proxy._calculateWidth(this);
            if (proxy.parentItem)
                proxy._updateParentItem(proxy, startDateMappingName, endDateMappingName, durationMappingName, includeWeekend, scheduleStartDay, perDayWidth, dateFormat, holidays);
        },

        _calculateUpdatedDate: function (modifiedDate, offset) {
            var proxy = this,
                i = 0;
            if (offset > 0) {
                for (i; i < offset; i++) {
                    modifiedDate = proxy._dataSubtract(modifiedDate, 1);
                    if (modifiedDate.getDay() == 0)
                        modifiedDate.setDate(modifiedDate.getDate() + 1);
                    else if (modifiedDate.getDay() == 6)
                        modifiedDate.setDate(modifiedDate.getDate() + 2);
                }
            } else {
                var dateOffset = (-1) * offset;
                for (i = 0; i < dateOffset; i++) {
                    modifiedDate = proxy._dataSubtract(modifiedDate, -1);
                    if (modifiedDate.getDay() == 0)
                        modifiedDate.setDate(modifiedDate.getDate() - 2);
                    else if (modifiedDate.getDay() == 6)
                        modifiedDate.setDate(modifiedDate.getDate() - 1);
                }
            }
            modifiedDate = new Date(modifiedDate);
            return modifiedDate;
        },

        _dataSubtract: function (date, days) {
            return new Date(
                date.getFullYear(),
                date.getMonth(),
                date.getDate() + days,
                date.getHours(),
                date.getMinutes(),
                date.getSeconds(),
                date.getMilliseconds()
            );
        },

        _calculateEndDate: function (ganttObj) {
            var model = ganttObj.model,
                tempEndDate = ganttObj._getEndDate(this.startDate, this.duration, this.durationUnit, this);
            this.endDate = new Date(tempEndDate);
            if (model.endDateMapping)
                this.item[model.endDateMapping] = this.endDate;
        },

        _calculateTimeScale8Hour: function (startHour, duration) {
              if ((24 - startHour) > 8) {           
                    if (this.duration < 8)
                        duration = this.duration;
                    else
                        duration = this.duration % 8;             
            }
            if ((24 - startHour) < 8 || this.duration > 8)
                startHour = 8;
            if (duration == 0)
                duration = 8;
            var endHour = startHour;

            do {
                if ((startHour >= 8 && startHour < 13) || (startHour > 13 && startHour <= 17)) {
                    endHour++;
                    duration--;
                    startHour = startHour == 24 ? 0 : startHour + 1;
                }
                else {
                    startHour = startHour == 24 ? 0 : startHour + 1;
                    
                    endHour++;
                    duration--;
                }
            } while (duration > 0);

            return endHour;
        },

        _dateUpdate: function (date, days, hours, minutes) {
            if (!minutes)
                minutes = 0;           
            return new Date(
                date.getFullYear(),
                date.getMonth(),
                date.getDate() + days,
                date.getHours() + hours,
                date.getMinutes() + minutes,
                date.getSeconds(),
                date.getMilliseconds()
            );
        },

        _calculateDuration: function (ganttObj) {
            var tempDuration = ganttObj._getDuration(this.startDate, this.endDate, this.durationUnit, this.isAutoSchedule);
            this.duration = tempDuration;
            if (model.durationMapping && this.item) {
                this.item[model.durationMapping] = tempDuration;
                model.durationUnitMapping && (this.item[model.durationUnitMapping] = this.durationUnit);
            }
        },

        _calculateManualDuration: function (ganttObj) {
            var tempDuration = ganttObj._getDuration(this.manualStartDate, this.manualEndDate, this.durationUnit, this.isAutoSchedule);
            this.manualDuration = tempDuration;
        },

        _calculateDateDifference: function (emptyDate, dateDiff) {
            var differenceCount = dateDiff >= 0 ? dateDiff : (-1 * dateDiff),
                offset = 0;

            if (dateDiff > 0)
                offset = differenceCount - this._calculateWeekendCount(emptyDate, dateDiff) + 1;
            else
                offset = dateDiff + this._calculateWeekendCount(emptyDate, dateDiff);
            return offset;
        },

        _calculateWeekendCount: function (emptyDate, dateDiff) {
            var differenceCount = dateDiff >= 0 ? dateDiff : (-1 * dateDiff),
                weekendCount = 0,
                i = 0;

            if (dateDiff > 0) {
                for (i = 0; i < dateDiff; i++) {
                    if (emptyDate.getDay() == 0) {
                        weekendCount++;
                        emptyDate.setDate(emptyDate.getDate() + 1);
                    }
                    else if (emptyDate.getDay() == 6) {
                        weekendCount += 2;
                        ++i;
                        emptyDate.setDate(emptyDate.getDate() + 2);
                    } else
                        emptyDate.setDate(emptyDate.getDate() + 1);
                }
            }
            else {
                for (i = 0; i < differenceCount; i++) {
                    emptyDate.setDate(emptyDate.getDate() - 1);
                    if (emptyDate.getDay() == 0 || emptyDate.getDay() == 6) {
                        weekendCount += 1;
                    }
                }
            }
            return weekendCount;
        },
        //Update duration with respect to work and units of resources of a task.
        _updateDurationWithWork: function (proxy) {
            var model = proxy.model, totalHours,
                resourceInfo = this.resourceInfo,
                resourceLength = resourceInfo ? resourceInfo.length : 0,
                totalResourceOneDayWork = 0,
                updatedDuration = 0,
                ActualOneDayWork = proxy._secondsPerDay / (60 * 60); //in hours

            for (var length = 0; length < resourceLength; length++) {
                var resourceUnit = resourceInfo[length][model.resourceUnitMapping], //in percentage 
                    resourceOneDayWork = (ActualOneDayWork * resourceUnit) / 100; //in hours

                totalResourceOneDayWork += resourceOneDayWork;
            }

            totalHours = this._getTotalWorksInHours(model,ActualOneDayWork);

            if (resourceLength != 0)
                updatedDuration += (totalHours / totalResourceOneDayWork);

            //Update work as per defined unit.
            if (model.durationUnit == "minute")
                updatedDuration = updatedDuration * ActualOneDayWork * 60;
            if (model.durationUnit == "hour")
                updatedDuration = updatedDuration * ActualOneDayWork;

            //To check the decimal places.
            if (updatedDuration % 1 != 0)
                updatedDuration = updatedDuration.toFixed(2);

            proxy._isDurationUpdated = true;

            this.duration = updatedDuration;
        },
        //Update work with respect to duration and units of resources of a task.
        _updateWorkWithDuration: function (proxy) {
            var model = proxy.model,
                resourceInfo = this.resourceInfo,
                resourceLength = resourceInfo ? resourceInfo.length : 0,
                updatedWorks = 0,
                ActualOneDayWork = proxy._secondsPerDay / (60 * 60), //in hours
                durationInDay = this._getDurationInDays(ActualOneDayWork);

            for (var length = 0; length < resourceLength; length++) {
                var resourceUnit = resourceInfo[length][model.resourceUnitMapping], //in percentage 
                    resourceOneDayWork = (ActualOneDayWork * resourceUnit) / 100; //in hours
                updatedWorks += (resourceOneDayWork * durationInDay);
            }

            //Update work as per defined unit.
            if (model.workUnit == "minutes")
                updatedWorks = updatedWorks * 60;
            if (model.workUnit == "days")
                updatedWorks = updatedWorks / ActualOneDayWork;

            //To check the decimal places.
            if (updatedWorks % 1 != 0)
                updatedWorks = updatedWorks.toFixed(2);

            this.work = parseFloat(updatedWorks);
        },
        //Update units of resources with respect to duration and work of a task.
        _updateUnitWithWork: function (proxy) {
            var model = proxy.model,
                resourceInfo = this.resourceInfo,
                resourceLength = resourceInfo ? resourceInfo.length : 0,
                ActualOneDayWork = proxy._secondsPerDay / (60 * 60); //in hours
            if (resourceLength == 0)
                return;
            var durationInDay = this._getDurationInDays(ActualOneDayWork),
                totalWorksInHour = this._getTotalWorksInHours(model, ActualOneDayWork),
                totalUnitInPercentage = (totalWorksInHour / (durationInDay * ActualOneDayWork)) * 100,
                individualUnit = totalUnitInPercentage / resourceLength;

            //To check the decimal places.
            if (individualUnit % 1 != 0)
                individualUnit = individualUnit.toFixed(2);

            for (var length = 0; length < resourceLength; length++) {
                resourceInfo[length][model.resourceUnitMapping] = individualUnit;
            }
        },
        _getTotalWorksInHours:function(model, oneDayWork){
            var proxy = this, worksInHour;
            if (model.workUnit == "days")
                worksInHour = proxy.work * oneDayWork;
            else if (model.workUnit == "minutes")
                worksInHour = proxy.work / 60;
            else
                worksInHour = proxy.work;

            return worksInHour;
        },
        _getDurationInDays:function(oneDayWork){
            var proxy = this, durationInDay;
            if (this.durationUnit == "hour")
                durationInDay = proxy.duration / oneDayWork;
            else if (this.durationUnit == "minute")
                durationInDay = proxy.duration / (oneDayWork * 60);
            else
                durationInDay = proxy.duration;

            return durationInDay;
        },       

        //Get day difference from two dates time
        _daydiff: function (first, second) {
            return ((second - first) / (1000 * 60 * 60 * 24));
        },
         //Get hour difference from two dates time      
        _hourdiff: function (first, second) {
            //if(first.getTime()>second.getTime())
            //    return ((first - second) / (1000 * 60 * 60));
            //else
                return ((second - first) / (1000 * 60 * 60));
        },
        //Get progress value from taskbar width and progrssbar width
        _getProgressPercent: function (parentwidth, progresswidth) {
            return Math.ceil(((progresswidth / parentwidth) * 100).toFixed(2));
        },
        //Get minute difference from two dates time 
        _minutediff: function (first, second) {
            return ((second - first) / (1000 * 60));
        },
        _setTime: function (seconds, date) {
            var hour = parseInt(seconds / (3600)),
               min = parseInt((seconds - (hour * 3600)) / 60),
               sec = seconds - (hour * 3600) - (min * 60);
            date.setHours(hour, min, sec, 0);
        },
        _endDateUpdate: function (date, days, minutes, workingTimeRanges, headerType) {
            if (!minutes)
                minutes = 0;
            var newDate = new Date(
                date.getFullYear(),
                date.getMonth(),
                date.getDate() + days,
                date.getHours(),
                date.getMinutes(),
                date.getSeconds(),
                date.getMilliseconds()
            );
            if (headerType == "day" || headerType == "hour") {
                //Rounding off to next day
                newDate.setHours(24);
                //Then assigning the dayDecimal duration values in Minutes for exact time
                newDate.setMinutes(minutes);
            }
            else {
                if (workingTimeRanges.length) {
                    if (minutes > 0) {
                        //Rounding off to next day
                        newDate.setHours(24);
                        //Updating to start time of the next day
                        this._setTime(workingTimeRanges[0].from, newDate);
                        //Then assigning the dayDecimal duration values in Minutes for exact time
                        newDate.setMinutes(minutes);
                    }
                    else
                        this._setTime(workingTimeRanges[workingTimeRanges.length - 1].to, newDate);
                }
            }
            return newDate;
        },
        _startDateUpdate: function (date, days, minutes, workingTimeRanges, headerType) {
            if (!minutes)
                minutes = 0;
            var newDate = new Date(
                date.getFullYear(),
                date.getMonth(),
                date.getDate() + days,
                date.getHours(),
                date.getMinutes(),
                date.getSeconds(),
                date.getMilliseconds()
            );
            if (headerType == "day" || headerType == "hour") {
                newDate.setMinutes(minutes);
            }
            else {
                if (workingTimeRanges.length) {
                    if (minutes > 0) {
                        //Updating to start time of the day
                        this._setTime(workingTimeRanges[0].from, newDate);
                        //Then add the balance dayDecimal duration values in Minutes for exact time
                        newDate.setMinutes(minutes);
                    }
                    else
                        this._setTime(workingTimeRanges[0].from, newDate);
                }
            }
            return newDate;
        }
    };
    //Get predecessor value
    ej.Gantt._getPredecessorsValue = function (data) {
        var predecessors = data.predecessor,
                returnVal = "";
        if (predecessors) {
            var length = predecessors.length,
                resultString = "";
            for (var i = 0; i < length; i++) {
                var cPredecessor = predecessors[i],
                    temp = "";
                if (cPredecessor.from != data.taskId) {
                    temp = cPredecessor.from + cPredecessor.predecessorsType;
                    if (cPredecessor.offset != 0) {
                        temp += cPredecessor.offset > 0 ? ("+" + cPredecessor.offset + " ") : (cPredecessor.offset + " ");
                        var multiple = cPredecessor.offset != 1;
                        if (cPredecessor.offsetDurationUnit == "day")
                            temp += multiple ? this.model.durationUnitTexts.days : this.model.durationUnitTexts.day;
                        else if (cPredecessor.offsetDurationUnit == "hour")
                            temp += multiple ? this.model.durationUnitTexts.hours : this.model.durationUnitTexts.hour;
                        else
                            temp += multiple ? this.model.durationUnitTexts.minutes : this.model.durationUnitTexts.minute;
                    }
                    if (resultString.length > 0)
                        resultString = resultString + "," + temp;
                    else
                        resultString = temp;
                }
            }
        }
        return resultString;
    };
    ej.Gantt._getDurationStringValue = function (data) {
        var val = "";
        if (data.duration != null && data.duration != undefined)
            val += data.duration + " ";
        if (data.durationUnit != null && data.durationUnit != undefined) {
            var multiple = data.duration != 1;
            if (data.durationUnit == "day")
                val += multiple ? this.model.durationUnitTexts.days : this.model.durationUnitTexts.day;
            else if (data.durationUnit == "hour")
                val += multiple ? this.model.durationUnitTexts.hours : this.model.durationUnitTexts.hour;
            else
                val += multiple ? this.model.durationUnitTexts.minutes : this.model.durationUnitTexts.minute;
        }
        return val;
    };
    //Returns cell value
    ej.Gantt._getCellValue = function (columnName) {

        var cellValue = this.data[columnName];

        if (cellValue) {
            return cellValue;
        } else {
            return this.data.item && this.data.item[columnName];
        }


    };

})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    // ejGanttChart is the plugin name 
    // "ej.GanttChart" is "namespace.className" will hold functions and properties

    ej.widget("ejGanttChart", "ej.GanttChart", {
        // widget element will be automatically set in this
        element: null,

        // user defined model will be automatically set in this
        model: null,
        _rootCSS: "e-ganttchart",

        /* keyConfigurations for keyboard interaction in treegrid */
        keyConfigs: {
            focus: "e",

            //Insert
            insertRecord: "45",

            // delete
            deleteRecord: "46",

            //F2
            editRecord: "113",

            // Enter
            saveRequest: "13",

            //Esc   
            cancelRequest: "27",

            //Home,
            firstRowSelection: "36",

            //End,
            lastRowSelection: "35",

            //Left arrow
            leftArrow: "37",

            //Right arrow
            rightArrow: "39",

            //Up arrow
            upArrow: "38",

            //Down arrow
            downArrow: "40",

            //tab
            moveCellRight: "9",

            //shifttab
            moveCellLeft: "shift+9",

            //AltPlusDownArrow
            selectedRowExpand: "alt+40",

            //CtrlPlusDownArrow
            totalRowExpand: "ctrl+40",

            //AltPlusUpArrow
            selectedRowCollapse: "alt+38",

            //CtrlPlusUpArrow
            totalRowCollapse: "ctrl+38"
        },

        //default model
        defaults: {
            childPropertyName: "",
            taskIdMapping: "",
            taskNameMapping: "",
            startDateMapping: "",
            endDateMapping: "",
            childMapping: "",
            finishDateMapping: "",
            durationMapping: "",
            milestoneMapping: "",
            progressMapping: "",
            predecessorMapping: "",
            resourceInfoMapping: "",
            resourceNameMapping: "",
            resourceCollection: [], /*--------------Array containing the resource names */

            holidays: [
                {
                    day: null,
                    label: null,
                    background: null
                }
            ],

            stripLines: [
                {
                    day: null,
                    label: null,
                    lineStyle: "dotted",
                    lineColor: "#169dd7",
                    lineWidth: 2
                }
            ],

            enableTaskbarTooltip: true, /*------------showing tooltip on taskbar mouse over */
            enableTaskbarDragTooltip: true, /*--------showing taskbar while dragging taskbar */

            highlightWeekends: true, /*-------------Boolean value for highlighting weekends */

            scheduleStartDate: null, /*-------------start date of entire project */
            scheduleEndDate: null, /*---------------end date of entire project */

            enableProgressBarResizing: true, /*----------Boolean value for resizing progress bar */

            rowHeight: 30,
            progressbarHeight: 100,
            connectorlineWidth: 1,
            dateFormat: "MM/dd/yyyy",
            locale: "en-US",

            //background style
            taskbarBackground: "#DE8080", //"#5AC1E0",
            progressbarBackground: "#C44647", //"#169DD7",
            weekendBackground: '#F2F2F2',
            connectorLineBackground: "#383838",
            parentTaskbarBackground: "#383838",
            parentProgressbarBackground: "#1C1C1C",

            selectedItem: null,
            selectedRowIndex: -1,
            perDayWidth: null,

            perMonthWidth: null,//year-month schedule mode
            perWeekWidth: null,//month-week schedule mode
            perHourWidth:null,
            queryTaskbarInfo: null,

            taskbarTemplate: "",
            progressbarTemplate: null,
            parenttaskbarTemplate: "",
            parentprogressbarTemplate: null,
            milestoneTemplate:"",

            //internal collections
            flatRecords: [],
            updatedRecords: [],
            ids: [],
            currentViewData: [],

            scheduleWeeks: [],

            scheduleYears: [],
            scheduleMonths: [], //new property for month schedule
            scheduleDays:[],
            scheduleHours:[],
            projectStartDate: null, //new property instead of scheduleWeeks[0] and scheduleYears[0]
            projectEndDate: null,

           

            //tooltip templates
            tooltipTemplate: "",
            tooltipTemplateId:"",
            progressbarTooltipTemplateId: "",
            taskbarEditingTooltipTemplateId: "",

            taskbarEditingTooltipTemplate: "",
            progressbarTooltipTemplate: "",

            //boolean values
            showTaskNames: true,
            leftTaskLabelMapping: "",
            rightTaskLabelMapping: "",
            LeftTaskLabelTemplate: "",
            rightTaskLabelTemplate: "",
            showProgressStatus: true,
            showResourceNames: true,
            enableRowHover: false,
            includeWeekend: false,
            allowZooming: false,
            readOnly:false,
            allowGanttChartEditing: true,
            allowKeyboardNavigation: true,

            //baselines
            renderBaseline: false,
            baselineColor: '#fba41c ',

            /* editing API's */
            editSettings: {
                allowEditing: false,
                allowAdding: false,
                allowDeleting: false,
                editMode: "normal",
                dialogEditorTemplateId: null
            },

            scheduleHeaderSettings:
            {
                weekHeaderFormat: "MMM dd , yyyy",//for week - Day schedule mode
                dayHeaderFormat: "",
                weekendBackground: '#F2F2F2',

                yearHeaderFormat: "yyyy",
                monthHeaderFormat: "MMM",

                hourHeaderFormat: "HH",
                minuteHeaderFormat:"mm",
                scheduleHeaderType: "week"
            },
            workingTimeScale: "TimeScale8Hours",
            roundOffDayworkingTime: true,
            durationUnit: "day",

            localizedDays: null,
            localizedMonths: null,
            //localized string to be displayed in toolTip
            columnHeaderTexts: null,
            predecessorEditingTexts: null,
            enablePredecessorEditing: true,
            taskbarClick: null
        },

        updateHighlightWeekends: function (boolValue) {
            var proxy = this;
            proxy.model.highlightWeekends = boolValue;

            if (proxy.model.highlightWeekends == true)
                proxy._renderWeekends();
            else
                proxy._$weekendContainer.remove();
        },

        updateWeekendBackground: function (bgcolor) {
            var proxy = this;
            proxy.model.weekendBackground = bgcolor;
            proxy._$weekendsContainer.remove();
            proxy._renderWeekends();
        },

        showTooltip: function (boolValue) {
            var proxy = this;
            proxy.model.enableTaskbarTooltip = boolValue;
            proxy._createTaskbarTemplate();
            proxy._refresh();
        },

        showEditingTooltip: function (boolValue) {
            var proxy = this;
            proxy.model.enableTaskbarDragTooltip = boolValue;
            proxy._createTaskbarTemplate();
            proxy._refresh();
        },

        updateConnectorLineBackground: function (bgcolor) {
            var proxy = this;
            proxy.model.connectorLineBackground = bgcolor;
            proxy._createConnectorLineTemplate();
        },

        updateConnectorlineWidth: function (lineWidth) {
            var proxy = this;
            proxy.model.connectorlineWidth = parseInt(lineWidth);
            proxy._createConnectorLineTemplate();
        },
        updateEditedRecordEndDate: function (endDate) {
            var proxy = this;
            proxy._currentEditedRecord.endDate = endDate;
        },

        updateEditedRecordDuration: function (duration) {
            var proxy = this;
            proxy._currentEditedRecord.duration = duration;
        },

        updateTaskbarBackground: function (bgcolor) {
            var proxy = this;
            proxy.model.taskbarBackground = bgcolor;
            this._createTaskbarTemplate();
            this._refresh();
        },

        updateProgressbarBackground: function (bgcolor) {
            this.model.progressbarBackground = bgcolor;
            this._createTaskbarTemplate();
            this._refresh();
        },

        updateParentTaskbarBackground: function (bgcolor) {
            this.model.parentTaskbarBackground = bgcolor;
            this._createTaskbarTemplate();
            this._refresh();
        },

        updateParentProgressbarBackground: function (bgcolor) {
            this.model.parentProgressbarBackground = bgcolor;
            this._createTaskbarTemplate();
            this._refresh();
        },

        updateRenderTaskNames: function (bool) {
            var proxy = this;
            proxy.model.showTaskNames = bool;
            proxy._createTaskbarTemplate();
            proxy._refresh();
        },

        refreshLeftTaskLabelMapping: function (leftLabel) {
            var proxy = this;
            proxy.model.leftTaskLabelMapping = leftLabel;
            proxy._createTaskbarTemplate();
            proxy._refresh();
        },
        refreshRightTaskLabelMapping: function (rightLabel) {
            var proxy = this;
            proxy.model.rightTaskLabelMapping = rightLabel;
            proxy._createTaskbarTemplate();
            proxy._refresh();
        },
        refreshLeftTaskLabelTemplate: function (leftLabeltemplate) {
            var proxy = this;
            proxy.model.leftTaskLabelTemplate = leftLabeltemplate;
            proxy._createTaskbarTemplate();
            proxy._refresh();
        },
        refreshRightTaskLabelTemplate: function (rightLabeltemplate) {
            var proxy = this;
            proxy.model.rightTaskLabelTemplate = rightLabeltemplate;
            proxy._createTaskbarTemplate();
            proxy._refresh();
        },
        updateRendeProgressStatus: function (bool) {
            var proxy = this;
            proxy.model.showProgressStatus = bool;
            proxy._createTaskbarTemplate();
            proxy._refresh();
        },

        updateRenderResourceNames: function (bool) {
            var proxy = this;
            proxy.model.showResourceNames = bool;
            proxy._createTaskbarTemplate();
            proxy._refresh();
        },

        changeMilestoneTemplate : function(value)
        {
            var proxy = this;
            proxy.model.milestoneTemplate = value;
            proxy._createTaskbarTemplate();
            proxy._refresh();
        },

        changeTaskbarTemplate: function (value) {
            var proxy = this;
            proxy.model.taskbarTemplate = value;
            proxy._createTaskbarTemplate();
            proxy._refresh();
        },

        changeParentTaskbarTemplate: function (value) {
            var proxy = this;
            proxy.model.parentTaskbarTemplate = value;
            proxy._createTaskbarTemplate();
            proxy._refresh();
        },

        ganttChartEditing: function (boolValue) {
            var proxy = this;
            proxy.model.allowGanttChartEditing = boolValue;
        },
        updateReadOnly: function (boolValue) {
            var proxy = this;
            proxy.model.readOnly = boolValue;
        },
        resizeProgressbar: function (boolValue) {
            var proxy = this;
            proxy.model.enableProgressBarResizing = boolValue;

        },
        /* udpate value of allowKeyboardNavigation API from Gantt */
        updateAllowKeyboardNavigation: function (bool) {
            this.model.allowKeyboardNavigation = bool;
        },

        updateProgressbarHeight: function (height) {
            var proxy = this;
            this.model.progressbarHeight = height;
            proxy._createTaskbarTemplate();
            proxy._refresh();
        },

        updateBaselineColor: function (color) {
            var proxy = this;
            this.model.baselineColor = color;
            proxy._createTaskbarTemplate();
            proxy._refresh();
        },

        updateRenderBaseline: function (bool) {
            var proxy = this;
            this.model.renderBaseline = bool;
            proxy._createTaskbarTemplate();
            proxy._refresh();
            proxy._createConnectorLineTemplate();
        },

        focusGanttElement: function () {
            if (ej.browserInfo().name == "msie") {
                try { this.element[0].setActive(); } catch (e) { }
            }
            else
                this.element[0].focus();
        },
        
        //returns the schedule year width
        _getYearWidth: function () {
            var proxy = this,count=0,width=0;
            for (count = 0; count < this.model.scheduleYears.length; count++) {
                width += this._getTemplateYearWidth(this.model.scheduleYears[count]);
            }
            return (width);
        },

        //returns the schedule month width
        _getMonthWidth: function () {
            var proxy = this,
                model = proxy.model,
                date, scheduleMonths = model.scheduleMonths,
                    monthWidth = 0;

            for (var i = 0; i < scheduleMonths.length; i++) {
                var startDate = scheduleMonths[i];

                if (typeof startDate === "object") {
                    date = new Date(startDate);
                }
                else {
                    date = ej.parseDate(startDate, this.model.dateFormat, this.model.locale);
                }
                var monthLastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);

                var lastDate = monthLastDay.getDate();
                // condition to check if the first month having only few weeks.
                if (date.getTime() === proxy.model.scheduleMonths[0].getTime()) {
                    var datediff = monthLastDay.getDate() - date.getDate();
                    monthWidth += (this.model.perDayWidth * (datediff+1));
                }
                else if (lastDate == 31)
                    monthWidth += (this.model.perDayWidth * 31);
                else if (lastDate == 30)
                    monthWidth += (this.model.perDayWidth * 30);
                else if (lastDate == 28)
                    monthWidth += (this.model.perDayWidth * 28);
            }
            return monthWidth;
        },



        //returns the schedule week width
        _getWeekWidth: function () {
            return (this.model.perDayWidth * 7);
        },

        _getNumberOftWeeks: function (startdate, enddate) {


            //var date1 = new Date(startdate), date2 = new Date(enddate);
            //// The number of milliseconds in one week
            //var ONE_WEEK = 1000 * 60 * 60 * 24 * 7;
            //// Convert both dates to milliseconds
            //var date1_ms = date1.getTime();
            //var date2_ms = date2.getTime();
            //// Calculate the difference in milliseconds
            //var difference_ms = Math.abs(date1_ms - date2_ms);
            //// Convert back to weeks and return hole weeks
            //return Math.floor(difference_ms / ONE_WEEK);
            var startDate = new Date(startdate),
                endDate = new Date(enddate);

            var totalWeeksCollection = [];
            do {
                totalWeeksCollection.push(new Date(startDate));
                startDate.setDate(startDate.getDate() + 7);
            } while (!(startDate > endDate));

            return totalWeeksCollection;
        },

        //returns the ganttchart container height
        _getHeight: function () {
            return this._containerHeight;
        },

        //sets the height of the ganttchart container
        _setHeight: function (value) {
            this._containerHeight = value;
        },

        //returns the rows in the ganttchart
        getGanttChartRows: function () {
            return this._ganttChartRows;
        },

        //returns the gantt record collection
        getUpdatedRecords: function () {
            return this.model.flatRecords;
        },

        //sets value for currentviewdata , ganttrecords and row collections
        setUpdatedRecords: function (currentViewData, updatedRecords, flatRecords,ids) {
            var proxy = this;
            proxy.model.currentViewData = currentViewData;
            proxy.model.updatedRecords = updatedRecords;
            proxy.model.flatRecords = flatRecords;
            proxy.model.ids = ids;
        },

        //returns the string date type 
        _getFormatedDate: function (date, format, locale) {
            return ej.format(date, format, locale);
        },

        //returns the viewport height
        _getViewportHeight: function () {
            var proxy = this,
                headerdiv = proxy._$headerContainer,
                height;

            height = proxy.element.height() - headerdiv.height() -
                    parseFloat(headerdiv.css("border-bottom-width"));
            return height;
        },

        updateViewPortHeight:function(){
            var proxy = this;
            proxy._viewportHeight=proxy._getViewportHeight();
        },

        //constructor function
        _init: function () {

            var proxy = this, model = proxy.model,
            scheduleMode = model.scheduleHeaderSettings.scheduleHeaderType;

            proxy.element.addClass("e-ganttchart-core");
            proxy.element.attr("tabindex", "0");
            proxy._initPrivateProperties();
            proxy._initialize();
            proxy._renderGanttChart();
            proxy._$bodyContainerParent.append(proxy._$bodyContainer);
            proxy._$bodyContainer.append(proxy._$bodyContent);
            proxy._$ganttChartContainer.append(proxy._$bodyContainerParent);

            $(proxy._$bodyContainer).css({ "height": proxy._viewportHeight + "px" });
            if (proxy.model.enableVirtualization)
                $(proxy._$bodyContent).css({ "height": (model.rowHeight * model.updatedRecords.length) + "px" });

            if (scheduleMode == "week") {
                $(proxy._$bodyContent).css({ "width": (model.scheduleWeeks.length * proxy._scheduleWeekWidth) + "px" });
            }
            else if (scheduleMode == "year") {
                $(proxy._$bodyContent).css({ "width": (proxy._scheduleYearWidth) + "px" });

            }
            else if (scheduleMode == "month") {
                $(proxy._$bodyContent).css({ "width": (proxy._scheduleMonthWidth) + "px" });
            }
            else if (scheduleMode == "day") {
                $(proxy._$bodyContent).css({ "width": (model.scheduleDays.length * (model.perHourWidth * 24)) + "px" });
            }
            else if (scheduleMode == "hour") {
                $(proxy._$bodyContent).css({ "width": (model.scheduleHours.length * (model.perMinuteWidth * proxy._totalInterval)) + "px" });
            }
            proxy.createGridLinesTable();
            proxy.renderGanttRecords();
          //  Inner div for scroller
            var scrollerDiv = ej.buildTag('div');
            scrollerDiv.append(proxy._$bodyContent);
            proxy._$bodyContainer.append(scrollerDiv);
            proxy._$bodyContainer.ejScroller({
                width: proxy.element.width() - 1,// additional parent div element added with 1px right border
                enableTouchScroll:false,
                height: proxy._getViewportHeight(), scroll: function (args) {

                    var arg = {},
                        scrollTop = args.scrollTop;

                    args.requestType = "scroll";
                    args.delta = scrollTop;
//                    proxy._completeAction(args);
                    if (scrollTop != undefined) {// && this.isVScroll()
                        if (proxy.onScrollHelper(scrollTop, true) === false) {
                           args.cancel = true;
                        }
                    } else {
                        proxy._handleScroll(args);
                    }
                    
                }
            });
            proxy._$bodyContainer.ejScroller("model.keyConfigs", { up: "", down: "", left: "", right: "" });
            proxy._$bodyContainer.ejScroller("refresh");
            //check if Hscroller is render or not
            var isHorizontalScroll = proxy._$bodyContainer.ejScroller("isHScroll");
                if (!isHorizontalScroll) {
                    proxy._$bodyContainer.find("div.e-content").addClass("e-borderbox");
                }
                else {
                    proxy._$bodyContainer.find("div.e-content").removeClass("e-borderbox");
                }
            proxy._wireEvents();


        },

        //rendering gantt chart again after zoomingvalue changed
        reRenderGanttChart: function (daywidth, flatRecords) {

            var proxy = this, model = proxy.model,
                   scheduleMode = model.scheduleHeaderSettings.scheduleHeaderType;

            proxy._wireEvents();
            model.perDayWidth = daywidth;

            // proxy.model.perMonthWidth = monthwidth;

            model.flatRecords = flatRecords;
            proxy._scheduleWeekWidth = proxy._getWeekWidth();
            proxy._scheduleYearWidth = proxy._getYearWidth();
            proxy._scheduleMonthWidth = proxy._getMonthWidth();

            $(proxy._$headerContainer).empty();
            $(proxy._$scheduleDiv).empty();
            proxy._renderGanttChart();
            proxy._$bodyContainerParent.append(proxy._$bodyContainer);
            proxy._$bodyContainer.append(proxy._$bodyContent);
            proxy._$ganttChartContainer.append(proxy._$bodyContainerParent);

            if (scheduleMode == "week") {
                $(proxy._$bodyContent).css({ "width": (model.scheduleWeeks.length * proxy._scheduleWeekWidth) + "px" });
            }
            else if (scheduleMode == "year") {
                $(proxy._$bodyContent).css({ "width": (proxy._scheduleYearWidth) + "px" });
            }
            else if (scheduleMode == "month") {
                $(proxy._$bodyContent).css({ "width": (proxy._scheduleMonthWidth) + "px" });
            } 
            else if (scheduleMode == "day") {
                $(proxy._$bodyContent).css({ "width": (model.scheduleDays.length * (model.perHourWidth * 24)) + "px" });
            }
            else if (scheduleMode == "hour") {
                $(proxy._$bodyContent).css({ "width": (model.scheduleHours.length * (model.perMinuteWidth * proxy._totalInterval)) + "px" });
            }
        },

        //declaring private properties
        _initPrivateProperties: function () {
            var proxy = this;
            proxy._viewportHeight = 0,
            proxy._prevScrollTop = 0,
            proxy._scrollTop = 0,
            proxy._vScrollDir = 1,
            proxy._$ganttChartContainer = null,
            proxy._$headerContainer = null,
            proxy._$bodyContainer = null,
            proxy._$bodyContent = null,
            proxy._$dependencyViewContainer = null,
            proxy._$secondaryCanvas = null,
            proxy._$ganttViewTable = null,
            proxy._$ganttViewTablebody = null,
            proxy._weekdays = [],
            proxy._rowMargin = 0,
            proxy._renderedRange = null,
            proxy._visibleRange = null,
            proxy._vTop = null,
            proxy._vBottom = null,
            proxy._rTop = null,
            proxy._rBottom = null,
            proxy._vscrollDist = 0,
            proxy._containerHeight = 0,
            proxy._id = this.element.attr("id"),
            proxy._ganttChartRows = null,
            proxy._filteredRecords = [],
            proxy._sortedRecords = [],
            proxy._tempSortedRecords = [],
            proxy._scheduleHours = [],
            proxy._scheduleMinutes = [],
            proxy._updateScheduleWidth(),
            proxy._totalMonthWidth = 0,
            proxy._tempFilteredRecords = [],
            proxy._prevLeft = 0,
            proxy._allowDragging = false,
            proxy._leftResizing = false,
            proxy._rightResizing = false,
            proxy._progressResizing = false,
            proxy._editingContainer = null,
            proxy._allowExpandCollapse = true,
            proxy._leftResizer = null,
            proxy._taskbarItem = null,
            proxy._progressbarItem = null,
            proxy._progressResizer = null,
            proxy._rightResizer = null,
            proxy._manualRightResizer = null,
            proxy._tasknameContainer = null,
            proxy._mousePosX = 0,
            proxy._currMousePosX = 0,
            proxy._currMousePosY = 0,
            proxy._prevItem = {},
            proxy._parentCollectionPreviousValues = [],
            proxy._mouseTarget = null,
            proxy._mouseDown = false,
            proxy._$scheduleDiv = null,
            proxy._leftResizerGripper = null,
            proxy._rightResizerGripper = null,
            proxy._progressHandle = null,
            proxy._progressHandleChild = null,
            proxy._currentEditedRecord = {
                taskId: null,
                taskName: null,
                startDate: null,
                endDate: null,
                duration: null,
                isMilestone: false,
                status: null,
                predecessor: null,
                resourceInfo: null,
                parentItem: null,
                isSelected: false,
                childRecords: null,
                hasChildRecords: false,
                expanded: false,
                level: 0,
                left: 0,
                width: 0,
                progressWidth: 0,
                item: null,
                baselineLeft: 0,
                baselineWidth: 0,
                baselineStartDate: null,
                baselineEndDate: null,
                isReadOnly: false,
                hasFilteredChildRecords: true,
                serialNumber: null,
                taskbarBackground: null,
                progressbarBackground: null,
                parentProgressbarBackground: null,
                parentTaskbarBackground: null,
                cellBackgroundColor: null,
                rowBackgroundColor: null,
                treeMappingName: [],
                dragState: true,
                isSelected: false,
                durationUnit: "",
            },
            proxy._mouseHoverTooltip = document.getElementById(this.model.tooltipTemplate),
            proxy._progressBarTooltipID = document.getElementById(this.model.progressbarTooltipTemplateId),
            proxy._taskbarEditingTooltipID = document.getElementById(this.model.taskbarEditingTooltipTemplateId),
            proxy._scrollBarHeight = 18,
            proxy._windowWidth = $(window).width(),
            proxy._windowHeight = $(window).height(),
            proxy._editingItem = null,
            proxy._editingTarget = null,
            proxy.tooltipState = null,
            proxy._visibleRecordsCount = 0,
            proxy._tooltipTimer,
            proxy._$gridLinesTablebody = null,

            //Properties for connector line mouse
            proxy._leftConnectorPoint = null,
            proxy._rightConnectorPoint = null,
            proxy._childLeftConnectorPoint = null,
            proxy._childRightConnectorPoint = null,
            proxy._editPredecessor = false,
            proxy._connectorPointX = null,
            proxy._connectorPointY = null,
            proxy._predecessorTooltip = null,
            proxy._totalCollapsedRecordCount = 0,
            proxy._milesStoneWidth = 0,
            proxy._connectorPointWidth = 0;
            proxy._newXYPos = true;
            proxy._posX1 = null,
            proxy._posY1 = null;
        },
        //Calculate schedulw width for all modes
        _updateScheduleWidth:function(){
            var proxy = this;
            proxy._scheduleWeekWidth = proxy._getWeekWidth();
            proxy._numOfWeeks = proxy._getNumberOftWeeks(this.model.projectStartDate, this.model.projectEndDate);
            proxy._scheduleYearWidth = proxy._getYearWidth();
            proxy._scheduleMonthWidth = proxy._getMonthWidth();
            proxy._totalWeekWidth = proxy._scheduleWeekWidth * proxy._numOfWeeks.length;
            proxy._balanceWidth = proxy._totalWeekWidth - proxy._scheduleMonthWidth;
            proxy._scheduleMonthWidth += proxy._balanceWidth;
        },
        //Initialize ganttchart
        _initialize: function () {
            var proxy = this;
            proxy._$ganttChartContainer = ej.buildTag("div.e-ganttviewercontainer#ganttviewercontainer" + proxy._id, "", { width: "100%" }, {});
            proxy._$headerContainer = ej.buildTag("div.e-ganttviewerheaderContainer#ganttviewerheaderContainer" + proxy._id, "", {
                "border-right-style": "solid",
                "border-right-width": "1px"
            }, {});
            proxy._$bodyContainer = ej.buildTag("div.e-ganttviewerbodyContianer#ganttviewerbodyContianer" + proxy._id, "", {
                '-ms-touch-action': 'none',
                'touch-action': 'none'
            }, {});

            proxy._$bodyContainerParent = ej.buildTag("div.e-ganttviewerbodyContianerparent#ganttviewerbodyContianerParent" + proxy._id, "", {
                '-ms-touch-action': 'none',
                'touch-action': 'none',
                "border-right-style": "solid",
                "border-right-width": "1px",
                "box-sizing": "border-box",
                "width": "auto",
                "height": "auto"
            }, {});
            proxy._$bodyContent = ej.buildTag("div.e-ganttviewerbodyContent#ganttviewerbodyContent" + proxy._id, "", {
            }, {});

            proxy._$dependencyViewContainer = ej.buildTag("div.e-ganttviewerbodyContianer-dependencyViewContainer#dependencyViewContainer" + proxy._id,
                "", {
                    'z-index': '4',
                    'position': 'absolute'
                }, {});
            proxy._$secondaryCanvas = ej.buildTag("div.e-ganttviewerbodyContianer-secondaryCanvas", "", {
                'z-index': '3',
                'position': 'absolute'
            }, {});
            //Container for strip lines
            proxy._$stripLineContainer = ej.buildTag("div.e-ganttviewerbodyContianer-stripLines", "", {
                'z-index': '6',
                'position': 'absolute'
            }, {});

            proxy._$weekendsContainer = ej.buildTag("div.e-ganttviewerbodyContianer-weekendsContainer", "", {
                'z-index': '1',
                'position': 'absolute'
            }, {});

            proxy._$ganttViewTable = ej.buildTag("table.e-ganttviewerbodyContianer-ganttViewTable#ganttViewTable" + proxy._id, "", {
                'z-index': '5',
                'position': 'absolute'
            }, { 'cellspacing': '0px' });
            proxy._$scheduleDiv = ej.buildTag("div.e-gantt-schedule-container#gantt-schedule" + proxy._id + "", "", {}, {});
        },

        _getScheduleLength: function (scheduleMode) {
            var proxy = this,
                model = proxy.model;

            switch (scheduleMode) {
                case "week":                    
                    return (model.scheduleWeeks.length * proxy._scheduleWeekWidth);
                    break;
                case "year":                    
                    return (proxy._scheduleYearWidth);
                    break;
                case "month":
                    return (proxy._scheduleMonthWidth);
                    break;
                case "day":
                    return (model.scheduleDays.length * (proxy.model.perHourWidth * 24));
                    break;
                case "hour":
                    return ((model.scheduleHours.length) * (model.perMinuteWidth * proxy._totalInterval));
                    break;
                default:
                    return (model.scheduleWeeks.length * proxy._scheduleWeekWidth);

            }
        },

        //Rendering GanttChart
        _renderGanttChart: function () {
            var proxy = this, model = proxy.model,
                scheduleLength, $colsgroup, $column,
            scheduleMode = model.scheduleHeaderSettings.scheduleHeaderType;
            
        proxy._createSchedule(proxy._getDateType(model.scheduleStartDate),
            proxy._getDateType(model.scheduleEndDate));

            proxy._viewportHeight = proxy._getViewportHeight();
                       
            proxy._$ganttViewTable.css("width", proxy._getScheduleLength(scheduleMode) + 'px');
            
            $colsgroup = ej.buildTag("colgroup", "", {}, {});
            $column = $(document.createElement("col"));
            $column.css("width", proxy._getScheduleLength(scheduleMode) + 'px');
            
            $colsgroup.append($column);
            proxy._$ganttViewTable.append($colsgroup);

            proxy._createTooltipTemplate();
            proxy._createEditingTooltipTemplate();
            proxy._createProgressbarTooltipTemplate();

            proxy._createTaskbarTemplate();
            proxy._createConnectorLineTemplate();

            proxy._updateCurrentViewData();

            //Display weekends
            if (proxy.model.highlightWeekends == true
                && model.scheduleHeaderSettings.scheduleHeaderType == ej.Gantt.ScheduleHeaderType.Week)
                proxy._renderWeekends();

            proxy._$stripLineContainer.empty();
            //Display striplines
            if (proxy.model.stripLines != null) {
                this._renderStripLines(proxy.model.stripLines);
            }

            proxy._$secondaryCanvas.empty();
            //Display Holidays
            if (proxy.model.holidays != null) {
                var holidayCount = proxy.model.holidays.length;
                for (var i = 0; i < holidayCount; i++) {
                    proxy._renderHoliday(proxy.model.holidays[i]);
                }
            }
        },

        //Rendering connectorlines from Gantt
        renderConnectorLines: function (connectorLinesCollection) {
            var proxy = this,
                connectorLineContainer = $.render[proxy._id + "ConnectorLineTemplate"](connectorLinesCollection);

            $(proxy._$dependencyViewContainer).empty();
            proxy._$dependencyViewContainer.append(connectorLineContainer);
            proxy._$bodyContent.append(proxy._$dependencyViewContainer);
        },

        //Empty the entire connectorline collection
        clearConnectorLines: function () {
            $(this._$dependencyViewContainer).empty();
        },

        //append single connectorline
        appendConnectorLine: function (connectorLineCollection) {
            var proxy = this,
            connectorLineContainer = $.render[proxy._id + "ConnectorLineTemplate"](connectorLineCollection);
            proxy._$dependencyViewContainer.append(connectorLineContainer);
        },
        //set Collapsed record Count

        setCollapsedRecordCount:function(count)
        {
            this._totalCollapsedRecordCount = count;
        },
        //get collapsed record count
        getCollapsedRecordCount:function()
        {
            return this._totalCollapsedRecordCount;
        },
        //remove a particular connector line
        removeConnectorline: function (lineId) {
            this.element.find("#ConnectorLine" + lineId).remove();
        },

        //Events
        _wireEvents: function () {
            var proxy = this,
                matched = jQuery.uaMatch(navigator.userAgent);

            //$(proxy._$bodyContainer).bind("scroll", $.proxy(proxy._handleScroll, proxy));
            if (ej.isTouchDevice()) {
                $(document.body).bind("touchmove", function (event) {
                    event.preventDefault();
                });
                proxy._on(proxy.element, "touchstart", ".e-gantt-milestone-container,.e-childContainer", this._mouseHover);
                proxy._on(proxy.element, "touchstart", ".e-childContainer,.e-gantt-milestone-container,.e-parentContainer", proxy._mousedown);
                $(document.body).bind("touchmove", $.proxy(proxy.handleMouseMove, proxy));
                proxy._on(proxy.element, "touchleave", ".e-gantt-milestone-container,.e-childContainer, .e-parentContainer", this._mouseLeave);
                $(proxy._$bodyContainer).bind("touchend", $.proxy(proxy._handleMouseUp, proxy));
                proxy._on(proxy.element, "tap", proxy._cellClickHandler);
            }
            else {
                proxy._on(proxy.element, "mouseenter", ".e-gantt-milestone-container,.e-childContainer,.e-parentContainer", this._mouseHover);//.gantt-viewer-bodyContianer tr td
                proxy._on(proxy.element, "mouseleave", ".e-gantt-milestone-container,.e-childContainer,.e-parentContainer", this._mouseLeave);//.gantt-viewer-bodyContianer tr td
                proxy._on(proxy.element, "click", proxy._cellClickHandler);
                proxy._on(proxy.element, "mouseenter", ".taskbarresizer-left", proxy._resizerleftOver);
                proxy._on(proxy.element, "mouseenter", ".taskbarresizer-right", proxy._resizerrightOver);
                proxy._on(proxy.element, "mouseenter", ".progressbarresizer-right", proxy._progressresizerOver);
                proxy._on(proxy.element, "mouseenter", ".e-connectorpoint-left", proxy._dragLeftOver);
                proxy._on(proxy.element, "mouseenter", ".e-connectorpoint-right", proxy._dragRightOver);
          

                if (ej.browserInfo().name != "msie") {
                    proxy._on(proxy.element, "mousedown", ".e-parentContainer,.e-childContainer,.e-gantt-milestone-container", proxy._mousedown);
                }
                else {
                    proxy._on(proxy.element, "mousedown", ".e-parentContainer,.e-childContainer,.e-gantt-milestone-container", proxy._mousedown);
                }


                $(proxy._$bodyContainer).bind("mouseup", $.proxy(proxy._handleMouseUp, proxy));
                $(document).bind("mouseup", $.proxy(proxy._tooltipMouseup, proxy));
                proxy._on(proxy.element, "mouseenter", ".e-stripline", proxy._stripLineMouseOver);
                proxy._on(proxy.element, "mouseleave", ".e-stripline", proxy._stripLineMouseLeave);

                //if (matched.browser.toLowerCase() == "msie") {
                //    proxy._on(proxy.element, "MSPointerDown", ".e-tasklabel,.e-parentContainer,.e-childContainer,.e-gantt-milestone-container", proxy._mousedown);
                //    $(document.body).bind("MSPointerMove", function (event) {
                //        event.preventDefault();
                //    });
                //    $(document.body).bind("MSPointerMove", $.proxy(proxy.handleMouseMove, proxy));
                //    $(proxy._$bodyContainer).bind("MSPointerUp", $.proxy(proxy._handleMouseUp, proxy));
                //}


                if (matched.browser.toLowerCase() == "chrome") {
                    proxy._on(proxy.element, "touchstart", ".e-gantt-milestone-container,.e-childContainer, .e-parentContainer", this._mouseHover);
                    proxy._on(proxy.element, "touchstart", ".e-childContainer,.e-gantt-milestone-container", proxy._mousedown);
                    proxy._on(proxy.element, "touchleave", ".e-gantt-milestone-container,.e-childContainer, .e-parentContainer", this._mouseLeave);
                    $(document.body).bind("touchmove", function (event) {
                        event.preventDefault();
                    });
                    $(document.body).bind("touchmove", $.proxy(proxy.handleMouseMove, proxy));
                    //proxy._on(proxy.element, "touchend", ".e-parentContainer,.e-childContainer,.e-gantt-milestone-container", proxy._handleMouseUp);
                    proxy._on(proxy.element, "touchleave", ".e-parentContainer,.e-childContainer,.e-gantt-milestone-container", proxy._handleMouseUp);
                    $(proxy._$bodyContainer).bind("touchend", $.proxy(proxy._handleMouseUp, proxy));
                    $(proxy._$bodyContainer).bind("touchleave", $.proxy(proxy._handleMouseUp, proxy));
                }
            }
                proxy._enableEditingEvents();
        },

        //Event append for editDialogOpen while perform double click action
        _enableEditingEvents: function () {

            var proxy = this,
                model = proxy.model;

            if (model.editSettings.allowEditing && model.editSettings.editMode === "normal") {
                    if (!ej.isTouchDevice)
                        proxy._on(this.element, "dblclick", ".e-ganttviewerbodyContent", proxy._editdblClickHandler);
                    else
                        proxy._on(this.element, "doubletap", ".e-ganttviewerbodyContent", proxy._editdblClickHandler);
            }else {
                    if (!ej.isTouchDevice)
                        proxy._off(this.element, "dblclick", ".e-ganttviewerbodyContent", proxy._editdblClickHandler);
                    else
                        proxy._off(this.element, "doubletap", ".e-ganttviewerbodyContent", proxy._editdblClickHandler);
                } 
        },


        //UPDATE Edit Settings
        updateEditSettings: function (edit) {

            var proxy = this;

            if (edit) {
                if (edit.editMode) 
                    proxy.model.editSettings.editMode = edit.editMode;
                if (!ej.isNullOrUndefined(edit.allowAdding))
                    proxy.model.editSettings.allowAdding = edit.allowAdding;
                if (!ej.isNullOrUndefined(edit.allowEditing))
                    proxy.model.editSettings.allowEditing = edit.allowEditing;
                if (!ej.isNullOrUndefined(edit.allowDeleting))
                    proxy.model.editSettings.allowDeleting = edit.allowDeleting;
                if (!ej.isNullOrUndefined(edit.beginEditAction))
                    proxy.model.editSettings.beginEditAction = edit.beginEditAction;
                proxy._enableEditingEvents();
            }
        },

        //Double click event handler for editing with editMode as normal
        _editdblClickHandler: function () {

            var proxy = this,
                args = {};

            if (proxy.model.editSettings.editMode === "normal" && !model.readOnly && proxy.model.editSettings.allowEditing) {
                args.requestType = ej.TreeGrid.Actions.BeginEdit;
                proxy._trigger("actionBegin", args);
            }

        },


        //Event to append RowHover effect
        _enableRowHover: function () {
            var proxy = this;
            if (proxy.model.enableRowHover)
                proxy._on(proxy.element, "mouseleave mouseenter",
                    "#ganttviewerbodyContent,.e-ganttviewerbodyContent tr,.e-ganttviewerbodyContent" + proxy._id,
                    proxy._rowHover);
            else
                proxy._on(proxy.element, "mouseleave mouseenter",
                    "#ganttviewerbodyContent,.e-ganttviewerbodyContent tr,.e-ganttviewerbodyContent" + proxy._id);
        },

        //MouseLeave event for striplines to remove tooltip
        _stripLineMouseLeave: function () {
            window.clearTimeout(this._tooltipTimer);
            this._clearTooltip();
        },

        //mouseHover event for stripline to render tooltip
        _stripLineMouseOver: function (e) {

            e.target.style.cursor = "pointer";
            var proxy = this, model = proxy.model,
                $target = $(e.target),
                parentNode, match,
                tooltiptable,
                tooltipbody,
                posx = 0, posy = 0;
            proxy._clearTooltip();
            if ($target.hasClass("e-striplinespan")) {
                parentNode = $target[0].parentNode;
            } else
                parentNode = $target[0];

            match = parentNode.id.match(/(\d+|[A-z]+)/g);

            if (e.type == "mouseenter" || e.type == "mousemove") {
                if (!e) e = window.event;
                if (e.originalEvent.pageX || e.originalEvent.pageY) {
                    posx = e.originalEvent.pageX;
                    posy = e.originalEvent.pageY;
                }
                else if (e.originalEvent.clientX || e.originalEvent.clientY) {
                    posx = e.originalEvent.clientX + document.body.scrollLeft
                        + document.documentElement.scrollLeft;
                    posy = e.originalEvent.clientY + document.body.scrollTop
                        + document.documentElement.scrollTop;
                }

                tooltiptable = ej.buildTag("table.e-tooltiptable", "", { "width": "auto" },
                    { 'cellspacing': '2px', 'cellpadding': '2px' });
                tooltipbody = ej.buildTag("tbody",
                    "<tr><td>" + model.stripLines[match[1]].day + "</td></tr><tr><td>" +
                        model.stripLines[match[1]].label + "</td></tr>", {}, {});

                tooltiptable.append(tooltipbody);
                proxy._mouseHoverTooltip = ej.buildTag("div.e-tooltipgantt#tooltipgantt" + proxy._id + "", tooltiptable,
                    { 'position': 'absolute', 'z-index': proxy._getmaxZindex() + 1 }, {});

                setTimeout(function () {
                    $(document.body).append(proxy._mouseHoverTooltip);
                    proxy._updateTooltipPosition(proxy._mouseHoverTooltip, posx, posy);
                }, 700);
            }
        },

        //Mouseup over tooltip 
        _tooltipMouseup: function () {
            var proxy = this;
            if (proxy._mouseTarget != null && !ej.isTouchDevice()) {
                proxy._handleMouseUp(proxy._mouseTarget);
            }
        },

        //removes all the tooltip in ganttchart
        _clearTooltip: function () {
            var proxy = this;
            proxy._mouseHoverTooltip && $(proxy._mouseHoverTooltip).remove();
            $('.e-editingtooltip').remove();
            $("#tooltipgantt").remove();
            $(".e-progressbartooltip").remove();
            proxy._mouseHoverTooltip = null;

        },

        //mousewheel action for zooming ganttchart
        _mouseWheel: function (e) {
            if (this.model.allowZooming) {
                var proxy = this, args = {},
                    delta = null;

                e = e.originalEvent;
                e.preventDefault();

                if (e.wheelDelta)
                    delta = -e.wheelDelta / 120;
                else if (e.detail)
                    delta = e.detail / 3;

                if (!delta)
                    return;
                args.requestType = "scroll";
                args.delta = delta;
                proxy._enbleZooming(args);
            }
        },


        //mouseHover event on taskbar right helper element
        _resizerrightOver: function (e) {

            var proxy = this,
                $target = e.target,
                div = $target.parentNode;

            if (proxy.model.allowGanttChartEditing == true&& proxy.model.readOnly == false) {
                if (this._mouseDown == false)
                    e.target.style.cursor = "w-resize";
                proxy._setEditingElements(div);
            }
        },


        //mouseLeave event for taskbar right helper element
        _resizerrightLeave: function () {

            var proxy = this;
            if (proxy.model.allowGanttChartEditing == true && proxy.model.readOnly == false) {
                proxy._removeEditingElements();
            }
        },


        //mouseHover event on taskbar left helper element
        _resizerleftOver: function (e) {

            var proxy = this,
                $target = e.target,
                div = $target.parentNode;
            if (proxy.model.allowGanttChartEditing == true && proxy.model.readOnly == false) {
                if (this._mouseDown == false)
                    e.target.style.cursor = "e-resize";
                proxy._setEditingElements(div);
            }
        },


        //mouseLeave event for taskbar left helper element
        _resizerleftLeave: function () {
            var proxy = this;
            if (proxy.model.allowGanttChartEditing == true && proxy.model.readOnly == false) {
                proxy._removeEditingElements();
            }
        },


        //mouseHover event on taskbar progressbar helper element
        _progressresizerOver: function (e) {
            var proxy = this,
                $target = e.target,
                div = $target.parentNode;
            if (proxy.model.allowGanttChartEditing == true && proxy.model.readOnly == false) {
                if (proxy.model.enableProgressBarResizing){
                    if (proxy._mouseDown == false && $($target).prev(".e-gantt-childtaskbar").has(".e-gantt-childtaskbar-progress").length > 0)
                        $target.style.cursor = "col-resize";
                    proxy._setEditingElements(div);
                }
                else
                    $target.style.cursor = "move";
            }
        },


        //mouseLeave event for progressbar helper element
        _progressresizerLeave: function () {
            var proxy = this;
            if (proxy.model.allowGanttChartEditing == true && proxy.model.readOnly == false) {
                proxy._removeEditingElements();
            }
        },


        _secondMouseOverConnectorPoint: function (e, mouseUp)
        {
            var proxy = this, row, recordIndexr, item;

            if ((proxy._mouseDown && proxy._falseLine) || (mouseUp && proxy._falseLine)) {

                var $target = $(e.target),
                  $ganttGridRows = proxy.getGanttChartRows(),
                  row = $target.closest('tr.e-ganttrowcell'),
                  recordIndexr = $ganttGridRows.index(row),
                  item = proxy.model.currentViewData[recordIndexr];

                var fromItem = proxy._editingItem;
                var toItem = item, predecessor, fullPredecessor, currentTarget;

                if (proxy._prevItem.predecessorTarget === 'Start') {
                    predecessor = fromItem.taskId + 'S';
                } else if (proxy._prevItem.predecessorTarget === 'Finish') {
                    predecessor = fromItem.taskId + 'F';
                }

                if ($target.hasClass('e-connectortouchpoint')) {
                    if ($target.parent().hasClass('e-connectorpoint-left')) {
                        predecessor += 'S';
                        currentTarget = "Start"
                    }
                    else if ($target.parent().hasClass('e-connectorpoint-right')) {
                        predecessor += 'F';
                    }
                } else {
                    if ($target.hasClass('e-connectorpoint-left')) {
                        predecessor += 'S';
                        currentTarget = "Start"
                    }
                    else if ($target.hasClass('e-connectorpoint-right')) {
                        predecessor += 'F';
                        currentTarget = "Finish"
                    }
                }
                
                //Append second item in predecessor tooltip
                //update tooltip on over of second connector point
                if (proxy._predecessorTooltip) {
                    $table = proxy._predecessorTooltip.find("table");
                    $td = $table.find("tbody").find("tr:eq(1)").find("td:eq(2)").text(toItem.taskName);
                    $td = $table.find("tbody").find("tr:eq(1)").find("td:eq(3)").text(currentTarget);
                }

                var args = {};
                args.requestType = "validatePredecessor";
                args.fromItem = fromItem;
                args.toItem = toItem;
                if (args.toItem.item[proxy.model.predecessorMapping]) {
                    fullPredecessor = args.toItem.item[proxy.model.predecessorMapping] + "," + predecessor;
                }
                else {
                    fullPredecessor = predecessor;
                }
                args.predecessor = predecessor;
                args.currentRecord = toItem;
                args.predecessorString = [];
                args.predecessorString.push(fullPredecessor);
                var validation = proxy._completeAction(args);
                //update tooltip after validation
                if (proxy._predecessorTooltip) {
                    $td = $table.find("tbody").find("tr:eq(0)").find("td:eq(0)");
                    if (validation) {
                        // $td.text("True");
                        $td.removeClass();
                        $td.addClass("e-predecessor-true");
                    } else {
                        //  $td.text("False");
                        $td.removeClass();
                        $td.addClass("e-predecessor-false");
                    }
                }

                //Here also update on moueup//same code is required
                if (mouseUp) {
                    return args;
                }
                
            }
        },
        //mouse enter event for left-connectorpoint-point

        _dragLeftOver:function(e)
        {
            var proxy = this,
              $target = e.target,
              div = $target.parentNode;
            if (e.type == "touchmove" && $(e.target).hasClass('e-connectortouchpoint'))
                div = $target.parentNode.parentNode;
            if (proxy.model.predecessorMapping && proxy.model.allowGanttChartEditing && proxy.model.enablePredecessorEditing && proxy.model.readOnly == false) {
                if (this._mouseDown == false ) {
                    $target.style.cursor = "pointer";
                }
                proxy._setEditingElements(div);
            }
            if(!$(div).hasClass('e-parentContainer'))
                proxy._secondMouseOverConnectorPoint(e);

        },
        //mouse leave event for left-connectorpoint-point
        _dragLeftLeave: function (e) {

            var proxy = this;
            if (proxy.model.allowGanttChartEditing == true && proxy.model.enablePredecessorEditing && proxy.model.readOnly == false) {
                proxy._removeEditingElements();
            }
        },

        //mouse enter event for right-connectorpoint-point

        _dragRightOver: function (e) {
            var proxy = this,
             $target = e.target,
             div = $target.parentNode;
            if (e.type == "touchmove" && $(e.target).hasClass('e-connectortouchpoint'))
                div = $target.parentNode.parentNode;
            if (proxy.model.predecessorMapping && proxy.model.allowGanttChartEditing && proxy.model.enablePredecessorEditing && proxy.model.readOnly == false) {
                if (this._mouseDown == false) {
                    $target.style.cursor = "pointer";
                }
                proxy._setEditingElements(div);
            }
            if (!$(div).hasClass('e-parentContainer'))
                proxy._secondMouseOverConnectorPoint(e);
        },
        //mouse leave event for right-connectorpoint-point
        _dragRightLeave: function (e) {
            var proxy = this;
            if (proxy.model.allowGanttChartEditing == true && proxy.model.enablePredecessorEditing && proxy.model.readOnly == false) {
                proxy._removeEditingElements();
            }
        },




        //adding styles for taskbar helper elements
        _setEditingElements: function (div) {
            var proxy = this, progressHandler;

            if (proxy._editingTarget && !proxy._editPredecessor && $(div).find(proxy._editingTarget).length == 0)
                return true;

            if ($(div).hasClass("e-childContainer")) {
                proxy._leftResizerGripper = div.querySelector(".taskbarresizer-left"); 
                proxy._rightResizerGripper = div.querySelector(".taskbarresizer-right"); 
                progressHandler = div.querySelector(".progressbarresizer-right");
                proxy._progressHandle = progressHandler && progressHandler.firstChild;
                proxy._progressHandleChild = progressHandler && progressHandler.childNodes[1];

                $(proxy._leftResizerGripper).addClass("gripper");
                $(proxy._rightResizerGripper).addClass("gripper");

                if (proxy.model.progressMapping) {
                    $(proxy._progressHandle).addClass("e-progresshandle");
                    $(proxy._progressHandleChild).addClass("e-progresshandleafter");
                }
            }


            if (proxy.model.enablePredecessorEditing) {
                if ($(div).hasClass("e-childContainer") && proxy.model.predecessorMapping && !proxy._falseLine) {

                    proxy._leftConnectorPoint = div.querySelector(".e-connectorpoint-left");
                    proxy._rightConnectorPoint = div.querySelector(".e-connectorpoint-right");
                    $(proxy._leftConnectorPoint).addClass("e-connectorpoint-hover");
                    $(proxy._rightConnectorPoint).addClass("e-connectorpoint-hover");
                }
                else if ($(div).hasClass("e-gantt-milestone-container") && proxy.model.predecessorMapping && !proxy._falseLine) {

                    proxy._leftConnectorPoint = div.querySelector(".e-connectorpoint-left");
                    proxy._rightConnectorPoint = div.querySelector(".e-connectorpoint-right");
                    $(proxy._leftConnectorPoint).addClass("e-connectorpoint-hover");
                    $(proxy._rightConnectorPoint).addClass("e-connectorpoint-hover");
                }
                else if ($(div).hasClass("e-childContainer") && proxy.model.predecessorMapping && proxy._falseLine) {
                    proxy._childLeftConnectorPoint = div.querySelector(".e-connectorpoint-left");
                    proxy._childRightConnectorPoint = div.querySelector(".e-connectorpoint-right");
                    $(proxy._childLeftConnectorPoint).addClass("e-connectorpoint-hover");
                    $(proxy._childRightConnectorPoint).addClass("e-connectorpoint-hover");
                }
                else if ($(div).hasClass("e-gantt-milestone-container") && proxy.model.predecessorMapping && proxy._falseLine) {
                    proxy._childLeftConnectorPoint = div.querySelector(".e-connectorpoint-left");
                    proxy._childRightConnectorPoint = div.querySelector(".e-connectorpoint-right");
                    $(proxy._childLeftConnectorPoint).addClass("e-connectorpoint-hover");
                    $(proxy._childRightConnectorPoint).addClass("e-connectorpoint-hover");
                }
                else if ($(div).hasClass("e-parentContainer") && proxy.model.predecessorMapping && !proxy._falseLine) {

                    proxy._leftConnectorPoint = div.querySelector(".e-connectorpoint-left");
                    proxy._rightConnectorPoint = div.querySelector(".e-connectorpoint-right");
                    $(proxy._leftConnectorPoint).addClass("e-connectorpoint-hover");
                    $(proxy._rightConnectorPoint).addClass("e-connectorpoint-hover");

                    if($(div).hasClass("e-manualparenttaskbar"))
                    {
                        $(proxy._leftConnectorPoint).addClass("e-gantt-manualparenttaskbar-connectorpoint-hover");
                        $(proxy._rightConnectorPoint).addClass("e-gantt-manualparenttaskbar-connectorpoint-hover");
                    }

                }
            }
        },


        //removing styles for taskbar helper elements
        _removeEditingElements: function () {
            var proxy = this;
            $(proxy._leftResizerGripper).removeClass("gripper");
            $(proxy._rightResizerGripper).removeClass("gripper");

            if (proxy.model.progressMapping) {
                $(proxy._progressHandle).removeClass("e-progresshandle");
                $(proxy._progressHandleChild).removeClass("e-progresshandleafter");
            }


            //Remove Connector points in chart
            if (proxy.model.enablePredecessorEditing) {
                if (proxy.model.predecessorMapping && proxy._mouseDown == false) {

                    $(proxy._leftConnectorPoint).removeClass('e-connectorpoint-hover').removeClass('e-gantt-manualparenttaskbar-connectorpoint-hover');
                    $(proxy._rightConnectorPoint).removeClass('e-connectorpoint-hover').removeClass('e-gantt-manualparenttaskbar-connectorpoint-hover');
                    proxy._leftConnectorPoint = null;
                    proxy._rightConnectorPoint = null;
                }

                if (proxy.model.predecessorMapping && proxy._leftConnectorPoint !== null && proxy._mouseDown == true || proxy._childLeftConnectorPoint) {
                    $(proxy._childLeftConnectorPoint).removeClass("e-connectorpoint-hover");
                    $(proxy._childRightConnectorPoint).removeClass("e-connectorpoint-hover");
                    //remove curret target predecessor in tooltip    
                    if (proxy._predecessorTooltip) {
                        $table = proxy._predecessorTooltip.find("table");
                        $table.find("tbody").find("tr:eq(1)").find("td:eq(2)").text("");
                        $table.find("tbody").find("tr:eq(1)").find("td:eq(3)").text("");
                        $td = $table.find("tbody").find("tr:eq(0)").find("td:eq(0)").removeClass();
                        //$td.text("False");
                        $td.addClass('e-predecessor-false');
                    }
                }
            }
        },


        refreshHeight:function(){

            var proxy = this;
            proxy._$bodyContainer.ejScroller("refresh");
        },

        //mousedown event for ganttchart
        _mousedown: function (e) {
            if (e.which == 2 || e.which == 3) //2 for mouseWheel, 3 for rightClick button
                return false;
            var proxy = this;
            proxy._clearTooltip();
            proxy._mouseDown = true;
            args = {};
            //proxy._clearContextMenu();
            var $target = $(e.target),
            $ganttGridRows = proxy.getGanttChartRows(),
            row = $target.closest('tr.e-ganttrowcell'),
            recordIndexr = $ganttGridRows.index(row),
            item = proxy.model.currentViewData[recordIndexr],
            parentItem = item.parentItem,
            div = $target[0].parentNode,
            matched = jQuery.uaMatch(navigator.userAgent),
            model = this.model;

            if (ej.isNullOrUndefined(item)) {
                return;
            }

            if (e.type == "touchstart") {
                $(".e-connectortouchpoint").addClass("e-enableconnectortouchpoint");
            }

            proxy._editingItem = item;
            proxy._editingTarget = $target;
            proxy._allowExpandCollapse = true;

            if ($(div).hasClass("progressbarresizer-right")) {
                div = div.parentNode;
            }
            else if ($(div).hasClass("e-gantt-childtaskbar-progress")) {
                div = $(div).closest("div.e-childContainer");
            }
            else if ($(div).hasClass("progressbarhandler")) {
                div = $target.closest(".e-childContainer")[0];
            }
            else {
                div = $(div).closest("div.e-childContainer,div.e-parentContainer,.e-gantt-milestone,div.e-gantt-milestone-container");
            }
            if ($(div).hasClass("e-childContainer") ||
                ($(div).hasClass("e-gantt-milestone")) || $(div).hasClass('e-parentContainer') || $(div).hasClass("e-gantt-milestone-container")) {

                $(row).addClass("e-editmode");
                proxy._mouseTarget = e;
            }

            if (proxy.model.allowGanttChartEditing && proxy.model.readOnly == false && ($(div).hasClass("e-childContainer")
                || ($(div).hasClass("e-gantt-milestone")) || $(div).hasClass("e-gantt-milestone-container") || $(div).hasClass('e-parentContainer'))) { //mouse down on drag points in child and milestone container and parent container also included 

                if (e.target.style.cursor == "e-resize" && ($(div).hasClass("e-childContainer")
                    || ($(div).hasClass("e-gantt-milestone")))
                    || (e.type == "touchstart" && e.target.className == "taskbarresizer-left")) {
                    proxy._updateEditingType();
                    proxy._leftResizing = true;
                }

                if (e.target.style.cursor == "w-resize" && ($(div).hasClass("e-childContainer")
                    || ($(div).hasClass("e-gantt-milestone")) || $(div).hasClass("e-parentContainer"))
                    || (e.type == "touchstart" && e.target.className == "taskbarresizer-right")) {
                        proxy._updateEditingType();
                    proxy._rightResizing = true;

                }
                var prorgressResize = $(e.target).closest(".progressbarresizer-right");
                if ((e.target.style.cursor == "col-resize" || (prorgressResize.length && prorgressResize[0].style.cursor == "col-resize")) && ($(div).hasClass("e-childContainer")
                    || ($(div).hasClass("e-gantt-milestone")))
                    || (e.type == "touchstart" && e.target.className == "progressbarresizer-right")) {
                    proxy._updateEditingType();
                    proxy._progressResizing = true;
                }
                var childTaskbar = $(e.target).closest("[style*='cursor: move']");
                if ((e.target.style.cursor == "move" || (childTaskbar.length && childTaskbar[0].style.cursor == "move")) && ($(div).hasClass("e-childContainer")
                    || ($(div).hasClass("e-gantt-milestone")) || $(div).hasClass("e-gantt-milestone-container")) || $($target[0]).hasClass("e-gantt-manualparenttaskbar")) {
                    proxy._updateEditingType();
                    proxy._allowDragging = true;
                }
                if (e.target.style.cursor == "" && ((childTaskbar.length && childTaskbar[0].style.cursor == "") || childTaskbar.length==0) && ($(div).hasClass("e-childContainer")
                  || ($(div).hasClass("e-gantt-milestone")) || $(div).hasClass("e-gantt-milestone-container")) || (item.isAutoSchedule && $($target).hasClass("e-gantt-manualparenttaskbar"))) {
                    proxy._updateEditingType();
                    if (e.target.className == "taskbarresizer-left e-icon" || e.target.className == "taskbarresizer-left e-icon gripper")
                        proxy._leftResizing = true;
                    else if (e.target.className == "taskbarresizer-right e-icon" || e.target.className == "taskbarresizer-right e-icon gripper")
                        proxy._rightResizing = true;
                    else if ((e.target.className == "progressbarhandler e-progresshandle") || (e.target.className == "e-progresshandler-element")
                        || (e.target.className == "e-progresshandlerafter-element") || (e.target.className == "progressbarresizer-right"))
                        proxy._progressResizing = true;
                    else if ((e.target.className == "e-gantt-childtaskbar-progress  progressbar") || (e.target.className == "e-tasklabel") || (e.target.className == "e-gantt-childtaskbar") || (e.target.className == "e-gantt-milestone milestone-top") ||
                        (e.target.className == "e-gantt-milestone milestone-bottom") || $(e.target).hasClass("e-gantt-milestone") || $(e.target).closest(".e-gantt-milestone").length > 0 || $(e.target).closest(".e-gantt-childtaskbar").length > 0)
                        proxy._allowDragging = true;
                }

                // ON drag points initiate the false line and edit type for predecessor

                if (proxy.model.enablePredecessorEditing) {
                    if (e.target.style.cursor == "pointer" && ($(div).hasClass("e-childContainer")
                     || ($(div).hasClass("e-gantt-milestone")) || $(div).hasClass("e-gantt-milestone-container") || $(div).hasClass('e-parentContainer'))
                         || (e.type == "touchstart" && (e.target.className == "e-connectorpoint-right" || e.target.className == "e-connectorpoint-left"
                         || e.target.className == "e-connectorpoint-right e-connectorpoint-hover" || e.target.className == "e-connectorpoint-left e-connectorpoint-hover"))) {
                        proxy._updateEditingType();
                        proxy._editPredecessor = true;
                        if ($target.hasClass('e-connectorpoint-left') || $target.hasClass('e-connectorpoint-left e-connectorpoint-hover')) {
                            proxy._prevItem.predecessorTarget = 'Start';
                        }
                        else if ($target.hasClass('e-connectorpoint-right') || $target.hasClass('e-connectorpoint-right e-connectorpoint-hover')) {
                            proxy._prevItem.predecessorTarget = 'Finish';
                        }
                    }
                }




                if (!e) e = window.event;
                if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9) {
                    e.originalEvent.pageX = e.originalEvent.clientX;
                    e.originalEvent.pageY = e.originalEvent.clientY;
                }

                if (e.originalEvent.pageX || e.originalEvent.pageY) {
                    proxy._posX1 = proxy._currMousePosX = e.originalEvent.pageX;
                    proxy._posY1 = proxy._currMousePosY = e.originalEvent.pageY;
                    proxy.dragPosX = e.originalEvent.pageX;
                }
                else if (e.originalEvent.clientX || e.originalEvent.clientY) {
                    proxy._posX1 = proxy.dragPosX = e.originalEvent.clientX + document.body.scrollLeft
                        + document.documentElement.scrollLeft;
                    proxy._posY1 = e.originalEvent.clientY + document.body.scrollTop
                            + document.documentElement.scrollTop;
                }
                else if (e.originalEvent && e.originalEvent.changedTouches
                    && e.originalEvent.changedTouches.length > 0) {
                    proxy._posX1 = proxy._currMousePosX = e.originalEvent.changedTouches[0].pageX;
                    proxy._posY1 = proxy._currMousePosY = e.originalEvent.changedTouches[0].pageY;
                    proxy.dragPosX = e.originalEvent.changedTouches[0].pageX;
                }

                proxy._prevItem.left = item.left;
                proxy._prevItem.status = item.status;
                proxy._prevItem.duration = item.duration;
                proxy._prevItem.startDate = item.startDate;
                proxy._prevItem.endDate = item.endDate;
                proxy._prevItem.width = item.width;

                proxy._parentCollectionPreviousValues = proxy._getParentCollectionPreviousValues(item);
                //For false line starting point
                if (proxy.model.enablePredecessorEditing) {
                    proxy._connectorPointX = proxy._currMousePosX - proxy._$bodyContent.offset().left;
                    proxy._connectorPointY = proxy._currMousePosY - proxy._$bodyContent.offset().top;
                }


                $(proxy._$bodyContainer).bind("mousemove", $.proxy(proxy.handleMouseMove, proxy));                
            }
             
                proxy._appendTooltip($target, recordIndexr);

            proxy._trigger("clearColumnMenu");
            //return false;
        },

        //Get previous parent item values
        _getParentCollectionPreviousValues: function (item) {
            var record = item,
                parentPrevItem = {},
                allParentRecords = [];
            do {               
                parentItem = record.parentItem;
                if (!ej.isNullOrUndefined(parentItem)) {
                    parentPrevItem.left = parentItem.left;
                    parentPrevItem.status = parentItem.status;
                    parentPrevItem.duration = parentItem.duration;
                    parentPrevItem.startDate = parentItem.startDate;
                    parentPrevItem.endDate = parentItem.endDate;
                    parentPrevItem.width = parentItem.width;
                    parentPrevItem.index = parentItem.index;

                    if (!parentPrevItem.isAutoSchedule) {
                        parentPrevItem.manualLeft = parentItem.manualLeft;
                        parentPrevItem.manualStartDate = parentItem.manualStartDate;
                        parentPrevItem.manualEndDate = parentItem.manualEndDate;
                        parentPrevItem.manualDuration = parentItem.manualDuration;
                    }
                    allParentRecords.push(parentPrevItem);
                    record = parentItem;
                    parentPrevItem = {};
                }
            } while (record.parentItem);
            return allParentRecords;
        },

        handleMouseMove: function (e) {
            this._updateOnmouseMove(e);

        },


        //Handler for MouseUp event in ganttchart
        _handleMouseUp: function (e) {

            var proxy = this,
                args = {},
                $ganttGridRows = proxy.getGanttChartRows(),
                $target, row, recordIndexr = 0, item,
                x1 = proxy._posX1,
                y1 = proxy._posY1,
                x2, y2,
                tooltipElement, tooltiptable, tooltipbody;

            if (ej.isNullOrUndefined(e.pageX)) {
                x2 = e.originalEvent.changedTouches[0].pageX;
                y2 = e.originalEvent.changedTouches[0].pageY;
                if (!ej.isNullOrUndefined(proxy._predecessorTooltip))
                e.target = document.elementFromPoint(x2, y2);
            }
            else {
                x2 = e.pageX;
                y2 = e.pageY;
            }

            
            //Calculate and validate predecessor and draw connectorline after second connector point connects
            if (($(e.target).hasClass('e-connectorpoint-left') || $(e.target).hasClass('e-connectorpoint-right') || $(e.target).hasClass('e-connectortouchpoint'))
                && proxy._falseLine && !$(e.target).parent().hasClass('e-parentContainer')) {
                proxy._trigger("cancelEditCell");
                if ($(e.target).hasClass('e-connectortouchpoint'))
                    e.target = $(e.target).parent();
                var newArgs = proxy._secondMouseOverConnectorPoint(e, true);
                args.currentRecord = newArgs.currentRecord;
                args.fromItem = newArgs.fromItem;
                args.toItem = newArgs.toItem;
                args.predecessor = newArgs.predecessor;
                args.predecessorString = newArgs.predecessorString;
                args.requestType = "validatePredecessor";
                if (!proxy._trigger("actionBegin",args)) {
                    if (newArgs.predecessorValidation) {
                        newArgs.requestType = "drawConnectorLine";
                        proxy._completeAction(newArgs);
                    }
                }
            }

            if (proxy._editingTarget != null && proxy._editingItem != null) {
                $target = proxy._editingTarget,
                row = $target.closest('tr.e-ganttrowcell'),
                recordIndexr = $ganttGridRows.index(row),
                item = proxy._editingItem;
                if ($(row).hasClass("e-editmode")) {
                    $(row).removeClass("e-editmode");
                    proxy._mouseTarget = null;
                }
            }

            $("#ganttviewerbodyContianer" + proxy._id).unbind("mousemove");
            proxy._mouseDown = false;
            proxy._clearTooltip();
            if (x1 != x2 || y1 != y2) {
                proxy._editingTarget = null;
                proxy._editingItem = null;
                proxy._$ganttChartContainer[0].style.cursor = "auto";

                if (item != null && (proxy._allowDragging || proxy._leftResizing || proxy._rightResizing || proxy._progressResizing)) {
                    args.editingFields = { startdate: item.startDate, enddate: item.endDate, progress: item.status, duration: item.duration, durationunit: item.durationUnit };
                    args.data = item;
                    args.previousData = proxy._prevItem;
                    args.dragging = proxy._allowDragging;
                    args.leftResizing = proxy._leftResizing;
                    args.rightResizing = proxy._rightResizing;
                    args.progressResizing = proxy._progressResizing;
                    proxy._taskbarEdited(args);
                }

                if (args.cancel) {
                    proxy._getPrevItem(item, recordIndexr);
                    if (item.parentItem)
                        proxy._getParentPreviousValue();
                    if (proxy.model.predecessorMapping && (args.dragging || args.rightResizing || args.leftResizing)) {
                        args.requestType = "updateConnectors";
                        args.ganttRecord = item;
                        proxy._trigger("actionComplete", args);
                    }
                }
                proxy._updateEditingType();

                //Remove drag point and false lines on mouse up
                proxy._falseLine && proxy._falseLine.remove();
                proxy._falseLine = null;
                proxy._predecessorTooltip && proxy._predecessorTooltip.remove();
                proxy._predecessorTooltip = null;
                $(proxy._leftConnectorPoint).removeClass("e-connectorpoint-hover").removeClass("e-gantt-manualparenttaskbar-connectorpoint-hover");
                $(proxy._rightConnectorPoint).removeClass("e-connectorpoint-hover").removeClass("e-gantt-manualparenttaskbar-connectorpoint-hover");
                $(proxy._childRightConnectorPoint).removeClass("e-connectorpoint-hover");
                $(proxy._childLeftConnectorPoint).removeClass("e-connectorpoint-hover");
                proxy._leftConnectorPoint = null;
                proxy._rightConnectorPoint = null;
                proxy._childRightConnectorPoint = null;
                proxy._childLeftConnectorPoint = null;
                proxy._trigger("clearColumnMenu");
            }
            else {
                proxy._newXYPos = false;
                proxy._$ganttChartContainer[0].style.cursor = "auto";
                proxy._allowDragging = false;
                if (item && proxy.model.enableTaskbarTooltip) {

                    proxy._predecessorTooltip && proxy._predecessorTooltip.remove();
                    proxy._predecessorTooltip = null;

                    tooltipElement = {
                        ttipstartDate: this._getFormatedDate(item.startDate, this.model.dateFormat, this.model.locale),
                        ttipendDate: this._getFormatedDate(item.endDate, this.model.dateFormat, this.model.locale),
                        ttipduration: item.duration,
                        ttipprogress: item.status.toString(),
                        ttiptaskname: item.taskName,
                        ttipdurationunit: item.durationUnit
                    };


                    tooltiptable = ej.buildTag("table.e-tooltiptable", "", {}, { 'cellspacing': '5' });


                    if (!proxy.model.tooltipTemplate && !proxy.model.tooltipTemplateId) {
                        proxy.tooltipState = "";
                        tooltipbody = ej.buildTag("tbody", $.render[proxy._id + "tooltipTemplate"](tooltipElement), {}, {});
                        tooltiptable.append(tooltipbody);
                        proxy._mouseHoverTooltip = ej.buildTag("div.e-tooltipgantt#tooltipgantt" + proxy._id + "", tooltiptable,
                           { 'position': 'absolute', 'z-index': proxy._getmaxZindex() + 1, 'border-radius': '5px' }, {});

                        proxy._mouseHoverTooltip.innerHTML = "<table>" + tooltiptable[0].innerHTML + "</table>";

                        //Providing a time delay to render the tooltip to improve UI
                        proxy._tooltipTimer = setTimeout(function () {
                            $(document.body).append(proxy._mouseHoverTooltip)
                            proxy._updateTooltipPosition(proxy._mouseHoverTooltip, x2, y2 + 20);
                        }, 300);
                    }
                    else if (proxy.model.tooltipTemplate) {
                        proxy._mouseHoverTooltip = ej.buildTag("div.e-tooltipgantt#tooltipgantt" + proxy._id + "", "",
                            { 'position': 'absolute', 'z-index': proxy._getmaxZindex() + 1, 'border-radius': '5px' }, {});

                        proxy.tooltipState = "Template";
                        var tooltipbody = ej.buildTag("tbody", $.render[proxy._id + "tooltipTemplate"](item), {}, {});
                        proxy._mouseHoverTooltip[0].innerHTML = "<table>" + tooltipbody[0].innerHTML + "</table>";

                        //Providing a time delay to render the tooltip to improve UI
                        proxy._tooltipTimer = setTimeout(function () {
                            $(document.body).append(proxy._mouseHoverTooltip)
                            proxy._updateTooltipPosition(proxy._mouseHoverTooltip, x2, y2 + 20);
                        }, 300);
                    }
                    else if (proxy.model.tooltipTemplateId) {
                        proxy._mouseHoverTooltip = ej.buildTag("div.e-tooltipgantt#tooltipgantt" + proxy._id + "", "",
                               { 'position': 'absolute', 'z-index': proxy._getmaxZindex() + 1, 'border-radius': '5px' }, {});

                        proxy.tooltipState = "TemplateID";
                        var tooltipbody = ej.buildTag("tbody", $.render[proxy._id + "tooltipTemplate"](item), {}, {});
                        proxy._mouseHoverTooltip[0].innerHTML = "<table>" + tooltipbody[0].innerHTML + "</table>";

                        //Providing a time delay to render the tooltip to improve UI
                        proxy._tooltipTimer = setTimeout(function () {
                            $(document.body).append(proxy._mouseHoverTooltip);
                            proxy._updateTooltipPosition(proxy._mouseHoverTooltip, x2, y2 + 20);
                        }, 300);
                    }
                    $(proxy._mouseHoverTooltip).addClass("customTooltip");
                    proxy._trigger("clearColumnMenu");
                }
            }
            if (e.type == "touchend") {
                $(".e-connectortouchpoint").removeClass("e-enableconnectortouchpoint");
            }
        },

        getChildCount: function (record, count) {
            var currentRecord, proxy = this;
            if (!record.hasChildRecords)
                return 0;
            for (var i = 0; i < record.childRecords.length; i++) {
                currentRecord = record.childRecords[i];
                count++;
                if (currentRecord.hasChildRecords) {
                    count = proxy.getChildCount(currentRecord, count);
                }
            }
            return count;
        },

        // Mapping the critical path ID's, Index and Collections from gantt to ganttchart
        criticalDataMapping: function (criticalPathIds, condition, collection, collectionTaskId) {
            if (condition == true) {
                this.model.isCriticalPathEnable = true;
                if (!ej.isNullOrUndefined(criticalPathIds)) {
                    this.model.criticalPathCollection = criticalPathIds;
                    this.model.detailPredecessorCollection = collection;
                    this.collectionTaskId = collectionTaskId;
                }
            }
            if (condition == false) {
                this.model.isCriticalPathEnable = false;
            }
        },

        // Render color to the critical task.
        criticalPathColor: function (criticalPathIds, condition, collection, collectionTaskId) {
            if (condition == true) {
                if (!ej.isNullOrUndefined(criticalPathIds)) {
                    this._refresh();
                    if (!ej.isNullOrUndefined(collection))
                        this.criticalConnectorLine(criticalPathIds, collection, true, collectionTaskId);
                }
            }
            if (condition == false) {
                this.criticalConnectorLine(criticalPathIds, collection, false, collectionTaskId);
                this._refresh();
            }
        },

        // Render color to the critical connector lines.
        criticalConnectorLine: function (criticalPathIds, collection, condition, collectionTaskId) {
            if (condition == false) {
                this.element.find(".e-line").removeClass("e-criticalconnectorline");
                this.element.find(".connectorline-rightarrow").removeClass("e-criticalconnectorlinerightarrow");
                this.element.find(".connectorline-leftarrow").removeClass("e-criticalconnectorlineleftarrow");
            } else if (collection.length != 0) {
                var index = 0, currentdata, checking = [], checkint;
                for (var xx = 0; xx < this.model.criticalPathCollection.length; xx++) {
                    index = collectionTaskId.indexOf(this.model.criticalPathCollection[xx]);
                    currentdata = collection[index];
                    if (index != -1 && currentdata.to) {
                        checking = currentdata.to.split(",");
                        for (var m = 0; m < checking.length; m++) {
                            checkint = parseInt(checking[m]);
                            if (criticalPathIds.indexOf(checkint) != -1) {
                                this.element.find("#ConnectorLineparent" + currentdata.taskid + "child" + checkint).find(".e-line").addClass("e-criticalconnectorline");
                                this.element.find("#ConnectorLineparent" + currentdata.taskid + "child" + checkint).find(".connectorline-rightarrow").addClass("e-criticalconnectorlinerightarrow");
                                this.element.find("#ConnectorLineparent" + currentdata.taskid + "child" + checkint).find(".connectorline-leftarrow").addClass("e-criticalconnectorlineleftarrow");
                            }
                        }
                    }
                }
            }
        },

        //get the Expand status of GridRecord
        _getCollapsedParentItem: function (record) {
            var parentRecord = record.parentItem;
            if (parentRecord) {
                if (this._getExpandStatus(parentRecord) === true) {
                    return parentRecord;
                } else {
                    return this._getCollapsedParentItem(parentRecord)
                }
            }
            else
            {
                return null;
            }
        },
        /* scroll to selected record */
        updateScrollBar: function () {
            var proxy = this,
                model = proxy.model, horizontalScrollBarHeight,
                currentUpdatedRecords, recordIndex,
                isInViewPortAbove, isInViewPortBelow;

            currentUpdatedRecords = proxy.getExpandedRecords(model.updatedRecords);
            recordIndex = currentUpdatedRecords.indexOf(model.selectedItem);

            if (!model.selectedItem || recordIndex == -1)
                return;

            var rowTop = recordIndex * model.rowHeight,
                rowBottom = rowTop + model.rowHeight,
                scrollTop,
                containerWidth,
                scrollerExist = proxy._$bodyContainer.children(".e-content").length;

            if (scrollerExist)
                scrollTop = proxy._$bodyContainer.children(".e-content").scrollTop();
            else
                scrollTop = proxy._$bodyContainer.scrollTop();

            if (proxy._$bodyContainer.ejScroller("isHScroll") || proxy.element.find(".e-borderbox").length > 0) {
                horizontalScrollBarHeight = 18; /* default horizontal scrollbar height*/
            }

            isInViewPortAbove = (rowTop < scrollTop);
            isInViewPortBelow = (scrollTop + proxy._viewportHeight - horizontalScrollBarHeight) < rowBottom;

            if (isInViewPortAbove || isInViewPortBelow) {

                if ((rowTop + proxy._viewportHeight) > currentUpdatedRecords.length * model.rowHeight) {
                    rowTop = currentUpdatedRecords.length * model.rowHeight - proxy._viewportHeight;

                    if (isInViewPortBelow)
                        rowTop += horizontalScrollBarHeight;
                }
                proxy._$bodyContainer.ejScroller("scrollY", rowTop, true);

                if (model.enableVirtualization) {
                    proxy.focusGanttElement();
                }
            }
        },

        //In virtualization get expaned records from total record collection only
        getExpandedRecords: function (records) {
            var proxy = this;
            var resultRecord = records.filter(function (record) {
                return proxy._getExpandStatus(record) == true;
            });
            return resultRecord;
        },


        //keyPressed event for perform the keynavigate selection in gantt
        _keyPressed: function (action, target, arg, e) {

            var proxy = this,
                model = this.model,
                selectingRowIndex,
                updatedRecords = model.updatedRecords,
                expandedRecords = proxy.getExpandedRecords(updatedRecords),
                currentSelectingRecord;

            e.stopImmediatePropagation();
            e.preventDefault();

            if (!model.allowKeyboardNavigation)
                return true;

            switch (action) {

                case "downArrow":
                    if (updatedRecords.length > 0 && model.selectedItem) {
                        //get the last row index of the ganttchart control
                        lastRowIndex = updatedRecords.length - 1;
                        if (model.selectedRowIndex != lastRowIndex) {

                            selectingRowIndex = expandedRecords.indexOf(model.selectedItem);
                            currentSelectingRecord = expandedRecords[selectingRowIndex + 1];
                            selectingRowIndex = updatedRecords.indexOf(currentSelectingRecord);

                            if (currentSelectingRecord && selectingRowIndex <= lastRowIndex && !proxy._rowSelectingEventTrigger(model.selectedRowIndex, selectingRowIndex)) {
                                proxy.selectRows(selectingRowIndex);
                                proxy.focusGanttElement();
                                proxy.updateScrollBar();
                                proxy._rowSelectedEventTrigger(model.selectedRowIndex);
                            }
                        }
                    }
                    break;

                    //select the previous row by press down arrow key
                case "upArrow":
                    if (model.selectedRowIndex !== 0 && updatedRecords.length > 0 && model.selectedItem) {

                        selectingRowIndex = expandedRecords.indexOf(model.selectedItem);
                        currentSelectingRecord = expandedRecords[selectingRowIndex - 1];
                        selectingRowIndex = updatedRecords.indexOf(currentSelectingRecord);

                        if (!proxy._rowSelectingEventTrigger(model.selectedRowIndex, selectingRowIndex)) {
                            proxy.selectRows(selectingRowIndex);
                            proxy.focusGanttElement();
                            proxy.updateScrollBar();
                            proxy._rowSelectedEventTrigger(model.selectedRowIndex);
                        }
                    }
                    break;

                    //select the first row while press the Home key
                case "firstRowSelection":
                    if (updatedRecords.length > 0) {
                        if (!proxy._rowSelectingEventTrigger(model.selectedRowIndex, 0)) {
                            proxy.selectRows(0);
                            proxy.focusGanttElement();
                            proxy.updateScrollBar();
                            proxy._rowSelectedEventTrigger(0);
                        }
                    }
                    break;

                case "lastRowSelection":

                    if (updatedRecords.length > 0) {

                        lastRowIndex = expandedRecords.length - 1;
                        currentSelectingRecord = expandedRecords[lastRowIndex];
                        selectingRowIndex = updatedRecords.indexOf(currentSelectingRecord);

                        if (!proxy._rowSelectingEventTrigger(model.selectedRowIndex, selectingRowIndex)) {
                            proxy.selectRows(selectingRowIndex);
                            proxy.focusGanttElement();
                            proxy.updateScrollBar();
                            proxy._rowSelectedEventTrigger(selectingRowIndex);
                        }
                    }
                    break;

                // expand the child task by press right arrow
                case "rightArrow":
                    var rowIndex = proxy.model.selectedRowIndex,
                    record = proxy.model.updatedRecords[rowIndex],
                    args = {},
                    isExpandCollapseEnabeled;
                    args.data = record;
                    args.recordIndex = rowIndex;
                    args.expanded = true;
                    if (record) {
                        if (!proxy._rowSelectingEventTrigger() && record.hasChildRecords && !record.expanded) {
                            if (rowIndex >= 0)
                                isExpandCollapseEnabeled = proxy._trigger("expanding", args);
                            if (model.enableVirtualization)
                                proxy.focusGanttElement();
                        }
                    }
                    break;
                //collapse the child task by press left arrow 
                case "leftArrow":
                    var rowIndex = proxy.model.selectedRowIndex,
                        record = proxy.model.updatedRecords[rowIndex],
                        args = {},
                        isExpandCollapseEnabeled;   
                        args.data = record;
                        args.recordIndex = rowIndex;
                        args.expanded = false;
                        if (record) {
                            if (!proxy._rowSelectingEventTrigger() && record.hasChildRecords && record.expanded) {
                                if (rowIndex >= 0)
                                    proxy._trigger("collapsing", args);
                                if (model.enableVirtualization)
                                    proxy.focusGanttElement();
                            }
                        }
                    break;
                case "deleteRecord":
                    if (model.editSettings.allowDeleting && model.selectedRowIndex >= 0) {
                        proxy._trigger("deleteRow");
                        proxy.focusGanttElement();
                    }
                    break;
                case "totalRowCollapse":
                    args = {};
                    args.requestType = "collapseAll";
                    proxy._trigger("expandAllCollapseAllRequest", args);
                    break;
                case "totalRowExpand":
                    args = {};
                    args.requestType = "expandAll";
                    proxy._trigger("expandAllCollapseAllRequest", args);
                    break;
            }

            return true;
        },

        _rowSelectingEventTrigger: function (previousIndex, recordIndex) {

            var proxy = this,
                model = proxy.model,
                args = {};
            if (model.selectionMode == "row") {
            args.previousIndex = previousIndex;
            args.recordIndex = recordIndex;
            return proxy._trigger('rowSelecting', args);
            }
        },

        _rowSelectedEventTrigger: function (index) {
            var proxy = this,
                args;
            if (proxy.model.selectionMode == "row") {
            args = {
                data: proxy.model.selectedItem,
                target: "ejGanttChart",
                recordIndex: index
            };
            proxy._trigger("rowSelected", args);
            }
        },

        _updateEditingType: function () {
            var proxy = this;
            proxy._leftResizing = false;
            proxy._allowDragging = false;
            proxy._rightResizing = false;
            proxy._progressResizing = false;
            proxy._editPredecessor = false;
        },
        /*Get Number of holidays in between startdate and enddate*/
        _getHolidaysCount: function (startDate, endDate) {
            var proxy = this,
            holidays = this.model.holidays, holidaysCount = 0;

            for (var count = 0; count < holidays.length; count++) {
                if (proxy._getDateFromFormat(holidays[count].day) >= startDate && proxy._getDateFromFormat(holidays[count].day) <= endDate) {
                    holidaysCount += 1;
                }
            }
            return holidaysCount;
        },

        //update offset values for predecessor
        updateConnectorLineOffset: function (item) {

            var parentGanttRecord,
                model = this.model,
                predecessor = item.predecessor,
                predecessorValue = [],
                parentStartDate,
                parentEndDate,
                childStartDate,
                childEndDate,
                includeWeekend = model.includeWeekend,
                weekendOffset, childGanttRecord, dayOffset;

            if (predecessor) {
                for (var i = 0; i < predecessor.length; i++) {
                    if ((predecessor[i].to === item['taskId'].toString())) {

                        parentGanttRecord = model.flatRecords[model.ids.indexOf(predecessor[i].from)];
                        childGanttRecord = model.flatRecords[model.ids.indexOf(predecessor[i].to)];
                        parentStartDate = new Date(parentGanttRecord.startDate);
                        parentEndDate = new Date(parentGanttRecord.endDate);
                        childStartDate = new Date(childGanttRecord.startDate);
                        childEndDate = new Date(childGanttRecord.endDate);

                        if (predecessor[i].predecessorsType == "FS") {

                            if (childGanttRecord.left < (parentGanttRecord.left + parentGanttRecord.width)) {

                                dayOffset = ((parentGanttRecord.left + parentGanttRecord.width)
                                    - childGanttRecord.left) / this.model.perDayWidth;

                                dayOffset = childGanttRecord.isMilestone == true ? (dayOffset - 1) : dayOffset;
                                predecessor[i].offset = Math.round(-dayOffset);
                            }
                            else if (childGanttRecord.left > (parentGanttRecord.left + parentGanttRecord.width)) {
                                dayOffset = (childGanttRecord.left - (parentGanttRecord.left + parentGanttRecord.width))
                                    / this.model.perDayWidth;

                                if (dayOffset >= 0)
                                    predecessor[i].offset = Math.round(dayOffset);
                            }
                            else {
                                predecessor[i].offset = 0;
                            }
                            /*WeekEnd , Holidays deduction*/
                            if (predecessor[i].offset > 0) {
                                if (!includeWeekend) {
                                    var weekEndDays = this._calculateWeekendDays(parentEndDate, new Date(childStartDate))
                                    predecessor[i].offset -= weekEndDays;
                                }
                                predecessor[i].offset -= this._getHolidaysCount(parentEndDate, childStartDate);
                            } else if (predecessor[i].offset < 0) {
                                if (!includeWeekend) {
                                    var weekEndDays = this._calculateWeekendDays(new Date(childStartDate), parentEndDate)
                                    predecessor[i].offset += weekEndDays;
                                }
                                predecessor[i].offset += this._getHolidaysCount(childStartDate, parentEndDate);
                            }

                        }
                        if (predecessor[i].predecessorsType == "SS") {
                            if (childGanttRecord.left < parentGanttRecord.left) {
                                dayOffset = ((parentGanttRecord.left) - childGanttRecord.left) / this.model.perDayWidth;
                                predecessor[i].offset = Math.round(-dayOffset);
                            }
                            else if (childGanttRecord.left > parentGanttRecord.left) {
                                dayOffset = (childGanttRecord.left - (parentGanttRecord.left)) / this.model.perDayWidth;
                                predecessor[i].offset = Math.round(dayOffset);
                            } else {
                                predecessor[i].offset = 0;
                            }

                            /* holidays and weekend days deduction*/
                            if (predecessor[i].offset > 0) {
                                if (!includeWeekend) {
                                    var weekEndDays = this._calculateWeekendDays(parentStartDate, new Date(childStartDate))
                                    predecessor[i].offset -= weekEndDays;
                                }
                                predecessor[i].offset -= this._getHolidaysCount(parentStartDate, childStartDate);
                            } else if (predecessor[i].offset < 0) {
                                if (!includeWeekend) {
                                    var weekEndDays = this._calculateWeekendDays(new Date(childStartDate), parentStartDate)
                                    predecessor[i].offset += weekEndDays;
                                }
                                predecessor[i].offset += this._getHolidaysCount(childStartDate, parentStartDate);
                            }
                        }
                        if (predecessor[i].predecessorsType == "SF") {
                            if ((childGanttRecord.left + childGanttRecord.width) < parentGanttRecord.left) {
                                dayOffset = ((parentGanttRecord.left) - (childGanttRecord.left + childGanttRecord.width))
                                    / this.model.perDayWidth;
                                predecessor[i].offset = Math.round(-dayOffset);
                            } else if ((childGanttRecord.left + childGanttRecord.width) > parentGanttRecord.left) {

                                dayOffset = ((childGanttRecord.left + childGanttRecord.width) -
                                    (parentGanttRecord.left)) / this.model.perDayWidth;
                                predecessor[i].offset = Math.round(dayOffset);
                            }
                            else {
                                predecessor[i].offset = 0;
                            }
                            /* holidays and weekend days deduction*/
                            if (predecessor[i].offset > 0) {
                                if (!includeWeekend) {
                                    var weekEndDays = this._calculateWeekendDays(parentStartDate, new Date(childEndDate))
                                    predecessor[i].offset -= weekEndDays;
                                }
                                predecessor[i].offset -= this._getHolidaysCount(parentStartDate, childEndDate);
                            } else if (predecessor[i].offset < 0) {
                                if (!includeWeekend) {
                                    var weekEndDays = this._calculateWeekendDays(new Date(childEndDate), parentStartDate)
                                    predecessor[i].offset += weekEndDays;
                                }
                                predecessor[i].offset += this._getHolidaysCount(childEndDate, parentStartDate);
                            }
                        }

                        if (predecessor[i].predecessorsType == "FF") {

                            if ((childGanttRecord.left + childGanttRecord.width) < (parentGanttRecord.left + parentGanttRecord.width)) {
                                dayOffset = ((parentGanttRecord.left + parentGanttRecord.width) -
                                    (childGanttRecord.left + childGanttRecord.width)) / this.model.perDayWidth;
                                predecessor[i].offset = Math.round(-dayOffset);
                            }
                            else if ((childGanttRecord.left + childGanttRecord.width) > (parentGanttRecord.left + parentGanttRecord.width)) {
                                dayOffset = ((childGanttRecord.left + childGanttRecord.width) -
                                    (parentGanttRecord.left + parentGanttRecord.width)) / this.model.perDayWidth;
                                predecessor[i].offset = Math.round(dayOffset);
                            }
                            else {
                                predecessor[i].offset = 0;
                            }

                            /* holidays and weekend days deduction*/
                            if (predecessor[i].offset > 0) {
                                if (!includeWeekend) {
                                    var weekEndDays = this._calculateWeekendDays(parentEndDate, new Date(childEndDate))
                                    predecessor[i].offset -= weekEndDays;
                                }
                                predecessor[i].offset -= this._getHolidaysCount(parentEndDate, childEndDate);
                            } else if (predecessor[i].offset < 0) {
                                if (!includeWeekend) {
                                    var weekEndDays = this._calculateWeekendDays(new Date(childEndDate), parentEndDate)
                                    predecessor[i].offset += weekEndDays;
                                }
                                predecessor[i].offset += this._getHolidaysCount(childEndDate, parentEndDate);
                            }
                        } 
                        

                        if (predecessor[i].offset < 0) {
                            predecessorValue.push(predecessor[i].from + "" + predecessor[i].predecessorsType + ""
                                + predecessor[i].offset + "d");
                        }
                        else if (predecessor[i].offset >= 1) {
                            predecessorValue.push(predecessor[i].from + "" + predecessor[i].predecessorsType + "+"
                                + predecessor[i].offset + "d");
                        }
                        else {
                            predecessorValue.push(predecessor[i].from + "" + predecessor[i].predecessorsType);
                        }
                    }
                }
                if (predecessorValue.length > 0) {
                    item.item[model.predecessorMapping] = predecessorValue.join(',');
                    //this.refreshRow(itemIndex, false);
                }
            }
        },
        _calculateWeekendDays: function (fromDate, toDate)
        {
                var weekendDayCount = 0;
                fromDate = new Date(fromDate);

                while(fromDate < toDate){
                    fromDate.setDate(fromDate.getDate() + 1);
                    if(fromDate.getDay() === 0 || fromDate.getDay() == 6){
                        ++weekendDayCount ;
                    }
                }
                return weekendDayCount ;
        },

        //Returns the previous item properties
        _getPrevItem: function (item, index) {
            var proxy = this;
            item.left = proxy._prevItem.left;
            item.width = proxy._prevItem.width;
            item.startDate = proxy._prevItem.startDate;
            item.endDate = proxy._prevItem.endDate;
            item.duration = proxy._prevItem.duration;
            item.status = proxy._prevItem.status;
            item.progressWidth = this._getProgressWidth(item.width, item.status);
            this.refreshRow(index);
            var tempArgs = {};
            tempArgs.index = index;
            this._refreshRow(tempArgs);
        },

        //Returns the previous parent item properties
        _getParentPreviousValue: function () {
            var proxy = this, prevParent, index,
                model=proxy.model,
                length = proxy._parentCollectionPreviousValues.length;
            for (var i = 0; i < length; i++) {
                prevParent = proxy._parentCollectionPreviousValues[i];
                index = prevParent.index;
                parentItem = model.updatedRecords[index];
                parentItem.left = prevParent.left;
                parentItem.width = prevParent.width;
                parentItem.startDate = prevParent.startDate;
                parentItem.endDate = prevParent.endDate;
                parentItem.duration = prevParent.duration;
                parentItem.status = prevParent.status;
                parentItem.progressWidth = this._getProgressWidth(parentItem.width, parentItem.status);
                this.refreshRow(index);
                var tempArgs = {};
                tempArgs.index = index;
                this._refreshRow(tempArgs);
            }

        },

        //handler for left resizing taskbar item
        _enableLeftResizing: function (e, item) {

            var proxy = this, model = this.model,
                scheduleHeaderType = model.scheduleHeaderSettings.scheduleHeaderType,
                scheduleHeaderValue = ej.Gantt.ScheduleHeaderType;
            e.target.style.cursor = "e-resize";
            $(proxy._leftResizer).addClass("gripper");
            $(proxy._rightResizer).addClass("gripper");

            if (proxy.dragPosX > proxy._mousePosX) {
                proxy._mousePosX = proxy.dragPosX - proxy._mousePosX;
                if (item.left > 0) {
                        item.left -= proxy._mousePosX;
                        item.width += proxy._mousePosX;
                }
            }
            else {
                proxy._mousePosX -= proxy.dragPosX;
                if ((item.left + 30) < (item.left + item.width) && ((item.left + proxy._mousePosX) <= (this._prevItem.left + this._prevItem.width))) {
                    item.left += proxy._mousePosX;
                    item.width -= proxy._mousePosX;
                }
            }
            if (ej.isNullOrUndefined(e.originalEvent.pageX)) {
                this.dragPosX = e.originalEvent.targetTouches[0].pageX;
            }
            else {
                this.dragPosX = e.originalEvent.pageX;
            }
            if (scheduleHeaderType == scheduleHeaderValue.Day)
                item.width = item.width < proxy.model.perHourWidth ? proxy.model.perHourWidth : item.width;
            else if (scheduleHeaderType == scheduleHeaderValue.Hour)
                item.width = item.width < proxy.model.perMinuteWidth ? proxy.model.perMinuteWidth : item.width;
            else
                item.width = item.width < proxy.model.perDayWidth ? proxy.model.perDayWidth : item.width;
            item.progressWidth = proxy._getProgressWidth(item.width, item.status);
            /*Adjust left value according to width because of end of taskbar must be in same position while left resizing*/
            item.left = this._prevItem.left + this._prevItem.width - item.width;
            proxy._setItemPosition(item);
        },

        //handler for progressbar resizing
        _enableProgressResizing: function (e, item) {
            var proxy = this,
                diff,
                radius;
            e.target.style.cursor = "col-resize";
            $(proxy._leftResizer).addClass("gripper");
            $(proxy._rightResizer).addClass("gripper");

            if (proxy._progressResizer) {
                proxy._progressHandle = proxy._progressResizer && proxy._progressResizer.firstChild;
                proxy._progressHandleChild = proxy._progressResizer && proxy._progressResizer.childNodes[1];
            }

            if (proxy.dragPosX > proxy._mousePosX) {
                proxy._mousePosX = proxy.dragPosX - proxy._mousePosX;
                if (item.left > 0) {
                    item.progressWidth -= proxy._mousePosX;
                }
            }
            else {
                proxy._mousePosX -= proxy.dragPosX;
                item.progressWidth += proxy._mousePosX;
            }
            if (ej.isNullOrUndefined(e.originalEvent.pageX)) {
                this.dragPosX = e.originalEvent.targetTouches[0].pageX;
            }
            else {
                this.dragPosX = e.originalEvent.pageX;
            }
            item.progressWidth = item.progressWidth > item.width ? item.width : item.progressWidth;
            item.progressWidth = item.progressWidth < 0 ? 0 : item.progressWidth;

            diff = item.width - item.progressWidth;

            if (diff <= 4) {
                radius = 4 - diff;
            }
            else
                radius = 0;

            $(proxy._progressbarItem).css({
                "width": (item.progressWidth) + "px",
                "border-top-right-radius": radius + "px",
                 "border-bottom-right-radius": radius + "px"
            });
            $(proxy._progressResizer).css({ "left": (item.left + item.progressWidth - 10) + "px" });

            $(proxy._progressHandle).addClass("e-progresshandle");
            $(proxy._progressHandleChild).addClass("e-progresshandleafter");
        },


        //handler for right resizing taskbar
        _enableRightResizing: function (e, item) {

            var proxy = this, model = this.model;
            e.target.style.cursor = "w-resize";

            $(proxy._leftResizer).addClass("gripper");
            $(proxy._rightResizer).addClass("gripper");

            if (proxy.dragPosX > proxy._mousePosX) {
                proxy._mousePosX = proxy.dragPosX - proxy._mousePosX;
                if (item.left > 0) {
                    item.width -= proxy._mousePosX;
                }
            } else {
                proxy._mousePosX -= proxy.dragPosX;
                item.width += proxy._mousePosX;
            }
            if (ej.isNullOrUndefined(e.originalEvent.pageX)) {
                this.dragPosX = e.originalEvent.targetTouches[0].pageX;
            }
            else {
                this.dragPosX = e.originalEvent.pageX;
            }

            if (model.scheduleHeaderSettings.scheduleHeaderType == ej.Gantt.ScheduleHeaderType.Day)
                item.width = item.width < proxy.model.perHourWidth ? proxy.model.perHourWidth : item.width;
            else if (model.scheduleHeaderSettings.scheduleHeaderType == ej.Gantt.ScheduleHeaderType.Hour)
                item.width = item.width < proxy.model.perMinuteWidth ? proxy.model.perMinuteWidth : item.width;
            else
                item.width = item.width < proxy.model.perDayWidth ? proxy.model.perDayWidth : item.width;
            if (!item.hasChildRecords) {
                item.progressWidth = proxy._getProgressWidth(item.width, item.status);
                $(proxy._tasknameContainer).css({ "left": (item.left) + "px", "width": (item.width) + "px" });
            }
            else
                $(proxy._manualRightResizer).css({ "left": (item.width - (parseInt(proxy._manualRightResizer.style.borderRightWidth.replace("px", "")))) + "px" });

            $(proxy._taskbarItem).css({ "left": (item.left) + "px", "width": (item.width) + "px" });
            $(proxy._progressbarItem).css({ "width": (item.progressWidth) + "px"});
            $(proxy._rightResizer).css({ "left": (item.left + item.width - proxy._resizerRightAdjust) + "px" });
            $(proxy._progressResizer).css({ "left": (item.left + item.progressWidth - 10) + "px" });
            

            $(proxy._leftConnectorPoint).css({ "left": (item.left - proxy._connectorPointWidth) + "px" });
            $(proxy._rightConnectorPoint).css({ "left": (item.left + item.width) + "px" });
        },


        //Handler for dragging taskbar
        _enableDragging: function (e, item) {
            var proxy = this;
            e.target.style.cursor = "move";

            if ($(e.target.parentNode).hasClass("e-parentContainer")) {
                proxy._allowExpandCollapse = false;
            }

            if (this.dragPosX > proxy._mousePosX) {
                proxy._mousePosX = proxy.dragPosX - proxy._mousePosX;
                if (item.left > 0) {
                    item.left -= proxy._mousePosX;
                }
            } else {
                proxy._mousePosX -= proxy.dragPosX;
                item.left += proxy._mousePosX;
            }

            if (ej.isNullOrUndefined(e.originalEvent.pageX)) {
                this.dragPosX = e.originalEvent.targetTouches[0].pageX;
            }
            else {
                this.dragPosX = e.originalEvent.pageX;
            }
            item.left = item.left < 0 ? 0 : item.left;

            $(proxy._taskbarItem).css({ "left": (item.left) + "px" });
            $(proxy._rightResizer).css({ "left": (item.left + item.width - proxy._resizerRightAdjust) + "px" });
            $(proxy._leftResizer).css({ "left": (item.left + 2) + "px" });
            $(proxy._progressResizer).css({ "left": (item.left + item.progressWidth - 10) + "px" });
            $(proxy._tasknameContainer).css({
                "left": (item.left) + "px",
                "width": (item.width) + "px"
            });

            $(proxy._leftConnectorPoint).css({ "left": (item.left - proxy._connectorPointWidth) + "px" });
            $(proxy._rightConnectorPoint).css({ "left": (item.left + item.width) + "px" });
        },


        //Append tooltip while editing taskbar
        _appendTooltip: function (target, index) {

            var proxy = this, tooltipElement, tooltiptable, tooltipbody,
                $target = $(target),
                model = this.model,
                item = proxy.model.currentViewData[index],
                columnHeaderTexts = proxy.model.columnHeaderTexts,
                predecessorEditingTexts = proxy.model.predecessorEditingTexts;
            if (item != null) {
               
                var div = $target[0];
                if ($($target[0]).hasClass("progressbarresizer-right")) {
                    div = $target.closest(".e-childContainer")[0];
                }

                if ($(div).hasClass("e-parentContainer") || $(div).hasClass("e-childContainer")) {
                    proxy._editingContainer = div;
                    proxy._leftResizer = (proxy._editingContainer).querySelector(".e-connectorpoint-left");
                    proxy._taskbarItem = (proxy._editingContainer).querySelector(".taskbarresizer-left");
                    proxy._progressbarItem = (proxy._editingContainer).querySelector(".e-gantt-childtaskbar");
                    proxy._progressResizer = (proxy._editingContainer).querySelector(".e-gantt-childtaskbar-progress");
                    proxy._rightResizer = (proxy._editingContainer).querySelector(".progressbarresizer-right");
                }

                //Don't need to display the drag tooltip in Parent Taskbar
                if (this.model.enableTaskbarDragTooltip && (!$target.hasClass('e-parentContainer'))) {

                    if (this._progressResizing == true) {

                        proxy._$ganttChartContainer[0].style.cursor = "col-resize";

                        tooltiptable = ej.buildTag("table.e-tooltiptable", "", {}, { 'cellspacing': '2px', 'cellpadding': '2px' });
                        tooltipbody = ej.buildTag("tbody", "", {}, {});
                        tooltipbody[0].innerHTML = "<tr><td>" + columnHeaderTexts["status"] + " : " + item.status + "%</td></tr>";
                        tooltiptable.append(tooltipbody);
                        if (proxy.model.progressbarTooltipTemplate) {
                            proxy._progressBarTooltipID = ej.buildTag("div.e-progressbartooltip#progressbartooltip" + proxy._id + "", "",
                              {
                                  'position': 'absolute',
                                  'z-index': proxy._getmaxZindex() + 1
                              }, {});
                            //proxy.tooltipState = "editingTemplateID";
                            var tooltipbody = ej.buildTag("tbody", $.render[proxy._id + "progressbarTooltipTemplate"](item), {}, {});
                            proxy._progressBarTooltipID[0].innerHTML = "<table>" + tooltipbody[0].innerHTML + "</table>";
                        }
                        else if (proxy.model.progressbarTooltipTemplateId) {
                            proxy._progressBarTooltipID = ej.buildTag("div.e-progressbartooltip#progressbartooltip" + proxy._id + "", "",
                                    {
                                        'position': 'absolute',
                                        'z-index': proxy._getmaxZindex() + 1
                                    }, {});

                            //proxy.tooltipState = "editingTemplate";
                            var tooltipbody = ej.buildTag("tbody", $.render[proxy._id + "progressbarTooltipTemplate"](item), {}, {});
                            proxy._progressBarTooltipID[0].innerHTML = "<table>" + tooltipbody[0].innerHTML + "</table>";
                        }
                        else {
                            proxy._progressBarTooltipID = ej.buildTag("div.e-progressbartooltip#progressbartooltip" + proxy._id + "",
                                tooltiptable,
                                {
                                    'position': 'absolute',
                                    'z-index': proxy._getmaxZindex() + 1
                                }, { 'onselectstart': 'return false' });
                        }
                        if (proxy._progressBarTooltipID) {
                            $(document.body).append(proxy._progressBarTooltipID);
                            proxy._updateTooltipPosition(proxy._progressBarTooltipID, proxy._currMousePosX, proxy._currMousePosY, true);
                        }
                    }
                    // for apend tooltip for connector line
                    else if (this._editPredecessor === true && proxy.model.enablePredecessorEditing) {
                        if (proxy._predecessorTooltip === null) {
                            proxy._predecessorTooltip = ej.buildTag("div.e-tooltipganttpredecessor#predecessortooltip" + proxy._id + "",
                                      "",
                                      {
                                          "top": (proxy._currMousePosY + 10) + "px",
                                          "left": (proxy._currMousePosX + 10) + "px",
                                          'position': 'absolute',
                                          'z-index': proxy._getmaxZindex() + 1
                                      }, { 'onselectstart': 'return false' });
                            tooltiptable = ej.buildTag("table.e-tooltiptable", "", {}, { 'cellspacing': '2px', 'cellpadding': '2px' });
                            tooltipbody = ej.buildTag("tbody", "", {}, {});
                            var innerHtml = "<tr><td class='e-predecessor-false'></td><td >"+ predecessorEditingTexts["fromText"] +":</td><td class='e-tooltiptaskname'>" + item.taskName + "</td><td>" + proxy._prevItem.predecessorTarget + "</td> </tr>" +
                                "<tr><td></td><td>" + predecessorEditingTexts["toText"] + ":</td><td class='e-tooltiptaskname'></td><td></td></tr>";
                            $(tooltipbody).html(innerHtml);
                            tooltiptable.append(tooltipbody);
                            proxy._predecessorTooltip.append(tooltiptable);
                            $(document.body).append(proxy._predecessorTooltip);
                            proxy._updateTooltipPosition(proxy._predecessorTooltip, proxy._currMousePosX, proxy._currMousePosY);
                            //   proxy._$bodyContent.append(proxy._predecessorTooltip);
                        }
                    }
                    else if (proxy._leftResizing == true || proxy._rightResizing == true || proxy._allowDragging == true)
                    {
                    if (proxy._leftResizing == true) {
                        proxy._$ganttChartContainer[0].style.cursor = "e-resize";

                        tooltipElement = {
                            ttipstartDate: this._getFormatedDate(item.startDate, model.dateFormat, model.locale),
                            ttipduration: item.duration,
                            ttipdurationunit: item.durationUnit
                        };
                    } else if (proxy._rightResizing == true) {

                        proxy._$ganttChartContainer[0].style.cursor = "w-resize";

                        tooltipElement = {
                            ttipendDate: this._getFormatedDate(item.endDate, model.dateFormat, model.locale),
                            ttipduration: item.duration,
                            ttipdurationunit: item.durationUnit
                        };
                    } else if (proxy._allowDragging == true) {
                        proxy._$ganttChartContainer[0].style.cursor = "move";

                        tooltipElement = {
                            ttipstartDate: this._getFormatedDate(item.startDate, model.dateFormat, model.locale),
                            ttipendDate: this._getFormatedDate(item.endDate, model.dateFormat, model.locale),
                        };
                    }


                    tooltiptable = ej.buildTag("table.e-tooltiptable", "", {}, { 'cellspacing': '2px', 'cellpadding': '2px' });

                    if (proxy.model.taskbarEditingTooltipTemplate) {
                        proxy._taskbarEditingTooltipID = ej.buildTag("div.e-editingtooltip#editingtooltip" + proxy._id + "", "",
                           {
                               'position': 'absolute',
                               'z-index': proxy._getmaxZindex() + 1
                           }, {});
                        proxy.tooltipState = "editingTemplateID";
                        var tooltipbody = ej.buildTag("tbody", $.render[proxy._id + "editingTooltipTemplate"](item), {}, {});
                        proxy._taskbarEditingTooltipID[0].innerHTML = "<table>" + tooltipbody[0].innerHTML + "</table>";
                    }
                    else if (proxy.model.taskbarEditingTooltipTemplateId) {
                        proxy._taskbarEditingTooltipID = ej.buildTag("div.e-editingtooltip#editingtooltip" + proxy._id + "", "",
                                {
                                    'position': 'absolute',
                                    'z-index': proxy._getmaxZindex() + 1
                                }, {});

                        proxy.tooltipState = "editingTemplate";
                        var tooltipbody = ej.buildTag("tbody", $.render[proxy._id + "editingTooltipTemplate"](item), {}, {});
                        proxy._taskbarEditingTooltipID[0].innerHTML = "<table>" + tooltipbody[0].innerHTML + "</table>";
                    }

                    else {
                        proxy.tooltipState = "";
                        if (tooltipElement) {
                            tooltipbody = ej.buildTag("tbody", $.render[proxy._id + "editingTooltipTemplate"](tooltipElement), {}, {});
                            tooltiptable.append(tooltipbody);
                        }

                        proxy._taskbarEditingTooltipID = ej.buildTag("div.e-editingtooltip#editingtooltip" + proxy._id + "", tooltiptable,
                            {
                                'position': 'absolute',
                                'z-index': proxy._getmaxZindex() + 1
                            }, {});
                    }
                    if (proxy._taskbarEditingTooltipID) {
                        $(document.body).append(proxy._taskbarEditingTooltipID);
                        proxy._updateTooltipPosition(proxy._taskbarEditingTooltipID, proxy._currMousePosX, proxy._currMousePosY, true);
                    }
                }
                }
            }
        },

        _setItemPosition: function (item) {
            var proxy = this;
            $(proxy._leftResizer).css({ "left": (item.left + 2) + "px" });
            $(proxy._rightResizer).css({ "left": (item.left + item.width - proxy._resizerRightAdjust) + "px" });
            $(proxy._taskbarItem).css({
                "left": (item.left) + "px",
                "width": (item.width) + "px"
            });
            $(proxy._progressbarItem).css({
                "width": (item.progressWidth) + "px"
            });
            $(proxy._progressResizer).css({ "left": (item.left + item.progressWidth - 10) + "px" });
            $(proxy._tasknameContainer).css({
                "left": (item.left) + "px",
                "width": (item.width) + "px"
            });

            $(proxy._leftConnectorPoint).css({ "left": (item.left - proxy._connectorPointWidth) + "px" });
            $(proxy._rightConnectorPoint).css({ "left": (item.left + item.width) + "px" });


        },

        //returns the custom template for tooltip
        _getTemplate: function (template) {
            if (typeof (template) != "object") {
                var parser = $.parseHTML(this.model.tooltipTemplate);
                return parser[0];
            } else {
                var markup = $(template)[0].innerHTML;
                parser = $.parseHTML(markup);
                return parser[1];
            }
        },


        //Handles the mousemove after mousedown event
        _updateOnmouseMove: function (e) {

            var proxy = this, args = {}, posy,
                $target = (proxy._editingTarget) ? proxy._editingTarget : null,
                $ganttGridRows = proxy.getGanttChartRows(),
                row = ($target) ? $target.closest('tr.e-ganttrowcell') : null,
                recordIndexr = $ganttGridRows.index(row),
                item = proxy._editingItem,
                div = ($target) ? $target[0].parentNode : null;
            proxy._newXYPos = true;

            if ($(div).hasClass("progressbarresizer-right")) {
                div = div.parentNode;
            }
            else if ($(div).hasClass("e-gantt-childtaskbar-progress")) {
                div = $(div).closest("div.e-childContainer")[0];
            }
            else if ($(div).hasClass("progressbarhandler")) {
                div = $target.closest(".e-childContainer")[0];
            }
            else {
                div = $(div).closest("div.e-childContainer,div.e-parentContainer,.e-gantt-milestone,div.e-gantt-milestone-container")[0];
            }
            if (item != null) {
                proxy._trigger("cancelEditCell");
                args.editingFields = {
                    startdate: item.startDate,
                    enddate: item.endDate,
                    progress: item.status,
                    duration: item.duration,
                    durationunit: item.durationUnit
                };
                args.rowData = { rowData: item };

                proxy._taskbarEditing(args);

                if (!args.cancel) {

                    if (!e) e = window.event;

                    if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9) {
                        e.originalEvent.pageX = e.originalEvent.clientX;
                        e.originalEvent.pageY = e.originalEvent.clientY;
                    }

                    if (e.originalEvent.pageX || e.originalEvent.pageY) {
                        proxy._mousePosX = e.originalEvent.pageX;
                        posy = e.originalEvent.pageY;
                    } else if (e.originalEvent.clientX || e.originalEvent.clientY) {
                        proxy._mousePosX = e.originalEvent.clientX + document.body.scrollLeft
                            + document.documentElement.scrollLeft;
                        posy = e.originalEvent.clientY + document.body.scrollTop
                            + document.documentElement.scrollTop;
                    }
                    else if (e.originalEvent.touches[0].pageX || e.originalEvent.touches[0].pageY) {
                        proxy._mousePosX = e.originalEvent.targetTouches[0].pageX;
                        posy = e.originalEvent.targetTouches[0].pageY;
                    }

                    if ($target.hasClass("e-gantt-milestone") || $(div).hasClass("e-gantt-milestone")) {
                        if ($(row).hasClass("e-editmode")) {
                            this._editMilestone(e);
                        }
                    } else {

                        if ($(div).hasClass("e-childContainer")) {
                            proxy._editingContainer = div;
                            proxy._leftResizer = proxy._editingContainer.querySelector(".taskbarresizer-left");
                            proxy._taskbarItem = proxy._editingContainer.querySelector(".e-gantt-childtaskbar");
                            proxy._progressbarItem = proxy._editingContainer.querySelector(".e-gantt-childtaskbar-progress");
                            proxy._progressResizer = proxy._editingContainer.querySelector(".progressbarresizer-right");
                            proxy._rightResizer = proxy._editingContainer.querySelector(".taskbarresizer-right");
                            if (proxy.model.predecessorMapping && proxy.model.enablePredecessorEditing) {
                                proxy._leftConnectorPoint = div.querySelector(".e-connectorpoint-left"); 
                                proxy._rightConnectorPoint = div.querySelector(".e-connectorpoint-right");
                                $(proxy._leftConnectorPoint).addClass("e-connectorpoint-hover");
                                $(proxy._rightConnectorPoint).addClass("e-connectorpoint-hover");
                            }

                        }
                        else if (($(div).hasClass("e-parentContainer")) && !item.isAutoSchedule) {
                            proxy._editingContainer = div;
                            proxy._taskbarItem = proxy._editingContainer.querySelector(".e-gantt-manualparenttaskbar");
                            proxy._rightResizer = proxy._editingContainer.querySelector(".taskbarresizer-right");
                            proxy._manualRightResizer = proxy._editingContainer.querySelector(".e-gantt-manualparenttaskbar-right");
                        }

                        if ($(row).hasClass("e-editmode") &&
                            (($($target[0]).closest("e-gantt-manualparenttaskbar")) || $(div).hasClass("e-gantt-milestone-container") || $(div).hasClass("e-childContainer"))) {

                            if (proxy._leftResizing == true) {
                                proxy._enableLeftResizing(e, item);
                                proxy._updateEditedItem(item, "leftResizing");

                            } else if (proxy._progressResizing == true
                                && proxy.model.enableProgressBarResizing
                                && proxy.model.progressMapping) {
                                //Remove the progress bar status while resizing the progress bar status
                                
                                if (proxy._editingTarget.hasClass("e-progresshandlerafter-element") || proxy._editingTarget.hasClass("progressbarhandler e-progresshandle")
                                    || proxy._editingTarget.hasClass("e-progresshandler-element") || proxy._editingTarget.hasClass("progressbarresizer-right")) {
                                    proxy._editingTarget.prev(".e-gantt-childtaskbar").find(".e-tasklabel").text("");
                                }
                                proxy._enableProgressResizing(e, item);
                                proxy._updateEditedItem(item, "progressResizing");

                            } else if (proxy._rightResizing == true) {
                                proxy._enableRightResizing(e, item);
                                proxy._updateEditedItem(item, "rightResizing");

                            } else if (proxy._allowDragging == true) {
                                proxy._enableDragging(e, item);
                                proxy._updateEditedItem(item, "dragging");
                            }

                            //for predecessor , draw false line move the tooltip
                            else if (proxy._editPredecessor == true) {
                                //if ($(e.target).hasClass('e-connectortouchpoint')) {
                                //    e.target = $target.parent();
                                //}
                                proxy._drawFalseLine(e, item);
                            }
                        }
                    }
                    proxy._clearTooltip();
                    proxy._appendTooltip($target, recordIndexr);
                }
            }
            if (ej.isNullOrUndefined(e.pageX) && e.type == "touchmove" && proxy._predecessorTooltip) {
                if (ej.isNullOrUndefined(e.pageX)) {
                    x2 = e.originalEvent.changedTouches[0].pageX;
                    y2 = e.originalEvent.changedTouches[0].pageY;
                    e.target = document.elementFromPoint(x2, y2);
                }
                else {
                    x2 = e.pageX;
                    y2 = e.pageY;
                    
                }
                if ($(e.target).hasClass('e-connectorpoint-left') || $(e.target).hasClass('e-connectortouchpoint')) {
                    proxy._dragLeftOver(e);
                } else if ($(e.target).hasClass('e-connectorpoint-right')) {
                    proxy._dragRightOver(e);
                } else {
                    proxy._mouseLeave();
                    $(proxy._leftConnectorPoint).addClass("e-connectorpoint-hover");
                    $(proxy._rightConnectorPoint).addClass("e-connectorpoint-hover");
                }
            }
        },


        //Handler for milestone editing
        _editMilestone: function (e) {

            var proxy = this,
                $target = proxy._editingTarget,
                div = ($target.hasClass("milestone-top") || $target.hasClass("milestone-bottom")) ? $target[0].parentNode: $target.closest(".e-gantt-milestone"),
                $ganttGridRows = proxy.getGanttChartRows(),
                row = $target.closest('tr.e-ganttrowcell'),
                recordIndexr = $ganttGridRows.index(row),
                item = proxy._editingItem;

            if (item != null) {

                if (!e) e = window.event;
                if (e.originalEvent.pageX || e.originalEvent.pageY) {
                    proxy._mousePosX = e.originalEvent.pageX;
                } else if (e.originalEvent.clientX || e.originalEvent.clientY) {
                    proxy._mousePosX = e.originalEvent.clientX + document.body.scrollLeft
                        + document.documentElement.scrollLeft;
                }
                else if (e.originalEvent.touches[0].pageX || e.originalEvent.touches[0].pageY) {
                    proxy._mousePosX = e.originalEvent.targetTouches[0].pageX;
                    posy = e.originalEvent.targetTouches[0].pageY;
                }

                e.target.style.cursor = "move";
                if (proxy.dragPosX > proxy._mousePosX) {
                    proxy._mousePosX = proxy.dragPosX - proxy._mousePosX;
                    if (item.left > 0) {
                        item.left -= proxy._mousePosX;
                    }
                } else {
                    proxy._mousePosX -= proxy.dragPosX;
                    item.left += proxy._mousePosX;
                }
                if (ej.isNullOrUndefined(e.originalEvent.pageX)) {
                    this.dragPosX = e.originalEvent.targetTouches[0].pageX;
                }
                else {
                    this.dragPosX = e.originalEvent.pageX;
                }
                item.left = item.left < 0 ? 0 : item.left;

                $(div).css({ "left": (item.left) + "px" });

                $(proxy._leftConnectorPoint).css({ "left": (item.left - proxy._connectorPointWidth) + "px" });
                $(proxy._rightConnectorPoint).css({ "left": (item.left + proxy._milesStoneWidth) + "px" });

                proxy._updateEditedItem(item, "dragging");
                proxy._appendTooltip($target, recordIndexr);
            }
        },


        //Updates the edited item's values
        _updateEditedItem: function (ganttRecord, reason) {

            var proxy = this,
                model = proxy.model,
                scheduleHeaderType = model.scheduleHeaderSettings.scheduleHeaderType,
                scheduleHeaderValue = ej.Gantt.ScheduleHeaderType,
                durationUnitValue = ej.Gantt.DurationUnit,
                projectStartDate = ganttRecord._getFormatedDate(model.projectStartDate, model.dateFormat, model.locale),
                projectStartDate = ganttRecord._getDateFromFormat(projectStartDate, model.dateFormat, model.locale),
                projectStartDateHours = ganttRecord.startDate.getHours(),
                projectStartDateMinutes = ganttRecord.startDate.getMinutes(),

               remainDays, day, remainDaysInDecimal, perDayHourUnit, offset, rem, startDate, endDate;

            switch (reason) {

                case 'dragging':
                    remainDays = ganttRecord.left % model.perDayWidth;
                    day = (ganttRecord.left - remainDays) / model.perDayWidth;
                    remainDaysInDecimal = remainDays / model.perDayWidth;
                    /*Rounding the decimal value for week-month-year schedule mode*/
                    if (scheduleHeaderType == scheduleHeaderValue.Week || scheduleHeaderType == scheduleHeaderValue.Month || scheduleHeaderType == scheduleHeaderValue.Year) {
                        if (remainDaysInDecimal <= 0.25) {
                            remainDaysInDecimal = 0;
                        }
                        else if (remainDaysInDecimal > 0.25 && remainDaysInDecimal <= 0.75) {
                            remainDaysInDecimal = 0.5;
                        }
                        else if (remainDaysInDecimal > 0.75) {
                            day += 1;
                            remainDaysInDecimal = 0;
                        }
                    }
                    if (scheduleHeaderType == scheduleHeaderValue.Day || scheduleHeaderType == scheduleHeaderValue.Hour)
                        perDayHourUnit = 24;
                    else
                        perDayHourUnit = model.secondsPerDay / 3600;
                    /*Calculating the day decimal values in to hours and then minutes*/
                    if (perDayHourUnit && remainDaysInDecimal != 1) {
                        var perHourDecimalWidth = 1 / perDayHourUnit,
                            decimalWidthInHours = remainDaysInDecimal / perHourDecimalWidth,
                            inMinutes = Math.round(decimalWidthInHours * 60);
                    }
                    projectStartDate = ganttRecord._startDateUpdate(projectStartDate, day, inMinutes, model.workingTimeRanges, scheduleHeaderType);                                                           
                    ganttRecord.startDate = new Date(projectStartDate);

                    var editArgs = {};
                    editArgs.startDate = ganttRecord.startDate;
                    editArgs.duration = ganttRecord.duration;
                    editArgs.durationUnit = ganttRecord.durationUnit;
                    editArgs.record = ganttRecord;

                    proxy._calculateEndDate(editArgs);
                    ganttRecord.endDate = proxy._currentEditedRecord.endDate;
                    //update on dataSource
                    if (model.startDateMapping)
                        ganttRecord.item[model.startDateMapping] = ganttRecord.startDate;
                    if (model.endDateMapping)
                        ganttRecord.item[model.endDateMapping] = ganttRecord.endDate;

                    break;

                case 'leftResizing':
                    var editMode = "Resizing";
                    remainDays = ganttRecord.left % model.perDayWidth,                        
                    day = (ganttRecord.left - remainDays) / model.perDayWidth;
                    remainDaysInDecimal = remainDays / model.perDayWidth;
                    /*Rounding the decimal value for week-month-year schedule mode*/
                    if (scheduleHeaderType == scheduleHeaderValue.Week || scheduleHeaderType == scheduleHeaderValue.Month || scheduleHeaderType == scheduleHeaderValue.Year) {
                        if (remainDaysInDecimal <= 0.25) {
                            remainDaysInDecimal = 0;
                        }

                        else if (remainDaysInDecimal > 0.25 && remainDaysInDecimal <= 0.75) {
                            remainDaysInDecimal = 0.5;
                        }
                        else if (remainDaysInDecimal > 0.75) {
                            day += 1;
                            remainDaysInDecimal = 0;
                        }
                    }
                    if (scheduleHeaderType == scheduleHeaderValue.Day || scheduleHeaderType == scheduleHeaderValue.Hour)
                        perDayHourUnit = 24;
                    else
                        perDayHourUnit = model.secondsPerDay / 3600;
                    /*Calculating the day decimal values in to hours and then minutes*/
                    if (perDayHourUnit && remainDaysInDecimal > 0) {
                        var perHourDecimalWidth = 1 / perDayHourUnit,
                            decimalWidthInHours = remainDaysInDecimal / perHourDecimalWidth,
                            inMinutes = Math.round(decimalWidthInHours * 60);
                    }
                    projectStartDate = ganttRecord._startDateUpdate(projectStartDate, day, inMinutes, model.workingTimeRanges, scheduleHeaderType);
                    ganttRecord.startDate = new Date(projectStartDate);
                    if (ganttRecord.startDate.getTime() == ganttRecord.endDate.getTime()
                        && ej.isNullOrUndefined(ganttRecord.isMilestone) && ganttRecord.isMilestone == false && ganttRecord.duration == 0) {
                        ganttRecord.duration = 1;
                    }
                    var editArgs = {};
                    editArgs.startDate = ganttRecord.startDate;
                    editArgs.endDate = ganttRecord.endDate;
                    editArgs.durationUnit = ganttRecord.durationUnit;
                    editArgs.record = ganttRecord;

                    proxy._calculateDuration(editArgs);
                    ganttRecord.duration = proxy._currentEditedRecord.duration;
                    //update on dataSource
                    if (model.startDateMapping)
                        ganttRecord.item[model.startDateMapping] = ganttRecord.startDate;
                    if (model.durationMapping)
                        ganttRecord.item[model.durationMapping] = ganttRecord.duration;
                    break;

                case 'rightResizing':
                    var editMode = "Resizing";
                    if (scheduleHeaderType == scheduleHeaderValue.Day || scheduleHeaderType == scheduleHeaderValue.Hour) {
                        var tempStartDate = new Date(ganttRecord.startDate),
                            tempNewStartDate = new Date(ganttRecord.startDate), timeDiff, taskTempWidth;
                        tempNewStartDate.setHours(0, 0, 0, 0);
                        timeDiff = tempStartDate.getTime() - tempNewStartDate.getTime();
                        if (timeDiff > 0)
                            taskTempWidth = ganttRecord.width + ((timeDiff / (1000 * 60 * 60 * 24)) * model.perDayWidth);
                        else
                            taskTempWidth = ganttRecord.width;
                        remainDays = taskTempWidth % model.perDayWidth;
                        day = (taskTempWidth - remainDays) / model.perDayWidth;
                        perDayHourUnit = 24;
                    }
                    else {
                        remainDays = ganttRecord.width % model.perDayWidth;
                        day = (ganttRecord.width - remainDays) / model.perDayWidth;
                        perDayHourUnit = model.secondsPerDay / 3600;
                    }

                    remainDaysInDecimal = remainDays / model.perDayWidth,
                    startDate = new Date(ganttRecord.startDate);
                    /*Rounding the decimal value for week-month-year schedule mode*/
                    if (scheduleHeaderType == scheduleHeaderValue.Week || scheduleHeaderType == scheduleHeaderValue.Month || scheduleHeaderType == scheduleHeaderValue.Year) {
                        if (remainDaysInDecimal <= 0.25) {
                            remainDaysInDecimal = 0;
                        }
                        else if (remainDaysInDecimal > 0.25 && remainDaysInDecimal <= 0.75) {
                            remainDaysInDecimal = 0.5;
                        } else if (remainDaysInDecimal > 0.75) {
                            day += 1;
                            remainDaysInDecimal = 0;
                        }
                    }

                    /*Calculating the remaining day decimal values in to hours and then minutes*/
                    if (perDayHourUnit && remainDaysInDecimal > 0) {
                        var perHourDecimalWidth = 1 / perDayHourUnit,
                            decimalWidthInHours = remainDaysInDecimal / perHourDecimalWidth,
                            inMinutes = Math.round(decimalWidthInHours * 60);
                    }
                    endDate = ganttRecord._endDateUpdate(startDate, day - 1, inMinutes, model.workingTimeRanges, scheduleHeaderType);
                    ganttRecord.endDate = new Date(endDate);
                    var editArgs = {};
                        editArgs.startDate = startDate;
                        editArgs.endDate = endDate;
                        editArgs.durationUnit = ganttRecord.durationUnit;
                        editArgs.record = ganttRecord;
 
                        proxy._calculateDuration(editArgs);
                        ganttRecord.duration = proxy._currentEditedRecord.duration;

                    //update on datasource
                    if (model.endDateMapping)
                        ganttRecord.item[model.endDateMapping] = ganttRecord.endDate;
                    if (model.durationMapping)
                        ganttRecord.item[model.durationMapping] = ganttRecord.duration;
                    break;

                case 'progressResizing':
                    ganttRecord.status = proxy._getProgressPercent(ganttRecord.width, ganttRecord.progressWidth);
                    if (model.progressMapping)
                        ganttRecord.item[model.progressMapping] = ganttRecord.status;
                    break;
            }
        },

        _calculateEndDate: function (args) {
            var proxy = this;
            return proxy._trigger("calculateEndDate", args);
        },
        _calculateDuration: function (args) {
            var proxy = this;
            return proxy._trigger("calculateDuration", args);
        },

        //false line implementation 
        _drawFalseLine: function (e, item) {

            var proxy = this,
                pageX = e.pageX,
                pageY = e.pageY,

            x1 = proxy._connectorPointX;
            y1 = proxy._connectorPointY;

            if (ej.isNullOrUndefined(e.pageX)) {
                x2 = e.originalEvent.changedTouches[0].pageX - proxy._$bodyContent.offset().left,
                y2 = e.originalEvent.changedTouches[0].pageY - proxy._$bodyContent.offset().top;
                pageX = Math.round(e.originalEvent.changedTouches[0].pageX);
                pageY = Math.round(e.originalEvent.changedTouches[0].pageY);
            }
            else{
                x2 = e.pageX - proxy._$bodyContent.offset().left,
                y2 = e.pageY - proxy._$bodyContent.offset().top;

            }
              
            if ($(document.elementFromPoint(pageX, pageY)).closest("#ganttViewTablebody" + proxy._id).length != 0) {

            //var sy=proxy._$bodyContainer.ejScroller("option", "scrollTop");
            //var sx = proxy._$bodyContainer.ejScroller("option", "scrollLeft");

            var length = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
            var angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;
            var transform = 'rotate(' + angle + 'deg)';

            proxy._falseLine && proxy._falseLine.remove();

                proxy._falseLine = ej.buildTag("div.e-gantt-falseLine#ganttfalseline" + proxy._id, "", {}, {});
                proxy._falseLine.css({
                    'transform-origin': '0% 100%',
                    'right':'auto',
                    'position': 'absolute',
                    'transform': transform,
                    '-ms-transform':transform, /* IE 9 */
                    '-moz-transform':transform, /* Firefox */
                    '-webkit-transform':transform, /* Safari and Chrome */
                    '-o-transform':transform, /* Opera */
                    'border-top-width': '2px',
                    'border-top-style': 'dashed',
                    'z-index': '5'
                }).width(length - 3).offset({ left: x1, top: y1 });

                if (!(ej.browserInfo().name == "msie" && ej.browserInfo().version < 9)) {
                    proxy._$bodyContent.append(proxy._falseLine);
                }

                //Change the position of predecesspr tooltip
                proxy._updateTooltipPosition(proxy._predecessorTooltip, pageX, pageY);
            }
        },

        _mouseLeave: function () {

            var proxy = this;
            $(".progressbarresizer-right").css({ "background-image": "none" });
            window.clearTimeout(proxy._tooltipTimer);
            proxy._clearTooltip();
            

            if (this._mouseDown == false && proxy._newXYPos) {
                $(proxy._leftResizerGripper).removeClass("gripper");
                $(proxy._rightResizerGripper).removeClass("gripper");

                if (proxy.model.progressMapping) {
                    $(proxy._progressHandle).removeClass("e-progresshandle");
                    $(proxy._progressHandleChild).removeClass("e-progresshandleafter");
                }

                if (proxy.model.predecessorMapping && proxy.model.enablePredecessorEditing) {

                    $(proxy._leftConnectorPoint).removeClass('e-connectorpoint-hover').removeClass('e-gantt-manualparenttaskbar-connectorpoint-hover');
                    $(proxy._rightConnectorPoint).removeClass('e-connectorpoint-hover').removeClass('e-gantt-manualparenttaskbar-connectorpoint-hover');

                    
                    proxy._leftConnectorPoint = null;
                    proxy._rightConnectorPoint = null;
                }
            }
            else if (proxy._mouseDown && proxy._falseLine) {
                
                if (proxy.model.allowGanttChartEditing == true && proxy.model.enablePredecessorEditing && proxy.model.readOnly == false) {
                    proxy._removeEditingElements();
                }
            }
        },

        _getmaxZindex: function () {
            var maxZ = 1;
            maxZ = Math.max.apply(null, $.map($('body *'), function (e, n) {
                if ($(e).css('position') == 'absolute')
                    return parseInt($(e).css('z-index')) || 1;
            }));
            if (maxZ == undefined || maxZ == null)
                maxZ = 1;
            return maxZ;
        },

        _getOffsetRect: function (elem) {
            var box = elem.getBoundingClientRect(),
                body = document.body,
                docElem = document.documentElement,
                scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop,
                scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft,
                clientTop = docElem.clientTop || body.clientTop || 0,
                clientLeft = docElem.clientLeft || body.clientLeft || 0,
                top = box.top + scrollTop - clientTop,
                left = box.left + scrollLeft - clientLeft;
            return { top: Math.round(top), left: Math.round(left) }
        },
        /* edge detection for tooltip in ganttchart*/
        _updateTooltipPosition: function (tooltip, posx, posy, isEditingTooltip) {
            if (tooltip && tooltip.length > 0) {
                var proxy = this,
                    containerBoundary = proxy._getOffsetRect(proxy._$bodyContainer[0]),
                    topEnd = containerBoundary.top + proxy._$bodyContainer.height(),
                    leftEnd = containerBoundary.left + proxy._$bodyContainer.width(),
                    rowHeight = proxy.model.rowHeight, pos = 0;
                //Left update
                if (((posx + tooltip.width() + 30) > leftEnd)) {
                    pos = posx - tooltip.width() - 30;//while tooltip rendered outdide of Gantt chart
                    tooltip.css('left', ((pos) + 'px'));
                }
                else {
                    if (!isEditingTooltip)
                        tooltip.css('left', (posx + 15) + 'px');
                    else
                        tooltip.css('left', (posx) + 'px');
                }
                //Top update
                if (isEditingTooltip || ((posy + tooltip.height() + 30) > topEnd)) {
                    if (!isEditingTooltip)
                        pos = posy - tooltip.height() - 30;//while tooltip rendered outdide of Gantt chart
                    else
                        pos = posy - tooltip.height() - rowHeight;

                    tooltip.css('top', ((pos) + 'px'));
                } else {
                    tooltip.css('top', (posy + 10) + 'px');
                }
            }
        },

        _mouseHover: function (e) {

            
            var $target = $(e.target), proxy = this,
                posx = 0,
                posy = 0,
                $ganttChartRows = proxy.getGanttChartRows(),
                row = $target.closest('tr.e-ganttrowcell'),
                div = $target[0].parentNode,
                progressHandler,
                recordIndexr = $ganttChartRows.index(row),
                item = proxy.model.currentViewData[recordIndexr],
                tooltipElement, tooltiptable, tooltipbody;
            if (e.target.className == "e-parentContainer" || e.target.className == "e-gantt-milestone-container" || e.target.className == "e-childContainer")
            {
                return true;
            }

            if ($(div).hasClass("e-gantt-childtaskbar-progress")) {
                div = $(div).closest("div.e-childContainer")[0];
            }
            else if ($target.hasClass("e-tasklabel"))
                div = $target.closest(".e-childContainer")[0];
            else {
                div = $(div).closest("div.e-childContainer,div.e-parentContainer,.e-gantt-milestone,div.e-gantt-milestone-container")[0];
            }

          
            //clearing rendered tooltips in Gantt
            proxy._clearTooltip();
            
            if (!proxy._newXYPos) {
                proxy._newXYPos = true;
                proxy._mouseLeave();
            }
            if (proxy._rightResizing == false && proxy._leftResizing == false &&
                proxy._progressResizing == false && proxy._mouseDown == false) {

                if (proxy.model.allowGanttChartEditing && proxy.model.readOnly == false && ($target.is('.e-gantt-childtaskbar,.e-tasklabel, .e-gantt-manualparenttaskbar') || $target.closest(".e-gantt-childtaskbar").length)) {
                    e.target.style.cursor = "move";
                }


                if (e.type == "mouseenter" || e.type == "mousemove" || e.type == "touchstart") {

                    if (!e) e = window.event;
                    if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9) {
                        e.originalEvent.pageX = e.originalEvent.clientX;
                        e.originalEvent.pageY = e.originalEvent.clientY;
                    }

                    if (e.originalEvent.pageX || e.originalEvent.pageY) {

                        posx = e.originalEvent.pageX;
                        posy = e.originalEvent.pageY;

                    }
                    else if (e.originalEvent.clientX || e.originalEvent.clientY) {
                        posx = e.originalEvent.clientX + document.body.scrollLeft
                            + document.documentElement.scrollLeft;
                        posy = e.originalEvent.clientY + document.body.scrollTop
                            + document.documentElement.scrollTop;

                    }
                    else if (e.originalEvent && e.originalEvent.changedTouches
                        && e.originalEvent.changedTouches.length > 0) {
                        posx = e.originalEvent.changedTouches[0].pageX;
                        posy = e.originalEvent.changedTouches[0].pageY;
                    }
                    proxy._posX1 = posx;
                    proxy._posY1 = posy;
                  
                    if ($(div).hasClass("e-childContainer") && proxy.model.allowGanttChartEditing && proxy.model.readOnly == false) {
                        proxy._leftResizerGripper = div.querySelector(".taskbarresizer-left"); // New div is added for drag points so other elemnts are changed 
                        proxy._rightResizerGripper = div.querySelector(".taskbarresizer-right");
                        progressHandler = div.querySelector(".progressbarresizer-right");
                        proxy._progressHandle = progressHandler && progressHandler.firstChild;
                        proxy._progressHandleChild = progressHandler && progressHandler.childNodes[1];

                        $(proxy._leftResizerGripper).addClass("gripper");
                        $(proxy._rightResizerGripper).addClass("gripper");

                        if (proxy.model.progressMapping) {
                            $(proxy._progressHandle).addClass("e-progresshandle");
                            $(proxy._progressHandleChild).addClass("e-progresshandleafter");
                        }
                    }

                    //Before Mouse Down  , Apply style for drag points in child cotainer and miles stone container
                    if (($(div).hasClass("e-childContainer") || $(div).hasClass("e-parentContainer")) && proxy.model.predecessorMapping && proxy.model.allowGanttChartEditing && proxy.model.enablePredecessorEditing && proxy.model.readOnly == false) {

                        proxy._leftConnectorPoint = div.querySelector(".e-connectorpoint-left");
                        proxy._rightConnectorPoint = div.querySelector(".e-connectorpoint-right");
                        $(proxy._leftConnectorPoint).addClass("e-connectorpoint-hover");
                        $(proxy._rightConnectorPoint).addClass("e-connectorpoint-hover");
                        if ($(div).hasClass("e-parentContainer") && !item.isAutoSchedule) {                            
                            $(proxy._leftConnectorPoint).addClass("e-gantt-manualparenttaskbar-connectorpoint-hover");
                            $(proxy._rightConnectorPoint).addClass("e-gantt-manualparenttaskbar-connectorpoint-hover");
                        }
                    }
                    else if (($(div).hasClass("e-gantt-milestone") || $(div).hasClass("e-gantt-milestone-container")) && proxy.model.predecessorMapping && proxy.model.allowGanttChartEditing && proxy.model.enablePredecessorEditing && proxy.model.readOnly == false) {
                        var milesStoneContainer = div.parentNode;
                        proxy._leftConnectorPoint = milesStoneContainer.querySelector(".e-connectorpoint-left");
                        proxy._rightConnectorPoint = milesStoneContainer.querySelector(".e-connectorpoint-right");
                        $(proxy._leftConnectorPoint).addClass("e-connectorpoint-hover");
                        $(proxy._rightConnectorPoint).addClass("e-connectorpoint-hover");
                    }


                    if (item && proxy.model.enableTaskbarTooltip && !ej.isTouchDevice() && !$($target).hasClass("e-connectorpoint-hover")) {
                        proxy._predecessorTooltip && proxy._predecessorTooltip.remove();
                        proxy._predecessorTooltip = null;

                        if (($($target).hasClass("e-gantt-parenttaskbar-innerdiv") || $($target[0].parentNode).hasClass("e-gantt-parenttaskbar-innerdiv")) && !item.isAutoSchedule) {
                            tooltipElement = {
                                ttipscheduleStartDate: this._getFormatedDate(item.manualStartDate, this.model.dateFormat, this.model.locale),
                                ttipscheduleEndDate: this._getFormatedDate(item.manualEndDate, this.model.dateFormat, this.model.locale),
                                ttipduration: item.manualDuration,
                                ttipprogress: item.status.toString(),
                                ttiptaskname: item.taskName,
                                ttipdurationunit: item.durationUnit
                            };
                        }
                        else if ($($target).hasClass("e-gantt-manualparenttaskbar") || $($target).hasClass("e-gantt-manualparenttaskbar-left") || $($target).hasClass("e-gantt-manualparenttaskbar-right") && !item.isAutoSchedule) {
                            tooltipElement = {
                                ttipstartDate: this._getFormatedDate(item.startDate, this.model.dateFormat, this.model.locale),
                                ttipsubtaskStartDate: this._getFormatedDate(item.manualStartDate, this.model.dateFormat, this.model.locale),
                                ttipendDate: this._getFormatedDate(item.endDate, this.model.dateFormat, this.model.locale),
                                ttipsubtaskEndDate: this._getFormatedDate(item.manualEndDate, this.model.dateFormat, this.model.locale),
                                ttipduration: item.duration,
                                ttiptaskname: item.taskName,
                                ttipdurationunit: item.durationUnit

                            }
                        }
                        else {
                            tooltipElement = {
                                ttipstartDate: this._getFormatedDate(item.startDate, this.model.dateFormat, this.model.locale),
                                ttipendDate: this._getFormatedDate(item.endDate, this.model.dateFormat, this.model.locale),
                                ttipduration: item.duration,
                                ttipprogress: item.status.toString(),
                                ttiptaskname: item.taskName,
                                ttipdurationunit: item.durationUnit
                            };
                        }

                        tooltiptable = ej.buildTag("table.e-tooltiptable", "", {}, { 'cellspacing': '5' });
                      

                        if (!proxy.model.tooltipTemplate && !proxy.model.tooltipTemplateId) {
                            proxy.tooltipState = "";
                            tooltipbody = ej.buildTag("tbody", $.render[proxy._id + "tooltipTemplate"](tooltipElement), {}, {});
                            tooltiptable.append(tooltipbody);
                            proxy._mouseHoverTooltip = ej.buildTag("div.e-tooltipgantt#tooltipgantt" + proxy._id + "", tooltiptable,
                                { 'position': 'absolute', 'z-index': proxy._getmaxZindex() + 1, 'border-radius': '5px' }, {});

                            proxy._mouseHoverTooltip.innerHTML = "<table>" + tooltiptable[0].innerHTML + "</table>";

                            //Providing a time delay to render the tooltip to improve UI
                            proxy._tooltipTimer = setTimeout(function () {
                                $(document.body).append(proxy._mouseHoverTooltip)
                                proxy._updateTooltipPosition(proxy._mouseHoverTooltip, posx, posy);
                            }, 700);
                        }
                        else if (proxy.model.tooltipTemplate) {
                            proxy._mouseHoverTooltip = ej.buildTag("div.e-tooltipgantt#tooltipgantt" + proxy._id + "","",
                                { 'position': 'absolute', 'z-index': proxy._getmaxZindex() + 1, 'border-radius': '5px' }, {});
                                                       
                            proxy.tooltipState = "Template";
                            var tooltipbody = ej.buildTag("tbody", $.render[proxy._id + "tooltipTemplate"](item), {}, {});
                            proxy._mouseHoverTooltip[0].innerHTML = "<table>" + tooltipbody[0].innerHTML + "</table>";

                            //Providing a time delay to render the tooltip to improve UI
                            proxy._tooltipTimer = setTimeout(function () {
                                $(document.body).append(proxy._mouseHoverTooltip)
                                proxy._updateTooltipPosition(proxy._mouseHoverTooltip, posx, posy);
                            }, 700);
                        }
                        else if (proxy.model.tooltipTemplateId) {
                            proxy._mouseHoverTooltip = ej.buildTag("div.e-tooltipgantt#tooltipgantt" + proxy._id + "", "",
                                { 'position': 'absolute', 'z-index': proxy._getmaxZindex() + 1, 'border-radius': '5px' }, {});

                            proxy.tooltipState = "TemplateID";
                            var tooltipbody = ej.buildTag("tbody", $.render[proxy._id + "tooltipTemplate"](item), {}, {});
                            proxy._mouseHoverTooltip[0].innerHTML = "<table>" + tooltipbody[0].innerHTML + "</table>";

                            //Providing a time delay to render the tooltip to improve UI
                            proxy._tooltipTimer = setTimeout(function () {
                                $(document.body).append(proxy._mouseHoverTooltip);
                                proxy._updateTooltipPosition(proxy._mouseHoverTooltip, posx, posy);
                            }, 700);
                        }
                        $(proxy._mouseHoverTooltip).addClass("customTooltip");
                    }
                }
            }
        },
        
        _createEditingTooltipTemplate: function () {

            var proxy = this,
                td,
                columnHeaderTexts = proxy.model.columnHeaderTexts,
                durationUnitTexts=proxy.model.durationUnitTexts,
                helpers = {
                    _getStartDate: proxy._tooltipStartDate,
                    _getEndDate: proxy._tooltipEndDate,
                    _getTaskName: proxy._tooltipTaskName,
                    _getProgress: proxy._tooltipProgress,
                    _checkDuration: proxy._checkDuration
                },
                editingTemplateId = proxy.model.taskbarEditingTooltipTemplateId,
                editingTemplate = proxy.model.taskbarEditingTooltipTemplate;

            helpers["_" + proxy._id + "getDuration"] = $.proxy(proxy._tooltipDuration, proxy);

            $.views.helpers(helpers);

            
            if (editingTemplateId) {
                var parentTr = $("#" + editingTemplateId)[0].innerHTML;
            }
            else if (editingTemplate) {
                var parentTr = editingTemplate;
            }
            else {
                var parentTr = "<tr class='e-tooltip_rowcell'>";

                td = "{{if ~_getTaskName()}}" +
                    "<td class='e-tooltiptaskname' style='width:40px;text-align:left;' colspan='3';>{{:ttiptaskname}}</td>{{/if}}" +
                    "</tr><tr>" +
                    "{{if ~_getStartDate()}}" +
                    "<td class='e-tooltiptd-alignleft' style='width:30px;white-space:nowrap;'>" + columnHeaderTexts["startDate"] + "</td>" +
                    "<td class='e-tooltiptd-aligncenter' style='width:10px;font-weight:bold;'>:</td>" +
                    "<td class='e-tooltiptd-alignright' style='width:30px;white-space:nowrap;'>{{:ttipstartDate}}</td> {{/if}}" +
                    "</tr><tr>" +
                    "{{if ~_getEndDate()}}" +
                    "<td class='e-tooltiptd-alignleft' style='width:30px;white-space:nowrap;'>" + columnHeaderTexts["endDate"] + "</td>" +
                    "<td class='e-tooltiptd-aligncenter' style='width:10px;font-weight:bold;'>:</td>" +
                    "<td class='e-tooltiptd-alignright' style='width:30px;white-space:nowrap;'>{{:ttipendDate}}</td>{{/if}}" +
                    "</tr><tr>" +
                    "{{if ~_checkDuration()}}" +
                    "<td class='e-tooltiptd-alignleft' style='width:30px;white-space:nowrap;'>" + columnHeaderTexts["duration"] + "</td>" +
                    "<td class='e-tooltiptd-aligncenter' style='width:10px;font-weight:bold;'>:</td>" +
                    "<td class='e-tooltiptd-alignright' style='width:30px;white-space:nowrap;'>{{:~_" + proxy._id + "getDuration(#data)}}</td>{{/if}}" +
                    "</tr><tr>" +
                    "{{if ~_getProgress()}}" +
                    "<td class='e-tooltiptd-alignleft' style='width:30px;white-space:nowrap;'>" + columnHeaderTexts["status"] + "</td>" +
                    "<td class='e-tooltiptd-aligncenter' style='width:10px;font-weight:bold;'>:</td>" +
                    "<td class='e-tooltiptd-alignright' style='width:30px;white-space:nowrap;'>{{:ttipprogress}}%</td>{{/if}}";

                parentTr += td;
                parentTr += "</tr>";
            }

            var templates = {};
            templates[proxy._id + "editingTooltipTemplate"] = parentTr;
            $.templates(templates);
        },

        _createProgressbarTooltipTemplate: function () {
            var proxy = this,
                  templateId = proxy.model.progressbarTooltipTemplateId,
            template = proxy.model.progressbarTooltipTemplate;

            if (templateId) {
                var parentTr = $("#" + proxy.model.progressbarTooltipTemplateId)[0].innerHTML;
            }
            else if (proxy.model.progressbarTooltipTemplate) {
                var parentTr = proxy.model.progressbarTooltipTemplate;
            }
            var templates = {};
            templates[proxy._id + "progressbarTooltipTemplate"] = parentTr;
            $.templates(templates);
        },


        //Template to create tooltip
        _createTooltipTemplate: function () {

            var proxy = this,
                td,
                columnHeaderTexts = proxy.model.columnHeaderTexts,
                durationUnitTexts = proxy.model.durationUnitTexts,
                helpers = {
                    _getStartDate: proxy._tooltipStartDate,
                    _getSubtaskStartDate: proxy._tooltipSubtaskStartDate,
                    _getScheduleStartDate: proxy._tooltipScheduleStartDate,
                    _getEndDate: proxy._tooltipEndDate,
                    _getSubtaskEndDate: proxy._tooltipSubtaskEndDate,
                    _getScheduleEndDate: proxy._tooltipScheduleEndDate,
                    _getTaskName: proxy._tooltipTaskName,
                    _getProgress: proxy._tooltipProgress,
                    _checkDuration: proxy._checkDuration
                },
              
                templateId = proxy.model.tooltipTemplateId,
                template = proxy.model.tooltipTemplate;
            helpers["_" + proxy._id + "getDuration"] = $.proxy(proxy._tooltipDuration, proxy);
            $.views.helpers(helpers);

            if (templateId ) {
                var parentTr = $("#" + proxy.model.tooltipTemplateId)[0].innerHTML;
            }
            else if (proxy.model.tooltipTemplate ) {
                var parentTr = proxy.model.tooltipTemplate;
            }
           
            else {
                var parentTr = "<tr class='e-tooltip_rowcell'>";

                td = "{{if ~_getTaskName()}}" +
                    "<td class='e-tooltiptaskname' style='width:40px;text-align:left;' colspan='3';>{{:ttiptaskname}}</td>{{/if}}" +
                    "</tr>" +
                    "{{if ~_getStartDate()}}<tr>" +
                    "<td class='e-tooltiptd-alignleft' style='width:30px;white-space:nowrap;'>" + columnHeaderTexts["startDate"] + "</td>" +
                    "<td class='e-tooltiptd-aligncenter' style='width:10px;font-weight:bold;'>:</td>" +
                    "<td class='e-tooltiptd-alignright' style='width:30px;white-space:nowrap;'>{{:ttipstartDate}}</td> {{/if}}" +
                    "</tr>" +
                    "{{if ~_getSubtaskStartDate()}}<tr>" +
                    "<td class='e-tooltiptd-alignleft' style='width:30px;white-space:nowrap;'>" + columnHeaderTexts["subTasksStartDate"] + "</td>" +
                    "<td class='e-tooltiptd-aligncenter' style='width:10px;font-weight:bold;'>:</td>" +
                    "<td class='e-tooltiptd-alignright' style='width:30px;white-space:nowrap;'>{{:ttipsubtaskStartDate}}</td></tr>{{/if}}" +

                    "{{if ~_getScheduleStartDate()}}<tr>" +
                    "<td class='e-tooltiptd-alignleft' style='width:30px;white-space:nowrap;'>" + columnHeaderTexts["scheduleStartDate"] + "</td>" +
                    "<td class='e-tooltiptd-aligncenter' style='width:10px;font-weight:bold;'>:</td>" +
                    "<td class='e-tooltiptd-alignright' style='width:30px;white-space:nowrap;'>{{:ttipscheduleStartDate}}</td></tr>{{/if}}" +

                    "{{if ~_getEndDate()}}<tr>" +
                    "<td class='e-tooltiptd-alignleft' style='width:30px;white-space:nowrap;'>" + columnHeaderTexts["endDate"] + "</td>" +
                    "<td class='e-tooltiptd-aligncenter' style='width:10px;font-weight:bold;'>:</td>" +
                    "<td class='e-tooltiptd-alignright' style='width:30px;white-space:nowrap;'>{{:ttipendDate}}</td>{{/if}}" +
                    "</tr>" +
                    "{{if ~_getSubtaskEndDate()}}<tr>" +
                    "<td class='e-tooltiptd-alignleft' style='width:30px;white-space:nowrap;'>" + columnHeaderTexts["subTasksEndDate"] + "</td>" +
                    "<td class='e-tooltiptd-aligncenter' style='width:10px;font-weight:bold;'>:</td>" +
                    "<td class='e-tooltiptd-alignright' style='width:30px;white-space:nowrap;'>{{:ttipsubtaskEndDate}}</td></tr>{{/if}}" +

                    "{{if ~_getScheduleEndDate()}}<tr>" +
                    "<td class='e-tooltiptd-alignleft' style='width:30px;white-space:nowrap;'>" + columnHeaderTexts["scheduleEndDate"] + "</td>" +
                    "<td class='e-tooltiptd-aligncenter' style='width:10px;font-weight:bold;'>:</td>" +
                    "<td class='e-tooltiptd-alignright' style='width:30px;white-space:nowrap;'>{{:ttipscheduleEndDate}}</td></tr>{{/if}}" +

                    "{{if ~_checkDuration()}}<tr>" +
                    "<td class='e-tooltiptd-alignleft' style='width:30px;white-space:nowrap;'>" + columnHeaderTexts["duration"] + "</td>" +
                    "<td class='e-tooltiptd-aligncenter' style='width:10px;font-weight:bold;'>:</td>" +
                    "<td class='e-tooltiptd-alignright' style='width:30px;white-space:nowrap;'>{{:~_" + proxy._id + "getDuration(#data)}}</td>{{/if}}" +
                    "</tr>" +
                    "{{if ~_getProgress()}}<tr>" +
                    "<td class='e-tooltiptd-alignleft' style='width:30px;white-space:nowrap;'>" + columnHeaderTexts["status"] + "</td>" +
                    "<td class='e-tooltiptd-aligncenter' style='width:10px;font-weight:bold;'>:</td>" +
                    "<td class='e-tooltiptd-alignright' style='width:30px;white-space:nowrap;'>{{:ttipprogress}}%</td>{{/if}}";

                parentTr += td;
                parentTr += "</tr>";
            }

            var templates = {};
            templates[proxy._id + "tooltipTemplate"] = parentTr;
            $.templates(templates);
        },
        /*check duration is available in tooltip item*/
        _checkDuration: function () {
            return this.data.ttipduration;
        },
        _tooltipTaskName: function () {
            return this.data.ttiptaskname;
        },

        _tooltipProgress: function () {
            return this.data.ttipprogress;
        },

        _tooltipStartDate: function () {
            return this.data.ttipstartDate;
        },

        _tooltipSubtaskStartDate: function () {
            return this.data.ttipsubtaskStartDate;
        },
        _tooltipScheduleStartDate: function () {
            return this.data.ttipscheduleStartDate;
        },

        _tooltipEndDate: function () {
            return this.data.ttipendDate;
        },

        _tooltipSubtaskEndDate: function () {
            return this.data.ttipsubtaskEndDate;
        },

        _tooltipScheduleEndDate: function () {
            return this.data.ttipscheduleEndDate;
        },
        /*get localized text of duration value*/
        _tooltipDuration: function (data) {
            var val = "";
            if (data.ttipduration != null && data.ttipduration != undefined)
                val += data.ttipduration + " ";
            if (data.ttipdurationunit != null && data.ttipdurationunit != undefined) {
                var multiple = data.ttipduration != 1;
                if (data.ttipdurationunit == "day")
                    val += multiple ? this.model.durationUnitTexts.days : this.model.durationUnitTexts.day;
                else if (data.ttipdurationunit == "hour")
                    val += multiple ? this.model.durationUnitTexts.hours : this.model.durationUnitTexts.hour;
                else
                    val += multiple ? this.model.durationUnitTexts.minutes : this.model.durationUnitTexts.minute;
            }
            return val;
        },

        _getDurationUnits: function (data) {
            var proxy = this;
            if (proxy.model.durationUnit == ej.Gantt.DurationUnit.Hour)
                return "hours";
            else if (proxy.model.durationUnit == ej.Gantt.DurationUnit.Minute)
                return "minutes";
            else
                return "days";

        },

        _cellClickHandler: function (e) {
            var $target = $(e.target),
                $row = $target.closest('tr.e-ganttrowcell'),
                proxy = this,
                model = this.model,
                args = {},
                selectedItem,
                index,
                rowIndex,
                div = $target[0],
                $ganttGridRows = proxy.getGanttChartRows();

            rowIndex = index = $ganttGridRows.index($target.parent());

            if (index == -1) {
                rowIndex = index = $ganttGridRows.index($row);
            }

          
            if (($(div).hasClass("e-parentTask") || $(div).closest(".e-parentTask").length > 0) && !$target.hasClass("e-connectorpoint-left") && !$target.hasClass("e-connectorpoint-right")) { // here check drag point class

                var currentRecordIndex = $ganttGridRows.index($row),
                    selectedItem = model.currentViewData[currentRecordIndex];
                recordIndex = model.updatedRecords.indexOf(selectedItem);
                if (proxy._allowExpandCollapse && selectedItem && selectedItem.hasChildRecords) {
                    /*cancel edited cell in treegrid on mouse down event on parent task bar*/
                    proxy._trigger("cancelEditCell");
                    if (model.selectedRowIndex !== recordIndex && model.allowSelection && recordIndex !== -1) {

                        if (!proxy._rowSelectingEventTrigger(model.selectedRowIndex, recordIndex)) {
                            proxy.selectRows(recordIndex);
                            proxy._rowSelectedEventTrigger(recordIndex);
                        }
                    }
                    proxy._expandCollapse(currentRecordIndex);
                }
            }
            else if (index != -1 && model.allowSelection) {
                selectedItem = model.currentViewData[index];
                index = model.updatedRecords.indexOf(selectedItem);
                if (model.selectionMode == "row") {                    
                if (proxy._rowSelectingEventTrigger(model.selectedRowIndex, index))
                    return;
                proxy.selectRows(index);
                proxy.focusGanttElement();
                proxy._rowSelectedEventTrigger(index);
            }
                if (model.selectionMode == "cell")
                    proxy.model.selectedItem = selectedItem;
            }
            if (model.taskbarClick) {
                if (!$target.is(".e-childContainer,.e-gantt-milestone-container,.e-parentContainer")) {
                    var taskElement = $target.closest(".e-childContainer,.e-gantt-milestone-container,.e-parentContainer");
                    if (taskElement.length) {
                        var args = {}, data;
                        data = model.currentViewData[rowIndex];
                        rowIndex = model.updatedRecords.indexOf(data);
                        args.data = data;
                        args.index = rowIndex;
                        args.taskbarElement = taskElement[0];
                        args.target = $target[0];
                        this._trigger("taskbarClick", args);
                    }
                }
            }
        },

        getRowByIndex: function (from, to) {
            try {
                var proxy = this;

                var gridRows = proxy.getGanttChartRows(),
                    $gridRows = $(gridRows),
                    $row = $();

                if (proxy.model.enableVirtualization) {
                    var recordstart = proxy.model.updatedRecords[from];
                    from = proxy.model.currentViewData.indexOf(recordstart);
                }

                if (ej.isNullOrUndefined(to)) {
                    if (proxy.model.enableVirtualization) {
                        var recordend = proxy.model.updatedRecords[to];
                        to = proxy.model.currentViewData.indexOf(recordend);
                    }
                    return $(gridRows[from]);
                } else {
                    return $($gridRows.slice(from, to));
                }
            } catch (e) {
                return $();
            }
        },

        selectRows: function (index) {
            var proxy = this,
                model = this.model,
                $ganttGridRows = proxy.getGanttChartRows(),
                selectedItem;
            if (!model.allowSelection)
                return;
            if (model.selectionMode == "cell")
                return;
            if (proxy.prevSelectedItem) {
                proxy.prevSelectedItem.isSelected = false;
            }
            $ganttGridRows.removeClass("e-gantt-mouseclick");
            var $row = proxy.getRowByIndex(index);
            if (proxy.model.allowSelection)
                $row.addClass("e-gantt-mouseclick");
            proxy.model.selectedRowIndex = index;
            selectedItem = proxy.model.updatedRecords[index];
            if (selectedItem)
                selectedItem.isSelected = true;
            proxy.model.selectedItem = selectedItem;
            proxy.prevSelectedItem = selectedItem;
        },

        updateSelectedItem: function (recordIndex) {
            var proxy = this,
                $ganttGridRows = $(proxy.getGanttChartRows());

            $ganttGridRows.removeClass("e-gantt-mouseclick");
            proxy.model.updatedRecords[recordIndex].isSelected = true;
            proxy.model.selectedItem = proxy.model.updatedRecords[recordIndex];
            this._refresh();
            proxy._rowSelectedEventTrigger(recordIndex);

        },


        ganttrowHover: function (index) {
            var proxy = this;
            if (!proxy.model.enableRowHover)
                return;
            var $gridRows =proxy.getGanttChartRows();
            $gridRows.removeClass("e-gantt_mousehover").addClass("e-gantt_mouseleave");;
            $($gridRows[index]).addClass("e-gantt_mousehover").removeClass("e-gantt_mouseleave");
        },

        _rowHover: function (e) {
            var proxy = this,
                $target = $(e.target),
                $gridRows,
                args = {},
                index,
                row;
            if (!proxy.model.enableRowHover)
                return false;
            $gridRows = $(proxy.getGanttChartRows());
            index = $gridRows.index($target.parent());
            if (index == -1) {
                row = $target.closest('tr.e-ganttrowcell');
                index = $gridRows.index(row);
            }
            args.index = index;

            if (e.type == "mouseenter") {
                args.reason = "mouseenter";
                proxy.addRowHover(index);
            } else {
                args.reason = "mouseleave";
                proxy.removeRowHover();
            }
            proxy._trigger("rowHover", args);
            return false;
        },

        addRowHover: function (index) {
            var $gridRows = this.getGanttChartRows();
            if (index != null)
                index != -1 && $($gridRows[index]).addClass("e-enablerowhover");
        },

        removeRowHover: function () {
            var $gridRows = this.getGanttChartRows();
            $gridRows.removeClass("e-enablerowhover");
        },

        updateHeight: function (height) {
            var proxy = this,
                model = proxy.model;
            proxy._setScrollTop();
            proxy._containerHeight = height;
            $("#ganttviewerbodyContent" + proxy._id + "").css({
                 "height": proxy._containerHeight + "px"
            });

            if (model.stripLines) {
                $(proxy.element).find(".e-stripline,.e-stripLines").css({ height: height + "px" });
            }

            if (model.holidays) {
                $(proxy.element).find(".e-holidays,.e-holiday").css({ height: height + "px" });
            }
            $(".e-secondary_canvas").css({ height: height + "px" });
            $(proxy.element).find(".e-weekends").css({ height: height + "px" });

            var holidayLableSelector = ".e-holiday-label";
            /* for rotate holiday lable in ie8 */
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9) {
                holidayLableSelector = ".e-holiday-label-ie8";
            }

            if (height < proxy._viewportHeight) {
                if (height <= model.rowHeight) {
                    $(proxy.element).find(holidayLableSelector).css({ top: -height - 30 });
                }
                else
                    $(proxy.element).find(holidayLableSelector).css({ top: height / 2 });
            }
            else
                $(proxy.element).find(holidayLableSelector).css({ top: proxy._viewportHeight / 2 });
            
            //To enable the Horizontal scroller when all the records were deleted
            if (height == 0) {
                proxy._$bodyContent.css({ "height": "1px" });
            }
            proxy._$bodyContainer.ejScroller("refresh");

            /*While refreshing scroller the gantt chart container height is increased by 16px.
             When horizontal scrollbar not avaiable in gantt chart side.
             So check the chart container height and view port height.
             If it is varies set the view port height to chart container height*/
            if(parseInt(proxy._$bodyContainer.css("height")) != proxy._viewportHeight)
                proxy._$bodyContainer.css("height", proxy._viewportHeight);
        },


        //method to trigger actioncomplete event
        _completeAction: function (args) {
            var proxy = this;
            args.vscrollExsist = proxy._$bodyContainer.ejScroller("isVScroll");
            proxy._trigger("actionComplete", args);
            if (args.requestType === "validatePredecessor") {
                return args.predecessorValidation;
            }
        },


        //method to trigger taskbarediting event
        //to apply changes during taskbar editing
        _taskbarEditing: function (args) {
            var proxy = this;
            proxy._trigger("taskbarEditing", args);
        },


        //method to trigger taskbaredited event
        //to apply changes after taskbar edited
        _taskbarEdited: function (args) {
            var proxy = this;
            proxy._trigger("taskbarEdited", args);
        },


        //method to trigger querytaskbarinfo 
        //to apply changes at load time
        _queryTaskbarinfo: function (args) {
            this._trigger("queryTaskbarInfo", args);
            this._updateTaskbarItems(args);
        },


        //method to trigger refresh row
        _refreshRow: function (args) {
            var proxy = this;
            proxy._trigger("refreshRow", args);
        },

        _enbleZooming: function (args) {
            var proxy = this;
            proxy._trigger("zooming", args);
        },

        _updateManualTaskbarItem: function(args, taskElement){

            var parentTaskbar = taskElement.querySelector(".e-gantt-parenttaskbar-innerdiv"),
                        parentProgressbar = taskElement.querySelector(".e-gantt-parenttaskbar-progress"),
                        parentOuterTaskbar = taskElement.querySelector(".e-gantt-manualparenttaskbar"),
                        parentLeftOuterTaskbar = taskElement.querySelector(".e-gantt-manualparenttaskbar-left"),
                        parentRightOuterTaskbar = taskElement.querySelector(".e-gantt-manualparenttaskbar-right"),
                        parentRightResizer = taskElement.querySelector(".taskbarresizer-right"),
                        parentTaskbarStyle = parentTaskbar.style,
                        parentProgressbarStyle = parentProgressbar && parentProgressbar.style,
                        parentOuterTaskbarStyle = parentOuterTaskbar && parentOuterTaskbar.style,
                        parentLeftOuterTaskbarStyle = parentLeftOuterTaskbar && parentLeftOuterTaskbar.style,
                        parentRightOuterTaskbarStyle = parentRightOuterTaskbar && parentRightOuterTaskbar.style,
                        parentRightResizerStyle = parentRightResizer && parentRightResizer.style;

            var taskbarHeight, tHeight;
            if (args.model.renderBaseline) {
                taskbarHeight = model.rowHeight - 9;
            } else {
                taskbarHeight = model.rowHeight - 10;
            }
            tHeight = taskbarHeight / 5;                                                          
            
            if (!ej.isNullOrUndefined(args.manualParentTaskbarBackground) && parentOuterTaskbarStyle.backgroundColor != args.manualParentTaskbarBackground) {
                parentOuterTaskbarStyle.backgroundColor = args.manualParentTaskbarBackground;
                parentLeftOuterTaskbarStyle.borderColor = args.manualParentTaskbarBackground;
                parentRightOuterTaskbarStyle.borderColor = args.manualParentTaskbarBackground;
            }
            parentOuterTaskbarStyle.width = args.data.width + "px";
            parentOuterTaskbarStyle.left = args.data.left + "px";
            parentRightOuterTaskbarStyle.left = (args.data.width - parseInt(tHeight)) + "px";
            parentRightResizerStyle.left = (args.data.width - parseInt(tHeight)) + "px";            
                      
            if (args.data.width == args.data.manualWidth && args.data.left == args.data.manualLeft) {
                parentProgressbarStyle.width = args.data.progressWidth - (tHeight * 2) + "px";
                parentTaskbarStyle.width = args.data.manualWidth - (tHeight * 2) + "px";
                parentTaskbarStyle.left = args.data.manualLeft + tHeight + "px";
            }
            else if (args.data.left == args.data.manualLeft) {
                parentTaskbarStyle.left = args.data.manualLeft + tHeight + "px";
                parentProgressbarStyle.width = args.data.progressWidth - (tHeight) + "px";
                parentTaskbarStyle.width = args.data.manualWidth - (tHeight) + "px";
            }
            else {
                parentProgressbarStyle.width = args.data.progressWidth + "px";
                parentTaskbarStyle.width = args.data.manualWidth + "px";
                parentTaskbarStyle.left = args.data.manualLeft + "px";
            }
        },
        //Updates taskbar items styles when chart loads
        _updateTaskbarItems: function (args) {

            var $ganttChartRows = this.getGanttChartRows(),
                index = this.model.currentViewData.indexOf(args.data),
                taskbarContainer = $ganttChartRows[index], taskElement, mileStone, baseline;

            if (taskbarContainer) {
                             
                if ($(taskbarContainer).find(".e-gantt-milestone-container").closest('div').length > 0)
                    mileStone = $(taskbarContainer).find(".e-gantt-milestone-container").closest('div')[0];

                if ($(taskbarContainer).find(".e-baselinebar").closest('div').length > 0)
                    baseline = $(taskbarContainer).find(".e-baselinebar").closest('div')[0];

                if ($(taskbarContainer).find(".e-parentContainer").closest('div').length > 0) {
                    var taskElement = $(taskbarContainer).find(".e-parentContainer").closest('div')[0],
                        parentTaskbar = taskElement.querySelector(".e-gantt-parenttaskbar-innerdiv"),
                        parentProgressbar = taskElement.querySelector(".e-gantt-parenttaskbar-progress"),
                        parentTaskbarStyle = parentTaskbar.style,
                        parentProgressbarStyle = parentProgressbar && parentProgressbar.style;

                    if (parentTaskbarStyle.backgroundColor != args.parentTaskbarBackground) {
                        parentTaskbarStyle.backgroundColor = args.parentTaskbarBackground;
                    }
                    if (parentProgressbarStyle && parentProgressbarStyle.backgroundColor != args.parentProgressbarBackground) {
                        parentProgressbarStyle.backgroundColor = args.parentProgressbarBackground;
                    }
                    if (parentTaskbarStyle.borderColor != args.parentTaskbarBorder) {
                        parentTaskbarStyle.borderColor = args.parentTaskbarBorder;
                    }
                    if (parentProgressbarStyle && parentProgressbarStyle.borderColor != args.parentProgressbarBorder) {
                        parentProgressbarStyle.borderColor = args.parentProgressbarBorder;
                    }
                    if (!args.data.isAutoSchedule && args.data.hasChildRecords) {                                                                        
                        this._updateManualTaskbarItem(args, taskElement);                        
                    }
                    if (parentProgressbarStyle && parentProgressbarStyle.borderColor != args.parentProgressbarBorder) {
                        parentProgressbarStyle.borderColor = args.parentProgressbarBorder;
                    }

                } else if ($(taskbarContainer).find(".e-childContainer").closest('div').length > 0) {
                    var taskElement = $(taskbarContainer).find(".e-childContainer").closest('div')[0],
                        taskbar = taskElement.querySelector(".e-gantt-childtaskbar"),
                        progressbar = taskElement.querySelector(".e-gantt-childtaskbar-progress"),
                        taskbarStyle = taskbar.style,
                        progressbarStyle = progressbar && progressbar.style,
                        taskbarLabel = progressbar && progressbar.querySelector(".e-tasklabel"),
                        taskbarText = taskbarLabel && taskbarLabel.style;

                    if (taskbarStyle.backgroundColor != args.taskbarBackground) {
                        taskbarStyle.backgroundColor = args.taskbarBackground;
                    }
                    if (progressbar && progressbarStyle.backgroundColor != args.progressbarBackground) {
                        progressbarStyle.backgroundColor = args.progressbarBackground;
                    }
                    if (taskbarStyle.borderColor != args.taskbarBorder) {
                        taskbarStyle.borderColor = args.taskbarBorder;
                    }
                    if (progressbar && progressbarStyle.borderColor != args.progressbarBorder) {
                        progressbarStyle.borderColor = args.progressbarBorder;
                    }
                    if (taskbarText && taskbarText.color != args.taskbarTextColor) {
                        taskbarText.color = args.taskbarTextColor;
                    }
                }

                if ($(mileStone).length > 0) {
                    var milestoneTop = mileStone.querySelector(".e-gantt-milestone.milestone-top"),
                        milestoneBottom = mileStone.querySelector(".e-gantt-milestone.milestone-bottom");
                    if (milestoneTop && milestoneBottom) {
                        var milestonetopStyle = milestoneTop.style,
                            milestonebottomStyle = milestoneBottom.style;
                        if (milestonebottomStyle.borderBottomColor != args.milestoneBackground && milestonetopStyle.borderTopColor != args.milestoneBackground) {
                            milestonebottomStyle.borderTopColor = args.milestoneBackground;
                            milestonetopStyle.borderBottomColor = args.milestoneBackground;
                        }
                    }
                    else if(this.model.milestoneTemplate)
                    {
                        var milestoneContainer = mileStone.querySelector(".e-gantt-milestone");
                        if (milestoneContainer.style.backgroundColor != args.milestoneBackground)
                            milestoneContainer.style.backgroundColor = args.milestoneBackground;
                    }
                }
                if ($(baseline).hasClass("e-baselinebar")) {
                    var baselineStyle = baseline.style;
                    if (baselineStyle.backgroundColor != args.baselineBackground) {
                        baselineStyle.backgroundColor = args.baselineBackground;
                    }
                }
            }
        },

        //to perform expand collapse operation from ganttchart
        _expandCollapse: function (recordIndex) {

            var proxy = this,
                args = {},
                data = proxy.model.currentViewData[recordIndex];

            args.data = data;
            args.recordIndex = proxy.model.updatedRecords && proxy.model.updatedRecords.indexOf(data);
            args.source = "ganttChart";
            args.expanded = !data.expanded;
            if (data) {
                if (!args.expanded) {
                    proxy._trigger("collapsing", args);
                }
                else {
                    proxy._trigger("expanding", args);
                }
            }
        },


        //get the Expand status of GridRecord
        _getExpandStatus: function (record) {
            var parentRecord = record.parentItem;
            if (parentRecord != null) {
                if (parentRecord.expanded === false)
                    return false;
                else if (parentRecord.parentItem) {
                    if (parentRecord.parentItem.expanded === false)
                        return false;
                    else
                        return this._getExpandStatus(parentRecord.parentItem);
                }
                else
                    return true;
            } else
                return true;
        },



        //method to scroll ganttchart from gridtree scroll event       

        onScrollHelper: function (scrollTop, fromChartScroller) {

            var proxy = this;
			if (!proxy._$bodyContainer.ejScroller("isVScroll"))
			{
                return false;
            }
			proxy._mouseLeave();
			if (!fromChartScroller)
			    proxy._$bodyContainer.ejScroller("option", "scrollTop", scrollTop);

            var h = parseInt(proxy.model.updatedRecords.length * proxy.model.rowHeight) - (proxy._viewportHeight - 18);
            

            if (scrollTop > h) {
                scrollTop = h;
            }

            if (scrollTop < 0) {
                scrollTop = 0;
            }

            var args = { scrollTop: scrollTop };

            proxy._handleScroll(args);
            
            //var div = $("#ganttviewerbodyContianer" + this._id);
            //div.scrollTop(scrollTop);
            if (this.model.isCriticalPathEnable == true && this.model.enableVirtualization == true) {
                this.criticalConnectorLine(this.model.criticalPathCollection, this.model.detailPredecessorCollection, true, this.collectionTaskId);
            }
        },



        //Handler for scroll event from ganttchart
        _handleScroll: function (args) {

            var proxy = this,
                args =args|| {},
                headerdiv = proxy._$headerContainer,
                contentdiv = proxy._$bodyContainer,
                left = proxy._prevLeft;

            
            if (args.scrollTop !== undefined) {
                proxy._scrollTop = args.scrollTop;
            }

            if (args.scrollLeft !== undefined) {
                left = args.scrollLeft;
            }

            var diff = (left - proxy._prevLeft),
                vDiff = proxy._scrollTop - proxy._prevScrollTop;

            if (diff) {
                headerdiv.scrollLeft(left);
            }
            else {
                headerdiv.scrollLeft(proxy._prevLeft);
            }

            if (proxy.model.enableVirtualization) {
                proxy._vscrollDist = Math.abs(proxy._scrollTop - proxy._prevScrollTop);
                if (proxy._vscrollDist) {
                    proxy._vScrollDir = proxy._prevScrollTop <= proxy._scrollTop ? 1 : -1;
                        proxy._updateCurrentViewData();

                    proxy.renderGanttRecords();
                    proxy._prevScrollTop = proxy._scrollTop;
                }
            }
            args.requestType = "scroll";
            args.delta = proxy._scrollTop;
            proxy._prevLeft = left;
            proxy._prevScrollTop = proxy._scrollTop;
            if (diff === 0 && vDiff !== 0) {
                proxy._completeAction(args);
            }
        },


        //helper method to refresh the ganttchart content from gantt
        refreshHelper: function (currentviewdata, records,collapseRecordsCount) {

            var proxy = this;
            proxy.model.currentViewData = currentviewdata;
            proxy.model.updatedRecords = records;
            if (collapseRecordsCount != undefined)
                proxy._totalCollapsedRecordCount = collapseRecordsCount;
            else
                proxy._totalCollapsedRecordCount = 0;

            if (records) {
                proxy._refresh();
                proxy._setHeight(records.length * proxy.model.rowHeight);
                proxy.updateHeight((records.length - proxy._totalCollapsedRecordCount) * proxy.model.rowHeight);
            }
        },
        _setScrollTop: function () {

            var proxy = this,
            model = this.model,
            top = proxy._scrollTop;

            if (model.enableVirtualization && top!==0) {
                if ((proxy.model.currentViewData.length * proxy.model.rowHeight) < proxy._viewportHeight) {
                    var currentPosition = top - (proxy._viewportHeight - proxy.model.currentViewData.length * proxy.model.rowHeight);
                    if (currentPosition < 0)
                        currentPosition = 0;
                    proxy._$bodyContainer.ejScroller("scrollY", currentPosition, true);
                }
            }
        },
  
        refreshGridLinesTable:function(length)
        {
            var proxy = this;
                proxy._$gridLinesTablebody.empty().append(proxy._createGridLinesTableRow(length));
                proxy._$bodyContainer.ejScroller("refresh");

                /*While refreshing scroller the gantt chart container height is increased by 16px.
                When horizontal scrollbar not avaiable in gantt chart side.
                So check the chart container height and view port height.
                If it is varies set the view port height to chart container height*/
                if (parseInt(proxy._$bodyContainer.css("height")) != proxy._viewportHeight)
                    proxy._$bodyContainer.css("height", proxy._viewportHeight);
        },
        //to refresh the content of the ganttchart
        _refresh: function () {

            var proxy = this, model = proxy.model,
                data = $.render[proxy._id + "_CustomTemplate2"](proxy.model.currentViewData);

            proxy._$ganttViewTablebody = $("#ganttViewTablebody" + proxy._id + "");

            proxy._$ganttViewTablebody.empty().append(data);

            //var $gridLinesTablebody = $("#gridLinesTablebody" + proxy._id + "");
            
            if (model.enableVirtualization) {
                proxy._$gridLinesTablebody.empty().append(proxy._createGridLinesTableRow(proxy.model.currentViewData.length));
            }
            else {
                proxy._$gridLinesTablebody.empty().append(proxy._createGridLinesTableRow(proxy.model.currentViewData.length - proxy._totalCollapsedRecordCount));
            }


            if (proxy._$ganttViewTablebody[0] != null) {
                this._ganttChartRows = $(proxy._$ganttViewTablebody[0].childNodes);
            }
            else {
                proxy._$ganttViewTablebody = ej.buildTag("tbody.e-gantt-viewer-ganttViewTablebody#ganttViewTablebody" + proxy._id + "",
                    data, {}, {});
                proxy._ganttChartRows = $(proxy._$ganttViewTablebody[0].childNodes);
            }
            if(model.queryTaskbarInfo)
                proxy._eventBindings();

        },


        //to rerender a particular ganttchart row
        refreshRow: function (index) {

            var proxy = this, model = this.model,
                $tr = $(proxy.getGanttChartRows()[index]),
                selectedItem = proxy.model.currentViewData[index];
            if (!model.allowSelection && selectedItem)
                selectedItem.isSelected = false;
            if (index != -1 && selectedItem) {
                $tr.replaceWith($.render[proxy._id + "_CustomTemplate2"](selectedItem));
                proxy._setGanttChartRows($(proxy._$ganttViewTablebody[0].childNodes));
            }
            if (model.queryTaskbarInfo)
                proxy._refreshedRowEventBinding(index);

        },


        //Trigger queryTaskbarInfo while refresh the row
        _refreshedRowEventBinding: function (index)
        {
            var $ganttChartRows = $(this.getGanttChartRows()),
                    taskbarContainer,
                    args = {}, progressbar, taskbar,
                    parentProgressbar, parentTaskbar, taskElement, mileStone, progressBorder,
                    taskbarBorder,
                    taskbarText,
                    baseline;

                    taskbarContainer = $ganttChartRows[index];

                    if ($(taskbarContainer).hasClass("e-ganttrowcell")) {
                        taskElement = $(taskbarContainer).find("td.e-chartcell").has("div.e-childContainer,div.e-parentContainer,div.e-gantt-milestone")[0].firstChild;
                        if ($(taskbarContainer).find(".e-gantt-milestone-container").closest('div').length > 0)
                            mileStone = $(taskbarContainer).find(".e-gantt-milestone-container").closest('div')[0];

                        if ($(taskbarContainer).find(".e-baselinebar").closest('div').length > 0)
                            baseline = $(taskbarContainer).find(".e-baselinebar").closest('div')[0];

                        if ($(taskElement).hasClass("e-parentContainer")) {
                            parentTaskbar = taskElement.querySelector(".e-gantt-parenttaskbar-innerdiv");
                            parentProgressbar = taskElement.querySelector(".e-gantt-parenttaskbar-progress");
                        } else if ($(taskElement).hasClass("e-childContainer")) {

                            taskbar = taskElement.querySelector(".e-gantt-childtaskbar");
                            progressbar = taskElement.querySelector(".e-gantt-childtaskbar-progress");
                            taskbarText = progressbar && progressbar.querySelector(".e-tasklabel");
                        }

                        args.data = this.model.currentViewData[index];
                        args.taskbar = taskbarContainer;

                        args.taskbarBackground = taskbar != null ?
                            taskbar.style.backgroundColor : null;

                        args.progressbarBackground = progressbar != null ?
                            progressbar.style.backgroundColor : null;

                        args.parentTaskbarBackground = parentTaskbar != null ?
                            parentTaskbar.style.backgroundColor : null;

                        args.parentProgressbarBackground = parentProgressbar != null ?
                            parentProgressbar.style.backgroundColor : null;

                        args.parentProgressbarBorder = parentProgressbar != null ?
                            parentProgressbar.style.border : null;

                        args.progressbarBorder = progressbar != null ?
                            progressbar.style.border : null;

                        args.taskbarBorder = taskbar != null ?
                            taskbar.style.border : null;

                        args.parentTaskbarBorder = parentTaskbar != null ?
                            parentTaskbar.style.border : null;

                        args.taskbarTextColor = taskbarText != null ?
                            taskbarText.style.color : null;

                        args.baselineBackground = baseline != null ?
                            baseline.style.backgroundColor : null;

                        args.milestoneBackground = mileStone != null ?
                            mileStone.style.backgroundColor : null;

                        this._queryTaskbarinfo(args);
                    }

        },
        //REFRESH THE SCROLLER FOR TREEGRIDCONTENT
        refreshScroller: function (panSize) {

            var proxy = this,maxScrollWidth;
            //proxy._$gridContent.css({'width':panSize+"px"});
            proxy._$bodyContainer.find("div.e-content").removeClass("e-borderbox");
            var scrollTop = proxy._$bodyContainer.ejScroller("option", "scrollTop");
            var scrollLeft = proxy._$bodyContainer.ejScroller("option", "scrollLeft");
            proxy._$bodyContainer.ejScroller("option", { "width": panSize });
            proxy._$bodyContainer.ejScroller("refresh");
            maxScrollWidth=proxy.getMaxScrollWidth();
            
            if (scrollLeft > maxScrollWidth)
                scrollLeft = maxScrollWidth > 0 ? maxScrollWidth : 0;

            var isHorizontalScroll = proxy._$bodyContainer.ejScroller("isHScroll");
            if (!isHorizontalScroll) {
                proxy._$bodyContainer.find("div.e-content").addClass("e-borderbox");
            }
            else {
                proxy._$bodyContainer.find("div.e-content").removeClass("e-borderbox");
            }
            var isVerticalScroll = proxy._$bodyContainer.ejScroller("isVScroll");
            if (isVerticalScroll)
            {
                proxy._$bodyContainer.ejScroller("scrollY", scrollTop, true);
            }
            proxy._$bodyContainer.ejScroller("option", "scrollLeft", scrollLeft);
            proxy._$headerContainer.scrollLeft(scrollLeft);

        },
        getMaxScrollWidth:function()
        {
            var proxy = this;
            return proxy._$bodyContainer.children(".e-content").children().width() - proxy._$bodyContainer.children(".e-content").width();
        },

        /* refresh stripLines Collection*/
        refreshStripLines:function (stripLines)
        {
            var proxy = this;
            if (stripLines) {
                this.model.stripLines = stripLines;
            }
            proxy._$stripLineContainer.empty();
            this._renderStripLines(this.model.stripLines);

        },
        /* refresh holidays Collection*/
        refreshHolidays: function (holidays) {
            //Display Holidays
            var proxy = this;
            if (holidays) {
                proxy.model.holidays = holidays
            }
            proxy._$secondaryCanvas.empty();
            if (proxy.model.holidays != null) {
                var holidayCount = proxy.model.holidays.length;
                for (var i = 0; i < holidayCount; i++) {
                    proxy._renderHoliday(proxy.model.holidays[i]);
                }
            }
        },

        //insert new record in DOM 
        renderNewAddedRow:function(index, data)
        {
            var proxy = this, model = proxy.model,
            addedchartRow = $.render[this._id + "_CustomTemplate2"](data);
            if (proxy._ganttChartRows.length != 0) {
                if (proxy._ganttChartRows.length == index) {
                    proxy.getGanttChartRows().eq(index - 1).after(addedchartRow);
                } else {
                    proxy.getGanttChartRows().eq(index).before(addedchartRow);
                }
            } else {
                proxy._refresh();
            }
            proxy._setGanttChartRows($(proxy._$ganttViewTablebody[0].childNodes));
            proxy._$gridLinesTablebody.empty().append(proxy._createGridLinesTableRow(proxy.model.updatedRecords.length - proxy._totalCollapsedRecordCount));
            if (model.enableVirtualization === false) {
                proxy._setHeight((proxy.model.updatedRecords.length - proxy._totalCollapsedRecordCount) * proxy.model.rowHeight);

            } else {
                proxy._setHeight(proxy.model.updatedRecords.length * proxy.model.rowHeight);
            }
            proxy.updateHeight(proxy._containerHeight);

        },

        _setGanttChartRows: function (value) {
            this._ganttChartRows = value;
        },

        refreshChartHeader:function(startdate,enddate)
        {
            var proxy = this,
            model = proxy.model,
            scheduleMode = model.scheduleHeaderSettings.scheduleHeaderType,
            $colsgroup, $column, $thead,
            $tr, $td, $div, $table;
            proxy._updateScheduleWidth();
            if (scheduleMode == "month") {
                proxy._createScheduleTopMonthTemplate();
            }
            
            startdate = startdate == null ? new Date() : startdate;
            enddate = enddate == null ? new Date(null) : enddate;
            proxy._$scheduleDiv.empty();
            $table = ej.buildTag("table.e-schedule-headerrow-week", "",
                { 'display': 'block' },
                { 'cell-spacing': '0' }
            );

            $colsgroup = ej.buildTag("colgroup", "", {}, {});
            $column = $(document.createElement("col"));
            $column.css("width", proxy._getScheduleLength(scheduleMode) + 'px');

            $colsgroup.append($column);

            $thead = ej.buildTag("thead.e-ejganttschedule", "",
                { 'display': 'block', 'border-collapse': 'collapse' }, {});

            if (scheduleMode == "week")
                $tr = ej.buildTag("tr", $.render[this._id + "ScheduleWeekTemplate"](model.scheduleWeeks), {}, {});
            else if (scheduleMode == "year")
                $tr = ej.buildTag("tr", $.render[this._id + "ScheduleYearTemplate"](model.scheduleYears), {}, {});
            else if (scheduleMode == "month")
                $tr = ej.buildTag("tr", $.render[this._id + "ScheduleTopMonthTemplate"](model.scheduleMonths), {}, {});
            else if (scheduleMode == "day")
                $tr = ej.buildTag("tr", $.render[this._id + "ScheduleTopDayTemplate"](model.scheduleDays), {}, {});
            else if (scheduleMode == "hour")
                $tr = ej.buildTag("tr", $.render[this._id + "ScheduleTopHourTemplate"](model.scheduleHours), {}, {});

            $td = ej.buildTag("th.schedule", "", {}, {});
            $div = ej.buildTag("div.schedule", "", { 'width': 20 + 'px' }, {});
            $td.append($div);
            $tr.append($td);

            $thead.append($tr);
            $table.append($colsgroup);
            $table.append($thead);
            proxy._$scheduleDiv.append($table);

            $tr = null;

            $table = ej.buildTag("table.e-schedule-headerrow-day", "",
                {
                    'display': 'block',
                    'border-collapse': 'collapse'
                }, { 'cell-spacing': '0' });
            $thead = ej.buildTag("thead.e-ejganttschedule", "",
                { 'display': 'block', 'border-collapse': 'collapse' }, {});

            var scheduleMonths = proxy._getScheduleMonth(new Date(model.scheduleYears[0]), enddate);
            if (scheduleMode == "week")
                $tr = ej.buildTag("tr", $.render[this._id + "_CustomTemplate1"](proxy.model.scheduleWeeks), {}, {});
            if (scheduleMode == "year")
                $tr = ej.buildTag("tr", $.render[this._id + "ScheduleMonthTemplate"](scheduleMonths), {}, {});
            if (scheduleMode == "month") {
                proxy._numOfWeeks = proxy._getNumberOftWeeks(this.model.projectStartDate, this.model.projectEndDate);
                $tr = ej.buildTag("tr", $.render[this._id + "ScheduleBottomWeekTemplate"](proxy._numOfWeeks), {}, {});
            }
            if (scheduleMode == "day")
                $tr = ej.buildTag("tr", $.render[this._id + "scheduleHourTemplate"](proxy._getScheduleHours()), {}, {});
            if (scheduleMode == "hour")
                $tr = ej.buildTag("tr", $.render[this._id + "scheduleMinuteTemplate"](proxy._getScheduleMinutes()), {}, {});

            $td = ej.buildTag("th.schedule", "", {}, {});
            $div = ej.buildTag("div.schedule", "", { 'width': 20 + 'px' }, {});
            $td.append($div);
            $tr.append($td);

            $thead.append($tr);
            $table.append($colsgroup);
            $table.append($thead);
            proxy._$scheduleDiv.append($table);
        },


        //update all containers width
        refreshContainersWidth:function()
        {
            var proxy = this,
                width, model = this.model,
                scheduleMode = model.scheduleHeaderSettings.scheduleHeaderType;
            width = proxy._getScheduleLength(scheduleMode),
            $gridLineContainerTable=$("#ganttgridLinesTable" + proxy._id);

            proxy._$bodyContent.width(width);//main body container
            proxy.refreshWeekEndContainer();//weekENd Container
            $gridLineContainerTable.width(width);
            $gridLineContainerTable.children("col").width(width);
            proxy._$ganttViewTable.width(width);
            proxy._$ganttViewTable.children("col").width(width);
            proxy._createTaskbarTemplate();
            proxy._updateCurrentViewData();
            proxy._$secondaryCanvas.empty();
            proxy._$stripLineContainer.empty();
            if (proxy.model.stripLines != null) {
                this._renderStripLines(proxy.model.stripLines);
            }
            if (proxy.model.holidays != null) {
                var holidayCount = proxy.model.holidays.length;
                for (var i = 0; i < holidayCount; i++) {
                    proxy._renderHoliday(proxy.model.holidays[i]);
                }
            }
        },
        //refresh week ends when schedule dates changes
        refreshWeekEndContainer:function()
        {
            var proxy = this,
                left = 0,
                width = (proxy.model.perDayWidth) + 1,
                height = ((proxy.model.updatedRecords.length) * this.model.rowHeight),
                count = proxy.model.scheduleWeeks.length,
                $sunday, $saturday,
                $weekendContainer = proxy._$weekendsContainer.children('.e-secondary_canvas');
                $weekendContainer.empty();


                for (var i = 0; i < count; i++) {
                    $sunday = ej.buildTag("div.e-weekends", "", {
                        'left': left + 'px',
                        'width': width + 'px',
                        'height': height + 'px',
                        'background-color': this.model.weekendBackground
                    }, {});
                    $saturday = ej.buildTag("div.e-weekends", "", {
                        'left': (left + (proxy.model.perDayWidth * 6)) + 'px',
                        'width': width + 'px',
                        'height': height + 'px',
                        'background-color': this.model.weekendBackground
                    }, {});
                    $weekendContainer.append($sunday);
                    $weekendContainer.append($saturday);
                    left = left + this._scheduleWeekWidth;
                }
                proxy._$weekendsContainer.append($weekendContainer);
        },
        //delete gantt chart rows without rerendering of whole page
        deleteChartRows: function (startIndex, count) {
            var proxy = this;
            var $chartRows = proxy.getGanttChartRows();
            for (var i = startIndex; i < startIndex + count; i++) {
                $chartRows.splice(i, 1);
            }
        },


        //helper method to bind querytaskbarinfo events to ganttchart rows
        _eventBindings: function () {

            var $ganttChartRows = $(this.getGanttChartRows()),
                rowsLength = $ganttChartRows.length,
                taskbarContainer,
                args = {}, progressbar, taskbar,
                parentProgressbar,manualParentTaskbar, parentTaskbar, taskElement, mileStone, taskbarText, baseline;

            if (rowsLength != 0) {

                for (var row = 0; row < rowsLength; row++) {

                    taskbarContainer = $ganttChartRows[row];

                    if ($(taskbarContainer).hasClass("e-ganttrowcell")) {
                        taskElement = $(taskbarContainer).find("td.e-chartcell").has("div.e-childContainer,div.e-parentContainer,div.e-gantt-milestone")[0].firstChild;
                        if ($(taskbarContainer).find(".e-gantt-milestone-container").closest('div').length > 0)
                            mileStone = $(taskbarContainer).find(".e-gantt-milestone-container").closest('div')[0];

                        if ($(taskbarContainer).find(".e-baselinebar").closest('div').length > 0)
                            baseline = $(taskbarContainer).find(".e-baselinebar").closest('div')[0];
                        
                        if ($(taskElement).hasClass("e-parentContainer")) {
                            parentTaskbar = taskElement.querySelector(".e-gantt-parenttaskbar-innerdiv");
                            parentProgressbar = taskElement.querySelector(".e-gantt-parenttaskbar-progress");
                            manualParentTaskbar = taskElement.querySelector(".e-gantt-manualparenttaskbar");
                        } else if ($(taskElement).hasClass("e-childContainer")) {

                            taskbar = taskElement.querySelector(".e-gantt-childtaskbar");
                            progressbar = taskElement.querySelector(".e-gantt-childtaskbar-progress");
                            taskbarText = progressbar && progressbar.querySelector(".e-tasklabel");
                        }

                        args.data = this.model.currentViewData[row];
                        args.taskbar = taskbarContainer;

                        args.taskbarBackground = taskbar != null ?
                            taskbar.style.backgroundColor : null;

                        args.progressbarBackground = progressbar != null ?
                            progressbar.style.backgroundColor : null;

                        args.parentTaskbarBackground = parentTaskbar != null ?
                            parentTaskbar.style.backgroundColor : null;

                        args.parentProgressbarBackground = parentProgressbar != null ?
                            parentProgressbar.style.backgroundColor : null;

                        args.parentProgressbarBorder = parentProgressbar != null ?
                            parentProgressbar.style.border : null;

                        args.progressbarBorder = progressbar != null ?
                            progressbar.style.border : null;

                        args.taskbarBorder = taskbar != null ?
                            taskbar.style.border : null;

                        args.parentTaskbarBorder = parentTaskbar != null ?
                            parentTaskbar.style.border : null;

                        args.taskbarTextColor = taskbarText != null ?
                            taskbarText.style.color : null;

                        args.baselineBackground = baseline != null ?
                            baseline.style.backgroundColor : null;

                        args.milestoneBackground = mileStone != null ?
                            mileStone.style.backgroundColor : null;

                        if (args.data.hasChildRecords && !args.data.isAutoSchedule) {

                            args.manualParentTaskbarBackground = manualParentTaskbar != null ?
                                manualParentTaskbar.style.backgroundColor : null;
                        }

                        this._queryTaskbarinfo(args);
                    }
                }
            }
        },


        //to update the currentviewdata of ganttchart
        _updateCurrentViewData: function () {
            var proxy = this, margin = 0;
            if (!this.model.enableVirtualization) {
                this.model.currentViewData = this.model.updatedRecords;
            }
            else {
                this._getRenderedRowRange();

                //console.log("Gantt Chart Rendered Range Top: " + proxy._renderedRange.top + "Bottom :" + proxy._renderedRange.bottom);

                this.model.currentViewData = this.model.updatedRecords.slice(proxy._renderedRange.top,
                    proxy._renderedRange.bottom);
                if (proxy._vscrollDist !== 0) {
                    margin = proxy._scrollTop;
                    margin -= proxy._rowMargin;
                    $("#ganttViewTable" + proxy._id + "").css({ "top": margin + "px" });
                    $("#ganttgridLinesTable" + proxy._id + "").css({ "top": margin + "px" });
                }
                proxy._vTop = proxy._visibleRange.top;
                proxy._vBottom = proxy._visibleRange.bottom;
                proxy._rTop = proxy._renderedRange.top;
                proxy._rBottom = proxy._renderedRange.bottom;
            }

        },

       
        //to render ganttchart content
        renderGanttRecords: function () {

            var proxy = this;
            proxy._refresh();
            proxy._$ganttViewTable.append(proxy._$ganttViewTablebody);
            proxy._$bodyContent.append(proxy._$ganttViewTable);
        },

        _getRenderedRowRange: function () {

            var proxy = this;
            proxy._getVisibleRowRange();
            var topIndex = proxy._visibleRange.top;
            var bottomIndex = proxy._visibleRange.bottom;
            proxy._renderedRange = { top: topIndex, bottom: bottomIndex };
            return proxy._renderedRange;
        },

        _getVisibleRowRange: function () {

            var proxy = this,
                top = proxy._scrollTop / proxy.model.rowHeight,
                coeff = top - Math.floor(top),
                topIndex,
                bottomIndex, length;

            //console.log("GanttChart ScrollTop :" + proxy._scrollTop);

            proxy._rowMargin = coeff * proxy.model.rowHeight;
            topIndex = Math.floor(top);
            length = proxy.model.updatedRecords.length;
            bottomIndex = proxy._getrowposition(proxy._scrollTop + proxy._viewportHeight);
            topIndex = Math.max(0, topIndex);
            bottomIndex = Math.min(length, bottomIndex);
            proxy._visibleRange = { top: topIndex, bottom: bottomIndex };
        },

        _getrowposition: function (y) {
            return Math.ceil((y) / this.model.rowHeight);
        },


        //returns the date object
        _getDateType: function (date) {

            if (date instanceof Date) {
                return date;
            }
            else if (date != null) {
                return ej.parseDate(date, this.model.dateFormat, this.model.locale);
            }
            return null;
        },

        // Returns the date as per date format
        _getDateFromFormat: function (date) {

            if (typeof date === "object") {
                return new Date(date);
            }
            if (date) {
                return ej.parseDate(date, this.model.dateFormat, this.model.locale) == null ?
                    new Date(date) : ej.parseDate(date, this.model.dateFormat, this.model.locale);
            }
        },

        _createScheduleTopDayTemplate: function () {
            var proxy = this,
                model = proxy.model,
                dayFormat = model.scheduleHeaderSettings.dayHeaderFormat == "" && model.scheduleHeaderSettings.scheduleHeaderType == "day"
                            ? "ddd" : model.scheduleHeaderSettings.dayHeaderFormat,
                helpers = {
                    renderDayTop: $.proxy(proxy._getDaySplit, proxy),
                };
            $.views.helpers(helpers);

            var parentTr = "<th class='e-schedule-week-headercell' style='box-sizing:border-box;-moz-box-sizing:border-box;'>";

            td = "<div class='e-schedule-week-headercell-content'  style='width:"
                + ((proxy.model.perHourWidth*24)-1) + "px;margin:auto;white-space:nowrap;'>"
                + "{{:~renderDayTop('" + dayFormat + "',#data)}}" + "</div>" +
            "</div>"

            parentTr += td;
            parentTr += "</th>";

            var templates = {};
            templates[proxy._id + "ScheduleTopDayTemplate"] = parentTr;
            $.templates(templates);
        },

        //helper methood for day schedule mode

        _getDaySplit: function (dateformat,data) {
            var date = new Date(data),
               proxy = this,
               model = proxy.model,
               formatedDate;
            switch (dateformat) {
                case "D":
                case "d":
                    return date.getDate();
                case "DD":
                case "dd":
                    return (('0' + date.getDate()).slice(-2));
                case "DDD":
                case "ddd":
                case "DDDD":
                case "dddd":
                    return ej.format(date, dateformat, model.locale);
            }
            formatedDate = ej.format(date, dateformat, model.locale);
            return formatedDate;
        },


        // Month Week Schedule Mode

        _createScheduleTopMonthTemplate: function () {

            var proxy = this, td, i = 0,
                model = proxy.model,
                monthFormat = model.scheduleHeaderSettings.monthHeaderFormat,
                helpers = {
                    renderMonthTop: $.proxy(proxy._getMonthsplit, proxy),
                    setMonthWidth: $.proxy(proxy._setMonthWidth, proxy),
                    isLastMonth: $.proxy(proxy._checkLastMonthWidth, proxy),
                };

            $.views.helpers(helpers);
            var parentTr = "<th class='e-schedule-week-headercell' style='box-sizing:border-box;-moz-box-sizing:border-box;'>";

            td = "<div class='e-schedule-week-headercell-content'  style='margin:auto;white-space:nowrap;width:{{:~setMonthWidth(#data)-1}}" + "px;'>"
                + "{{:~renderMonthTop('" + monthFormat + "',#data)}}" + "</div>"
                 +"{{if ~isLastMonth(#data)}}"
                 + "<th class='e-schedule-week-headercell' style='box-sizing:border-box;-moz-box-sizing:border-box;'>"
                    + "<div class='e-schedule-week-headercell-content' style='margin:auto;white-space:nowrap;width:" + (proxy._balanceWidth-1) + "px;'>"
                +"</div></th>{{/if}}"
            
                parentTr += td;
                parentTr += "</th>";
                //if (proxy._balanceWidth) {
                //    parentTr += tdx;
                //    parentTr += "</th>";
                //}

            var templates = {};
            templates[proxy._id + "ScheduleTopMonthTemplate"] = parentTr;
            $.templates(templates);
        },

        //helper method for calculating unique month width
        _setMonthWidth: function (data) {
            var proxy = this;
            var date;
            if (typeof data === "object") {
                date = new Date(data);
            }
            else {
                date = ej.parseDate(data, this.model.dateFormat, this.model.locale);
            }

            var monthLastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);

            var lastDate = monthLastDay.getDate();
            // condition to check whether first month having only few weeks.
            if (date.getTime() === proxy.model.scheduleMonths[0].getTime())
            {
                var datediff = monthLastDay.getDate() - date.getDate();
                return (this.model.perDayWidth * (datediff+1));
            }
            else if (lastDate == 31)
                return (this.model.perDayWidth * 31);
            else if (lastDate == 30)
                return (this.model.perDayWidth * 30);
            else if (lastDate == 28)
                return (this.model.perDayWidth * 28);
            else if (lastDate == 29)
                return (this.model.perDayWidth * 29);
        },

        _checkLastMonthWidth: function (data) {
            var proxy = this;
            if (data == proxy.model.scheduleMonths[proxy.model.scheduleMonths.length - 1] && proxy._balanceWidth>0) {
                return true;
            }
            else
            {
                return false;
            }
        },


        //helper method for _createScheduleMonthTemplate
        _getMonthsplit: function (monthFormat, data) {

            var date = new Date(data),
                proxy = this,
                model = proxy.model,
                formatedDate;

            formatedDate = ej.format(date, monthFormat, model.locale);
            return formatedDate;

        },


        _createScheduleYearTemplate: function () {

            var proxy = this, td,
                model = proxy.model,
                yearFormat = model.scheduleHeaderSettings.yearHeaderFormat,
                helpers = {
                    renderYear: $.proxy(proxy._getYearsplit, proxy),
                    getYearWidth: $.proxy(proxy._getTemplateYearWidth, proxy),
                };

            $.views.helpers(helpers);
            var parentTr = "<th class='e-schedule-week-headercell' style='box-sizing:border-box;-moz-box-sizing:border-box;'>";
            
            td = "<div class='e-schedule-week-headercell-content'  style='margin:auto;white-space:nowrap;width:{{:~getYearWidth(#data)-1}}px'>"
                + "{{:~renderYear('" + yearFormat + "',#data)}}" + "</div>";

            parentTr += td;
            parentTr += "</th>";

            var templates = {};
            templates[proxy._id + "ScheduleYearTemplate"] = parentTr;
            $.templates(templates);
        },

        //helper method for _createScheduleYearTemplate
        _getYearsplit: function (yearFormat, data) {

            var date = new Date(data),
                proxy = this,
                model = proxy.model,
                formatedDate;

            formatedDate = ej.format(date, yearFormat, model.locale);
            return formatedDate;

        },

        _getMonthWidthForYearMode: function (date) {
            var proxy = this,
                model = proxy.model,
                date,
                dayCount = 0;
                // get the number of months the year contains
                // endMonth = new Date(date.getFullYear(), 11, 31) < new Date(model.scheduleEndDate) ? 12 : new Date(model.scheduleEndDate).getMonth() + 1;
                //endMonth = new Date(date.getFullYear(), 11, 31) < new Date(model.scheduleEndDate) ? 12 : new Date(model.scheduleEndDate).getMonth() + 1;
            
            //loop through the each month to get the days count
            for (var i = date.getMonth() ; i < 12; i++) {
                var startDate = date;

                if (typeof startDate === "object") {
                    date = new Date(startDate);
                }
                else {
                    date = ej.parseDate(startDate, model.dateFormat, model.locale);
                }
                var monthLastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);
                var beginDate =date.getDate();
                var lastDate = monthLastDay.getDate();
                if (beginDate != 1)
                    dayCount += lastDate - date.getDate();
                else if (lastDate == 31)
                    dayCount += 31;
                else if (lastDate == 30)
                    dayCount += 30;
                else if (lastDate == 28)
                    dayCount += 28;
                else if (lastDate == 29)
                    dayCount += 29;
                date=new Date(date.getFullYear(), i+1, 1);

            }
            return dayCount;
        },

        _getTemplateYearWidth: function (date) {

            var year = date.getFullYear(),
                monthWidth = this._getMonthWidthForYearMode(date);
            return monthWidth * this.model.perDayWidth;
        },
        //Template to render schedule week view
        _createScheduleWeekTemplate: function () {

            var proxy = this, td,
                model = proxy.model,
                dateFormat = model.scheduleHeaderSettings.weekHeaderFormat,
                helpers = {
                    renderWeek: $.proxy(proxy._getWeeksplit, proxy)
                };

            $.views.helpers(helpers);
            var parentTr = "<th class='e-schedule-week-headercell' style='box-sizing:border-box;-moz-box-sizing:border-box;'>";

            td = "<div class='e-schedule-week-headercell-content'  style='width:"
                + (proxy._scheduleWeekWidth - 1) + "px;margin:auto;white-space:nowrap;'>"
                + "{{:~renderWeek('" + dateFormat + "',#data)}}" + "</div>";

            parentTr += td;
            parentTr += "</th>";

            var templates = {};
            templates[proxy._id + "ScheduleWeekTemplate"] = parentTr;
            $.templates(templates);
        },

        //helper method for _createScheduleWeekTemplate
        _getWeeksplit: function (dateFormat, data) {

            var date = new Date(data),
                proxy = this,
                model = proxy.model,
                formatedDate;
            //var values = dateFormat.split(' '),
            //    scheduleUnits = values[0].match(/(\d+|[A-z]+)/g),
            //    month = date.getMonth(),
            //    day = date.getDay() == 1 ? proxy._days("mon") : "",
            //    weekTemplate = [];

            //switch (month) {
            //    case 0:
            //        month = proxy._getLocalizedLabels("jan");
            //        break;
            //    case 1:
            //        month = proxy._getLocalizedLabels("feb");
            //        break;
            //    case 2:
            //        month = proxy._getLocalizedLabels("mar");
            //        break;
            //    case 3:
            //        month = proxy._getLocalizedLabels("apr");
            //        break;
            //    case 4:
            //        month = proxy._getLocalizedLabels("may");
            //        break;
            //    case 5:
            //        month = proxy._getLocalizedLabels("jun");
            //        break;
            //    case 6:
            //        month = proxy._getLocalizedLabels("jul");
            //        break;
            //    case 7:
            //        month = proxy._getLocalizedLabels("aug");
            //        break;
            //    case 8:
            //        month = proxy._getLocalizedLabels("sep");
            //        break;
            //    case 9:
            //        month = proxy._getLocalizedLabels("oct");
            //        break;
            //    case 10:
            //        month = proxy._getLocalizedLabels("nov");
            //        break;
            //    case 11:
            //        month = proxy._getLocalizedLabels("dec");
            //        break;
            //}

            //for (var i = 0; i < scheduleUnits.length; i++) {
            //    switch (scheduleUnits[i]) {//('0' + currentDate.getHours()).slice(-2)
            //        case "d":
            //        case "D":
            //            weekTemplate.push(('0' + date.getDate()).slice(-2));
            //            break;
            //        case "dd":
            //        case "DD":
            //            weekTemplate.push(date.getDate());
            //            break;
            //        case "ddd":
            //        case "DDD":
            //            weekTemplate.push(day.substring(0, 3));
            //            break;
            //        case "dddd":
            //        case "DDDD":
            //            weekTemplate.push(day);
            //            break;
            //        case "M":
            //        case "m":
            //            weekTemplate.push(('0' + date.getMonth() + 1).slice(-2));
            //            break;
            //        case "MM":
            //        case "mm":
            //            weekTemplate.push(date.getMonth() + 1);
            //            break;
            //        case "MMM":
            //        case "mmm":
            //            weekTemplate.push(month.substring(0, 3));
            //            break;
            //        case "MMMM":
            //        case "mmmm":
            //            weekTemplate.push(month);
            //            break;
            //        case "YY":
            //        case "yy":
            //            weekTemplate.push(('0' + date.getFullYear()).slice(-2));
            //            break;
            //        case "YYYY":
            //        case "yyyy":
            //            weekTemplate.push(date.getFullYear());
            //            break;
            //    }
            //}
            formatedDate = ej.format(date, dateFormat, model.locale);

            return formatedDate.toLowerCase().replace(/(-(\w)|(^| )(\w)|:(\w)|,(\w)|\/(\w)|\.(\w))/g, function (x) {
                return x.toUpperCase();
            });
        },

        _createScheduleHourTemplate: function () {
            var proxy = this, model = proxy.model,td,
                hourHeaderFormat = model.scheduleHeaderSettings.hourHeaderFormat,
                helpers = {
                    renderHour:$.proxy(proxy._getHourTemplate,proxy),
                };
            $.views.helpers(helpers);
            var parentTr = "<th  class='e-schedule-day-headercell' " +
                "style='-moz-box-sizing:border-box;box-sizing:border-box;'>";
            td = "<div class='e-schedule-day-headercell-content' style='width:"
                + (proxy.model.perHourWidth - 1) + "px;position:static;box-sizing:border-box;overflow:hidden;text-overflow:clip'>" +
                "{{:~renderHour('" + hourHeaderFormat + "',#data)}}</div>";

            parentTr += td;

            parentTr += "</th>";
            var templates = {};
            templates[proxy._id + "scheduleHourTemplate"] = parentTr;
            $.templates(templates);
        },
        //Method to create template for upper part of schedule header in hour-minute schedule mode.
        _createScheduleTopHourTemplate: function () {
            var proxy = this, model = proxy.model, minuteInterval = model.minuteInterval, td, interval,
                hourHeaderFormat = model.scheduleHeaderSettings.hourHeaderFormat,
                helpers = {
                    renderHour: $.proxy(proxy._getHourTemplate, proxy),
                };
            if (minuteInterval == 30)
                interval = 2;
            if (minuteInterval == 15)
                interval = 4;
            if (minuteInterval == 5)
                interval= 12;
            if (minuteInterval == 1)
                interval = 60;
            proxy._totalInterval = interval;//To calculate schedule length
            $.views.helpers(helpers);
            var parentTr = "<th  class='e-schedule-hour-headercell' " +
                "style='-moz-box-sizing:border-box;box-sizing:border-box;'>";
            td = "<div class='e-schedule-hour-headercell-content' style='width:"
                + ((proxy.model.perMinuteWidth*interval)-1) + "px;position:static;box-sizing:border-box;overflow:hidden;text-overflow:clip'>" +
                "{{:~renderHour('" + hourHeaderFormat + "',#data)}}</div>";

            parentTr += td;

            parentTr += "</th>";
            var templates = {};
            templates[proxy._id + "ScheduleTopHourTemplate"] = parentTr;
            $.templates(templates);
        },
        //Method to create template for lower part of schedule header in hour-minute schedule mode.
        _createMinuteTemplate: function () {
            var proxy = this, model = proxy.model, td,
                hourHeaderFormat = model.scheduleHeaderSettings.minuteHeaderFormat,
                helpers = {
                    renderHour: $.proxy(proxy._getHourTemplate, proxy),
                };
            $.views.helpers(helpers);
            var parentTr = "<th  class='e-schedule-hour-headercell' " +
                "style='-moz-box-sizing:border-box;box-sizing:border-box;'>";
            td = "<div class='e-schedule-hour-headercell-content' style='width:"
                + (proxy.model.perMinuteWidth-1) + "px;position:static;box-sizing:border-box;overflow:hidden;text-overflow:clip'>" +
                "{{:~renderHour('" + hourHeaderFormat + "',#data)}}</div>";

            parentTr += td;

            parentTr += "</th>";
            var templates = {};
            templates[proxy._id + "scheduleMinuteTemplate"] = parentTr;
            $.templates(templates);
        },
        _getHourTemplate: function (format,data) {
            var date = new Date(data),
              proxy = this,
              model = proxy.model,
              formatedDate;

            formatedDate = ej.format(date, format, model.locale);
            return formatedDate;
        },


        //Template to render schedule week view in month-week schedule mode
        _createScheduleBottomWeekTemplate: function () {

            var proxy = this, td, model = proxy.model,
                weekFormat = model.scheduleHeaderSettings.weekHeaderFormat,
                helpers = {
                    renderWeek: $.proxy(proxy._getMonthWeekTemplate, proxy)
                };

            $.views.helpers(helpers);

            var parentTr = "<th  class='e-schedule-day-headercell' " +
                "style='-moz-box-sizing:border-box;box-sizing:border-box;'>";
            td = "<div class='e-schedule-day-headercell-content' style='position:static;box-sizing:border-box;overflow:hidden;text-overflow:clip;padding-left:2px;width:" + (proxy.model.perWeekWidth-1) + "px;'>" +
                "{{:~renderWeek('" + weekFormat + "',#data)}}</div>";

            parentTr += td;

            parentTr += "</th>";
            var templates = {};
            templates[proxy._id + "ScheduleBottomWeekTemplate"] = parentTr;
            $.templates(templates);
        },

        _getMonthWeekTemplate: function (weekFormat, data) {

            var date = new Date(data),
                proxy = this, model = proxy.model;

            //date.setDate(date.getDate() + (weekLength * 7));

            switch (weekFormat) {
                case "d":
                case "dd":
                    //return (('0' + date.getDate()).slice(-2));
                case "ddd":

                default: return ej.format(date, weekFormat, model.locale);
            }
        },




        //Template to render schedule day view
        _createScheduleMonthTemplate: function () {

            var proxy = this, td, model = proxy.model,
                monthFormat = model.scheduleHeaderSettings.monthHeaderFormat,
                helpers = {
                    renderMonth: $.proxy(proxy._getMonthTemplate, proxy),
                    getMonthWidth: $.proxy(proxy._setMonthWidthYearMode, proxy)
                };

            $.views.helpers(helpers);

            var parentTr = "<th  class='e-schedule-day-headercell' " +
                "style='-moz-box-sizing:border-box;box-sizing:border-box;'>" +

                "<div class='e-schedule-day-headercell-content' style='"
                + "position:static;box-sizing:border-box;overflow:hidden;text-overflow:clip;width:{{:~getMonthWidth(#data)-1}}px;'>" +
                "{{:~renderMonth('" + monthFormat + "',#data)}}</div></th>";

            
            var templates = {};
            templates[proxy._id + "ScheduleMonthTemplate"] = parentTr;
            $.templates(templates);
        },

        _getMonthTemplate: function (monthFormat, data) {

            var date = new Date(data),
                proxy = this, model = proxy.model;
            switch (monthFormat) {
                case "M":
                case "m":
                    return (('0' + date.getDate()).slice(-2));
                case "MM":
                case "mm":
                    return date.getDate();
                case "MMM":
                case "mmm":
                case "MMMM":
                case "mmmm":
                    return ej.format(date, monthFormat, model.locale);
                default: return ej.format(date, monthFormat, model.locale);
            }
        },

        //For year template set month width accordance with num of days
        _setMonthWidthYearMode: function (data) {

            var proxy = this;
            var date = new Date(data);
            var monthLastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);

            var beginDate = date.getDate();
            var lastDate = monthLastDay.getDate();

            if (beginDate != 1)
                return (this.model.perDayWidth * (lastDate - date.getDate()))
            else if (lastDate == 31)
                return (this.model.perDayWidth * 31);
            else if (lastDate == 30)
                return (this.model.perDayWidth * 30);
            else if (lastDate == 28)
                return (this.model.perDayWidth * 28);
            else if (lastDate == 29)
                return (this.model.perDayWidth * 29);

        },


        //Template to render schedule day view
        _createScheduleDayTemplate: function () {

            var proxy = this, td, model = proxy.model,
                dayFormat = model.scheduleHeaderSettings.dayHeaderFormat == "" && model.scheduleHeaderSettings.scheduleHeaderType == "day"
                            ? "ddd" : model.scheduleHeaderSettings.dayHeaderFormat,
                helpers = {
                    renderDay: $.proxy(proxy._getDayTemplate, proxy)
                };

            $.views.helpers(helpers);

            var parentTr = "<th  class='e-schedule-day-headercell  e-headercell-weekend' " +
                "style='-moz-box-sizing:border-box;box-sizing:border-box;" +
                "background-color:" + this.model.scheduleHeaderSettings.weekendBackground + "'>";
            td = "<div class='e-schedule-day-headercell-content' style='width:"
                + (proxy.model.perDayWidth - 1) + "px;position:static;box-sizing:border-box;overflow:hidden;text-overflow:clip'>" +
                "{{:~renderDay('" + dayFormat + "',0,#data)}}</div>" +

                "<th  class='e-schedule-day-headercell' " +
                "style='-moz-box-sizing:border-box;box-sizing:border-box;'>" +
                "<div class='e-schedule-day-headercell-content' style='width:"
                + (proxy.model.perDayWidth - 1) + "px;position:static;box-sizing:border-box;overflow:hidden;text-overflow:clip'>" +
                "{{:~renderDay('" + dayFormat + "',1,#data)}}</div>" +

                "<th  class='e-schedule-day-headercell' " +
                "style='-moz-box-sizing:border-box;box-sizing:border-box;'>" +
                "<div class='e-schedule-day-headercell-content' style='width:"
                + (proxy.model.perDayWidth - 1) + "px;position:static;box-sizing:border-box;overflow:hidden;text-overflow:clip'>" +
                "{{:~renderDay('" + dayFormat + "',2,#data)}}</div>" +

                "<th  class='e-schedule-day-headercell' " +
                "style='-moz-box-sizing:border-box;box-sizing:border-box;'>" +
                "<div class='e-schedule-day-headercell-content' style='width:"
                + (proxy.model.perDayWidth - 1) + "px;position:static;box-sizing:border-box;overflow:hidden;text-overflow:clip'>" +
                "{{:~renderDay('" + dayFormat + "',3,#data)}}</div>" +

                "<th  class='e-schedule-day-headercell'" +
                " style='-moz-box-sizing:border-box;box-sizing:border-box;'>" +
                "<div class='e-schedule-day-headercell-content' style='width:"
                + (proxy.model.perDayWidth - 1) + "px;position:static;box-sizing:border-box;overflow:hidden;text-overflow:clip'>" +
                "{{:~renderDay('" + dayFormat + "',4,#data)}}</div>" +

                "<th  class='e-schedule-day-headercell'" +
                " style='-moz-box-sizing:border-box;box-sizing:border-box;'>" +
                "<div class='e-schedule-day-headercell-content' style='width:"
                + (proxy.model.perDayWidth - 1) + "px;position:static;box-sizing:border-box;overflow:hidden;text-overflow:clip'>" +
                "{{:~renderDay('" + dayFormat + "',5,#data)}}</div>" +

                "<th  class='e-schedule-day-headercell  e-headercell-weekend' " +
                "style='-moz-box-sizing:border-box;box-sizing:border-box;" +
                "background-color:" + this.model.scheduleHeaderSettings.weekendBackground + "'>" +
                "<div class='e-schedule-day-headercell-content' style='width:"
                + (proxy.model.perDayWidth - 1) + "px;position:static;box-sizing:border-box;overflow:hidden;text-overflow:clip'>" +
                "{{:~renderDay('" + dayFormat + "',6,#data)}}</div>";

            parentTr += td;
            parentTr += "</th>";
            var templates = {};
            templates[proxy._id + "_CustomTemplate1"] = parentTr;
            $.templates(templates);
        },

        _getDayTemplate: function (dayFormat, dayLength, data) {

            var date = new Date(data),
                proxy = this, model = proxy.model;
            date.setDate(date.getDate() + dayLength);

            switch (dayFormat) {
                case "D":
                case "d":
                    return date.getDate();
                case "DD":
                case "dd":
                    return (('0' + date.getDate()).slice(-2));                    
                case "DDD":
                case "ddd":
                case "DDDD":
                case "dddd":
                    return ej.format(date, dayFormat, model.locale);                                  
                case "":
                    dayFormat = "ddd";
                    return ej.format(date, dayFormat, model.locale)[0].toUpperCase();
                default:                    
                    return ej.format(date, dayFormat, model.locale).toUpperCase();
            }
        },

        // get schedule months for year month schedule mode.
        _getScheduleMonth: function (startdate, enddate) {
            var proxy = this,
                model = proxy.model,
                dates = [],
                count = 0;

            enddate = enddate.getMonth() < 11 ? new Date(enddate.getFullYear(), 11, 31) : enddate;
            endMonth = new Date(startdate.getFullYear(), 11, 31) < new Date(model.scheduleEndDate) ? 12 : new Date(model.scheduleEndDate).getMonth() + 1;

          
            for (var i = startdate.getMonth() ; startdate < enddate; i++) {
                dates.push(startdate);
                startdate = new Date(startdate.getFullYear(), startdate.getMonth() + 1, 1);
                //startdate.setMonth(i + 1);
            }

            return dates;
        },


        //Method to render schedule header
        _createSchedule: function (startdate, enddate) {

            var proxy = this,
                model=proxy.model,
                scheduleMode = model.scheduleHeaderSettings.scheduleHeaderType,
                $colsgroup, $column, $thead,
                $tr, $td, $div, $table;

            startdate = startdate == null ? new Date() : startdate;
            enddate = enddate == null ? new Date(null) : enddate;

            proxy._createScheduleWeekTemplate();
            proxy._createScheduleYearTemplate();
            proxy._createScheduleTopMonthTemplate();//template for MONTH week schedule mode
            proxy._createScheduleTopDayTemplate();
            proxy._createScheduleTopHourTemplate();
            $table = ej.buildTag("table.e-schedule-headerrow-week", "",
                { 'display': 'block' },
                { 'cell-spacing': '0' }
            );

            $colsgroup = ej.buildTag("colgroup", "", {}, {});
            $column = $(document.createElement("col"));
            $column.css("width", proxy._getScheduleLength(scheduleMode) + 'px');
            
            $colsgroup.append($column);

            $thead = ej.buildTag("thead.e-ejganttschedule", "",
                { 'display': 'block', 'border-collapse': 'collapse' }, {});

            if (scheduleMode == "week")
                $tr = ej.buildTag("tr", $.render[this._id + "ScheduleWeekTemplate"](proxy.model.scheduleWeeks), {}, {});
            else if (scheduleMode == "year")
                $tr = ej.buildTag("tr", $.render[this._id + "ScheduleYearTemplate"](proxy.model.scheduleYears), {}, {});
            else if (scheduleMode == "month")
                $tr = ej.buildTag("tr", $.render[this._id + "ScheduleTopMonthTemplate"](proxy.model.scheduleMonths), {}, {});
            else if (scheduleMode == "day")
                $tr = ej.buildTag("tr", $.render[this._id + "ScheduleTopDayTemplate"](proxy.model.scheduleDays), {}, {});
            else if (scheduleMode == "hour")
                $tr = ej.buildTag("tr", $.render[this._id + "ScheduleTopHourTemplate"](proxy.model.scheduleHours), {}, {});

            $td = ej.buildTag("th.schedule", "", {}, {});
            $div = ej.buildTag("div.schedule", "", { 'width': 20 + 'px' }, {});
            $td.append($div);
            $tr.append($td);

            $thead.append($tr);
            $table.append($colsgroup);
            $table.append($thead);
            proxy._$scheduleDiv.append($table);

            $tr = null;

            proxy._createScheduleDayTemplate();
            proxy._createScheduleMonthTemplate();//for year - month schedule mode
            proxy._createScheduleBottomWeekTemplate(); //for month - week schedule mode
            proxy._createMinuteTemplate();
            proxy._createScheduleHourTemplate();

            $table = ej.buildTag("table.e-schedule-headerrow-day", "",
                {
                    'display': 'block',
                    'border-collapse': 'collapse'
                }, { 'cell-spacing': '0' });
            $thead = ej.buildTag("thead.e-ejganttschedule", "",
                { 'display': 'block', 'border-collapse': 'collapse' }, {});
            
            var scheduleMonths = proxy._getScheduleMonth(new Date(model.scheduleYears[0]), enddate);
            if (scheduleMode == "week")
                $tr = ej.buildTag("tr", $.render[this._id + "_CustomTemplate1"](model.scheduleWeeks), {}, {});
            if (scheduleMode == "year")
                $tr = ej.buildTag("tr", $.render[this._id + "ScheduleMonthTemplate"](scheduleMonths), {}, {});
            if (scheduleMode == "month")
                $tr = ej.buildTag("tr", $.render[this._id + "ScheduleBottomWeekTemplate"](proxy._numOfWeeks), {}, {});
            if (scheduleMode == "day")
                $tr = ej.buildTag("tr", $.render[this._id + "scheduleHourTemplate"](proxy._getScheduleHours()), {}, {});
            if (scheduleMode == "hour")               
                 $tr = ej.buildTag("tr", $.render[this._id + "scheduleMinuteTemplate"](proxy._getScheduleMinutes()), {}, {});

            $td = ej.buildTag("th.schedule", "", {}, {});
            $div = ej.buildTag("div.schedule", "", { 'width': 20 + 'px' }, {});
            $td.append($div);
            $tr.append($td);

            $thead.append($tr);
            $table.append($colsgroup);
            $table.append($thead);
            proxy._$scheduleDiv.append($table);

            proxy._$headerContainer.append(proxy._$scheduleDiv);
            proxy._$ganttChartContainer.append(proxy._$headerContainer);
            $("#" + proxy._id).append(proxy._$ganttChartContainer);
        },

        _getScheduleHours: function () {
            var proxy = this, model = proxy.model,
                startHour = new Date(proxy.model.projectStartDate),
                endHour = new Date(model.projectEndDate);
                proxy._scheduleHours = [];
                endHour.setHours(24);
            do {
                proxy._scheduleHours.push(new Date(startHour));
                startHour.setHours(startHour.getHours() + 1);
            } while (!(startHour.getTime()>= endHour.getTime()));

            return proxy._scheduleHours;
        },
        //Calculate total number of minutes to render template.
        _getScheduleMinutes: function () {
            var proxy = this, model = proxy.model,                
                startDate = new Date(proxy.model.projectStartDate),
                endDate = new Date(model.projectEndDate);
            endDate.setMinutes(60);
            startDate.setMinutes(00);
            proxy._scheduleMinutes = [];
            do {
                proxy._scheduleMinutes.push(new Date(startDate));
                startDate.setMinutes(startDate.getMinutes() + model.minuteInterval);
            } while (!(startDate.getTime() >= endDate.getTime()));
        
            return proxy._scheduleMinutes;
        },
        createGridLinesTable: function () {
            var proxy=this,
                model = proxy.model,
                $gridLinesTable,
                gridLineTable,
                scheduleMode = model.scheduleHeaderSettings.scheduleHeaderType,
                scheduleLength,
                tableRows;

            $gridLinesTable = ej.buildTag("table.e-ganttgridLinesTable#ganttgridLinesTable" + proxy._id, "", {
                'z-index': '2',
                'position': 'absolute',
            }, { 'cellspacing': '0px' });
            var $colsgroup = ej.buildTag("colgroup", "", {}, {});
            var $column = $(document.createElement("col"));

            switch (scheduleMode) {
                case "week":
                    scheduleLength = model.scheduleWeeks.length,
                    $gridLinesTable.css("width",(scheduleLength * proxy._scheduleWeekWidth) + 'px');
                    $column.css("width", (scheduleLength * this._scheduleWeekWidth) + 'px');
                    break;

                case "year":
                    scheduleLength = model.scheduleYears.length,                    
                    $gridLinesTable.css("width", (proxy._scheduleYearWidth) + 'px');
                    $column.css("width", (this._scheduleYearWidth) + 'px');

                    break;
                case "month":
                    scheduleLength = model.scheduleMonths.length,
                    $gridLinesTable.css("width", (proxy._scheduleMonthWidth) + 'px');
                    $column.css("width", (this._scheduleMonthWidth) + 'px');
                    break;
                case "day":
                    scheduleLength = model.scheduleDays.length,
                    $gridLinesTable.css("width", (scheduleLength * (proxy.model.perHourWidth*24)) + 'px');
                    $column.css("width", (scheduleLength * (proxy.model.perHourWidth * 24)) + 'px');
                    break;
                case "hour":
                    scheduleLength = model.scheduleHours.length,
                    $gridLinesTable.css("width", (scheduleLength * (proxy.model.perMinuteWidth * proxy._totalInterval)) + 'px');
                    $column.css("width", (scheduleLength * (proxy.model.perMinuteWidth * proxy._totalInterval)) + 'px');
                    break;
                default:
                    break;

            }

            $colsgroup.append($column);
            $gridLinesTable.append($colsgroup);

            tableRows = proxy._createGridLinesTableRow(model.updatedRecords.length);
            
            var $gridLinesTablebody = ej.buildTag("tbody.e-gantt-viewer-gridLinesTablebody#gridLinesTablebody" + proxy._id + "",
                tableRows, {}, {});
            proxy._$gridLinesTablebody = $gridLinesTablebody;
            $gridLinesTable.append(proxy._$gridLinesTablebody);
            proxy._$bodyContent.append($gridLinesTable);
        },


        _createGridLinesTableRow: function (length) {
            var proxy = this,
                tableRows="";

            for (var i = 0; i < length; i++) {
                tableRows += "<tr style='display:table-row;height:" + this.model.rowHeight + "px'><td class='e-ganttgridlines'></td></tr>"
            }
            return tableRows;
        },

        _SelectState: function (args) {
            var proxy = this,
                model = this.model;
            if (model.allowSelection)
                return true;
            else
                return false;
        },

        _getFontSize: function () {
            var proxy = this,
                model = proxy.model,
                rowHeight = model.rowHeight, fontSize;
            fontSize = (rowHeight - 10) * (3 / 4);
            var decimalPoint = fontSize % 1;
            fontSize = decimalPoint == 0.5 ? fontSize : (decimalPoint < 0.5 ? Math.floor(fontSize) : Math.ceil(fontSize));
            return fontSize;
        },
        _getLeftTaskLabel: function () {
            var proxy = this,
                model = proxy.model,
                leftMappingItems = "",
                length = model._columns.length;
         
            if (this.model.leftTaskLabelMapping == this.model.resourceNameMapping)
                leftMappingItems = "{{:~_resources(#data)}}";
            else if (this.model.leftTaskLabelMapping == this.model.predecessorMapping)
                leftMappingItems = "{{:predecessorsName}}";
            else {
                for (var i = 0; i < length; i++) {
                    if (this.model.leftTaskLabelMapping == model._columns[i].mappingName) {
                        leftMappingItems = "{{:" + model._columns[i].field + "}}";
                        break;
                    }
                }
            }
            if (leftMappingItems == "") {
                leftMappingItems = "{{:" + this.model.leftTaskLabelMapping + "}}";
            }
            return leftMappingItems;
        },
        _getRightTaskLabel: function () {
            var proxy = this,
                model = proxy.model,
                rightMappingItems = "",
                length = model._columns.length;
            if (this.model.rightTaskLabelMapping == this.model.resourceNameMapping)
                rightMappingItems = "{{:~_resources(#data)}}";
            else if (this.model.rightTaskLabelMapping == this.model.predecessorMapping)
                rightMappingItems = "{{:predecessorsName}}";
            else {
                for (var i = 0; i < length; i++) {
                    if (this.model.rightTaskLabelMapping == model._columns[i].mappingName) {
                        rightMappingItems = "{{:" + model._columns[i].field + "}}";
                        break;
                    }
                }
            }
            if (rightMappingItems == "") {
                rightMappingItems = "{{:" + this.model.rightTaskLabelMapping + "}}";
            }
            return rightMappingItems;
        },

        _getMargin: function () {
            var proxy = this,
                rowHeight = proxy.model.rowHeight, margin;
            margin = rowHeight * (1 / 6);
            var decimalPoint = margin % 1;
            margin = decimalPoint < 0.5 ? Math.floor(margin) : Math.ceil(margin);
            return margin;
        },

        _getResizerLeftAdjust: function () {
            var proxy = this,
                rowHeight = proxy.model.rowHeight,
                fontSize = proxy._fontSize,
                margin = proxy._resizerMargin, leftResize;
            leftResize = (rowHeight - 10) - (fontSize + margin);
            var decimalPoint = leftResize % 1;
            leftResize = decimalPoint < 0.5 ? Math.floor(leftResize) : Math.ceil(leftResize);
            leftResize = leftResize < 0 ? 0 : leftResize;
            return leftResize;
        },

        //Template to render taskbar and milestone items
        _createTaskbarTemplate: function () {

            var proxy = this,
                model = proxy.model,
                tdWidth,
                scheduleMode = model.scheduleHeaderSettings.scheduleHeaderType,
                tr, baselineHeight = 4, taskbarHeight,
                shrinkedTaskbarHeight = 0,
                milesStoneRadius = 0,
                connectorPointWidth = 0,
                connectorPointRadius = 0,
                connectorPointMargin = 0,
                tHeight = 0,
                leftLabelFlag = false,
                rightLabelFlag = false,
                leftField = "",
                touchLeftConnectorpoint = "",
                touchRightConnectorpoint = "",
                rightField = "", istouchLeftConnectorpoint = false,
                baselineColor = model.baselineColor,
                template = model.taskbarTemplate, taskbarTemplate, isTaskbarTemplate = false, isProgressbarTemplate = false,
                parentTemplate = model.parentTaskbarTemplate, parentTaskbarTemplate, isParentTaskbarTemplate = false, isParentProgressbarTemplate = false,
                milestoneTemplate = model.milestoneTemplate, isMilestoneTemplate = false, milestoneTemplateString = "",
                leftTaskLabelTemplate = model.leftTaskLabelTemplate, isLeftTaskLabelTemplate = false, leftTaskLabelTemplateString = "",
                rightTaskLabelTemplate = model.rightTaskLabelTemplate, isRightTaskLabelTemplate = false, rightTaskLabelTemplateString = "",
                helpers = {
                    _SelectState: $.proxy(proxy._SelectState, proxy),
                    _getType: proxy._getTypedata,
                    _expander: proxy._addRecordExpandCollapse,
                    _milestoneMapping: proxy._isMilestone,
                    _resources: $.proxy(proxy._getResourceInfo, proxy),
                    _rowClassName: ej.TreeGrid._getrowClassName,//proxy._getrowClassName,
                    _expandStatus: $.proxy(proxy._getExpandStatusRecord, proxy),
                    _borderRadius: proxy._getBorderRadius,
                };
            proxy._fontSize = proxy._getFontSize();
            proxy._resizerRightAdjust = proxy._fontSize * 0.8;
            proxy._resizerMargin = proxy._getMargin();
            proxy._resizerLeftAdjust = proxy._getResizerLeftAdjust();

            if (scheduleMode == "week") {
                tdWidth = model.scheduleWeeks.length * proxy._scheduleWeekWidth;
            }
            else if (scheduleMode == "year") {
                tdWidth = proxy._scheduleYearWidth;
            }
            else if (scheduleMode == "month") {
                tdWidth = proxy._scheduleMonthWidth;
            }
            else if (scheduleMode == "day") {
                tdWidth = model.scheduleDays.length * (model.perHourWidth * 24);
            }
            else if (scheduleMode == "hour") {
                tdWidth = model.scheduleHours.length * (model.perMinuteWidth * proxy._totalInterval);
            }
            if (model.renderBaseline) {
                //taskbarHeight = model.rowHeight - 10;
                taskbarHeight = model.rowHeight - baselineHeight - 5;
                shrinkedTaskbarHeight = 0;
            } else {
                taskbarHeight = model.rowHeight - 10;
            }
            tHeight = taskbarHeight /5;
            milesStoneRadius = Math.floor((model.rowHeight - 6) / 2);
            proxy._milesStoneWidth = (milesStoneRadius * 2);
            proxy._connectorPointWidth = connectorPointWidth = taskbarHeight / 2;
            connectorPointRadius = connectorPointWidth / 2;
            connectorPointMargin = connectorPointWidth - (connectorPointWidth / 2) + 5;
            $.views.helpers(helpers);

            if (!model.progressMapping) {


                this.model.showProgressStatus = false;
            }

            if (!model.resourceInfoMapping) {
                model.showResourceNames = false;
            }

            //Process child taskbar template
            if (template) {
                var parentDiv = ej.buildTag("div", "", {}, {});
                var templateString = template.charAt(0);
                isTaskbarTemplate = true;
                var taskbarTemplateString = ""
                if (template.charAt(0) == "#") {
                    taskbarTemplate = $(template)[0].innerHTML;
                }
                else
                    taskbarTemplate = template;
                taskbarTemplate = taskbarTemplate.replace(/src/gi, proxy._id + "src");
                $(parentDiv[0]).html(taskbarTemplate);
                $(parentDiv[0].childNodes).each(function () {
                    if ($(this).hasClass("e-gantt-template-taskbar")) {
                        var classes = "e-gantt-childtaskbar " + $(this).attr("class");
                        $(this).css({ "height": (taskbarHeight) + "px", "margin-top": "5px" }).attr("class", classes);
                        var innerHtml = "";
                        $(this.childNodes).each(function () {
                            if ($(this).hasClass("e-gantt-template-progressbar")) {
                                isProgressbarTemplate = true;
                                var classes = "e-gantt-childtaskbar-progress " + " " + $(this).attr("class");
                                $(this).css({
                                    "height": (model.progressbarHeight * ((taskbarHeight) / 100)) + "px",
                                    "position": "absolute", "top": "-1px", "left": "-1px",
                                }).attr("class", classes);
                                var outerHtml = this.outerHTML,
                                    index = outerHtml.indexOf("style");
                                outerHtml = outerHtml.substr(0, index + 7) + "border-style:{{if progressWidth}}solid{{else}}none{{/if}};width:{{:progressWidth}}px;" + outerHtml.substr(index + 7);
                                innerHtml += outerHtml;
                            }
                            else
                                innerHtml += (this.nodeName == "#comment" ? "" : (this.nodeName == "#text") ? (this.textContent ? this.textContent.replace(/(\r\n|\n|\r)/gm, "") : this.nodeValue.replace(/(\r\n|\n|\r)/gm, "")) : this.outerHTML);
                        });
                        var outerHtml = $(this).clone().empty()[0].outerHTML,
                            index = outerHtml.indexOf("style");
                        outerHtml = outerHtml.substr(0, index + 7) + "left:{{:left}}px;width:{{:width}}px;" + outerHtml.substr(index + 7);
                        var innerIndex = (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9) ? outerHtml.indexOf("</" + this.tagName + ">") : outerHtml.indexOf("</" + this.tagName.toLowerCase() + ">");
                        outerHtml = outerHtml.substr(0, innerIndex) + innerHtml + outerHtml.substr(innerIndex);
                        taskbarTemplateString += outerHtml;
                    }
                    else {
                        taskbarTemplateString += (this.nodeName == "#comment" ? "" : (this.textContent ? this.textContent.replace(/(\r\n|\n|\r)/gm, "") : this.nodeValue.replace(/(\r\n|\n|\r)/gm, "")));
                    }
                });
                taskbarTemplateString = taskbarTemplateString.replace(RegExp((proxy._id + "src").toLowerCase(), "g"), "src");
            }

            //Process parent taskbar template
            if (parentTemplate) {
                var parentDiv = ej.buildTag("div", "", {}, {});
                var parentTemplateString = parentTemplate.charAt(0);
                isParentTaskbarTemplate = true;
                var parentTaskbarTemplateString = ""
                if (parentTemplateString == "#") {
                    parentTaskbarTemplate = $(parentTemplate)[0].innerHTML;
                }
                else
                    parentTaskbarTemplate = parentTemplate;
                parentTaskbarTemplate = parentTaskbarTemplate.replace(/src/gi, proxy._id + "src");
                $(parentDiv[0]).html(parentTaskbarTemplate);
                $(parentDiv[0].childNodes).each(function () {
                    if ($(this).hasClass("e-gantt-template-taskbar")) {
                        $(this).addClass("e-parentTask");
                        var classes = "e-gantt-parenttaskbar-innerdiv e-parentTask" + $(this).attr("class");
                        $(this).css({ "height": (taskbarHeight) + "px", "margin-top": "5px" }).attr("class", classes);
                        var innerHtml = "";
                        $(this.childNodes).each(function () {
                            if ($(this).hasClass("e-gantt-template-progressbar")) {
                                var classes = "e-gantt-parenttaskbar-progress e-parentTask" + " " +$(this).attr("class");
                                $(this).css({
                                    "height": (model.progressbarHeight * ((taskbarHeight) / 100)) + "px", "top": "-1px", "left": "-1px",
                                    "position": "absolute", "z-index": "3",
                                }).attr("class", classes);
                                var outerHtml = this.outerHTML,
                                    index = outerHtml.indexOf("style");
                                outerHtml = outerHtml.substr(0, index + 7) + "border-style:{{if progressWidth}}solid{{else}}none{{/if}};width:{{:progressWidth}}px;" + outerHtml.substr(index + 7);
                                innerHtml += outerHtml;
                            }
                            else {
                                innerHtml += (this.nodeName == "#comment" ? "" : (this.nodeName == "#text") ? (this.textContent ? this.textContent.replace(/(\r\n|\n|\r)/gm, "") : this.nodeValue.replace(/(\r\n|\n|\r)/gm, "")) : this.outerHTML);
                            }
                        });
                        var outerHtml = $(this).clone().empty()[0].outerHTML,
                            index = outerHtml.indexOf("style");
                        outerHtml = outerHtml.substr(0, index + 7) + "left:{{:left}}px;width:{{:width}}px;" + outerHtml.substr(index + 7);
                        var innerIndex = (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9) ? outerHtml.indexOf("</" + this.tagName + ">") : outerHtml.indexOf("</" + this.tagName.toLowerCase() + ">");
                        outerHtml = outerHtml.substr(0, innerIndex) + innerHtml + outerHtml.substr(innerIndex);
                        parentTaskbarTemplateString += outerHtml;
                    }
                    else {
                        parentTaskbarTemplateString += (this.nodeName == "#comment" ? "" : (this.textContent ? this.textContent.replace(/(\r\n|\n|\r)/gm, "") : this.nodeValue.replace(/(\r\n|\n|\r)/gm, "")));
                    }
                });
                parentTaskbarTemplateString = parentTaskbarTemplateString.replace(RegExp((proxy._id + "src").toLowerCase(), "g"), "src");
            }

            // Process milestone template
            if (milestoneTemplate) {
                var parentDiv = ej.buildTag("div", "", {}, {});
                var templateString = milestoneTemplate.charAt(0), template;
                isMilestoneTemplate = true;
                if (templateString == "#") {
                    template = $(milestoneTemplate)[0].innerHTML;
                }
                else
                    template = milestoneTemplate;
                template = template.replace(/src/gi, proxy._id + "src");
                $(parentDiv[0]).html(template);
                $(parentDiv[0].childNodes).each(function () {
                    if ($(this).hasClass("e-gantt-template-milestone")) {
                        var classes = "e-gantt-milestone " + $(this).attr("class");
                        $(this).css({
                            "width": (model.rowHeight - 6) + "px", "margin-top": "3px", //6 is margin-top and margin-bottom total
                            "position": "absolute", "z-index": "3"
                        }).attr("class", classes);
                        var outerHtml = this.outerHTML,
                            index = outerHtml.indexOf("style");
                        outerHtml = outerHtml.substr(0, index + 7) + "left:{{:left}}px;" + outerHtml.substr(index + 7);
                        milestoneTemplateString += outerHtml;
                    }
                    else {
                        milestoneTemplateString += (this.nodeName == "#comment" ? "" : (this.textContent ? this.textContent.replace(/(\r\n|\n|\r)/gm, "") : this.nodeValue.replace(/(\r\n|\n|\r)/gm, "")));
                    }
                });
                milestoneTemplateString = milestoneTemplateString.replace(RegExp((proxy._id + "src").toLowerCase(), "g"), "src");
            }

            //leftTaskLabelTemplate mapping
            if (leftTaskLabelTemplate)
            {

                var templateString = leftTaskLabelTemplate.charAt(0);
                if (templateString == "#") {
                    if ($(leftTaskLabelTemplate)[0]) {
                        leftTaskLabelTemplateString = $(leftTaskLabelTemplate)[0].innerHTML;
                    }
                } else if (document.getElementById(leftTaskLabelTemplate))
                    leftTaskLabelTemplateString = $("#" + leftTaskLabelTemplate)[0].innerHTML;
                else
                    leftTaskLabelTemplateString = leftTaskLabelTemplate;

                isLeftTaskLabelTemplate = true;

            }

            //rightTaskLabelTemplate mapping
            if (rightTaskLabelTemplate)
            {
                
                var templateString = rightTaskLabelTemplate.charAt(0);
                if (templateString == "#") {
                    if ($(rightTaskLabelTemplate)[0])
                        rightTaskLabelTemplateString = $(rightTaskLabelTemplate)[0].innerHTML;
                } else if (document.getElementById(rightTaskLabelTemplate))
                    rightTaskLabelTemplateString = $("#" + rightTaskLabelTemplate)[0].innerHTML;
                else
                    rightTaskLabelTemplateString = rightTaskLabelTemplate;

                isRightTaskLabelTemplate = true;

            }
            if (this.model.leftTaskLabelMapping  && isLeftTaskLabelTemplate == false) {
                leftLabelFlag = true;
                leftField = proxy._getLeftTaskLabel();
            }

            if (this.model.rightTaskLabelMapping && isRightTaskLabelTemplate == false) {
                rightLabelFlag = true;
                rightField = proxy._getRightTaskLabel();
            }
            if (proxy.model.rowHeight < 45) {
                touchLeftConnectorpoint = "<div class='e-connectortouchpoint' style='right:0px;width:20px;margin-top:" + ((connectorPointWidth - 20) / 2) + "px;height:20px;" +
                "border-radius:10px'></div>";
                touchRightConnectorpoint = "<div class='e-connectortouchpoint' style='left:0px;width:20px;margin-top:" + ((connectorPointWidth - 20) / 2) + "px;height:20px;"
                    +"border-radius:10px'></div>";
            } 

            var rightLabelRowHeight = Math.round(-((this.model.rowHeight - 1) / 2));

            var parentTr = "<tr class='{{:~_rowClassName()}}  {{if isSelected && ~_SelectState()}}e-ganttrowcell {{:~_expander()}} e-gantt-mouseclick{{else}}e-ganttrowcell {{:~_expander()}}{{/if}}' id='chartrowcell"
                + proxy._id + "' style='display:{{:~_expandStatus(#data)}};background-color:{{if rowBGColor }}{{:rowBGColor}}{{else}} none{{/if}};'>";
            var radius = "{{:~_borderRadius()}}";

            tr = "{{if ~_getType()}}" +

                //Parent taskbar Item

                "<td class='e-chartcell'>" +
                "<div class='e-tasknameContainer' style='height:" + (this.model.rowHeight - 1) + "px;width:{{if !isAutoSchedule}}{{if left<manualLeft}}{{:left-10}}{{else}}{{:manualLeft-10}}{{/if}}{{else}}{{:left-10}}{{/if}}px;overflow:hidden;text-overflow: ellipsis;'>" +
                "<div class='e-taskbarname'  style='overflow: hidden;text-overflow: ellipsis;margin-top:5px;margin-right:30px;height:" + (taskbarHeight) + "px;font-weight:bold'>{{if " + isLeftTaskLabelTemplate + "}}" +
                leftTaskLabelTemplateString +"{{else " + this.model.showTaskNames + " && left > 0 && !" + leftLabelFlag + " }}<span style='line-height:" + (taskbarHeight) + "px;'>{{:taskName}}</span>" +
                "{{else " + leftLabelFlag + "}}<span style='line-height:" + (taskbarHeight) + "px;'>" + leftField + "</span>{{/if}}</div></div></td>" +

                "<td  class='e-chartcell' vertical-align='middle' style='width:" + tdWidth + "px;'>" +

               "<div class='e-parentContainer{{if !isAutoSchedule}} e-manualParenttaskbar{{/if}}' style='height:" + (this.model.rowHeight-1) + "px;z-index:3;'>" +

                
                //Manual Parent taskbar
                "{{if !isAutoSchedule}}<div class='e-gantt-manualparenttaskbar {{:~_expander()}}' style='left: {{:left}}px;margin-top: 5px;height:" + (tHeight) + "px; width: {{:width}}px;'>" +
                "<div class='e-gantt-manualparenttaskbar-left' style='height:" + (taskbarHeight) + "px;border-left-width:" + tHeight + "px;border-bottom:" + tHeight + "px solid transparent;'></div>" +
                "<div class='e-gantt-manualparenttaskbar-right' style='left:{{:width - " + parseInt(tHeight) + "}}px;height:" + (taskbarHeight) + "px;border-right-width:" + tHeight + "px;border-bottom:" + tHeight + "px solid transparent;'></div>" +
                "<div class='taskbarresizer-right' style='left:{{:width -" + (tHeight) + "}}px;width:" + (tHeight) + "px;" +
                "height:" + (taskbarHeight) + "px;font-size:" + proxy._fontSize + "px;position:absolute;z-index:10;'></div>" +
                "</div>{{/if}}" +

                "{{if " + isParentTaskbarTemplate + "}}" + parentTaskbarTemplateString + "{{else}}" +
                "<div class='e-gantt-parenttaskbar-innerdiv {{:~_expander()}} e-parentTask' style='margin-top:{{if isAutoSchedule}}5{{else}}" + (5 + tHeight * 2) +
                "{{/if}}px;background-color:{{if parentTaskbarBackground }}{{:parentTaskbarBackground}}{{else}} " + this.model.parentTaskbarBackground +
                "{{/if}}; left:{{if isAutoSchedule}}{{:left}}{{else}}{{:manualLeft}}{{/if}}px;width:{{if isAutoSchedule}}{{:width}}{{else}}{{:manualWidth}}{{/if}}px;height:{{if isAutoSchedule}}" +(taskbarHeight)+ "{{else}}" + (tHeight * 3) + "{{/if}}px;'>" +

                "<div  class='e-gantt-parenttaskbar-progress {{:~_expander()}} e-parentTask progressbar' id='progressbar'  " +
                "style='top:-1px;border-style:{{if progressWidth}}solid{{else}}none{{/if}}; left:-1px;width:{{:progressWidth}}px;position:absolute;background-color:{{if parentProgressbarBackground }}{{:parentProgressbarBackground}}{{else}} "
                + this.model.parentProgressbarBackground + "{{/if}};z-index:3;" +
                "border-top-right-radius:{{if isAutoSchedule}}" + radius + "{{else}}" + tHeight + "{{/if}}px;border-bottom-right-radius:{{if isAutoSchedule}}" + radius + "{{else}}"
                + tHeight + "{{/if}}px;height:{{if isAutoSchedule}}" + (taskbarHeight) + "{{else}}" + (tHeight * 3) + "{{/if}}px;'></div>" + "</div>" + "{{/if}}" +

                  

             "</div>" +

                "{{if " + this.model.renderBaseline + " && baselineStartDate && baselineEndDate }}" +
                "<div  class='e-baselinebar' style='margin-top:-4px;left:{{:baselineLeft}}px;" +
                "width:{{:baselineWidth}}px;height:" + baselineHeight + "px;background-color: " + baselineColor + ";" +
                "position:absolute;z-index:3;box-sizing:border-box;-moz-box-sizing:border-box;'></div>{{/if}}" +

                "</td>" +

               "<td class='e-chartcell' >" +
                "<div class='e-resourceinfo' style='left:{{if (left+width)>(manualLeft+manualWidth)}}{{:left+width+30}}{{else}}{{:manualLeft+manualWidth+30}}{{/if}}px;" +
                "margin:0;margin-left:5px;margin-top:" + rightLabelRowHeight + "px;position:absolute;background-color:transparent;font-weight:bold;height:" + (this.model.rowHeight - 1) + "px;'>" +
                "<div class='e-resourcename'  style='overflow-y:hidden;margin-top:5px;height:" + (taskbarHeight) + "px;margin-right:30px;outline:none;'>{{if " + isRightTaskLabelTemplate + "}}" + rightTaskLabelTemplateString +
                "{{else " + this.model.showResourceNames + " && left > 0 && !" + rightLabelFlag + " }}<span style='line-height:" + (taskbarHeight) + "px;'>{{:~_resources(#data)}}</span>" +
                "{{else " + rightLabelFlag + "}}<span style='line-height:" + (taskbarHeight) + "px;'>" + rightField + "</span>{{/if}}</div></div></td>" +


               //Milestone Item

                "{{else ~_milestoneMapping()}}" +
                    
                "<td class='e-chartcell'>" +
                "<div class='e-tasknameContainer' style='height:" + (this.model.rowHeight - 1) + "px;width:{{:left-10}}px;overflow:hidden;text-overflow:ellipsis;'>" +
                "<div class='e-taskbarname'  style='overflow: hidden;text-overflow: ellipsis;margin-top:5px;height:" + (taskbarHeight) + "px;margin-right:30px;'>{{if " + isLeftTaskLabelTemplate + "}}" + leftTaskLabelTemplateString +
                "{{else " + this.model.showTaskNames + " && left > 0 && !" + leftLabelFlag + " }}<span style='line-height:" + (taskbarHeight) + "px;'>{{:taskName}}</span>"
                + "{{else " + leftLabelFlag + "}}<span style='line-height:" + (taskbarHeight) + "px;'>" + leftField + "</span>{{/if}}</div></div></td>" +

               "<td class='e-chartcell' style='width:" + tdWidth + "px;'>" +
                "<div class='e-gantt-milestone-container' style=height:" + (this.model.rowHeight - 1) + "px;>" +
                "<div class='e-connectorpoint-left' style='left:{{:left-" + connectorPointWidth + "}}px;width:" + connectorPointWidth + "px;margin-top:" + connectorPointMargin + "px;height:" + (taskbarHeight / 2) + "px;border-radius:" +
                connectorPointRadius + "px;'>" + touchLeftConnectorpoint + "</div>" +
                "{{if " + isMilestoneTemplate + "}}" + milestoneTemplateString + "{{else}}" +
                "<div class='e-gantt-milestone' style='position:absolute;left:{{:left}}px;'>" +
                "<div class='e-gantt-milestone milestone-top'  style='top:" + (3) + "px;border-right-width:" + milesStoneRadius + "px;border-left-width:" + milesStoneRadius + "px;border-bottom-width:" + milesStoneRadius + "px; border-right-color:transparent;border-left-color:transparent;border-style:none solid solid;border-top: none;'></div>" +
                "<div class='e-gantt-milestone milestone-bottom'  style='top:" + (3 + milesStoneRadius) + "px;border-right-width:" + milesStoneRadius + "px; border-left-width:" + milesStoneRadius + "px; border-top-width:" + milesStoneRadius + "px; border-right-color:transparent;border-left-color:transparent;border-style:solid solid none; border-bottom: none;'></div>" +
                "</div>" + "{{/if}}" +
                 "<div class='e-connectorpoint-right' style='left:{{:(left+" + (milesStoneRadius * 2) + ")}}px;width:" + connectorPointWidth + "px;margin-top:" + connectorPointMargin + "px;height:" + (taskbarHeight / 2) + "px;border-radius:"
                 + connectorPointRadius + "px;'>" + touchRightConnectorpoint + "</div>" +
                "</div>" +

                "{{if " + this.model.renderBaseline + " && baselineStartDate && baselineEndDate}}" +
                "<div class='e-baseline-gantt-milestone-container' >" +
                "<div class='e-baseline-gantt-milestone' style='position:absolute;left:{{:baselineLeft}}px;z-index:2;'>" +
                "<div class='e-baseline-gantt-milestone baseline-milestone-top'  " +
                "style='z-index:2;top:" + (4 - model.rowHeight) + "px;border:" + milesStoneRadius + "px solid transparent;border-top: none;border-bottom-color: " + baselineColor + ";'></div>" +
                "<div class='e-baseline-gantt-milestone baseline-milestone-bottom'  " +
                "style='z-index:2;top:" + (4 + milesStoneRadius - model.rowHeight) + "px;border:" + milesStoneRadius + "px solid transparent;border-bottom: none;border-top-color: " + baselineColor + ";'></div>" +
                "</div></div>{{/if}}" +

                "</td>" +

               "<td class='e-chartcell' >" +
                "<div class='e-resourceinfo' style='margin-top:5px;left:{{:left+56}}px;margin:0;margin-left:5px;margin-top:" + rightLabelRowHeight + "px;height:" + (this.model.rowHeight - 1) + "px;" +
                "position:absolute;background-color:transparent;'><div class='e-resourcename'  style='overflow-y:hidden;margin-top:5px;height:" + (taskbarHeight) + "px;margin-right:30px;'>{{if " + isRightTaskLabelTemplate + "}}" +
                rightTaskLabelTemplateString +"{{else " + this.model.showResourceNames + " && left > 0 && !" + rightLabelFlag + " }}<span style='line-height:" + (taskbarHeight) + "px;'>{{:~_resources(#data)}}</span>" +
                "{{else " + rightLabelFlag + "}}<span style='line-height:" + (taskbarHeight) + "px;'>" + rightField + "</span>{{/if}}</div></div></td>" +

                //Child Taskbar Item

                "{{else}}" +

                //left label
               "<td class='e-chartcell'>" +
                "<div class='e-tasknameContainer' style='height:" + (this.model.rowHeight - 1) + "px;width:{{:left-10}}px;overflow:hidden;text-overflow: ellipsis;'>" +
                "<div class='e-taskbarname'  style='overflow: hidden;text-overflow: ellipsis;margin-top:5px;height:" + (taskbarHeight) + "px;margin-right:30px;'>{{if " + isLeftTaskLabelTemplate + "}}" + leftTaskLabelTemplateString +
                "{{else " + this.model.showTaskNames + " && left > 0 && !" + leftLabelFlag + " }}<span style='line-height:" + (taskbarHeight) + "px;'>{{:taskName}}</span>"
                + "{{else " + leftLabelFlag + "}}<span style='line-height:" + (taskbarHeight) + "px;'>" + leftField + "</span>{{/if}}</div></div></td>" +

                //taskbar
               "<td class='e-chartcell' style='width:" + tdWidth + "px;'>" +

               

               "<div  class='e-childContainer' style='height:" + (this.model.rowHeight - 1) + "px;'>" +

               "<div class='e-connectorpoint-left' style='left:{{:left-" + connectorPointWidth + "}}px;width:" + connectorPointWidth + "px;margin-top:" + connectorPointMargin + "px;height:" + (taskbarHeight / 2) + "px;" +
               "border-radius:" + connectorPointRadius + "px'>" + touchLeftConnectorpoint + "</div>" +

               "<div class='taskbarresizer-left e-icon' style='left:{{:left+2-" + proxy._resizerLeftAdjust + "}}px;width:10px;margin-top:" + proxy._resizerMargin + "px;height:" + (taskbarHeight) + "px;font-size:" + proxy._fontSize + "px;'></div>" +
               "{{if " + isTaskbarTemplate + "}}" + taskbarTemplateString + "{{else}}" +
               "<div  class='e-gantt-childtaskbar {{if isCritical}} e-criticaltaskbar{{/if}} {{if !isAutoSchedule}} manualchildtaskbar{{/if}}' style='left:{{:left}}px;width:{{:width}}px;height:"
               + (taskbarHeight) + "px;background-color:{{if taskbarBackground }}{{:taskbarBackground}}{{else}} "
               + this.model.taskbarBackground + "{{/if}};" + "margin-top:5px;'>" +

               "<div  class='e-gantt-childtaskbar-progress  {{if isAutoSchedule}} progressbar{{else}} manualprogressbar{{/if}} {{if isCritical}} e-criticalprogressbar{{/if}}' id='progressbar' style='border-style:{{if progressWidth}}solid{{else}}none{{/if}};" +
                "width:{{:progressWidth}}px;text-align:right;line-height:" + (taskbarHeight - 1) + "px;" +
                //"margin-top:" + (((taskbarHeight) - (this.model.progressbarHeight * ((taskbarHeight) / 100))) / 2) + "px;" +
                "height:" + (this.model.progressbarHeight * (taskbarHeight / 100)) + "px; top:-1px;left:-1px;" +
                "position:absolute;background-color:{{if progressbarBackground }}{{:progressbarBackground}}{{else}} " + this.model.progressbarBackground + "{{/if}};" +
                "border-top-right-radius:" + radius + "px;border-bottom-right-radius:" + radius + "px;'>" +
                "{{if " + this.model.showProgressStatus + "}}<span class='e-tasklabel' style='line-height:" + (taskbarHeight - 1) + "px'>{{:status}}%</span>{{/if}}</div></div>" + "{{/if}}" +
                "{{if " + (!isTaskbarTemplate || isProgressbarTemplate) + "}}" +
               "<div class='progressbarresizer-right' style='left:{{:left+progressWidth-10}}px;width:20px;margin-top:" + (taskbarHeight) + "px;" +
               "height:" + (taskbarHeight - 5) + "px;position:absolute;z-index:5;'>" +
               "<div class='progressbarhandler' style='top:" + (10) + "px;position:absolute;z-index:-1;'><div class='e-progresshandler-element'></div></div>" +//-" + (shrinkedTaskbarHeight/2) + "
               "<div class='progressbarhandler' style='top:" + (5) + "px;position:absolute;z-index:-1;'><div class='e-progresshandlerafter-element'></div></div></div>" + "{{/if}}" +

               "<div class='taskbarresizer-right e-icon' style='left:{{:left+width-" + proxy._resizerRightAdjust + "}}px;width:10px;" +
                "height:" + (taskbarHeight) + "px;font-size:" + proxy._fontSize + "px;position:absolute;z-index:2;margin-top:" + proxy._resizerMargin + "px;'></div>" +

                "<div class='e-connectorpoint-right' style='left:{{:left+width}}px;width:" + connectorPointWidth + "px;margin-top:" + connectorPointMargin + "px;height:" + (taskbarHeight / 2) + "px;"
                + "border-radius:" + connectorPointRadius + "px'>" + touchRightConnectorpoint + "</div>" +
                //"<div class='e-connectorpoint-right' style='left:{{:left-20}}px;width:20px;margin-top:10px;background-color:black;height:" + (taskbarHeight) + "px;'></div>"+
                 "</div>" +

                "{{if " + this.model.renderBaseline + " && baselineStartDate && baselineEndDate }}" +
                "<div  class='e-baselinebar' style='margin-top:-4px;left:{{:baselineLeft}}px;" +
                "width:{{:baselineWidth}}px;height:" + baselineHeight + "px;background-color: " + baselineColor + ";" +
                "position:absolute;z-index:3;box-sizing:border-box;-moz-box-sizing:border-box;'></div>{{/if}}" +

                "</td>" +

                //right label
               "<td class='e-chartcell' >" +
                "<div class='e-resourceinfo' style='left:{{:left+width+30}}px;margin:0;margin-left:5px;margin-top:" + rightLabelRowHeight + "px;height:" + (this.model.rowHeight - 1) + "px;" +
                "position:absolute;text-align:left;background-color:transparent;'><div class='e-resourcename'  style='overflow-y:hidden;margin-top:5px;height:" + (taskbarHeight) + "px;margin-right:30px;'>{{if " + isRightTaskLabelTemplate + "}}"
                + rightTaskLabelTemplateString +"{{else " + this.model.showResourceNames + " && left > 0 && !" + rightLabelFlag + " }}<span style='line-height:" + (taskbarHeight) + "px;'>{{:~_resources(#data)}}</span>" +
                "{{else " + rightLabelFlag + "}}<span style='line-height:" + (taskbarHeight) + "px;'>" + rightField + "</span>{{/if}}</div></div></td>{{/if}}";

            parentTr += tr;
            parentTr += "</tr>";

            var templates = {};
            templates[this._id + "_CustomTemplate2"] = parentTr;
            $.templates(templates);

        },

        _getResourceInfo: function (data) {
            var resource = null;
            if (data.resourceInfo != null) {
                var resourcelength = data.resourceInfo.length;
                if (resourcelength > 0) {
                    for (var i = 0; i < resourcelength; i++) {
                        var unit = data.resourceInfo[i][this.model.resourceUnitMapping];
                        if (resource == null) {                           
                            resource = data.resourceInfo[i][this.model.resourceNameMapping];
                            if (unit != 100)
                                resource += "[" + unit + "%]";
                        }
                        else {
                            resource += " , " + data.resourceInfo[i][this.model.resourceNameMapping];
                            if (unit != 100)
                                resource += "[" + unit + "%]";
                        }
                    }
                    return resource;
                } else
                    return String.empty;
            }
            return String.empty;
        },

        _getrowClassName: function () {
            var rowClass = "gridrowtaskId",
                proxy = this;
            if (proxy.data.parentItem)
                rowClass += proxy.data.parentItem.taskId.toString();
            rowClass += "level";
            rowClass += proxy.data.level.toString();
            return rowClass;
        },

        _getExpandStatusRecord: function (data) {
            var proxy = this;
            if (proxy._getExpandStatus(data)) {
                return 'table-row';
            }
            return 'none';
        },


        _isMilestone: function () {
            if (this.data.isMilestone)
                return true;
            else
                return false;
        },

        _addRecordExpandCollapse: function () {
            if (this.data.expanded)
                return 'e-chartexpand';
            else if (!this.data.expanded && this.data.hasChildRecords) {
                return 'e-chartcollapse';
            }
            return false;
        },

        _getTypedata: function () {
            return this.data.hasChildRecords;
        },


        _getBorderRadius: function () {

            var proxy = this,
                diff = proxy.data.width - proxy.data.progressWidth;

            if (diff <= 4) {
                return 4 - diff;
            }
            else
                return 0;

        },


        _createConnectorLineTemplate: function () {
            var proxy = this,
                lineStroke = (proxy.model.connectorlineWidth) > 4 ? 4 : proxy.model.connectorlineWidth,
                shrinkedTaskbarHeight = 0,
                deltaTop, taskbarMidpoint,
                lineColor = proxy.model.connectorLineBackground,
                helpers = {
                    _getWidthVal: proxy._getWidth,
                    _getTop: proxy._getPredecessorTop,
                    _getPosition: proxy._getParentPosition,
                    _setContainerWidthSSType2: proxy._getContainerWidthSSType2,
                    _setInnerChildWidthSSType2: proxy._getInnerChildWidthSSType2,
                    _setInnerElementLeftSSType2: proxy._getInnerElementLeftSSType2,
                    _setInnerElementWidthSSType2: proxy._getInnerElementWidthSSType2,
                    _isMilestone: proxy._isTaskMilestone,
                    _isMilestoneParent: proxy._isMilestoneParent,
                };

            if (proxy.model.renderBaseline) {
                deltaTop = shrinkedTaskbarHeight / 2;
                taskbarMidpoint = ((proxy.model.rowHeight) / 2) - deltaTop;
            } else {
                taskbarMidpoint = ((proxy.model.rowHeight) / 2);
            }

            $.views.helpers(helpers);
            var connectorContainer = "<div  id='ConnectorLine{{:ConnectorLineId}}' style='background-color=black'>";

            var div = "{{if ~_getPosition()=='FSType1'}}"//FS
            + "<div style='left:{{:ParentLeft+ParentWidth}}px;top:{{:ParentTop+" + taskbarMidpoint + "}}px;" +
                "width:{{:(ChildLeft - (ParentLeft + ParentWidth + 20))}}px;height:{{:Height}}px;position:absolute'>"
            + "<div class='e-line' style='left:{{if milestoneParent}}-7px{{else}}0px{{/if}};width:{{if milestoneParent}}{{:(ChildLeft-(ParentLeft + ParentWidth + 10))+" + lineStroke + "-2}}px{{else}}{{:(ChildLeft-(ParentLeft + ParentWidth + 10))+" + lineStroke + "-10}}px{{/if}};" +
                "height:" + lineStroke + "px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='left:{{:(ChildLeft-(ParentLeft + ParentWidth + 10))+" + lineStroke + "-10}}px;" +
                "width:" + lineStroke + "px;height:{{:Height-" + lineStroke + "}}px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='left:{{:(ChildLeft-(ParentLeft + ParentWidth + 10))+" + lineStroke + "-10}}px;width:10px;" +
                "height:" + lineStroke + "px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='connectorline-rightarrow' style='left:{{:(ChildLeft - (ParentLeft + ParentWidth + 10))}}px;" +
                "border-left: 10px solid " + lineColor + ";top:{{:-6-" + lineStroke + "}}px;" +
                "border-bottom-width:{{:5+" + lineStroke + "}}px;border-top-width:{{:5+" + lineStroke + "}}px;width:0;height:0;position:relative'></div>"
            + "</div>"

            + "{{else  ~_getPosition()=='FSType2'}}"//FS
            + "<div style='left:{{:ParentLeft}}px;top:{{:ParentTop+" + taskbarMidpoint + "}}px;" +
                "width:{{:~_getWidthVal()}}px;height:{{:Height}}px;position:absolute'>"
            + "<div class='e-line' style='left:{{if milestoneParent}}{{:ParentWidth-7}}px{{else}}{{:ParentWidth}}px{{/if}};width:{{if milestoneParent}}17px{{else}}10px{{/if}};height:" + lineStroke + "px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='left:{{:ParentWidth+10-" + lineStroke + "}}px;width:" + lineStroke + "px;" +
                "height:{{:Height-14-" + lineStroke + "}}px;background-color:" + lineColor + ";" +
                "position:relative'></div><div class='e-line' style='left:{{:(ParentWidth - (((ParentLeft + ParentWidth) - ChildLeft) + 20))}}px;" +
                "width:{{:(((ParentLeft + ParentWidth) - ChildLeft) + 30 )}}px;height:" + lineStroke + "px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='left:{{:(ParentWidth - (((ParentLeft + ParentWidth) - ChildLeft) + 20))}}px;width:" + lineStroke + "px;" +
                "height:{{:14-" + lineStroke + "}}px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='left:{{:(ParentWidth - (((ParentLeft + ParentWidth) - ChildLeft) + 20))}}px;width:10px;" +
                "height:" + lineStroke + "px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='connectorline-rightarrow' style='left:{{:(ParentWidth - (((ParentLeft + ParentWidth) - ChildLeft) + 10))}}px;" +
                "border-left: 10px solid " + lineColor + ";border-bottom-width:{{:5+" + lineStroke + "}}px;" +
                "border-top-width:{{:5+" + lineStroke + "}}px;top:{{:-6-" + lineStroke + "}}px;width:0;height:0;position:relative'></div>"
            + "</div>"

            + "{{else ~_getPosition()=='FSType3'}}"
            + "<div style='left:{{:ChildLeft-20}}px;top:{{:ChildTop+" + taskbarMidpoint + "}}px;" +
                "width:{{:ParentWidth+ChildWidth}}px;height:{{:Height}}px;position:absolute'>"
            + "<div class='connectorline-rightarrow' style='left:10px;border-left: 10px solid " + lineColor + ";" +
                "border-bottom-width:{{:5+" + lineStroke + "}}px;border-top-width:{{:5+" + lineStroke + "}}px;" +
                "top:{{:-5-" + lineStroke + "}}px;width:0;height:0;position:relative'></div>"
            + "<div class='e-line' style='width:10px;height:" + lineStroke + "px;background-color:" + lineColor + ";" +
                "position:relative;top:-13px;'></div>"
            + "<div class='e-line' style='width:" + lineStroke + "px;height:{{:Height-14-" + lineStroke + "}}px;" +
                "background-color:" + lineColor + ";position:relative;top:-13px;'></div>"
            + "<div class='e-line' style='width:{{:(((ParentLeft + ParentWidth) - ChildLeft) + 30)}}px;height:" + lineStroke + "px;" +
                "background-color:" + lineColor + ";position:relative;top:-13px;'></div>"
            + "<div class='e-line' style='left:{{:(((ParentLeft + ParentWidth) - ChildLeft) + 30)}}px;width:" + lineStroke + "px;" +
                "height:{{:14-" + lineStroke + "}}px;background-color:" + lineColor + ";position:relative;" +
                "top:-13px;'></div>"
            + "<div class='e-line' style='{{if ~_isMilestoneParent()}}left:{{:(((ParentLeft + ParentWidth) - ChildLeft) + 14)}}px;width:16px;{{else}}left:{{:(((ParentLeft + ParentWidth) - ChildLeft) + 20)}}px;width:10px;{{/if}}height:" + lineStroke + "px;" +
                "background-color:" + lineColor + ";position:relative;top:-13px;'></div>"
            + "</div>"

            + "{{else ~_getPosition()=='FSType4'}}"
            + "<div style='left:{{:ParentLeft+ParentWidth}}px;top:{{:ChildTop+" + taskbarMidpoint + "}}px;" +
                "width:{{:(ChildLeft - (ParentLeft + ParentWidth + 20))}}px;height:{{:Height}}px;position:absolute'>"
            + "<div class='connectorline-rightarrow' style='left:{{:(ChildLeft - (ParentLeft + ParentWidth + 10))}}px;" +
                "border-left: 10px solid " + lineColor + ";top:{{:-5-" + lineStroke + "}}px;" +
                "border-bottom-width:{{:5+" + lineStroke + "}}px;border-top-width:{{:5+" + lineStroke + "}}px;width:0;height:0;position:relative'></div>"
            + "<div class='e-line' style='left:{{:(ChildLeft - (ParentLeft + ParentWidth) - 20)}}px;top:-13px;width:10px;" +
                "height:" + lineStroke + "px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='top:-13px;left:{{:(ChildLeft - (ParentLeft + ParentWidth) - 20)}}px;width:" + lineStroke + "px;" +
                "height:{{:Height-" + lineStroke + "}}px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='{{if ~_isMilestoneParent()}}left:-6px;{{/if}}top:-13px;width:{{if ~_isMilestoneParent()}}{{:(ChildLeft-(ParentLeft + ParentWidth+20 )+ 6)+" + lineStroke + "}}px;{{else}}{{:(ChildLeft-(ParentLeft + ParentWidth + 20))+" + lineStroke + "}}px;{{/if}}" +
                "height:" + lineStroke + "px;background-color:" + lineColor + ";position:relative'></div>"
            + "</div>"

            + "{{else ~_getPosition()=='SSType4'}}"
            + "<div  style='left:{{:ParentLeft-10}}px;top:{{:ChildTop+" + taskbarMidpoint + "}}px;" +
                "width:{{:ChildLeft-ParentLeft}}px;height:{{:Height}}px;position:absolute'>"
            + "<div class='connectorline-rightarrow' style='left:{{:ChildLeft-ParentLeft}}px;border-left: 10px solid " + lineColor + ";" +
                "top:{{:-6-" + lineStroke + "}}px;border-bottom-width:{{:5+" + lineStroke + "}}px;" +
                "border-top-width:{{:5+" + lineStroke + "}}px;width:0;height:0;position:relative'></div>"
            + "<div class='e-line' style='top:-13px;width:{{:ChildLeft-ParentLeft}}px;height:" + lineStroke + "px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='top:-13px;width:" + lineStroke + "px;height:{{:Height-" + lineStroke + "}}px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='top:-13px;width:10px;height:" + lineStroke + "px;background-color:" + lineColor + ";position:relative'></div>"
            + "</div>"

            + "{{else ~_getPosition()=='SSType3'}}"
            + "<div  style='left:{{:ChildLeft-20}}px;top:{{:ChildTop+" + taskbarMidpoint + "}}px;" +
                "width:{{:ParentLeft-ChildLeft}}px;height:{{:Height}}px;position:absolute'>"
            + "<div class='connectorline-rightarrow' style='left:10px;border-left: 10px solid " + lineColor + ";" +
                "top:{{:-6-" + lineStroke + "}}px;border-bottom-width:{{:5+" + lineStroke + "}}px;" +
                "border-top-width:{{:5+" + lineStroke + "}}px;width:0;height:0;position:relative'></div>"
            + "<div class='e-line' style='top:-13px;width:10px;height:" + lineStroke + "px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='top:-13px;width:" + lineStroke + "px;height:{{:Height-" + lineStroke + "}}px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='top:-13px;width:{{:ParentLeft-ChildLeft+20}}px;height:" + lineStroke + "px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "</div>"

            + "{{else ~_getPosition()=='SSType2'}}"
            + "<div  style='left:{{:~_setInnerElementLeftSSType2()}}px;top:{{:ParentTop+" + taskbarMidpoint + "}}px;" +
                "width:{{:~_setContainerWidthSSType2()}}px;height:{{:Height}}px;position:absolute'>"
            + "<div class='e-line' style='width:{{:~_setInnerChildWidthSSType2()}}px;height:" + lineStroke + "px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='width:" + lineStroke + "px;height:{{:Height-" + lineStroke + "}}px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='width:{{:~_setInnerElementWidthSSType2()}}px;height:" + lineStroke + "px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='connectorline-rightarrow' style='left:{{:~_setInnerElementWidthSSType2()}}px;" +
                "border-left: 10px solid " + lineColor + ";top:{{:-6-" + lineStroke + "}}px;" +
                "border-bottom-width:{{:5+" + lineStroke + "}}px;border-top-width:{{:5+" + lineStroke + "}}px;width:0;" +
                "height:0;position:relative'></div>"
            + "</div>"

            + "{{else ~_getPosition()=='SSType1'}}"
            + "<div  style='left:{{:ChildLeft-20}}px;top:{{:ParentTop+" + taskbarMidpoint + "}}px;" +
                "width:{{:ParentLeft-ChildLeft}}px;height:{{:Height}}px;position:absolute'>"
            + "<div class='e-line' style='width:{{:ParentLeft-ChildLeft+20}}px;height:" + lineStroke + "px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='width:" + lineStroke + "px;height:{{:Height-" + lineStroke + "}}px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='width:10px;height:" + lineStroke + "px;background-color:" + lineColor + ";" +
                "position:relative'></div>"
            + "<div class='connectorline-rightarrow' style='left:10px;border-left: 10px solid " + lineColor + ";" +
                "top:{{:-6-" + lineStroke + "}}px;border-bottom-width:{{:5+" + lineStroke + "}}px;" +
                "border-top-width:{{:5+" + lineStroke + "}}px;width:0;height:0;position:relative'></div>"
            + "</div>"

            + "{{else ~_getPosition()=='FFType1'}}"
            + "<div class='FFtype1' style='left:{{:ChildLeft+ChildWidth}}px;top:{{:ParentTop+" + taskbarMidpoint + "}}px;" +
                "width:{{:((ChildLeft + ChildWidth)-(ParentLeft + ParentWidth))+30}}px;height:{{:Height}}px;position:absolute'>"
            + "<div class='e-line' style='left:{{if ~_isMilestoneParent()}}{{:((ParentLeft + ParentWidth) - (ChildLeft + ChildWidth))-10}}px;{{else}}{{:((ParentLeft + ParentWidth) - (ChildLeft + ChildWidth))}}px;{{/if}}" +
                "width:{{if ~_isMilestoneParent()}}30px;{{else}}20px;{{/if}}" +
                "height:" + lineStroke + "px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='left:{{if ~_isMilestoneParent()}}{{:((ParentLeft + ParentWidth) - (ChildLeft + ChildWidth))+20}}px;{{else}}{{:((ParentLeft + ParentWidth) - (ChildLeft + ChildWidth))+20}}px;{{/if}}width:" + lineStroke + "px;" +
                "height:{{:Height-" + lineStroke + "}}px;background-color:" + lineColor + ";" +
                "position:relative'></div>"
            + "<div class='e-line' style='left:{{if ~_isMilestone()}}4px;{{else}}10px;{{/if}}width:{{if ~_isMilestone()}}{{:((ParentLeft + ParentWidth) - (ChildLeft + ChildWidth))+16}}px;{{else}}{{:((ParentLeft + ParentWidth) - (ChildLeft + ChildWidth))+10}}px;{{/if}}" +
                "height:" + lineStroke + "px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='connectorline-leftarrow' style='{{if ~_isMilestone()}}left:-6px;{{/if}}border-right: 10px solid " + lineColor + ";" +
                "top:{{:-6-" + lineStroke + "}}px;border-bottom-width:{{:5+" + lineStroke + "}}px;" +
                "border-top-width:{{:5+" + lineStroke + "}}px;width:0;height:0;position:relative'></div>"
            + "</div>"

            + "{{else ~_getPosition()=='FFType2'}}"
            + "<div style='left:{{:ParentLeft+ParentWidth}}px;top:{{:ParentTop+" + taskbarMidpoint + "}}px;" +
                "width:{{:((ChildLeft +ChildWidth)-(ParentLeft + ParentWidth))+20}}px;height:{{:Height}}px;position:absolute'>"
            + "<div class='e-line' style='{{if ~_isMilestoneParent()}}left:-6px;{{/if}}width:{{if ~_isMilestoneParent()}}{{:((ChildLeft +ChildWidth)-(ParentLeft + ParentWidth))+26}}px;{{else}}{{:((ChildLeft +ChildWidth)-(ParentLeft + ParentWidth))+20}}px;{{/if}}height:" + lineStroke + "px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='left:{{:((ChildLeft +ChildWidth)-(ParentLeft + ParentWidth))+20}}px;width:" + lineStroke + "px;" +
                "height:{{:Height-" + lineStroke + "}}px;background-color:" + lineColor + ";" +
                "position:relative'></div>"
            + "<div class='e-line' style='left:{{if ~_isMilestone()}}{{:((ChildLeft +ChildWidth)-(ParentLeft + ParentWidth))+4}}px;{{else}}{{:((ChildLeft +ChildWidth)-(ParentLeft + ParentWidth))+10}}px;{{/if}}" +
                "width:{{if ~_isMilestone()}}16px;{{else}}10px;{{/if}}" +
                "height:" + lineStroke + "px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='connectorline-leftarrow' style='left:{{if ~_isMilestone()}}{{:((ChildLeft +ChildWidth)-(ParentLeft + ParentWidth))-6}}px;{{else}}{{:((ChildLeft +ChildWidth)-(ParentLeft + ParentWidth))}}px;{{/if}}" +
                "border-right: 10px solid " + lineColor + ";top:{{:-6-" + lineStroke + "}}px;" +
                "border-bottom-width:{{:5+" + lineStroke + "}}px;border-top-width:{{:5+" + lineStroke + "}}px;width:0;height:0;position:relative'></div>"
            + "</div>"

            + "{{else ~_getPosition()=='FFType3'}}"
            + "<div  style='left:{{:ChildLeft+ChildWidth}}px;top:{{:ChildTop+" + taskbarMidpoint + "}}px;" +
                "width:{{:((ParentLeft + ParentWidth) - (ChildLeft + ChildWidth))+20}}px;height:{{:Height}}px;position:absolute'>"
            + "<div class='connectorline-leftarrow' style='{{if ~_isMilestone()}}left:-6px;{{/if}}border-right: 10px solid " + lineColor + ";" +
                "top:{{:-5-" + lineStroke + "}}px;border-bottom-width:{{:5+" + lineStroke + "}}px;" +
                "border-top-width:{{:5+" + lineStroke + "}}px;width:0;height:0;position:relative'></div>"
            + "<div class='e-line' style='{{if ~_isMilestone()}}left:4px;width:{{:((ParentLeft + ParentWidth) - (ChildLeft + ChildWidth))+16}}px;{{else}}left:10px;width:{{:((ParentLeft + ParentWidth) - (ChildLeft + ChildWidth))+10}}px;{{/if}}top:-13px;" +
                "height:" + lineStroke + "px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='left:{{:((ParentLeft + ParentWidth) - (ChildLeft + ChildWidth))+20}}px;top:-13px;" +
                "width:" + lineStroke + "px;height:{{:Height-" + lineStroke + "}}px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='{{if ~_isMilestoneParent()}}left:{{:((ParentLeft + ParentWidth) - (ChildLeft + ChildWidth))-6}}px;width:26px;{{else}}left:{{:((ParentLeft + ParentWidth) - (ChildLeft + ChildWidth))}}px;width:20px;{{/if}}top:-13px;" +
                "height:" + lineStroke + "px;background-color:" + lineColor + ";position:relative'></div>"
            + "</div>"

            + "{{else ~_getPosition()=='FFType4'}}"
            + "<div  style='left:{{:ParentLeft+ParentWidth}}px;top:{{:ChildTop+" + taskbarMidpoint + "}}px;" +
                "width:{{:((ChildLeft +ChildWidth)-(ParentLeft + ParentWidth))+20}}px;height:{{:Height}}px;position:absolute'>"
            + "<div  class='connectorline-leftarrow' style='{{if ~_isMilestone()}}left:{{:((ChildLeft +ChildWidth)-(ParentLeft + ParentWidth))-6}}px;{{else}}left:{{:((ChildLeft +ChildWidth)-(ParentLeft + ParentWidth))}}px;{{/if}}" +
                "border-right: 10px solid " + lineColor + ";top:{{:-5-" + lineStroke + "}}px;" +
                "border-bottom-width:{{:5+" + lineStroke + "}}px;border-top-width:{{:5+" + lineStroke + "}}px;width:0;height:0;" +
                "position:relative'></div>"
            + "<div class='e-line' style='{{if ~_isMilestone()}}left:{{:((ChildLeft +ChildWidth)-(ParentLeft + ParentWidth))+4}}px;width:16px;{{else}}left:{{:((ChildLeft +ChildWidth)-(ParentLeft + ParentWidth))+10}}px;width:10px;{{/if}}top:-13px;" +
                "height:" + lineStroke + "px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='left:{{:((ChildLeft +ChildWidth)-(ParentLeft + ParentWidth))+20}}px;top:-13px;width:" + lineStroke + "px;" +
                "height:{{:Height-" + lineStroke + "}}px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='{{if ~_isMilestoneParent()}}left:-6px;width:{{:((ChildLeft +ChildWidth)-(ParentLeft + ParentWidth))+26}}px;{{else}}width:{{:((ChildLeft +ChildWidth)-(ParentLeft + ParentWidth))+20}}px;{{/if}}top:-13px;height:" + lineStroke + "px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "</div>"

            + "{{else  ~_getPosition()=='SFType4'}}"//SF
            + "<div style='left:{{:ParentLeft-10}}px;top:{{:ChildTop+" + taskbarMidpoint + "}}px;width:{{:((ChildLeft + ChildWidth) - (ParentLeft ))+20}}px;" +
                "height:{{:Height}}px;position:absolute'>"
            + "<div class='connectorline-leftarrow' style='left:{{if ~_isMilestone()}}{{:((ChildLeft + ChildWidth) - (ParentLeft ))+4}}px;{{else}}{{:((ChildLeft + ChildWidth) - (ParentLeft ))+10}}px;{{/if}}" +
                "border-right: 10px solid " + lineColor + ";top:{{:-5-" + lineStroke + "}}px;" +
                "border-bottom-width:{{:5+" + lineStroke + "}}px;border-top-width:{{:5+" + lineStroke + "}}px;width:0;height:0;" +
                "position:relative'></div>"
            + "<div class='e-line' style='left:{{if ~_isMilestone()}}{{:((ChildLeft + ChildWidth) - (ParentLeft ))+14}}px;width:16px;{{else}}{{:((ChildLeft + ChildWidth) - (ParentLeft ))+20}}px;width:10px;{{/if}}top:-13px;" +
                "height:" + lineStroke + "px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='left:{{:((ChildLeft + ChildWidth) - (ParentLeft ))+30}}px;top:-13px;width:" + lineStroke + "px;" +
                "height:{{:Height-15-" + lineStroke + "}}px;background-color:" + lineColor + ";" +
                "position:relative'></div>"
            + "<div class='e-line' style='top:-13px;width:{{:((ChildLeft + ChildWidth) - (ParentLeft ))+30}}px;height:" + lineStroke + "px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='top:-13px;width:" + lineStroke + "px;height:{{:15-" + lineStroke + "}}px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='top:-13px;width:10px;height:" + lineStroke + "px;background-color:" + lineColor + ";position:relative'></div>"
            + "</div>"

            + "{{else ~_getPosition()=='SFType3'}}"//SF
            + "<div style='left:{{:ChildLeft+ChildWidth}}px;top:{{:ChildTop+" + taskbarMidpoint + "}}px;" +
                "width:{{:((ParentLeft)-(ChildLeft + ChildWidth))}}px;height:{{:Height}}px;position:absolute'>"
            + "<div class='connectorline-leftarrow' style='{{if ~_isMilestone()}}left:-6px;{{/if}}border-right: 10px solid " + lineColor + ";" +
                "top:{{:-5-" + lineStroke + "}}px;border-bottom-width:{{:5+" + lineStroke + "}}px;" +
                "border-top-width:{{:5+" + lineStroke + "}}px;width:0;height:0;position:relative'></div>"
            + "<div class='e-line' style='{{if ~_isMilestone()}}left:4px;width:16px;{{else}}left:10px;width:10px;{{/if}}top:-13px;height:" + lineStroke + "px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='left:20px;top:-13px;width:" + lineStroke + "px;height:{{:Height-" + lineStroke + "}}px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='left:20px;top:-13px;width:{{:(ChildLeft-(ParentLeft + ParentWidth + 20))+" + lineStroke + "}}px;" +
                "height:" + lineStroke + "px;background-color:" + lineColor + ";position:relative'></div>"
            + "</div>"

            + "{{else  ~_getPosition()=='SFType1'}}"//SF
            + "<div style='left:{{:ParentLeft-10}}px;top:{{:ParentTop+" + taskbarMidpoint + "}}px;" +
                "width:{{:ChildLeft+ChildWidth+20}}px;height:{{:Height}}px;position:absolute'>"
            + "<div class='e-line' style='width:10px;height:" + lineStroke + "px;background-color:" + lineColor + ";" +
                "position:relative'></div>"
            + "<div class='e-line' style='width:" + lineStroke + "px;height:{{:Height-15-" + lineStroke + "}}px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='width:{{:((ChildLeft + ChildWidth) - (ParentLeft ))+30}}px;height:" + lineStroke + "px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='left:{{:((ChildLeft + ChildWidth) - (ParentLeft ))+30}}px;width:" + lineStroke + "px;" +
                "height:{{:15-" + lineStroke + "}}px;background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='{{if ~_isMilestone()}}left:{{:((ChildLeft + ChildWidth) - (ParentLeft ))+(15-" + lineStroke +")}}px;width:16px;{{else}}left:{{:((ChildLeft + ChildWidth) - (ParentLeft ))+20}}px;width:10px;{{/if}}height:" + lineStroke + "px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='connectorline-leftarrow' style='left:{{if ~_isMilestone()}}{{:((ChildLeft + ChildWidth) - (ParentLeft ))+4}}px;{{else}}{{:((ChildLeft + ChildWidth) - (ParentLeft ))+10}}px;{{/if}}" +
                "border-right: 10px solid " + lineColor + ";top:{{:-6-" + lineStroke + "}}px;" +
                "border-bottom-width:{{:5+" + lineStroke + "}}px;border-top-width:{{:5+" + lineStroke + "}}px;" +
                "width:0;height:0;position:relative'></div>"
            + "</div>"

            + "{{else ~_getPosition()=='SFType2'}}"//SF
            + "<div  style='left:{{:ChildLeft+ChildWidth}}px;top:{{:ParentTop+" + taskbarMidpoint + "}}px;" +
                "width:{{:((ParentLeft) - (ChildLeft + ChildWidth))}}px;height:{{:Height}}px;position:absolute'>"
            + "<div class='e-line' style='left:{{:((ParentLeft) - (ChildLeft + ChildWidth))-10}}px;width:10px;height:" + lineStroke + "px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='e-line' style='left:{{:((ParentLeft) - (ChildLeft + ChildWidth))-10}}px;width:" + lineStroke + "px;" +
                "height:{{:Height-" + lineStroke + "}}px;background-color:" + lineColor + ";" +
                "position:relative'></div>"
            + "<div class='e-line' style='{{if ~_isMilestone()}}left:0px;width:{{:((ParentLeft) - (ChildLeft + ChildWidth))-10}}px;{{else}}left:10px;width:{{:((ParentLeft) - (ChildLeft + ChildWidth))-20}}px;{{/if}}height:" + lineStroke + "px;" +
                "background-color:" + lineColor + ";position:relative'></div>"
            + "<div class='connectorline-leftarrow' style='left:{{if ~_isMilestone()}}-6px;{{else}}0px;{{/if}}border-right: 10px solid " + lineColor + ";" +
                "top:{{:-6-" + lineStroke + "}}px;border-bottom-width:{{:5+" + lineStroke + "}}px;border-top-width:{{:5+" + lineStroke + "}}px;width:0;height:0;position:relative'></div>"
            + "</div>"

            + "{{/if}}";

            connectorContainer += div;
            connectorContainer += "</div>";

            var templates = {};
            templates[this._id + "ConnectorLineTemplate"] = connectorContainer;
            $.templates(templates);
        },

        _isTaskMilestone: function () {
            if (this.data.milestoneChild)
                return true;
            else
                return false;
            
        },

        _isMilestoneParent: function () {
            if (this.data.milestoneParent)
                return true;
            else
                return false;
        },

        _getInnerChildWidthSSType2: function () {
            if ((this.data.ParentLeft + this.data.ParentWidth) < this.data.ChildLeft) {
                return 10;
            }
            if (this.data.ParentLeft == this.data.ChildLeft) {
                return 20;
            }
            if ((this.data.ParentLeft + this.data.ParentWidth) >= this.data.ChildLeft) {
                return 10;
            }
            return (this.data.ChildLeft - this.data.ParentLeft);
        },

        _getInnerElementLeftSSType2: function () {
            if (this.data.ParentLeft == this.data.ChildLeft) {
                return (this.data.ParentLeft - 20);
            }
            return (this.data.ParentLeft - 10);
        },

        _getInnerElementWidthSSType2: function () {
            if (this.data.ParentLeft == this.data.ChildLeft) {
                return 10;
            }
            return (this.data.ChildLeft - this.data.ParentLeft);
        },


        _getContainerWidthSSType2: function () {
            if (this.data.ParentLeft == this.data.ChildLeft) {
                return 20;
            }
            return (this.data.ChildLeft - this.data.ParentLeft);
        },

        _getPredecessorTop: function () {
            if (this.data.ParentTop > this.data.ChildTop)
                return true;
            else
                return false;
        },

        _getParentPosition: function () {
            if (this.data.ParentTop < this.data.ChildTop) {

                if (this.data.Type == "FF") {
                    if ((this.data.ChildLeft + this.data.ChildWidth) >= (this.data.ParentLeft + this.data.ParentWidth)) {
                        return "FFType2";
                    }
                    else {
                        return "FFType1";
                    }
                }

                else if ((this.data.ParentLeft < this.data.ChildLeft) && (this.data.ChildLeft > (this.data.ParentLeft + this.data.ParentWidth + 25))) {
                    if (this.data.Type == "FS") return "FSType1";
                    if (this.data.Type == "SF") return "SFType1";
                    else if (this.data.Type == "SS") return "SSType2";
                    else if (this.data.Type == "FF") return "FFType2";
                }
                else if ((this.data.ParentLeft < this.data.ChildLeft && (this.data.ChildLeft < (this.data.ParentLeft + this.data.ParentWidth)))
                    || (this.data.ParentLeft == this.data.ChildLeft || this.data.ParentLeft > this.data.ChildLeft)) {

                    if (this.data.ParentLeft > (this.data.ChildLeft + this.data.ChildWidth + 25)) {
                        if (this.data.Type == "SF") return "SFType2";
                    }

                    if (this.data.ParentLeft > this.data.ChildLeft) {
                        if (this.data.Type == "SS") return "SSType1";
                        if (this.data.Type == "SF") return "SFType1";
                        if (this.data.Type == "FF") return "FFType1";
                    }
                    else if ((this.data.ChildLeft + this.data.ChildWidth) > (this.data.ParentLeft + this.data.ParentWidth)) {
                        if (this.data.Type == "FF") return "FFType2";
                    }
                    if (this.data.Type == "FS") return "FSType2";
                    else if (this.data.Type == "SS") return "SSType2";
                    else if (this.data.Type == "FF") return "FFType1";
                    else if (this.data.Type == "SF") return "SFType1";
                }
                else if ((this.data.ParentLeft) < this.data.ChildLeft) {

                    if (this.data.Type == "FS") return "FSType2";
                    else if (this.data.Type == "FF") return "FFType2";
                    else if (this.data.Type == "SS") return "SSType2";
                    else if (this.data.Type == "SF") return "SFType1";
                }

            }
            else if (this.data.ParentTop > this.data.ChildTop) {
                if ((this.data.ParentLeft < this.data.ChildLeft) && (this.data.ChildLeft > (this.data.ParentLeft + this.data.ParentWidth))) {
                    if (this.data.Type == "FS")
                        if (30 >= (this.data.ChildLeft - (this.data.milestoneParent ? (this.data.ParentLeft + this.data.ParentWidth + 4) : (this.data.ParentLeft + this.data.ParentWidth))))
                            return "FSType3";
                        else
                            return "FSType4"
                    if (this.data.ParentLeft < this.data.ChildLeft || ((this.data.ChildLeft + this.data.ChildWidth) > (this.data.ParentLeft + this.data.ParentWidth))) {
                        if (this.data.Type == "SS") return "SSType4";
                        if (this.data.Type == "FF") return "FFType4";
                        if (this.data.Type == "SF") return "SFType4";
                    }
                    else if ((this.data.ChildLeft + this.data.ChildWidth) > (this.data.ParentLeft + this.data.ParentWidth)) {
                        if (this.data.Type == "FF") return "FFType4";
                    }
                }
                else if ((this.data.ParentLeft < this.data.ChildLeft && (this.data.ChildLeft < (this.data.ParentLeft + this.data.ParentWidth)))
                    || (this.data.ParentLeft == this.data.ChildLeft || this.data.ParentLeft > this.data.ChildLeft)) {
                    if ((this.data.ChildLeft + this.data.ChildWidth) <= (this.data.ParentLeft + this.data.ParentWidth)) {
                        if (this.data.Type == "FF") return "FFType3";
                        if (this.data.Type == "SF") {
                            if ((this.data.ChildLeft + this.data.ChildWidth + 25) < (this.data.ParentLeft)) {
                                return "SFType3";
                            } else {
                                return "SFType4";
                            }
                        }
                        if (this.data.Type == "SS") {
                            if (this.data.ChildLeft <= this.data.ParentLeft)
                                return "SSType3";
                            else
                                 return "SSType4";
                        }
                    }
                    else if ((this.data.ChildLeft + this.data.ChildWidth) > (this.data.ParentLeft + this.data.ParentWidth)) {
                        if (this.data.Type == "FF") return "FFType4";
                        if (this.data.Type == "SF") return "SFType4";
                        if (this.data.Type == "SS")
                            if (this.data.ChildLeft <= this.data.ParentLeft)
                                return "SSType3";
                            else
                                return "SSType4";
                    }
                    if (this.data.Type == "FS") return "FSType3";
                }
                else if (this.data.ParentLeft < this.data.ChildLeft) {

                    if (this.data.Type == "FS") return "FSType3";
                    if (this.data.Type == "SS") return "SSType4";
                    if (this.data.Type == "FF") return "FFType4";
                    if (this.data.Type == "SF") return "SFType4";
                }
            }
            return false;
        },

        _getWidth: function () {
            return ((this.data.ChildLeft + this.data.ChildWidth) < (this.data.ParentLeft + this.data.ParentWidth)) ?
                this.data.ParentWidth : (this.data.ChildWidth + this.data.ParentWidth);
        },


        //renders Weekends in chart
        _renderWeekends: function () {
            var proxy = this,
                left = 0,
                width = (proxy.model.perDayWidth) + 1,
                height = ((proxy.model.updatedRecords.length) * this.model.rowHeight),
                count = proxy.model.scheduleWeeks.length,
                $sunday, $saturday,
                $weekendContainer = ej.buildTag("div.e-secondary_canvas", "", { 'height': height + 'px' }, {});

            for (var i = 0; i < count; i++) {
                $sunday = ej.buildTag("div.e-weekends", "", {
                    'left': left + 'px',
                    'width': width + 'px',
                    'height': height + 'px',
                    'background-color': this.model.weekendBackground
                }, {});
                $saturday = ej.buildTag("div.e-weekends", "", {
                    'left': (left + (proxy.model.perDayWidth * 6)) + 'px',
                    'width': width + 'px',
                    'height': height + 'px',
                    'background-color': this.model.weekendBackground
                }, {});
                $weekendContainer.append($sunday);
                $weekendContainer.append($saturday);
                left = left + this._scheduleWeekWidth;
            }

            proxy._$weekendsContainer.html($weekendContainer);
            proxy._$bodyContent.append(proxy._$weekendsContainer);
        },



        //Renders StripLines for given striplines collection object
        _renderStripLines: function (stripLines) {

            var proxy = this,
                height = ((proxy.model.updatedRecords.length) * this.model.rowHeight),
                stripLineCount = stripLines.length, day, left,
                projectStartDate = proxy.model.projectStartDate,
                dayWidth = this.model.perDayWidth,
                stripLineContainer = ej.buildTag("div.e-stripLines", "", { 'height': height + 'px' }, {});

            for (var i = 0; i < stripLineCount; i++) {

                day = this._getDateFromFormat(stripLines[i].day);
                left = ((day - this._getDateFromFormat(projectStartDate)) / 86400000) * dayWidth;
                stripLines[i].lineWidth = stripLines[i].lineWidth > 30 ? 30 : stripLines[i].lineWidth;

                var stripline = ej.buildTag("div.e-stripline#stripline" + [i] + "", "", {
                    'left': left + 'px',
                    'width': '1px',
                    'height': height + 'px',
                    'border-left-width': stripLines[i].lineWidth + 'px',
                    'border-left-color': stripLines[i].lineColor,
                    'border-left-style': stripLines[i].lineStyle
                }, {});

                var innerspan = ej.buildTag("span.e-striplinespan", stripLines[i].label, {
                    'background-color': stripLines[i].lineColor,
                }, {});

                if (stripLines[i].day && stripLines[i].day.length > 0) {
                    if (stripLines[i].label && stripLines[i].label.length > 0) {
                        stripline.append(innerspan);
                    }
                    stripLineContainer.append(stripline);
                }
            }
            proxy._$stripLineContainer.append(stripLineContainer);
            proxy._$bodyContent.append(proxy._$stripLineContainer);
        },


        //returns progress width for the taskbar
        _getProgressWidth: function (parentwidth, percent) {
            return (parentwidth * percent) / 100;
        },


        //returns progress percentage of the taskbar
        _getProgressPercent: function (parentwidth, progresswidth) {
            return Math.ceil(((progresswidth / parentwidth) * 100).toFixed(2));
        },


        //renders holidays for holiday collection object
        _renderHoliday: function (holiday) {

            var proxy = this, scheduleHeaderType = proxy.model.scheduleHeaderSettings.scheduleHeaderType,
                date = this._getDateFromFormat(holiday.day),
                weekCount = proxy.model.scheduleWeeks.length,
                monthcount = proxy.model.scheduleMonths.length,
                yearcount = proxy.model.scheduleYears.length,
                daycount=proxy.model.scheduleDays.length,
                prevDate = 0,
                left = 0, textLength, text, $holidayContainer, $holidaySpan,
                ganttRecords = proxy.model.updatedRecords.length, height;

            left = ((date - this._getDateFromFormat(proxy.model.projectStartDate)) / 86400000) * this.model.perDayWidth;

            height = (ganttRecords * this.model.rowHeight);
            textLength = holiday.label != null ? holiday.label.length : 0;
            if (holiday.background == null)
                holiday.background = "white";


            var holidayLableSelector = ".e-holiday-label";
            /* for rotate holiday lable in ie8 */
            if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9) {
                holidayLableSelector = ".e-holiday-label-ie8";
            }
            if (proxy.model.scheduleHeaderSettings.scheduleHeaderType != "day") {
                text = ej.buildTag("div" + holidayLableSelector, holiday.label, {
                    'top': (proxy._getHolidayLabelHeight(textLength)) + 'px',
                }, {});
            }
            else
            {
                text = ej.buildTag("div" + holidayLableSelector, holiday.label, {
                    'bottom': (proxy._getHolidayLabelHeight(textLength)) + 'px',
                }, {});
            }
            $holidayContainer = ej.buildTag("div.e-secondary-canvas-holiday");
            $holidaySpan = ej.buildTag("div.e-holidays", "", {
                'left': left + 'px',
                'width': proxy.model.perDayWidth + 'px',
                'height': height + 'px',
                'background-color': holiday.background
            }, {});

            if (holiday.label != null)
                $holidaySpan.append(text);
            $holidayContainer.append($holidaySpan);

            proxy._$secondaryCanvas.append($holidayContainer);
            proxy._$bodyContent.append(proxy._$secondaryCanvas);
        },

        _getHolidayLabelHeight: function (textlength) {
            var proxy = this, model = proxy.model,
                containerHeight = proxy._getHeight(),
                totalHeight = model.updatedRecords.length * proxy.model.rowHeight;
            if (containerHeight > 0)
                return (containerHeight / 2);
            else if (proxy._viewportHeight < totalHeight)
                return (proxy._viewportHeight / 2);
            else
                return totalHeight / 2;

        },

        // all events bound using this._on will be unbind automatically
        _destroy: function () {

            var proxy = this;
            proxy.element.off();
            $(document.body).unbind("touchmove", $.proxy(proxy.handleMouseMove, proxy));
            $(document).unbind("mouseup", $.proxy(proxy._tooltipMouseup, proxy));
            $(document.body).bind("touchmove", $.proxy(proxy.handleMouseMove, proxy));
            proxy.element.empty().removeClass("e-ganttchart-core e-ganttchart" + proxy.model.cssClass);

        },
    });

    ej.GanttChart.contextMenuItem = {
        taskDetails: "Task Details....",
        add: "Add new task",
        indent: "Indent",
        outdent: "Outdent",
        Delete: "Delete",
    };

    jQuery.uaMatch = function (ua) {
        ua = ua.toLowerCase();

        var match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
            /(webkit)[ \/]([\w.]+)/.exec(ua) ||
            /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
            /(msie) ([\w.]+)/.exec(ua) ||
            ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
            [];

        return {
            browser: match[1] || "",
            version: match[2] || "0"
        };
    };

})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.gridFeatures = ej.gridFeatures || {};
    ej.gridFeatures.gridResize = function (instance) {
        this.$headerTable = instance.getHeaderTable();
        this.gridInstance = instance;
        this._colMinWidth = 15;
        this._$visualElement = $();
        this._currentCell = -1;
        this._allowStart = false;
        this._oldWidth = null;
        this._orgX = null;
        this._orgY = null;
        this._extra = null;
        this._expand = false;
        this._target = null;
        this._cellIndex = -1;
    }

    ej.gridFeatures.gridResize.prototype = {
        _mouseHover: function (e) {
            if (this._$visualElement.is(":visible"))
                return;
            this._allowStart = false;
            if ($(e.target).is(".e-headercelldiv"))
                e.target = e.target.parentNode;
            var $target = $(e.target);
			if ($(e.target).hasClass("e-filtericon") && ($(e.target).css("cursor") == "col-resize" || $(e.target).closest("tr").css("cursor") == "col-resize")) {
                $(e.target).css("cursor", "pointer");
                $(e.target).closest("tr").css("cursor", "pointer");
            }
            if ($target.hasClass("e-headercell")) {
                var _resizableCell = e.target;
                var location = _resizableCell.getBoundingClientRect(), _x = 0, _y = 0;
                if (e.type = "mousemove") {
                    _x = e.clientX;
                    _y = e.clientY;
                }
                else if (e.type = "touchmove") {
                    _x = evt.originalEvent.changedTouches[0].clientX;
                    _y = evt.originalEvent.changedTouches[0].clientY;
                }
                else if (e.type = "MSPointerMove") {
                    _x = e.originalEvent.clientX;
                    _y = e.originalEvent.clientY;
                }
                if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns)
                    var _nlx = this.gridInstance.getHeaderContent().width() + this.gridInstance.element.children(".e-gridheader").find(".e-columnheader").offset().left;
                else
                    var _nlx = this.gridInstance.getHeaderTable().width() + this.gridInstance.element.children(".e-gridheader").find(".e-columnheader").offset().left;
                if (((_x >= (location.left + document.documentElement.scrollLeft + _resizableCell.offsetWidth - 5)) || ((_x <= (location.left + 3)))) && (_x < _nlx) && (_x >= location.left) && (_y <= location.top + document.documentElement.scrollTop + e.target.offsetHeight)) {
                    if (_x > location.left + 3)
                        var tempTarget = $(e.target).find(".e-headercelldiv");
                    else
                        var tempTarget = $(e.target).prevAll("th:visible:first").find(".e-headercelldiv");
                    var windowScrollX = window.pageXOffset || document.documentElement.scrollTop || document.body.scrollTop;
                    var _lx = (this.gridInstance.element.find(".e-headercell").not('.e-detailheadercell').offset().left + 10) - windowScrollX;
                    if ((this.gridInstance.model.enableRTL && (_x <= _lx)) || (!this.gridInstance.model.enableRTL && (_x >= _lx))) {
                        if ((this.gridInstance.model.showStackedHeader || tempTarget.length) && $.inArray($(tempTarget).attr("ej-mappingname"), this.gridInstance._disabledResizingColumns) == -1) {
                            this.gridInstance.model.showStackedHeader && $($target.parents('thead')).find('tr').css("cursor", "col-resize");
                            !this.gridInstance.model.showStackedHeader && $target.parent().css("cursor", "col-resize");
                            if ($(e.target).hasClass('e-stackedHeaderCell'))
                                this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").index(_resizableCell);
                            else
                                this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").not(".e-stackedHeaderCell").index(_resizableCell);
                            if (this.gridInstance.model.enableRTL)
                                this._currentCell = this._currentCell - 1;
                            this._allowStart = true;
                        }
                        else {
                            $target.parent().css("cursor", "pointer");
                            this._currentCell = -1;
                        }
                    }
                }
                else {
                    this.gridInstance.element.find(".e-columnheader").css("cursor", "pointer");
                    this._currentCell = -1;
                }
            }
        },
        _start: function (_x, _y) {
            var _myrow = this.gridInstance.getHeaderTable().find(".e-columnheader"), _top;
            var _cells, _mycel;
            if ($(this._target).hasClass('e-stackedHeaderCell'))
                _cells = _myrow.find(".e-headercell").not(".e-hide");
            else
                _cells = _myrow.find(".e-headercell").not(".e-stackedHeaderCell,.e-hide");
            if (this._currentCell != -1 && this._currentCell < _cells.length)
                _mycel = _cells[this._currentCell];
            if (typeof (_mycel) == 'undefined')
                return;
            var _j = _mycel.getBoundingClientRect();
            _top = this._tableY = _j.top + parseInt(navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollTop : document.documentElement.scrollTop);
            if (this._allowStart) {
                var vElement = this._$visualElement = $(document.createElement('div'));
                _height = this.gridInstance.element.find(".e-gridcontent").first().height() + this.gridInstance.element.find(".e-gridheader").height();
                if (this.gridInstance.model.showStackedHeader && this.gridInstance.model.stackedHeaderRows.length > 0) {
                    var headerRow = this.gridInstance.getHeaderTable().find('tr.e-columnheader')
                    var lenght = headerRow.length;
                    var currentIndex = $(this._target).parent('tr')[0].rowIndex;
                    for (var i = 0; i < currentIndex; i++) {
                        _height = _height - $(headerRow[i]).height();
                    }
                    // _height = _height - $(".e-stackedHeaderRow").height();
                }
                vElement.addClass("e-reSizeColbg").appendTo(this.gridInstance.element).attr("unselectable", "on").css("visibility", "hidden");
                this.gridInstance._resizeTimeOut = setTimeout(function() {
                    vElement.css({ visibility: "visible", height: _height + 'px', cursor: 'col-resize', left: _x, top: _top, position: 'fixed' });
                }, 100);
                this._oldWidth = _mycel.offsetWidth;
                this._orgX = _x;
                this._orgY = _y;
                this._extra = _x - this._orgX;
                this._expand = true;
            }
            else {
                this._currentCell = -1;
            }
        },
        _mouseMove: function (e) {
            if (this._expand) {
                var _x = 0, _y = 0;
                if (e.type = "mousemove") {
                    _x = e.clientX;
                    _y = e.clientY;
                }
                else if (e.type = "touchmove") {
                    _x = evt.originalEvent.changedTouches[0].clientX;
                    _y = evt.originalEvent.changedTouches[0].clientY;
                }
                else if (e.type = "MSPointerMove") {
                    _x = e.originalEvent.clientX;
                    _y = e.originalEvent.clientY;
                }
                if (navigator.userAgent.indexOf("WebKit") != -1) {
                    _x = e.pageX;
                    _y = e.pageY;
                }
                _x += document.documentElement.scrollLeft;
                e.preventDefault();
                this._moveVisual(_x);
            }
            else
                this._mouseHover(e);
        },
        _getCellIndex: function (e) {
            var $target = $(e._target);
            var targetCell = e._target;
            var location = targetCell.getBoundingClientRect();
            var scrollLeft = navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollLeft : document.documentElement.scrollLeft;
            if (this._orgX < location.left + 5 + scrollLeft)
                targetCell = $(targetCell).prevAll(":visible:first")[0];
            var hCellIndex = targetCell.cellIndex;
            var cellIndex = hCellIndex;
            if (e.gridInstance.model.groupSettings.groupedColumns.length) {
                cellIndex = hCellIndex - e.gridInstance.model.groupSettings.groupedColumns.length;
            }
            return cellIndex;
        },
        _reSize: function (_x, _y) {
            // Function used for Resizing the column
            var proxy = this;
            var resized = false, $content;
            if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns)
                this._initialTableWidth = this.gridInstance.getHeaderTable().first().parent().width() + this.gridInstance.getHeaderTable().last().parent().width();
            else
                this._initialTableWidth = this.gridInstance.getHeaderTable().parent().width();
            if (this.gridInstance.model.enableRTL && (this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid))
                this._currentCell = this._currentCell - 1;
            else
                !this.gridInstance.model.enableRTL && this._getResizableCell();
            if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns > 0)
                var _rowobj = this.gridInstance.getHeaderTable().find('thead');
            else
                var _rowobj = $(this._target).parents('thead');
            if (this._currentCell != -1 && this._expand) {
                this._expand = false;
                var _childTH = $(this._target).hasClass('e-stackedHeaderCell') ? _rowobj.find(".e-headercell:not(.e-detailheadercell)").filter(":visible") : _rowobj.find(".e-headercell:not(.e-detailheadercell,.e-stackedHeaderCell)").filter(":visible");
                var _outerCell = _childTH[this._currentCell];
                var _oldWidth = _outerCell.offsetWidth;
                var _extra = _x - this._orgX;
                if (this.gridInstance.model.enableRTL)
                    _extra = -_extra;
                //Check whether the column minimum width reached
                if (parseInt(_extra) + parseInt(_oldWidth) > this._colMinWidth) {
                    if (_extra != 0)
                        _rowobj.css("cursor", 'default');
                     var $prevheaderCol, oldColWidth;
                    if (ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) == ej.Grid.ResizeMode.NextColumn) {
                     var $prevheaderCols = this.gridInstance.getHeaderTable().find('colgroup').find("col");
                     if (!ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)) {
                     this.gridInstance._detailColsRefresh();
                    $prevheaderCols = this.gridInstance._$headerCols;
                   }
                    var $prevheaderCol = $prevheaderCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid) ? this._currentCell : this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length)
                    var oldColWidth = $prevheaderCol.width();
                   }
                    this._resizeColumnUsingDiff(_oldWidth, _extra);
                    $content = this.gridInstance.element.find(".e-gridcontent").first();
                    var scrollContent = $content.find("div").hasClass("e-content");                    
                    var browser = !ej.isIOSWebView() && this.gridInstance.getBrowserDetails();
                    if (browser && browser.browser == "msie" && this.gridInstance.model.allowScrolling) {
                        var oldWidth = this.gridInstance.getContentTable().width(), newwidth = this.gridInstance._calculateWidth();
                        if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns > 0) {
                            this.gridInstance.getHeaderTable().last().width(newwidth - this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width());
                            this.gridInstance.getContentTable().last().width(newwidth - this.gridInstance.getContent().find(".e-frozencontentdiv").width());
                            this.gridInstance.model.showSummary && this.gridInstance.getFooterTable().last().width(newwidth - this.gridInstance.getFooterContent().find(".e-frozenfootertdiv").width());
                        }
                        else {
                            if (newwidth > oldWidth) {
                                this.gridInstance.getHeaderTable().width(newwidth);
                                this.gridInstance.getContentTable().width(newwidth);
                                this.gridInstance.model.showSummary && this.gridInstance.getFooterTable().width(newwidth);
                            }
                        }
                        if (parseInt(browser.version, 10) > 8 && this.gridInstance.model.groupSettings && this.gridInstance.model.groupSettings.groupedColumns.length) {
                            if (newwidth > oldWidth) {
                                this.gridInstance.getContentTable().width(newwidth);
                                this.gridInstance.getContentTable().children("colgroup").find("col").first().css("width", (20 / $content.find("table").first().width()) * 100 + "%");
                            }
                            else {
                                this.gridInstance.getContentTable().css("width", "100%");
                                this.gridInstance._groupingAction(true);
                                this.gridInstance.getContentTable().children("colgroup").find("col").first().css("width", ((this.gridInstance.getHeaderTable().find("colgroup").find("col").first().width() / $content.find("table").first().width()) * 100).toFixed(2) + "%");
                            }
                        }
                        this.gridInstance.getHeaderTable().parent().scrollLeft($content.find(".e-content").scrollLeft() - 1);
                    }
                    this.gridInstance._colgroupRefresh();
                    if (this.gridInstance.model.allowTextWrap)
                        this.gridInstance.rowHeightRefresh();
                    if (this.gridInstance.model.groupSettings.groupedColumns.length && !this.gridInstance.model.isEdit)
                        this.gridInstance._recalculateIndentWidth();
                    if (ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) != ej.Grid.ResizeMode.Normal) {
                        if (ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) == ej.Grid.ResizeMode.NextColumn) {
                            var $headerCols = this.gridInstance.getHeaderTable().find('colgroup').find("col");
                            var $ContentCols = this.gridInstance.getContentTable().find('colgroup').find("col");
                            if (!ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)) {
                                this.gridInstance._detailColsRefresh();
                                $headerCols = this.gridInstance._$headerCols;
                                $ContentCols = this.gridInstance._$contentCols;
                            }
                            var nextCell = this._currentCell + 1;
                            var $headerCol = $headerCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate) ? nextCell : nextCell + this.gridInstance.model.groupSettings.groupedColumns.length)
                            var newWidth = $headerCol.width() + (oldColWidth - $prevheaderCol.width());
                            if (newWidth < this._colMinWidth)
                                newWidth = this._colMinWidth;
                            $headerCol.width(newWidth);
                            if (this.gridInstance.model.groupSettings && this.gridInstance.model.groupSettings.groupedColumns.length) {
                                var $tables = this.gridInstance.getContentTable().find(".e-recordtable");
                                var $colGroup = $tables.find("colgroup");
                                var colCount = this.gridInstance.getVisibleColumnNames().length;
                                if (this.gridInstance.getContentTable().find('.e-detailrow').length)
                                    $colGroup = $colGroup.not($tables.find(".e-detailrow").find("colgroup")).get();
                                for (var i = 0 ; i < $colGroup.length; i++) {
                                    var cols = $($colGroup[i]).find("col").filter(this._diaplayFinder);
                                    if (cols.length > colCount) cols.splice(0, (cols.length - colCount));
                                    $(cols[nextCell]).width(newWidth);
                                }
                            }
                            if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns) {
                                if (nextCell >= 0 && nextCell < this.gridInstance.model.scrollSettings.frozenColumns && this._getFrozenResizeWidth() + _extra > this.gridInstance.element.find(".e-headercontent").first().width())
                                    return;
                                $ContentCol = $ContentCols.filter(this._diaplayFinder).eq(nextCell);
                            }
                            else
                                $ContentCol = $ContentCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate) ? nextCell : nextCell + this.gridInstance.model.groupSettings.groupedColumns.length);
                            $ContentCol.width(newWidth);
                            this.gridInstance._findColumnsWidth();
                            if (this.gridInstance.model.scrollSettings.frozenColumns > 0 && $(_outerCell).is(":last-child") && this.gridInstance.pluginName == "ejGrid") {
                                var val = $prevheaderCol.width() - oldColWidth;
                                var frozenWidth = this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width() + val;
                                var movableWidth = this.gridInstance.getHeaderContent().find('.e-movableheaderdiv').width() - val;
                                var marginLeft = parseInt(this.gridInstance.getHeaderContent().find('.e-movableheader')[0].style["margin-left"]) + val;
                                this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width(frozenWidth);
                                this.gridInstance.getContent().find('.e-frozencontentdiv').width(frozenWidth);
                                this.gridInstance.getHeaderContent().find('.e-movableheaderdiv').width(movableWidth);
                                this.gridInstance.getContent().find('.e-movablecontentdiv').width(movableWidth);
                                this.gridInstance.getHeaderContent().find('.e-movableheader').css("margin-left", marginLeft);
                                this.gridInstance.getContent().find('.e-movablecontent').css("margin-left", marginLeft);
                            }

                            if (this.gridInstance.model.scrollSettings.frozenColumns > 0 && $(this._target).parent('tr').parents('div:first').hasClass('e-frozenheaderdiv')) {
                                this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width(this._newWidth);
                                this.gridInstance.getContent().find('.e-frozencontentdiv').width(this._newWidth);
                            }
                        }
                        else if (!this.gridInstance.model.scrollSettings.frozenColumns) {
                            var oldTableWidth = this.gridInstance.getHeaderTable().width();
                            this.gridInstance.getHeaderTable().css("width", oldTableWidth + parseInt(_extra));
                            this.gridInstance.getContentTable().css("width", oldTableWidth + parseInt(_extra));
                            this.gridInstance.model.scrollSettings.width += parseInt(_extra);
                            if (this.gridInstance.getContent().width() > this.gridInstance.getContentTable().width()) {
                                this.gridInstance.getContentTable().addClass('e-tableLastCell');
                                this.gridInstance.getHeaderTable().addClass('e-tableLastCell');
                            }
                            else {
                                this.gridInstance.getContentTable().removeClass('e-tableLastCell');
                                this.gridInstance.getHeaderTable().removeClass('e-tableLastCell');
                            }
                        }
                    }
                    if (!(browser.browser == "msie") && browser && this.gridInstance.model.allowScrolling && this.gridInstance.model.scrollSettings.frozenColumns == 0) {
                        this.gridInstance.getHeaderTable().width("100%");
                        this.gridInstance.getContentTable().width("100%");
                        var tableWidth = this.gridInstance._calculateWidth();
                        if (tableWidth <= this.gridInstance.getContentTable().width() || this.gridInstance.getHeaderTable().width() > this.gridInstance.getContentTable().width()) {
                            this.gridInstance.getHeaderTable().width(tableWidth);
                            this.gridInstance.getContentTable().width(tableWidth);
                        }
                    }
                    if (this.gridInstance.model.allowResizing && this.gridInstance.getHeaderTable().find(".e-columnheader").css('cursor') == 'default') {
                        var cellIndex = this._currentCell;
                        var target = $(this._target), columnIndex = [], col = [];
                        var newWidth = _oldWidth + _extra;
                        var args = {};
                        if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                            var rowindex = target.parent(".e-stackedHeaderRow").index();
                            var stackedHeaderCell = target.parent(".e-stackedHeaderRow").children()[this._cellIndex].cellIndex;
                            var stackedHeaderColumns = this.gridInstance.model.stackedHeaderRows[rowindex].stackedHeaderColumns[stackedHeaderCell].column;
                            var columns = stackedHeaderColumns;
                            if (!(stackedHeaderColumns instanceof Array))
                                columns = stackedHeaderColumns.split(",");
                            for (var i = 0 ; i < columns.length; i++) {
                                var index = this.gridInstance.getColumnIndexByField(columns[i]);
                                columnIndex.push(index)
                                col.push(this.gridInstance.model.columns[index]);
                            }
                            args = { columnIndex: columnIndex, column: col, oldWidth: _oldWidth, newWidth: newWidth };
                        }
                        else
                        args = { columnIndex: cellIndex, column: this.gridInstance.model.columns[cellIndex], oldWidth: _oldWidth, newWidth: newWidth };
                        this.gridInstance._trigger("resized", args);
                    }
                    if (this.gridInstance.model.allowScrolling) {
                        this.gridInstance._scrollObject.refresh(this.gridInstance.model.scrollSettings.frozenColumns > 0);
                        if (this.gridInstance.model.isResponsive && this.gridInstance.model.minWidth)
                            this.gridInstance.windowonresize()
                        if (!scrollContent && $content.find("div").hasClass("e-content"))
                            this.gridInstance.refreshScrollerEvent();
                        this.gridInstance._isHscrollcss();
                    }
                }

            }

            this._target = null;
            this._$visualElement.remove();
            this._expand = false;
            this._currentCell = -1;
            this._allowStart = false;

        },
        _getFrozenResizeWidth: function () {
            var $frozenColumnsCol = this.gridInstance.getHeaderTable().find('colgroup').find("col").slice(0, this.gridInstance.model.scrollSettings ? this.gridInstance.model.scrollSettings.frozenColumns : 0), width = 0;
            for (var i = 0; i < $frozenColumnsCol.length; i++) {
                if ($frozenColumnsCol.eq(i).css("display") != "none")
                    width += parseInt($frozenColumnsCol[i].style.width.replace("px", ""));
            }
            return width;
        },
        _diaplayFinder: function () {
            return $(this).css('display') != 'none';
        },
        _resizeColumnUsingDiff: function (_oldWidth, _extra) {
            var proxy = this, _extraVal;			
            this._currntCe = this._currentCell;
            var $headerCols = this.gridInstance.getHeaderTable().find('colgroup').find("col");
            var $ContentCols = this.gridInstance.getContentTable().find('colgroup').find("col");
            if (!ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)) {
                this.gridInstance._detailColsRefresh();
                $headerCols = this.gridInstance._$headerCols;
                $ContentCols = this.gridInstance._$contentCols;
            }
            var $headerCol = $headerCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid) ? this._currentCell : this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length)
                    , $ContentCol, $footerCol, $frozenCols = $headerCols.slice(0, this.gridInstance.model.scrollSettings ? this.gridInstance.model.scrollSettings.frozenColumns : 0);
            var colWidth = $headerCol[0].style.width, isPercent = colWidth.indexOf("%") != -1;
            var _inlineWidth = (!colWidth || isPercent)? $(this._target).outerWidth() : colWidth;
            var indent = !isPercent ? _oldWidth / parseInt(_inlineWidth) : 1;
            _extraVal = _extra = _extra / indent
            var _newWidth = this._newWidth = parseInt(_extra) + parseInt(_inlineWidth);
            if (_newWidth > 0 && _extra != 0) {
                if (_newWidth < this._colMinWidth)
                    _newWidth = this._colMinWidth;
                if (ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) == ej.Grid.ResizeMode.NextColumn) {
                    var nextCol = $headerCol.next();
                    var isFrozenLastCell = this.gridInstance.model.scrollSettings.frozenColumns && this._currentCell == this.gridInstance.model.scrollSettings.frozenColumns - 1 ? true : false;
                    if (isFrozenLastCell)
                        nextCol = $headerCols.eq(this.gridInstance.model.scrollSettings.frozenColumns);
                    if ((isFrozenLastCell || !$headerCol.is(":last-child")) && (nextCol.width() + ($headerCol.width() - _newWidth) <= this._colMinWidth))
                        _newWidth = $headerCol.width() + (nextCol.width() - this._colMinWidth);
                }
                var _extra = _newWidth - _oldWidth;
                if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns) {
                    if (this._currentCell >= 0 && this._currentCell < this.gridInstance.model.scrollSettings.frozenColumns && this._getFrozenResizeWidth() + _extra > this.gridInstance.element.find(".e-headercontent").first().width())
                        return;
                    $ContentCol = $ContentCols.filter(this._diaplayFinder).eq(this._currentCell);
                }
                else
                    $ContentCol = $ContentCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid) ? this._currentCell : this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length);
                if (this.gridInstance.model.showSummary) {
                    this._$footerCols = this.gridInstance.getFooterTable().find('colgroup').find("col");
                    var colCount = this.gridInstance.model.columns.length;
                    if (this._$footerCols.length > colCount) this._$footerCols.splice(0, (this._$footerCols.length - colCount));
                    $footerCols = this._$footerCols;
                    $footerCol = $footerCols.filter(this._diaplayFinder).eq(this._currentCell);
                    $footerCol.outerWidth(_newWidth);
                }
                if ($(this._target).parent('tr').hasClass('e-stackedHeaderRow')) {
                    this._resizeStackedHeaderColumn($(this._target).parent('tr'), _extraVal, this._currntCe);
                }
                else
                    $headerCol.outerWidth(_newWidth);
                if ($(this._target).parent('tr').hasClass('e-stackedHeaderRow')) {
                    if (this.gridInstance.model.groupSettings.groupedColumns.length) {
                        var $tables = this.gridInstance.getContentTable().find(".e-recordtable");
                        var $colGroup = $tables.find("colgroup");
                        for (var i = 0; i < this._changedcell.length; i++) {
                            var cellIndex = this._changedcell[i];
                            for (var j = 0 ; j < $colGroup.length; j++) {
                                var visibleCols = $($colGroup[j]).children().filter(this._diaplayFinder);
                                var width = parseInt((_extraVal)) + parseInt(visibleCols[cellIndex].style.width);
                                if (width < this._colMinWidth)
                                    width = this._colMinWidth
                                $(visibleCols[cellIndex]).width(width);
                            }
                        }
                    }
                    var length = this.gridInstance.getContentTable().find('colgroup').find("col").filter(this._diaplayFinder).length;
                    for (var i = 0; i < this._changedcell.length; i++) {
                        var $conCol = this.gridInstance.getContentTable().find('colgroup').find("col").filter(this._diaplayFinder)[this._changedcell[i]]
                        var width = parseInt((_extraVal)) + parseInt($conCol.style.width);
                        if (width < this._colMinWidth)
                            width = this._colMinWidth
                        $($conCol).outerWidth(width);
                        if (this.gridInstance.model.isEdit && (this.gridInstance.model.allowGrouping && this.gridInstance.model.groupSettings.groupedColumns.length == 0)) {
                            $sEditCol = this.gridInstance.getContentTable().find(".gridform").find("colgroup col").filter(this._diaplayFinder)[this._changedcell[i]];
                            $($sEditCol).outerWidth(width);
                        }
                    }
                }
                else {
                    if (this.gridInstance.model.groupSettings && this.gridInstance.model.groupSettings.groupedColumns.length) {
                        var $tables = this.gridInstance.getContentTable().find(".e-recordtable");
                        var $colGroup = $tables.find("colgroup");
                        var cellIndex = this._currentCell;
                        var colCount = this.gridInstance.getVisibleColumnNames().length;
                        if (this.gridInstance.getContentTable().find('.e-detailrow').length)
                            $colGroup = $colGroup.not($tables.find(".e-detailrow").find("colgroup")).get();
                        for (var i = 0 ; i < $colGroup.length; i++) {
                            var cols = $($colGroup[i]).find("col").filter(this._diaplayFinder);
                            if (cols.length > colCount) cols.splice(0, (cols.length - colCount));
                            $(cols[cellIndex]).width(_newWidth);
                        }
                    }
                    $ContentCol.outerWidth(_newWidth);
                    if (this.gridInstance.model.isEdit) {
                        var $editableRow = this.gridInstance.getContentTable().find(".e-editedrow,.e-addedrow");
                        var $editCols = $editableRow.find("table").find("colgroup col");
                        var addCol;
                        if ($editableRow.hasClass("e-addedrow") && this.gridInstance.model.groupSettings.groupedColumns.length)
                            addCol = this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length - 1;
                        else
                            addCol = this._currentCell;
                        var $editCol = $editCols.filter(this._diaplayFinder).eq(addCol);
                        $editCol.outerWidth(_newWidth);
                    }
                }
                this.gridInstance._findColumnsWidth();
                if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns && ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) != 'nextcolumn' && this.gridInstance.pluginName == "ejGrid") {
                    var frozenColumns = this.gridInstance.getContentTable().find('colgroup').find("col").slice(0, this.gridInstance.model.scrollSettings.frozenColumns)
                        , width = 0, direction;
                    for (i = 0; i < frozenColumns.length; i++)
                        width += frozenColumns[i].style.display == 'none' ? 0 : parseInt(frozenColumns[i].style.width.replace("px", ""));
                    this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width);
                    direction = this.gridInstance.model.enableRTL ? "margin-right" : "margin-left";
                    this.gridInstance.getContent().find(".e-frozencontentdiv").width(width).next().css(direction, width + "px");
                    this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width).next().css(direction, width + "px");
                    this.gridInstance.model.showSummary && this.gridInstance.getFooterContent().find(".e-frozenfooterdiv").width(width);
                }
                this.gridInstance.getHeaderTable().find(".e-columnheader").css("cursor", "default");
            }
        },
        _resizeStackedHeaderColumn: function (currentTr, extra, currentCell) {
            // var currentIndex = this._currntCe;
            this._changedcell = [];
            var headerCells = this.gridInstance.getHeaderContent().find(".e-headercell").not(".e-detailheadercell");
            var preCol = 0, limit = 0, currentTh = headerCells[currentCell], currentSpan = $(currentTh).attr('colspan'), commonExtra = extra / currentSpan, tr = $(currentTh).parent('tr');
            var nextTr = tr.next();
            var currentIndex = currentTh.cellIndex;
            if (this.gridInstance.model.groupSettings.showGroupedColumn) {
                limit = this.gridInstance.model.groupSettings.groupedColumns.length;
                preCol += limit
            }
            while (currentIndex > limit) {
                currentIndex--;
                var th = $(tr).children('th').not(".e-detailheadercell")[currentIndex];
                preCol += parseInt($(th).attr('colspan'));
            }
            this._currentCell = preCol;
            var length = preCol + parseInt(currentSpan);
            for (var i = preCol; i < length; i++) {
                var $colG = this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder)[i];
                this._changedcell.push(i - limit)
                var width = parseInt(extra) + parseInt($colG.style.width);
                if (width < this._colMinWidth)
                    width = this._colMinWidth;
                $($colG).outerWidth(width);
             }
        },
        _triggerResizeEvents: function (event, _x) {
            var _rowobj = this.gridInstance.getHeaderTable().find(".e-columnheader");
            var _childTH = _rowobj.find(".e-headercell").filter(":visible");
            var cellIndex = this._cellIndex;
            var target = $(this._target), columnIndex = []; col = [];
            if (event == "resizeStart") {
                this._orgX = _x;
                cellIndex = this._cellIndex = this._getCellIndex(this, _x);
            }
            var _outerCell = _childTH[this._currentCell];
            var _oldWidth = _outerCell.offsetWidth;
            if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                var rowindex = target.parent(".e-stackedHeaderRow").index();
                var stackedHeaderCell = target.parent(".e-stackedHeaderRow").children()[this._cellIndex].cellIndex;
                var stackedHeaderColumns = this.gridInstance.model.stackedHeaderRows[rowindex].stackedHeaderColumns[stackedHeaderCell].column;
                var columns = stackedHeaderColumns;
                if (!(stackedHeaderColumns instanceof Array))
                    columns = stackedHeaderColumns.split(",");
                for (var i = 0 ; i < columns.length; i++) {
                    var index = this.gridInstance.getColumnIndexByField(columns[i]);
                    columnIndex.push(index)
                    col.push(this.gridInstance.model.columns[index]);
                }
            }
            if (event == "resizeStart") {
                var args = {};
                if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                    args = { columnIndex: columnIndex, column: col, target: target, oldWidth: _oldWidth };
                }
                else
                    args = { columnIndex: cellIndex, column: this.gridInstance.model.columns[cellIndex], target: $(_outerCell), oldWidth: _oldWidth };
                return this.gridInstance._trigger("resizeStart", args);
            }
            else {
                var _childth = _rowobj.find(".e-headercell").not(".e-detailheadercell").filter(":visible");
                var _extra = _x - this._orgX;
                var newWidth = _oldWidth + _extra;
                this.gridInstance._colgroupRefresh();
                var args = {};
                if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
                    args = { columnIndex: columnIndex, column: col, target: $(_outerCell), oldWidth: _oldWidth, newWidth: newWidth, extra: _extra };
                }
                else
                    args = { columnIndex: cellIndex, column: this.gridInstance.model.columns[cellIndex], target: $(_outerCell), oldWidth: _oldWidth, newWidth: newWidth, extra: _extra };
                return this.gridInstance._trigger("resizeEnd", args);
            }
        },
        _mouseUp: function (e) {
            if (this.gridInstance._resizeTimeOut){
                clearTimeout(this.gridInstance._resizeTimeOut);
                this.gridInstance._resizeTimeOut = 0;
            }
            if (this._expand) {
                var _x = e.clientX, _y = e.clientY;
                if (navigator.userAgent.indexOf("WebKit") != -1) {
                    _x = e.pageX;
                    _y = e.pageY;
                }
                if (this.gridInstance.model.allowResizing && this.gridInstance.getHeaderTable().find(".e-columnheader").css('cursor') == 'col-resize') {
                    if (this._triggerResizeEvents("resizeEnd", _x)) {
                        this.gridInstance.element.find(".e-reSizeColbg").remove();
                        return;
                    }
                }
                _x += document.documentElement.scrollLeft;
                this._reSize(_x, _y);
                if (!ej.isNullOrUndefined(this._currntCe) && this._currntCe >= 0)
                    this.gridInstance.model.columns[this._currntCe].width = this.gridInstance.columnsWidthCollection[this._currntCe];
            }
        },
        _getResizableCell: function () {
            var row;
            if ($(this._target).hasClass('e-stackedHeaderCell'))
                row = this.gridInstance.getHeaderTable().find(".e-columnheader");
            else
                row = this.gridInstance.getHeaderTable().find(".e-columnheader").not('.e-stackedHeaderRow');
            var cell = row.find(".e-headercell").not(".e-hide,.e-detailheadercell");
            var scrollLeft = navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollLeft : document.documentElement.scrollLeft;
            if (!this.gridInstance.model.scrollSettings.frozenColumns || this._currentCell != this.gridInstance.model.scrollSettings.frozenColumns - 1)
                for (var i = 0; i < cell.length; i++) {
                    point = cell[i].getBoundingClientRect();
                    var xlimit = point.left + scrollLeft + 5;
                    if (xlimit > this._orgX && $(cell[i]).height() + point.top >= this._orgY) {
                        this._currentCell = i - 1;
                        return;
                    }
                    if (i == cell.length - 1 || (this.gridInstance.model.showStackedHeader && $(this._target).get(0) === cell[i])) {
                        this._currentCell = i;
                        return;
                    }
                }
        },
        _moveVisual: function (_x) {
            /// Used to move the visual element in mouse move
            var _bounds = this.gridInstance.getHeaderContent().find("div").first()[0].getBoundingClientRect();
            if ((_bounds.left + document.documentElement.scrollLeft + _bounds.width < _x) || (_x < _bounds.left + document.documentElement.scrollLeft))
                this._$visualElement.remove();
            else if (this._currentCell != -1)
                this._$visualElement.css({ left: _x, top: this._tableY });
        },
        _mouseDown: function (e) {
            if (this._allowStart && ($(e.target).closest("tr").css("cursor") == 'col-resize')) {
                this._target = e.target;
                var _x = e.clientX, _y = e.clientY;
                if (navigator.userAgent.indexOf("WebKit") != -1) {
                    _x = e.pageX;
                    _y = e.pageY - document.body.scrollTop;
                }
                if (this.gridInstance.model.allowResizing && this.gridInstance.getHeaderTable().find(".e-columnheader").css('cursor') == 'col-resize') {
                    if ($(e.target).is(".e-headercelldiv"))
                        e.target = e.target.parentNode;
                    this._target = e.target;
                    if (this._triggerResizeEvents("resizeStart", _x))
                        return;
                }
                var gridobj = this;
                _x += document.documentElement.scrollLeft;
                if (e.button != 2)
                    this._start(_x, _y);
                return false;
            }
            return true;
        },
        _columnResizeToFit: function (e) {
            var resize = this.gridInstance.getHeaderTable().find(".e-columnheader").filter(function (e) {
                return $(this).css("cursor") == "col-resize";
            });
            if (this.gridInstance.model.allowResizeToFit && resize.length) {
                if ($(e.target).is(".e-headercelldiv"))
                    e.target = e.target.parentNode;
                var $target = $(e.target);
                var headerCells, preCol = 0, indent = 0;
                if ($target.hasClass('e-stackedHeaderCell'))
                    headerCells = this.gridInstance.getHeaderContent().find(".e-headercell").not(".e-detailheadercell");
                else
                    headerCells = this.gridInstance.getHeaderContent().find(".e-headercell").not(".e-stackedHeaderCell,.e-detailheadercell");
                this._target = $target;
                if ($target.hasClass("e-headercell")) {
                    var targetCell = e.target;
                    var hCellIndex = $.inArray(targetCell, headerCells);
                    var cellIndex = hCellIndex;
                    this._orgX = e.pageX;
                    if(!this.gridInstance.model.enableRTL) 
						this._getResizableCell();
					else
						this._currentCell = hCellIndex;
                    if (hCellIndex != this._currentCell) {
                        hCellIndex = cellIndex = this._currentCell;
                        targetCell = e.target.previousSibling;
                    }
                    var currentTh = headerCells.filter(":visible")[cellIndex], changesCellIndex = [], changesFinalWdith = [], changesOldWidth = [];
                    indent = this.gridInstance.model.groupSettings.groupedColumns.length;
                    if (!ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate) || !ej.isNullOrUndefined(this.gridInstance.model.childGrid))
                        indent += 1;
                    if ($(targetCell).parent("tr").hasClass('e-stackedHeaderRow')) {
                        currentSpan = $(currentTh).attr('colspan'), tr = $(currentTh).parent('tr'), tHeadIndex = currentTh.cellIndex;
                        var nextTr = tr.next();
                        while (tHeadIndex > indent) {
                            tHeadIndex--
                            var th = $(tr).children('th')[tHeadIndex];
                            preCol += parseInt($(th).attr('colspan'))
                        };
                        var length = preCol + parseInt(currentSpan);
                    }
                    else {

                        preCol = cellIndex; length = cellIndex + 1;
                    }
                    var finalWidth = 0, headerWidth = 0, contentWidth = 0, argCols = [], argExtra = [];
                    if (preCol != -1) {
                        var hiddenLen = headerCells.slice(0, preCol + 1).filter(".e-hide").length;
                        var args = { columnIndex: preCol + hiddenLen, column: this.gridInstance.model.columns[preCol + hiddenLen], target: $target, oldWidth: oldWidth };
                        this.gridInstance._trigger("resizeStart", args);
                        for (var i = preCol; i < length; i++) {
                            hiddenLen = headerCells.slice(0, i + 1).filter(".e-hide").length;
                            contentWidth = this._getContentWidth(i + hiddenLen);
                            $cellDiv = this.gridInstance.getHeaderTable().find('.e-headercell:not(.e-hide, .e-stackedHeaderCell)').children(".e-headercelldiv").eq(i);
                            headerWidth = this._getHeaderContentWidth($cellDiv);
                            finalWidth = headerWidth > contentWidth ? headerWidth : contentWidth;
                            finalWidth += parseInt($cellDiv.css("padding-left"), 10);
                            var oldWidth = this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder).eq(i + indent).width();
                            finalWidth = oldWidth > finalWidth ? finalWidth : (this._colMinWidth < finalWidth ? finalWidth : this._colMinWidth);

                            var headerCols = this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder);
                            if(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)
                                headerCols.splice(0, 1);
                            headerCols.eq(i + indent).width(finalWidth);
                            if (this.gridInstance.model.groupSettings.groupedColumns.length) {
                                var $colGroups = this.gridInstance.getContentTable().find('.e-recordtable').find('colgroup');
                                var proxy = this;
                                $.each($colGroups, function (indx, colgroup) {
                                    $(colgroup).find('col').filter(proxy._diaplayFinder).eq(i).width(finalWidth);
                                });
                            }
                            var contentCols = this.gridInstance.getContentTable().find('col').filter(this._diaplayFinder);
                            if(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)
                                contentCols.splice(0, 1);
                            contentCols.eq(i + indent).width(finalWidth);
                            if (this.gridInstance.model.isEdit) {
                                var $editableCol = this.gridInstance.getContentTable().find(".e-editedrow").find("col");
                                var $form = this.gridInstance.element.find(".gridform");
                                for (j = 0; j < $form.length; j++) {
                                   var $editableCol = $($form[j]).find("col")
                                   $editableCol.eq(i + indent).width(finalWidth);
                               }
                            }
                            argCols.push(this.gridInstance.model.columns[i + hiddenLen]);
                            argExtra.push(Math.abs(finalWidth - oldWidth))
                            changesCellIndex.push(i + hiddenLen); changesFinalWdith.push(finalWidth); changesOldWidth.push(oldWidth);
                            if (this.gridInstance.model.scrollSettings.frozenColumns > 0 || (this.gridInstance.model.groupSettings.groupedColumns.length && this.gridInstance.model.isEdit)) {
                                var colIndex = i + hiddenLen;
                                this.gridInstance.columnsWidthCollection[colIndex] = finalWidth;
                                this.gridInstance.setWidthToColumns();
                                if (this.gridInstance.model.scrollSettings.frozenColumns <= colIndex + 1) {
                                    this.gridInstance.getHeaderContent().find(".e-movableheader").css("margin-left", finalWidth);
                                    this.gridInstance.getContent().find(".e-movablecontent").css("margin-left", finalWidth);
                                }
                            }
                        }

                    }
                    this.gridInstance._colgroupRefresh();
                    this.gridInstance._recalculateIndentWidth();
                    args = { columnIndex: changesCellIndex, column: argCols, target: currentTh, oldWidth: changesOldWidth, newWidth: changesFinalWdith, extra: argExtra };
                    this.gridInstance._trigger("resizeEnd", args);
                    for (var i = 0; i < changesCellIndex.length; i++) {
                        this.gridInstance.columnsWidthCollection[changesCellIndex[i]] = changesFinalWdith[i];
                        this.gridInstance.model.columns[changesCellIndex[i]]["width"] = changesFinalWdith[i];
                    }
                    args = { columnIndex: changesCellIndex, column: argCols, target: currentTh, oldWidth: changesOldWidth, newWidth: changesFinalWdith, extra: argExtra };
                    this.gridInstance._trigger("resized", args);
                    if (this.gridInstance.model.summaryRows.length > 0)
                        this.gridInstance._summaryColRrefresh();
					this.gridInstance._findColumnsWidth();
                }				
            }
        },
        _getContentWidth: function (cellindx) {
            var contentWidth = 0;
            var $span = ej.buildTag('span', {}, {}), proxy = this.gridInstance, tdWidth;
            if (!ej.isNullOrUndefined(proxy._gridRows)) {
                var rows = proxy._gridRows;
                if (this.gridInstance.model.scrollSettings.frozenColumns && cellindx >= this.gridInstance.model.scrollSettings.frozenColumns) {
                    rows = rows[1];
                    cellindx = cellindx - this.gridInstance.model.scrollSettings.frozenColumns;
                }
                $.each(rows, function (indx, row) {
                    if ($(row).is('.e-row,.e-alt_row') && !$(row).is('.e-editedrow')) {
					    var td = $(row).find('td.e-rowcell').eq(cellindx);
					    var content = $(td).html();
					    if (proxy.model.columns[cellindx]["commands"])
					        $span.html($(content).children());
					    else if (td.hasClass("e-validError"))
					        $span.html($(content).attr("value"));
					    else
						    $span.html(content);
					    $(td).html($span);
					    tdWidth = td.find('span:first').width();
					    if (tdWidth > contentWidth)
						    contentWidth = tdWidth;
					    $(td).html(content);
                    }
				});
			}
            proxy._refreshUnboundTemplate(this.gridInstance.getContentTable());
            return contentWidth;
        },
        _getHeaderContentWidth: function ($cellDiv) {
            var headerWidth = 0, $span = ej.buildTag('span', {}, {});
            var content = $cellDiv.html();
            $span.html(content);
            $cellDiv.html($span);
            headerWidth = $cellDiv.find('span:first').width();
            if (this.gridInstance.model.allowFiltering && this.gridInstance.model.filterSettings.filterType == "menu" || this.gridInstance.model.filterSettings.filterType == "excel")
                headerWidth = headerWidth + $cellDiv.parent().find(".e-filtericon").width() + 10;
            $cellDiv.html(content);
            return headerWidth;
        },
    };
})(jQuery, Syncfusion);;

});