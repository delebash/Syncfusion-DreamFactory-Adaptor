/*!
*  filename: ej.schedule.js
*  version : 14.4.0.20
*  Copyright Syncfusion Inc. 2001 - 2016. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
*/
(function (fn) {
    typeof define === 'function' && define.amd ? define(["./../common/ej.globalize","jsrender","./../common/ej.core","./../common/ej.data","./../common/ej.touch","./../common/ej.draggable","./../common/ej.scroller","./ej.button","./ej.checkbox","./ej.autocomplete","./ej.datepicker","./ej.dialog","./ej.dropdownlist","./ej.togglebutton","./ej.radiobutton","./ej.timepicker","./ej.editor","./ej.navigationdrawer","./ej.recurrenceeditor","./ej.tooltip"], fn) : fn();
})
(function () {
	
(function ($, ej, undefined) {
    ej.scheduleFeatures = ej.scheduleFeatures || {};

    var horizontalHeaderTemplate = function () {
        this._horiDateHeader = ("{{if multiRes == true}}<td class = 'e-horizontalheader'><div class='e-horizontalresheader'>{{:label}}</div></td>{{else}}{{/if}}" +
                                "<td class='e-horizontaldaterender'><div class='e-horizontaltimecells' style='height:{{:height}}px;'>" +
                                "<div class='e-headerdays' style='position:absolute;'>" +
                                "<table class ='e-table {{:tablelayout}}' cellpadding='0px' cellspacing='0px' style='width:100%;border-collapse:separate;table-layout:fixed;'><tbody>{{if view !== 'month'}}" +
                                "<tr style='width:100%;'> <td>{{if view === 'day'}}<table cellspacing='0px' style='width:100%;'>{{else}}<table class='e-table' cellspacing='0px'>{{/if}}<tbody><tr> {{for cols ~headercellWidth = headercellWidth}}<td class='e-headercells {{:cellToday}} e-horizontalheadertddate'><div class='{{:currentDateClass}} e-horizontalheaderdiv'>{{:currentDay}}</div></td>{{/for}} </tr></tbody></table></td> </tr>" +
                                "<tr style='width:100%;position:absolute;'> <td><table class =' e-table e-horizontaltabletimecell' cellspacing='0px' style='border-collapse:collapse;'><tbody><tr> {{for timeTdCount  ~columnvalue =column  }}{{for ~name=time ~dayend=timecellclass ~index=#getIndex() }}<td class='e-horizontaltimetd {{:~dayend}}'><div style='width:{{:timeCellWidth}}'><span class ='e-horizontaltimespan'>{{:~name.slice(0,2)}}</span><div class ='e-horizontaltimespandiv'>{{:~name.slice(3,5)}}</div></div></td>{{for ~columnvalue[~index] ~width = timeCellWidth}}<td class='e-horizontalalternatetd'><div style='width:{{:~width}}'></div></td>{{/for}}{{/for}}{{/for}}  </tr></tbody></table></td> </tr>" +
                                "{{/if}}" +
                                "{{if view == 'month'}}<tr>{{for cols}}<td class='e-headercells e-horizontmonthheaderdatetd {{:cellToday}}'><div title='{{:title}}' class='e-dateheadercell e-horizontmonthdatealign'>{{:currentDate}}</div></td>{{/for}}</tr>" +
                                "<tr>{{for cols}}<td class ='e-horizontmonthheaderdaytd'><div class='e-dateheadercell e-horizontmonthdatealign' style='width:{{:cellWidth}}'>{{:currentDay}}</div></td>{{/for}}</tr>" +
                                "{{/if}}</tbody></table></div></div></td>");
        return this._horiDateHeader;
    };
    var userTimeCellsHoriTemplate = function () {
        this._userTimeCellsHoriTemplate = ("{{if multiRes == true}}<td class = 'e-horizontalheader'><div class='e-horizontalresheader'>{{:label}}</div></td>{{else}}{{/if}}" +
                                 "<td class='e-horizontaldaterender'><div class='e-horizontaltimecells' style='height:{{:height}}px;'>" +
                                "<div class='e-headerdays' style='position:absolute;'>" +
                                "<table class ='e-table' cellpadding='0px' cellspacing='0px' style='width:100%;border-collapse:separate;table-layout:fixed;'><tbody>{{if view !== 'month'}}" +
                                "<tr style='width:100%;'> <td>{{if view === 'day'}}<table cellspacing='0px' style='width:100%;'>{{else}}<table class='e-table' cellspacing='0px'>{{/if}}<tbody><tr> {{for cols ~headercellWidth = headercellWidth}}<td class='e-headercells {{:cellToday}} e-horizontalheadertddate'><div class='{{:currentDateClass}} e-horizontalheaderdiv'>{{:currentDay}}</div></td>{{/for}} </tr></tbody></table></td> </tr>" +
                                "<tr style='width:100%;position:absolute;'> <td><table class='e-table e-horizontaltabletimecell' cellspacing='0px' style='border-collapse:collapse;'><tbody><tr> {{for timeTdCount  ~userTemplateId = userTemplateId  ~template=template  ~columnvalue =column}}{{for ~name=time ~names=times ~dayend=timecellclass }}<td class='e-horizontaltimetd {{:~dayend}}'><div style='width:{{:timeCellWidth}}'><span class ='e-horizontaltimespan'>{{:~name}}</span><div class ='e-horizontaltimespandiv'></div></div></td>{{for ~columnvalue ~width = timeCellWidth ~names=~names}}<td class='e-horizontalalternatetd' style='vertical-align:middle !important;'><div style='width:{{:~width}};' > {{if ~template ==true || ~userTemplateId==true }}{{:~names[#getIndex()]}}{{else}}</div>{{/if}}</td>{{/for}}{{/for}}{{/for}}  </tr></tbody></table></td> </tr>" +
                                 "{{/if}}" +
                                 "{{if view == 'month'}}<tr>{{for cols}}<td class='e-headercells e-horizontmonthheaderdatetd {{:cellToday}}'><div class='e-dateheadercell e-horizontmonthdatealign'>{{:currentDate}}</div></td>{{/for}}</tr>" +
                                 "<tr>{{for cols}}<td class ='e-horizontmonthheaderdaytd'><div class='e-dateheadercell e-horizontmonthdatealign' style='width:{{:cellWidth}}'>{{:currentDay}}</div></td>{{/for}}</tr>" +
                                 "{{/if}}</tbody></table></div></div></td>");
        return this._userTimeCellsHoriTemplate;
    };

    var horizontalResourceHeaderTemplate = function () {
        this._horizontalResHeader = ("<div class ='e-horizontresdiv'><div class='e-horires' style='height:100%'><table class='e-table e-resourceheadertable' width='100%' cellpadding='0px' cellspacing='0px' style='table-layout:fixed'>" +
            "<tbody>{{for trs}}<tr class='e-horizontresheaderdiv'>{{for ~resname=name ~marginleft=marginleft }}{{if classname == 'e-parentnode'}}<td class='{{:classname}} resemptytd' style='width:25px;height:{{:cellHeight}}'></td>{{else}}<td class='resemptytd' style='width:25px;height:{{:cellHeight}}'></td>{{/if}}<td class='{{:classname}}' style='vertical-align:middle;height:{{:cellHeight}};'>" +
			"{{if classname == 'e-parentnode'}}<div id={{:idnum}} class='{{:classname}}category e-resourceicon e-resourcecollapse' style='width:20px;vertical-align:middle;float:left;margin-left:{{:~marginleft}};margin-top:2px;'></div>{{/if}}" +
            "<div class='e-resourceheadertext' style='text-align:left;margin-left:{{:~marginleft}};' title='{{if userResTemplId == true}}{{:name}}{{else}}{{:~resname}}{{/if}}'>{{if userResTemplId == true}}{{:userResHeader}}{{else}}{{:~resname}}{{/if}}</div>" +
            "</td>{{/for}}</tr>{{/for}}</tbody></table></div></div>");
        return this._horizontalResHeader;
    };

    var horizontalCellsTemplate = function () {
        this._cellsTemplate = ("<table class='e-table e-workcellstab'cellpadding='0px' cellspacing='0px'>" +
          "<tbody>{{for cellrows ~cols=cols ~hourdiff=hourdiff ~view=view ~classname=classname ~columnvalue=column ~userTemp=userTemplate ~userHtml=userHtml}}" +
          "{{if classname == 'e-parentnode'}} <tr class='e-resourceheadertr' style='width:100%'>{{for ~cols ~value=#getIndex()}}{{if #index % ~hourdiff == 0 && #index != 0 && ~view !== 'month' }}<td class='e-resourceheadercells e-workcells e-parentworkcell e-dayend' style='width:{{:cellWidth}};height:{{:cellHeight}}'>{{else}}<td class='e-resourceheadercells e-workcells e-parentworkcell' style='width:{{:cellWidth}};height:{{:cellHeight}}'>{{/if}}{{if ~userTemp == true}}{{if ~view !== 'month'}}{{:~userHtml[~value][0][#getIndex()]}}{{else}}{{:~userHtml[~value][#getIndex()]}}{{/if}}{{/if}}</td>{{if ~view !== 'month' ~val=#index}}{{for ~columnvalue[#getIndex()] ~width = cellWidth}}<td class='e-resourceheadercells e-workcells e-parentworkcell e-alternateworkcell' style='width:{{:~width}};height:{{:cellHeight}}'>{{if ~userTemp == true}}{{:~userHtml[~value][1][~val][#getIndex()]}}{{/if}}</td>{{/for}}{{/if}}{{/for}}</tr>" +
          "{{else}}<tr style='width:100%'>{{for ~cols ~value=#getIndex()}}{{if #index % ~hourdiff == 0 && #index != 0 && ~view !== 'month'  }}<td class='e-workcells e-childworkcell e-dayend' style='width:{{:cellWidth}};height:{{:cellHeight}}'>{{else}}<td class='e-workcells e-childworkcell' style='width:{{:cellWidth}};height:{{:cellHeight}}'>{{/if}}{{if ~userTemp == true}}{{if ~view !== 'month'}}{{:~userHtml[~value][0][#getIndex()]}}{{else}}{{:~userHtml[~value][#getIndex()]}}{{/if}}{{/if}}</td>{{if ~view !== 'month' ~val=#index}}{{for ~columnvalue[#getIndex()] ~width = cellWidth}}<td class='e-workcells e-childworkcell e-alternateworkcell' style='width:{{:~width}};height:{{:cellHeight}}'>{{if ~userTemp == true}}{{:~userHtml[~value][1][~val][#getIndex()]}}{{/if}}</td>{{/for}}{{/if}}{{/for}}" +
          "</tr>{{/if}}{{/for}}</tbody></table>");
        return this._cellsTemplate;
    };

    ej.scheduleFeatures.horizontal = {

        _renderHorizontalTemplates: function () {
            this.horizontalHeader = $.templates(this._createTemplate(horizontalHeaderTemplate(), "_HorizontalHeader"));
            this.cellTemplate = $.templates(this._createTemplate(horizontalCellsTemplate(), "_HorizontalCells"));
            this.horizontalResHeader = $.templates(this._createTemplate(horizontalResourceHeaderTemplate(), "_HorizontalResources"));
            this.userTimeCellHoriTemplate = $.templates(this._createTemplate(userTimeCellsHoriTemplate(), "_userTimeCells"));
        },

        _horizontalViewNavigation: function (e) {
            var currentDateIndex, navidate;
            if (e.type == "click") {
                if (this.currentView() === "week" || this.currentView() === "workweek" || (this.currentView() === "customview" && this._renderDays <= 7)) {
                    this.element.find(".e-headercells").children().removeClass("e-activeview");
                    currentDateIndex = e.currentTarget.cellIndex;
                    navidate = new Date(this._dateRender[currentDateIndex]);
                    if (this.model.minDate <= navidate && this.model.maxDate >= navidate) {
                        (this.model.timeScale.enable) && $(e.currentTarget).children().addClass("e-activeview");
                        this.currentDate(navidate);
                    }
                    else { return false; }
                    this._businessHourScroller();
                }
                else if (this.currentView() == "month" || (this._isCustomMonthView())) {
                    currentDateIndex = e.currentTarget.cellIndex;
                    if (this.model.views.indexOf("day") == -1) return false;
                    navidate = new Date(this.monthDays[currentDateIndex]);
                    if (this.model.minDate <= navidate && this.model.maxDate >= navidate)
                        this.currentDate(navidate);
                    else { return false; }
                    this._navView = true;
                    this._viewChange(e, this.currentView(), "day");
                }
            }
            else if (e.type == "dblclick") {
                if (this.currentView() === "week" || this.currentView() === "workweek" || (this.currentView() === "customview" && this._renderDays <= 7)) {
                    var target = $(e.target);
                    var dayTarget = target.hasClass("e-headercells") ? target : target.parent().hasClass("e-headercells") ? target.parent() : target.parent().parent();
                    if (this.model.views.indexOf("day") == -1 || !dayTarget.hasClass("e-headercells")) return false;
                    navidate = new Date(this._dateRender[dayTarget.index()]);
                    if (this.model.minDate <= navidate && this.model.maxDate >= navidate)
                        this.currentDate(navidate);
                    else { return false; }
                    this._navView = true;
                    this._viewChange(e, this.currentView(), "day");
                }
            }
        },

        _renderHorizontalHeaderDays: function (localizeDays) {
            this.element.find(".e-headercells").addClass("e-dateheaderselect");
            if (this.currentView() !== "month" && !(this._isCustomMonthView())) {
                this.element.find(".e-currentdayhighlight").removeClass("e-currentdayhighlight");
                var curday, temp;
                if (!ej.isNullOrUndefined(this.model.dateHeaderTemplateId)) {
                    var columns = this._getUserDateheaderTemplate();
                    for (i = 0; i < this._dateRender.length; i++) {
                        $(this.element.find(".e-headercells")[i]).find("div")[0].innerHTML = columns[i].currentDay;
                        if (new Date(new Date(this._dateRender[i]).setHours(0, 0, 0, 0)).getTime() == new Date(new Date().setHours(0, 0, 0, 0)).getTime())
                            $(this.element.find("td.e-headercells")[i]).addClass("e-currentdayhighlight");
                    }
                }
                else {
                    for (var i = 0; i < this._dateRender.length; i++) {
                        curday = (this._mediaQuery && (this.currentView() == "week" || this.currentView() == "workweek")) ? this._dayNames[new Date(this._dateRender[i]).getDay()].split("")[0] : (this.currentView() === "day") ? (this._tempResource.length == 0 && ej.isNullOrUndefined(this.model.group)) ? localizeDays.calendar.days.names[new Date(this._dateRender[i]).getDay()] : this._dayShortNames[new Date(this._dateRender[i]).getDay()] : this._dayShortNames[new Date(this._dateRender[i]).getDay()];
                        if (this.model.timeScale.enable)
                            temp = (this._mediaQuery && (this.currentView() == "week" || this.currentView() == "workweek")) ? curday + parseInt(ej.format(new Date(this._dateRender[i]), "dd",this.model.locale)) : this.currentView() === "day" ? (this._tempResource.length == 0 && ej.isNullOrUndefined(this.model.group)) ? curday + " " + ej.format(new Date(this._dateRender[i]), "dd MMMM yyyy",this.model.locale) : curday + " " + ej.format(new Date(this._dateRender[i]), "dd MMM yy",this.model.locale) : curday + " " + new Date(this._dateRender[i]).getDate();
                        else
                            temp = (this._mediaQuery && (this.currentView() == "week" || this.currentView() == "workweek")) ? curday + parseInt(ej.format(new Date(this._dateRender[i]), "dd",this.model.locale)) : this.currentView() === "day" ? (this._tempResource.length == 0 && ej.isNullOrUndefined(this.model.group)) ? ej.format(new Date(this._dateRender[i]), "dd MMMM yyyy",this.model.locale) : ej.format(new Date(this._dateRender[i]), "dd MMM yy",this.model.locale) : ("0" + new Date(this._dateRender[i]).getDate()).slice(-2);
                        $(this.element.find(".e-headercells")[i]).find("div")[0].innerHTML = temp;
                        if (new Date(new Date(this._dateRender[i]).setHours(0, 0, 0, 0)).getTime() == new Date(new Date().setHours(0, 0, 0, 0)).getTime())
                            $(this.element.find("td.e-headercells")[i]).addClass("e-currentdayhighlight");
                    }
                }
                var currentDate = new Date(this.currentDate());
                if (this.model.orientation == "horizontal" && this.currentView() != "month" && this.model.timeScale.enable) {
                    if (new Date(this.currentDate()).getTime() == new Date(new Date().setHours(0, 0, 0, 0)).getTime()) {
                        this.element.find(".e-headercells").children().removeClass("e-activeview");
                        this.element.find(".e-currentdayhighlight").children().addClass("e-activeview");
                    }
                    var active = this.element.find(".e-headercells").children(".e-activeview").parent().index();
                    this.element.find(".e-headercells").children().removeClass("e-activeview");
                    var index = this.currentView() === "day" ? 0 : this.currentView() === "workweek" ? currentDate.getDay() - 1 : active;
                    this.currentView() != "day" && $(this.element.find(".e-headercells")[index]).children().addClass("e-activeview");
                    new Date(new Date(this.currentDate()).setHours(0, 0, 0, 0)).getTime() === new Date(new Date().setHours(0, 0, 0, 0)).getTime() ? $(this.element.find("td.e-horizontalheadertddate")[index]).addClass("e-headerToday") : "";
                }
            }
            else {
                var monthDays = this._horizontalMonthDates();
                for (var i = 0; i < monthDays.length; i++) {
                    if (new Date(new Date(monthDays[i]).setHours(0, 0, 0, 0)).getTime() == new Date(new Date().setHours(0, 0, 0, 0)).getTime())
                        $(this.element.find("td.e-headercells")[i]).addClass("e-currentdayhighlight");
                }
            }
        },

        _horizontalScroll: function (e, proxy) {
            if (ej.isNullOrUndefined(e.scrollLeft)) return;
            if (proxy.currentView() == "day" || proxy.currentView() == "week" || proxy.currentView() == "workweek" || (this.currentView() === "customview" && this._renderDays <= 7)) {
                var currentDateIndex = $(proxy.element.find(".e-headercells").find(".e-activeview").parent()).index();
                var index = 0;
                if (this.model.enableRTL) {
                    var leftValue = e.scrollData.scrollable - e.scrollLeft;
                    $(this.element.find(".e-horizontaltimecells").find("table tr")[2]).css("left", leftValue - 1 + "px");
                    var index = Math.floor((Math.abs(leftValue) / (proxy.element.find(".e-workcells").width() + 1)) / ((proxy.model.endHour - proxy.model.startHour) * proxy.model.timeScale.minorSlotCount));
                }
                else
                    var index = Math.floor((Math.abs(e.scrollLeft) / (proxy.element.find(".e-workcells").width())) / ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot)));
                if (proxy.currentView() != "day" && currentDateIndex !== index)
                    proxy.element.find(".e-headercells").children().removeClass("e-activeview");
                (proxy.currentView() != "day") && $(proxy.element.find(".e-headercells")[index]).children().addClass("e-activeview");
                (!this.model.timeScale.enable) && proxy.element.find(".e-headercells").children().removeClass("e-activeview");
            }
        },

        _getHorizontalheaderCellCount: function (weekcols) {
            var cols = [];
            this._isCustomMonthView();
            if (!ej.isNullOrUndefined(this.model.dateHeaderTemplateId) && (this.currentView() == "day" || this.currentView() == "week" || this.currentView() == "workweek" || (this.currentView() == "customview" && this._oneWeek))) {
                cols = this._getUserDateheaderTemplate();
            }
            else {
                var curday, headerCellClass, temp;
                for (i = 0; i < this._dateRender.length; i++) {
                    curday = (this._mediaQuery && (this.currentView() == "week" || this.currentView() == "workweek")) ? this._dayNames[new Date(this._dateRender[i]).getDay()].split("")[0] : (this.currentView() === "month" || this.currentView() === "day" || (this._isCustomMonthView())) ? (this._tempResource.length == 0 && ej.isNullOrUndefined(this.model.group)) ? weekcols.calendar.days.names[new Date(this._dateRender[i]).getDay()] : this._dayShortNames[new Date(this._dateRender[i]).getDay()] : this._dayShortNames[new Date(this._dateRender[i]).getDay()];
                    headerCellClass = (new Date(new Date(this._dateRender[i]).setHours(0, 0, 0, 0)).getTime() === new Date(new Date().setHours(0, 0, 0, 0)).getTime()) ? "e-headerToday" : "";
                    temp = (this.currentView() === "month" || this._isCustomMonthView()) ? { currentDay: curday, currentDateClass: "", cellToday: headerCellClass, cellWidth: this.model.cellWidth } : (this.currentView() === "day") ? (this._tempResource.length == 0 && ej.isNullOrUndefined(this.model.group)) ? { currentDay: curday + " " + ej.format(new Date(this._dateRender[i]), "dd MMMM yyyy",this.model.locale), currentDateClass: "", cellToday: headerCellClass, cellWidth: this.model.cellWidth } : { currentDay: curday + " " + ej.format(new Date(this._dateRender[i]), "dd MMM yy",this.model.locale), currentDateClass: "", cellToday: headerCellClass, cellWidth: this.model.cellWidth } : { currentDay: (this._mediaQuery) ? curday + parseInt(ej.format(new Date(this._dateRender[i]), "dd",this.model.locale)) : curday + " " + new Date(this._dateRender[i]).getDate(), currentDateClass: new Date(this._dateRender[i]).getDate() === new Date(this.currentDate()).getDate() ? "e-activeview" : "", cellToday: headerCellClass, cellWidth: this.model.cellWidth };
                    cols.push(temp);
                }
            }
            return cols;
        },

        _getHoriStartEndTime: function (localizeAmPm) {
            var templateValue = !ej.isNullOrUndefined(this.model.timeScale.majorSlotTemplateId) || !ej.isNullOrUndefined(this.model.timeScale.minorSlotTemplateId)
            if (templateValue) {
                var userTemp = $.templates($(this.model.timeScale.majorSlotTemplateId).html());
                var userTemp1 = $.templates($(this.model.timeScale.minorSlotTemplateId).html());
            }
            var startendTimes = [];
            var headercellWidth = (!this.model.cellWidth) ? this._safariBrowser ? "29px" : "30px" : this._safariBrowser ? (parseInt(this.model.cellWidth) - 1 + "px") : this.model.cellWidth;
            var daysCount = this.currentView() == "week" ? 7 : this.currentView() == "day" ? 1 : (this.currentView() === "customview" && this._renderDays <= 7) ? this._dateRender.length : this.model.workWeek.length;
            for (var day = 0; day < daysCount; day++) {
                if (templateValue) {
                    var dateValue = new Date(new Date().setHours(0, 0, 0, 0));
                    var j = 0, timelist1 = [];
                    for (var i = this.model.startHour; i < this.model.endHour;) {
                        var value = this.model.timeScale.majorSlot + j;
                        var jvalue = j;
                        while (j < value) {
                            var jval = j;
                            j = j * 60 * 1000;
                            if (templateValue) {
                                if (jval == jvalue)
                                    var timelist = !ej.isNullOrUndefined(this.model.timeScale.majorSlotTemplateId) ? userTemp.render(object = { date: new Date(new Date(this._dateRender[0]).setHours(i, 0, 0, j)) }) : userTemp1.render(object = { date: new Date(new Date(this._dateRender[0]).setHours(i, 0, 0, j)) });
                                else if (!ej.isNullOrUndefined(this.model.timeScale.minorSlotTemplateId))
                                    timelist1.push(userTemp1.render(object = { date: new Date(new Date(this._dateRender[0]).setHours(i, 0, 0, j)) }).trim());

                            }
                            else {
                                if (this._timeMode === "12") {
                                    var timelist = ((i === this.model.startHour || i === 12) && (localizeAmPm.AM && localizeAmPm.PM) && j == 0) ? ej.format(new Date(new Date(dateValue).setHours(i, 0, 0, j)), "hh tt",this.model.locale) : ej.format(new Date(new Date(dateValue).setHours(i, 0, 0, j)), "hh:mm tt",this.model.locale);
                                    startendTimes.push({ time: timelist, id: i + "_" + j, timecellclass: ((i == this.model.startHour && day != 0 && j == 0)) ? "e-dayend" : "", cellWidth: (!this.model.cellWidth) ? "30px" : this.model.cellWidth, cellHeight: this.model.cellHeight, timeCellWidth: headercellWidth });
                                }
                                else
                                    startendTimes.push({ time: (i <= 9 ? "0" + i : i) + " 00", timecellclass: ((i % ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount)) == this.model.startHour && day != 0) ? "e-dayend" : "", cellWidth: (!this.model.cellWidth) ? "30px" : this.model.cellWidth, cellHeight: this.model.cellHeight, timeCellWidth: headercellWidth });
                            }
                            j = !ej.isNullOrUndefined(this.model.timeScale.majorSlotTemplateId) || !ej.isNullOrUndefined(this.model.timeScale.minorSlotTemplateId) ? (j / (60 * 1000)) + (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount) : (j / (60 * 1000)) + this.model.timeScale.majorSlot;
                        }
                        i = (this.model.timeScale.majorSlot > 60) ? i + (this.model.timeScale.majorSlot / 60) : j >= 60 ? i + 1 : i;
                        j = (j >= 60) ? 0 : j;
                        if (templateValue) {
                            if (j == this.model.timeScale.majorSlot || j == 0) {
                                startendTimes.push({ time: timelist.trim(), times: timelist1, id: i + "_" + j, timecellclass: (((i - 1) == this.model.startHour) && day != 0 && j == 0) ? "e-dayend" : "", cellWidth: (!this.model.cellWidth) ? "30px" : this.model.cellWidth, cellHeight: this.model.cellHeight, timeCellWidth: headercellWidth });
                                timelist1 = [];
                            }
                        }
                    }
                }
                else {
                    var dateValue = new Date(new Date().setHours(0, 0, 0, 0));
                    for (var i = this.model.startHour; i < this.model.endHour;) {
                        var j = 0;
                        while (j < 60) {
                            j = j * 60 * 1000;
                            if (this._timeMode === "12") {
                                var timelist = ((i === this.model.startHour || i === 12) && (localizeAmPm.AM && localizeAmPm.PM) && j == 0) ? ej.format(new Date(new Date(dateValue).setHours(i, 0, 0, j)), "hh tt",this.model.locale) : ej.format(new Date(new Date(dateValue).setHours(i, 0, 0, j)), "hh:mm tt",this.model.locale);
                                startendTimes.push({ time: timelist, id: i + "_" + j, timecellclass: ((i == this.model.startHour && day != 0 && j == 0)) ? "e-dayend" : "", cellWidth: (!this.model.cellWidth) ? "30px" : this.model.cellWidth, cellHeight: this.model.cellHeight, timeCellWidth: headercellWidth });
                            }
                            else
                                startendTimes.push({ time: (i <= 9 ? "0" + i : i) + " 00", timecellclass: ((i % ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount)) == this.model.startHour && day != 0) ? "e-dayend" : "", cellWidth: (!this.model.cellWidth) ? "30px" : this.model.cellWidth, cellHeight: this.model.cellHeight, timeCellWidth: headercellWidth });
                            j = (j / (60 * 1000)) + this.model.timeScale.majorSlot;
                        }
                        i = (this.model.timeScale.majorSlot > 60) ? i + (this.model.timeScale.majorSlot / 60) : i + 1;
                    }
                }
            }
            return startendTimes;
        },

        _getHorizontalDayAppointments: function (appointmentsList, dateCount, day, res) {
            var resAvail = [];
            for (var app = 0; app < appointmentsList.length; app++) {
                if (!ej.isNullOrUndefined(this.model.group) && this._grouping.length > 1)
                    resAvail = new ej.DataManager(this._tempResource[this._tempResource.length - 1].resourceSettings.dataSource).executeLocal(new ej.Query().where(this._tempResource[this._tempResource.length - 1].resourceSettings.groupId, ej.FilterOperators.equal, appointmentsList[app][this._appointmentSettings["resourceFields"].split(",")[this._appointmentSettings["resourceFields"].split(",").length - 2]]));
                else resAvail = this.res1;
                if (resAvail.length != 0) {
                    if (new Date(new Date(dateCount[day]).setHours(0, 0, 0, 0)).getTime() == new Date(new Date(appointmentsList[app][this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() &&
                          new Date(new Date(dateCount[day]).setHours(0, 0, 0, 0)).getTime() <= new Date(new Date(appointmentsList[app][this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime() && (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && ej.scheduleFeatures.resources) ? appointmentsList[app][this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 1].trim()] == this.res1[res][this._tempResource[this._tempResource.length - 1].resourceSettings["id"]] : true &&
                               new Date(new Date(appointmentsList[app][this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() <= new Date(new Date(appointmentsList[app][this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime()) {
                        this._renderApp(appointmentsList[app], day, res);
                        this._filtered.push(appointmentsList[app]);
                    }
                }
            }
        },

        _horizontalMonthDates: function () {
            var dateFilter = [];
            for (i = 0; i < this._dateRender.length; i++) {
                if (new Date(this.currentDate()).getMonth() === new Date(this._dateRender[i]).getMonth())
                    dateFilter.push(this._dateRender[i]);
            }
            return dateFilter;
        },

        _horiGroupCollection: function () {
            if ((this._tempResource.length != 0)) {
                var rIndex, temp = this._resourceSort(), temp1 = this.res1;
                var temp2 = temp.filter(function (a) { return temp1.indexOf(a) === -1; });
                if (ej.isNullOrUndefined(this.model.group)) this.res1 = ["0"];
                return temp2;
            }
        },

        _renderHorizontalApp: function (rStartTime, rEndTime, record, day, cellHeight, timeScaleRowCount, startHour, endHour) {
            var headerCell = this.element.find(".e-workcellstab tr"), appHeight, appWidth, topPosition, leftPosition;
            if (rStartTime <= rEndTime) {
                var startTime = ((new Date(rStartTime).getHours()) < startHour) ? (new Date(rStartTime).getHours() + (-new Date(rStartTime).getHours()) + (-new Date(rStartTime).getMinutes())) : (new Date(rStartTime).getHours() + (-startHour));
                var endTime = ((new Date(rEndTime).getHours()) > endHour) ? (new Date(rEndTime).getHours() + (-new Date(rEndTime).getHours() + (endHour - startHour)) + (-new Date(rEndTime).getMinutes())) : (new Date(rEndTime).getHours() + (-startHour));
                endTime = (new Date(rEndTime).getHours() == endHour) ? (new Date(endTime).getMinutes() + (-new Date(rEndTime).getMinutes())) : endTime;
                appHeight = 20; topPosition = 0;
                var level = 0;
                if (this.model.startHour <= new Date(rStartTime).getHours() && this.model.endHour >= new Date(rStartTime).getHours()) {
                    var groupIndex = (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && this._grouping.length > 1) ? this._findResourceIndex(this._horiHeaderCollection, this._tempResource[this._tempResource.length - 2].resourceSettings["id"], record[this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 2].trim()]) + 1 : 0;
                    var resValue = (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0) ? this._findResourceIndex(this.res1, this._tempResource[this._tempResource.length - 1].resourceSettings.id, record[this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 1].trim()]) + 1 : 1;
                    var overlapList = (ej.scheduleFeatures.resources && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && !ej.isNullOrUndefined(this.model.group)) ? this._overlapApp(record["AppTaskId"], record[this._appointmentSettings["startTime"]], record[this._appointmentSettings["endTime"]], record[this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 1].trim()]) : this._overlapApp(record["AppTaskId"], record[this._appointmentSettings["startTime"]], record[this._appointmentSettings["endTime"]], null);
                    if (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && this._grouping.length > 1)
                        this.overlapList = new ej.DataManager(overlapList).executeLocal(new ej.Query().where(this._appointmentSettings["resourceFields"].split(",")[this._appointmentSettings["resourceFields"].split(",").length - 2], ej.FilterOperators.equal, record[this._appointmentSettings["resourceFields"].split(",")[this._appointmentSettings["resourceFields"].split(",").length - 2]]));
                    var userAppTemplId = (this.model.appointmentTemplateId) ? true : false;
                    var userTempHtml = userAppTemplId && this._getUserAppointmentTemplate(record);
                    appHeight = (!this.model.appointmentTemplateId) ? appHeight : ($(userTempHtml).css('height') == "100%" ? (!this.model.showOverflowButton ? this.initialCellHeight : (cellHeight - 15)) : $(userTempHtml).css('height') == "0px" ? appHeight : $(userTempHtml).height());
                    level = (ej.scheduleFeatures.resources && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && !ej.isNullOrUndefined(this.model.group)) ? this._getOverlapCount(record, day, this._dateRender, record[this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 1].trim()]) : this._getOverlapCount(record, day, this._dateRender, null);
                    this._renderedAllDay.push(record);
                    topPosition = (topPosition + (level * (appHeight + 2)));
                    var diffTime, diffDays, diffMinutes, cellIndex;
                    if (record[this._appointmentSettings["allDay"]]) {
                        diffTime = new Date(new Date(new Date(rEndTime).setHours(0, 0, 0, 0)).getTime()) - new Date(new Date(new Date(rStartTime).setHours(0, 0, 0, 0)).getTime());
                        diffDays = Math.round(diffTime / 86400000) + 1;
                        if (diffDays > this._dateRender.length)
                            diffDays = new Date(this._dateRender[this._dateRender.length - 1]).getDay() + 1 - new Date(rStartTime).getDay();
                        diffMinutes = (diffDays * (endHour - startHour) * 60);
                        cellIndex = ((this.model.endHour - this.model.startHour) * timeScaleRowCount) * day;
                        appWidth = ((this.cellwidth / 30) * diffMinutes) + ((diffMinutes / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) - 1);
                        leftPosition = "0";
                    }
                    else if (new Date(new Date(new Date(record[this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime()) < new Date(new Date(new Date(record[this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime())) {
                        var endDiffer = (new Date(rEndTime) < new Date(new Date(rEndTime).setHours(this.model.endHour, 0, 0)) && new Date(rEndTime) < new Date(new Date(rEndTime).setHours(this.model.startHour, 0, 0))) ? (((this.model.endHour) / 2) * 60) : ((new Date(rEndTime).getHours() * 60) + new Date(rEndTime).getMinutes());
                        var startDiffer = new Date(rStartTime) > new Date(new Date(rEndTime).setHours(this.model.startHour, 0, 0)) ? (this.model.startHour * 60) : ((new Date(rStartTime).getHours() * 60) + new Date(rStartTime).getMinutes());
                        var i = 1, rEnd, rStart, end, start, diffTime;
                        rEnd = this._dateRender.indexOf(new Date(rEndTime).setHours(0, 0, 0, 0));
                        rStart = this._dateRender.indexOf(new Date(rStartTime).setHours(0, 0, 0, 0));
                        if (rEnd == -1) {
                            while (i < 7) {
                                if (new Date(this._dateRender[this._dateRender.length - i]).getTime() < new Date(rEndTime).setHours(0, 0, 0, 0)) {
                                    end = this._dateRender.length - i;
                                    endDiffer = this.model.endHour * 60;
                                    break;
                                }
                                else i++;
                            }
                        }
                        else
                            end = rEnd;
                        if (rStart == -1) {
                            start = day;
                            startDiffer = this.model.startHour * 60;
                        }
                        else
                            start = rStart;
                        diffTime = end - start;
                        diffMinutes = ((((diffTime) * ((endHour - startHour)) * 60) - startDiffer) + endDiffer);
                        cellIndex = (((this.model.endHour - this.model.startHour) * timeScaleRowCount) * (60 / this.model.timeScale.majorSlot) * day) + ((rStart == -1) ? 0 : startTime * timeScaleRowCount) * (60 / this.model.timeScale.majorSlot);
                        appWidth = ((this.cellwidth / 30) * diffMinutes) + ((diffMinutes / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) - 2);
                        if (diffDays > this._dateRender.length) {
                            diffDays = new Date(this._dateRender[this._dateRender.length - 1]).getDay() + 1 - new Date(rStartTime).getDay();
                            diffMinutes = ((diffDays) * (endHour - startHour) * 60);
                            appWidth = diffMinutes / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount) * this.cellwidth + ((diffMinutes / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) - 3);
                        }
                        leftPosition = (rStart == -1 ? 0 : parseFloat((new Date(rStartTime).getMinutes())) * (this.element.find(".e-workcells")[0].offsetWidth) * timeScaleRowCount / this.model.timeScale.majorSlot);
                    }
                    else {
                        leftPosition = (parseFloat((new Date(rStartTime).getMinutes() + (new Date(rStartTime).getMilliseconds() / 60))) * (this.cellwidth * this.model.timeScale.minorSlotCount) / this.model.timeScale.majorSlot) - 1;
                        if ((this.model.endHour - this.model.startHour) == 24)
                            var diffInMinutes = ((new Date(rEndTime).getHours() * 60) + new Date(rEndTime).getMinutes()) - ((new Date(rStartTime).getHours() * 60) + new Date(rStartTime).getMinutes());
                        else {
                            var endDiffer = ((new Date(rEndTime).getHours() * 60) + new Date(rEndTime).getMinutes()) > (this.model.endHour * 60) ? (this.model.endHour * 60) : ((new Date(rEndTime).getHours() * 60) + new Date(rEndTime).getMinutes());
                            var startDiffer = ((new Date(rStartTime).getHours() * 60) + new Date(rStartTime).getMinutes()) < (this.model.startHour * 60) ? (this.model.startHour * 60) : ((new Date(rStartTime).getHours() * 60) + new Date(rStartTime).getMinutes());
                            var diffInMinutes = endDiffer - startDiffer;
                        }
                        diffInMinutes += 1;
                        appWidth = diffInMinutes / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount) * this.cellwidth + ((diffInMinutes / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) - 2) + 1;
                        cellIndex = (((this.model.endHour - this.model.startHour) * timeScaleRowCount) * (60 / this.model.timeScale.majorSlot) * day) + (startTime * timeScaleRowCount * (60 / this.model.timeScale.majorSlot));
                    }
                    var colorAppointment = this._appointmentColor(record);
                    if ((!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0))
                        cellHeight = $(headerCell[resValue + groupIndex - 1]).find(".e-workcells").outerHeight();
                    else cellHeight = cellHeight;
                    var indicationIcon = this._indicationApp(record);
                    if ((topPosition + appHeight + 7) < cellHeight) {
                        var startTimeDisp = this._timeMode == "12" ? ej.format(new Date(record[this._appointmentSettings["startTime"]]), this._pattern.t,this.model.locale) : ej.format(new Date(record[this._appointmentSettings["startTime"]]), "HH:mm",this.model.locale);
                        var endTimeDisp = this._timeMode == "12" ? ej.format(new Date(record[this._appointmentSettings["endTime"]]), this._pattern.t,this.model.locale) : ej.format(new Date(record[this._appointmentSettings["endTime"]]), "HH:mm",this.model.locale);
                        if (!ej.isNullOrUndefined(record[this._appointmentSettings["recurrenceRule"]]))
                            var recEditIcon = record[this._appointmentSettings["recurrenceRule"]].toString().indexOf("RECUREDITID") != -1;
                        var timeCellhtml = $(this.appTemplate.render({ id: record["AppTaskId"], appResize: this.model.enableAppointmentResize, currentview: this.currentView(), appHeight: appHeight, rtl: this.model.enableRTL, subject: record[this._appointmentSettings["subject"]], startTime: startTimeDisp, endTime: endTimeDisp, left: leftPosition + "px", top: topPosition, appWidth: appWidth + "px", userAppTemplId: userAppTemplId, userTemplate: userTempHtml, appClass: "e-appointment", appointData: colorAppointment.appointColor.appointData, appointCustomcss: colorAppointment.appointColor.appointCustomcss, appointtextcolor: colorAppointment.appointColor.appointtextcolor, value: colorAppointment.value, multiDiv: colorAppointment.multiDiv, orientation: this.model.orientation, priority: this.model.prioritySettings.enable ? record[this._appointmentSettings["priority"]] : '', enablePriority: this.model.prioritySettings["template"], priorityTemplate: this.model.prioritySettings["template"] ? this._priorityTemplate(record) : record[this._appointmentSettings['priority']], uid: record.Guid, recurrence: record[this._appointmentSettings["recurrence"]], recurrenceEdit: recEditIcon, leftInd: indicationIcon.leftIndication, rightInd: indicationIcon.rightIndication, resId: (!ej.isNullOrUndefined(this._appointmentSettings["resourceFields"])) ? record[this._appointmentSettings["resourceFields"].split(",")[this._appointmentSettings["resourceFields"].split(",").length - 1]] : "" }));
                        (!ej.isNullOrUndefined(this.model.queryCellInfo)) && this._renderQueryCellInfo("appointment", record, timeCellhtml);
                        var celltd = $($(headerCell[resValue + groupIndex - 1]).find("td.e-workcells")[cellIndex]);
                        celltd.find("div.e-appointwrapper").length > 0 ? celltd.find("div.e-appointwrapper").append(timeCellhtml) : celltd.prepend($("<div class='e-appointwrapper'></div>").append(timeCellhtml));
                    }
                    else {
                        if (this.model.showOverflowButton) {
                            var overflowIconIndex = cellIndex + Math.round(new Date(rStartTime).getMinutes() / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount));
                            if ($("#" + this._id + "_" + ej.format(new Date(record[this._appointmentSettings["startTime"]]), "MM_dd_yyyy",this.model.locale) + "_" + (resValue + groupIndex - 1) + "_" + overflowIconIndex).length == 0) {
                                var celltd = $($(headerCell[resValue + groupIndex - 1]).find("td.e-workcells")[overflowIconIndex]);
                                var overflowhtml = '<div id="' + this._id + "_" + ej.format(new Date(record[this._appointmentSettings["startTime"]]), "MM_dd_yyyy",this.model.locale) + "_" + (resValue + groupIndex - 1) + "_" + overflowIconIndex + '" class="e-icon e-arrowhead-down e-appsoverflow" cellinfo="' + this._dateRender[day] + '"></div>';
                                celltd.find("div.e-appointwrapper").length > 0 ? celltd.find("div.e-appointwrapper").append(overflowhtml) : celltd.prepend($("<div class='e-appointwrapper'></div>").append(overflowhtml));
                                topPosition = cellHeight - this.element.find('.e-appsoverflow').height();
                                this.element.find("#" + this._id + "_" + ej.format(new Date(record[this._appointmentSettings["startTime"]]), "MM_dd_yyyy",this.model.locale) + "_" + (resValue + groupIndex - 1) + "_" + overflowIconIndex).css(this.model.enableRTL ? "right" : "left", (this.cellwidth - 25) + "px").css("top", topPosition + "px");
                            }
                            $("#" + this._id + "_" + ej.format(new Date(record[this._appointmentSettings["startTime"]]), "MM_dd_yyyy",this.model.locale) + "_" + (resValue + groupIndex - 1) + "_" + overflowIconIndex).attr("appcount", level + 1);
                        }
                        else {
                            $(this.element.find(".e-workcellstab tr")[resValue + groupIndex - 1]).find(".e-workcells").css('height', cellHeight + appHeight - 1 + "px");
                            $(this.element.find(".e-resourceheadertable tr")[resValue + groupIndex - 1]).find(".e-childnode").css('height', cellHeight + appHeight - 1 + "px");
                            var startTimeDisp = this._timeMode == "12" ? ej.format(new Date(record[this._appointmentSettings["startTime"]]), this._pattern.t,this.model.locale) : ej.format(new Date(record[this._appointmentSettings["startTime"]]), "HH:mm",this.model.locale);
                            var endTimeDisp = this._timeMode == "12" ? ej.format(new Date(record[this._appointmentSettings["endTime"]]), this._pattern.t,this.model.locale) : ej.format(new Date(record[this._appointmentSettings["endTime"]]), "HH:mm",this.model.locale);
                            if (!ej.isNullOrUndefined(record[this._appointmentSettings["recurrenceRule"]]))
                                var recEditIcon = record[this._appointmentSettings["recurrenceRule"]].toString().indexOf("RECUREDITID") != -1;
                            var timeCellhtml = $(this.appTemplate.render({ id: record["AppTaskId"], appResize: this.model.enableAppointmentResize, currentview: this.currentView(), appHeight: appHeight, rtl: this.model.enableRTL, subject: record[this._appointmentSettings["subject"]], startTime: startTimeDisp, endTime: endTimeDisp, left: leftPosition + "px", top: topPosition, appWidth: appWidth + "px", userAppTemplId: userAppTemplId, userTemplate: userTempHtml, appClass: "e-appointment", appointData: colorAppointment.appointColor.appointData, appointCustomcss: colorAppointment.appointColor.appointCustomcss, appointtextcolor: colorAppointment.appointColor.appointtextcolor, value: colorAppointment.value, multiDiv: colorAppointment.multiDiv, orientation: this.model.orientation, priority: this.model.prioritySettings.enable ? record[this._appointmentSettings["priority"]] : '', enablePriority: this.model.prioritySettings["template"], priorityTemplate: this.model.prioritySettings["template"] ? this._priorityTemplate(record) : record[this._appointmentSettings['priority']], uid: record.Guid, recurrence: record[this._appointmentSettings["recurrence"]], recurrenceEdit: recEditIcon, leftInd: indicationIcon.leftIndication, rightInd: indicationIcon.rightIndication, resId: (!ej.isNullOrUndefined(this._appointmentSettings["resourceFields"])) ? record[this._appointmentSettings["resourceFields"].split(",")[this._appointmentSettings["resourceFields"].split(",").length - 1]] : "" }));
                            (!ej.isNullOrUndefined(this.model.queryCellInfo)) && this._renderQueryCellInfo("appointment", record, timeCellhtml);
                            var celltd = $($(headerCell[resValue + groupIndex - 1]).find("td.e-workcells")[cellIndex]);
                            celltd.find("div.e-appointwrapper").length > 0 ? celltd.find("div.e-appointwrapper").append(timeCellhtml) : celltd.prepend($("<div class='e-appointwrapper'></div>").append(timeCellhtml));
                            this._overflowFlag = true;
                        }
                    }
                    if (!ej.isNullOrUndefined(indicationIcon)) {
                        if (indicationIcon.leftIndication)
                            this.model.enableRTL ? this.element.find('[guid=' + record.Guid + ']').find(".e-schedulemouseclose").css("margin-left", "11px") : this.element.find('[guid=' + record.Guid + ']').find(".e-apptime,.e-apptext").css("margin-left", "13px");
                        if (indicationIcon.rightIndication)
                            this.model.enableRTL ? this.element.find('[guid=' + record.Guid + ']').find(".e-apptime,.e-apptext").css("margin-right", "13px") : this.element.find('[guid=' + record.Guid + ']').find('[guid=' + record.Guid + ']').find(".e-schedulemouseclose").css("margin-right", "11px");
                    }
                    if (!ej.isNullOrUndefined(this.model.group) && this._grouping.length > 1)
                        this._renderAppointmentCategory(this._horiHeaderCollection, groupIndex, cellIndex, record, appWidth, leftPosition);
                }
            }
        },

        _renderAppointmentCategory: function (resCollection, groupIndex, cellIndex, record, appWidth, leftPosition) {
            var appointColor, categoryClass, index = 0, rGroupId, resIndex, rObject = [], rIndex;
            if (!ej.isNullOrUndefined(this.model.group) && this._grouping.length > 0) {
                appointColor = this._getResourceColor(record);
                categoryClass = (appointColor.appointData == "") ? "e-categorycolor" : "";
                groupIndex -= 1;
                appWidth = (this.currentView() == "month" || this._isCustomMonthView()) ? appWidth : appWidth + 2;
                do {
                    var celltd = $($(this.element.find(".e-resourceheadertr")[groupIndex]).find("td.e-workcells")[cellIndex]);
                    var categorybarhtml = this.model.enableRTL ? ("<div class='e-categorybar " + categoryClass + "' id='categorybar_" + record.Guid + "' style='position:absolute;height:" + (this.resHeaderHeight) + "px;background:" + appointColor.appointData + ";width:" + appWidth + "px;right:" + leftPosition + "px;'></div>") : ("<div class='e-categorybar " + categoryClass + "' id='categorybar_" + record.Guid + "' style='position:absolute;height:" + (this.resHeaderHeight) + "px;background:" + appointColor.appointData + ";width:" + appWidth + "px;left:" + leftPosition + "px;'></div>");
                    celltd.find("div.e-appointwrapper").length > 0 ? celltd.find("div.e-appointwrapper").append(categorybarhtml) : celltd.prepend($("<div class='e-appointwrapper'></div>").append(categorybarhtml));
                    if (this._tempResource.length > 2) {
                        for (var a = this._tempResource.length - 2; a >= 0; a--) {
                            index = this._tempResource[a].resourceSettings.dataSource.indexOf(resCollection[groupIndex]);
                            if (index != -1) {
                                index = a;
                                rGroupId = this._tempResource[a].resourceSettings.groupId;
                                if (ej.isNullOrUndefined(rGroupId))
                                    return;
                                break;
                            }
                        }
                        resIndex = (index == 0) ? index : index - 1;
                        rObject = new ej.DataManager(resCollection).executeLocal(new ej.Query().where(this._tempResource[resIndex].resourceSettings.id, ej.FilterOperators.equal, resCollection[groupIndex][rGroupId]));
                        rIndex = this._tempResource[0].resourceSettings.dataSource.indexOf(rObject[0]);
                        if (rIndex == 0) {
                            rObject = [];
                            if (this._tempResource.length > 2) {
                                var celltd = $($(this.element.find(".e-resourceheadertr")[rIndex]).find("td.e-workcells")[cellIndex]);
                                var categorybarhtml = this.model.enableRTL ? ("<div class='e-categorybar " + categoryClass + "' id='categorybar_" + record.Guid + "' style='position:absolute;height:" + (this.resHeaderHeight) + "px;background:" + appointColor.appointData + ";width:" + appWidth + "px;right:" + leftPosition + "px;'></div>") : ("<div class='e-categorybar " + categoryClass + "' id='categorybar_" + record.Guid + "' style='position:absolute;height:" + (this.element.find(".e-resourceheadercells").height()) + "px;background:" + appointColor.appointData + ";width:" + appWidth + "px;left:" + leftPosition + "px;'></div>");
                                celltd.find("div.e-appointwrapper").length > 0 ? celltd.find("div.e-appointwrapper").append(categorybarhtml) : celltd.prepend($("<div class='e-appointwrapper'></div>").append(categorybarhtml));
                            }
                        }
                        else (rObject.length != 0) ? groupIndex = resCollection.indexOf(rObject[0]) : "";
                    }
                } while (rObject.length != 0)
            }
        },

        _getHorizontalOverlapCount: function (appointments, dateRender, day, record, resValue) {
            var filterData = [];
            for (var i = 0; i < appointments.length; i++) {
                if (ej.scheduleFeatures.resources && (this._tempResource.length != 0) && !ej.isNullOrUndefined(this.model.group)) {
                    if ((new Date(new Date(appointments[i][this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() <= new Date(new Date(dateRender[day]).setHours(0, 0, 0, 0)).getTime()) &&
                    (new Date(new Date(appointments[i][this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime() >= new Date(new Date(dateRender[day]).setHours(0, 0, 0, 0)).getTime()) &&
                    (((new Date(record[this._appointmentSettings["startTime"]]) < new Date(appointments[i][this._appointmentSettings["startTime"]]) && new Date(record[this._appointmentSettings["endTime"]]) >= new Date(appointments[i][this._appointmentSettings["startTime"]])) ||
                        (new Date(record[this._appointmentSettings["startTime"]]) < new Date(appointments[i][this._appointmentSettings["endTime"]]) && new Date(record[this._appointmentSettings["endTime"]]) > new Date(appointments[i][this._appointmentSettings["endTime"]])) ||
                        (new Date(record[this._appointmentSettings["startTime"]]) >= new Date(appointments[i][this._appointmentSettings["startTime"]]) && new Date(record[this._appointmentSettings["startTime"]]) < new Date(appointments[i][this._appointmentSettings["endTime"]])) ||
                        (new Date(record[this._appointmentSettings["endTime"]]) > new Date(appointments[i][this._appointmentSettings["startTime"]]) && new Date(record[this._appointmentSettings["endTime"]]) < new Date(appointments[i][this._appointmentSettings["endTime"]])))
                        && ((resValue != null) ? (resValue == appointments[i][this._tempResource[this._tempResource.length - 1]["field"]]) : resValue == null))) {
                        filterData.push(appointments[i]);
                    }
                }
                else {
                    if ((new Date(new Date(appointments[i][this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() <= new Date(new Date(dateRender[day]).setHours(0, 0, 0, 0)).getTime()) &&
                    (new Date(new Date(appointments[i][this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime() >= new Date(new Date(dateRender[day]).setHours(0, 0, 0, 0)).getTime()) &&
                    (((new Date(record[this._appointmentSettings["startTime"]]) < new Date(appointments[i][this._appointmentSettings["startTime"]]) && new Date(record[this._appointmentSettings["endTime"]]) >= new Date(appointments[i][this._appointmentSettings["startTime"]])) ||
                        (new Date(record[this._appointmentSettings["startTime"]]) < new Date(appointments[i][this._appointmentSettings["endTime"]]) && new Date(record[this._appointmentSettings["endTime"]]) > new Date(appointments[i][this._appointmentSettings["endTime"]])) ||
                        (new Date(record[this._appointmentSettings["startTime"]]) >= new Date(appointments[i][this._appointmentSettings["startTime"]]) && new Date(record[this._appointmentSettings["startTime"]]) < new Date(appointments[i][this._appointmentSettings["endTime"]])) ||
                        (new Date(record[this._appointmentSettings["endTime"]]) > new Date(appointments[i][this._appointmentSettings["startTime"]]) && new Date(record[this._appointmentSettings["endTime"]]) < new Date(appointments[i][this._appointmentSettings["endTime"]]))))) {
                        filterData.push(appointments[i]);
                    }
                }
            }
            return filterData;
        },

        _moveScroller: function () {
            if (this.currentView() == "week" || this.currentView() == "workweek" || (this.currentView() === "customview" && this._renderDays <= 7)) {
                if (this.element.find(".e-headercells").children().hasClass("e-activeview")) {
                    var currentDateIndex = $(this.element.find(".e-headercells").find(".e-activeview").parent()).index();
                    var cellOffsetLeft = $(this.element.find(".e-workcells")[parseInt(currentDateIndex * ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot)))]).offset().left;
                    if (this.element.find(".e-hscroll").length > 0) {
                        if (this.model.enableRTL) {
                            cellOffsetLeft = this.element.find(".e-workcells:first").offset().left - cellOffsetLeft;
                            this.element.find('div#' + this._id + "_scroller").ejScroller({ scrollLeft: cellOffsetLeft });
                            $(this.element.find(".e-horizontaltimecells").find("table tr")[2]).css("left", cellOffsetLeft + "px");
                        }
                        else {
                            $(this.element.find(".e-horizontaltimecells").find("table tr")[2]).css("left", (-cellOffsetLeft) + "px");
                            this.element.find('div#' + this._id + "_scroller").ejScroller({ scrollLeft: cellOffsetLeft });
                        }
                    }
                }
            }
        },

        _renderHorizontalHeaderBar: function () {
            var customview = this._isCustomMonthView(), view = this.model.timeScale.enable ? (this._isCustomMonthView()) ? "month" : this.currentView() : "month";
            var viewColCount = view == "day" ? 1 : view == "week" ? 7 : (this.currentView() === "customview" && this._renderDays <= 7) ? this._dateRender.length : this.model.workWeek.length;
            this._strTime = this._getStartEndTime();
            var colValue = this._columnTimeScale(this._strTime);
            this.datesColumn = this._getHeaderAllDayCellsCount();
            if (view === 'month' || (this._isCustomMonthView())) {
                this.datesColumn = [], this.monthDays = [], this.totdays = [];
                for (var i = 0; i < this._dateRender.length; i++) {
                    if (this.currentView() === "month" || (this._isCustomMonthView() && this._oneWeek)) {
                        if (new Date(this.currentDate()).getMonth() === new Date(this._dateRender[i]).getMonth())
                            this.totdays.push(this._dateRender[i]);
                    }
                    else
                        this.totdays.push(new Date(this._dateRender[i]));
                }
                var date = this.totdays.length;
                if (!ej.isNullOrUndefined(this.model.dateHeaderTemplateId) && (this.currentView() == "day" || this.currentView() == "week" || this.currentView() == "workweek" || (this.currentView() == "customview" && this._oneWeek))) {
                    var temp, columns = this._getUserDateheaderTemplate();
                    for (i = 0; i < date; i++) {
                        temp = { currentDate: columns[i].currentDay, currentDateClass: "", currentDay: this.currentView() == "day" ? this._dayFullNames[new Date(this.totdays[i]).getDay()] : this._dayShortNames[new Date(this.totdays[i]).getDay()].toString(), cellWidth: !this.model.cellWidth ? "100%" : this.model.cellWidth, cellHeight: this.model.cellHeight, today: (new Date(this.totdays[i]).getTime() == new Date(new Date().setHours(0, 0, 0, 0)).getTime()) };
                        this.datesColumn.push(temp);
                        this.monthDays.push(this.totdays[i]);
                    }
                }
                else {
                    var temp, curdate;
                    for (var i = 0; i < date; i++) {
                        curdate = customview && new Date(this.totdays[i]).getDate() == 1 ? (ej.format(new Date(this.totdays[i]), "MMM",this.model.locale) + " " + new Date(this.totdays[i]).getDate()) : ej.format(new Date(this.totdays[i]), "dd",this.model.locale);
                        if (this.model.timeScale.enable)
                            temp = { title: new Date(this.totdays[i]).toDateString(), currentDate: curdate, currentDateClass: "", currentDay: this._dayFullNames[new Date(this.totdays[i]).getDay()].toString().slice(0, 1), cellWidth: (!this.model.cellWidth && this.currentView() != "month" && !(this._isCustomMonthView())) ? "30px" : this.model.cellWidth, cellHeight: this.model.cellHeight, today: (new Date(this.totdays[i]).getTime() == new Date(new Date().setHours(0, 0, 0, 0)).getTime()) };
                        else {
                            if (this.currentView() == "day" || this.currentView() == "week" || this.currentView() == "workweek")
                                temp = { title: new Date(this.totdays[i]).toDateString(), currentDate: curdate, currentDateClass: "", currentDay: this.currentView() == "day" ? this._dayFullNames[new Date(this.totdays[i]).getDay()] : this._dayShortNames[new Date(this.totdays[i]).getDay()].toString(), cellWidth: !this.model.cellWidth ? "100%" : this.model.cellWidth, cellHeight: this.model.cellHeight, today: (new Date(this.totdays[i]).getTime() == new Date(new Date().setHours(0, 0, 0, 0)).getTime()) };
                            else
                                temp = { title: new Date(this.totdays[i]).toDateString(), currentDate: curdate, currentDateClass: "", currentDay: this._dayFullNames[new Date(this.totdays[i]).getDay()].toString().slice(0, 1), cellWidth: this.model.cellWidth, cellHeight: this.model.cellHeight, today: (new Date(this.totdays[i]).getTime() == new Date(new Date().setHours(0, 0, 0, 0)).getTime()) };
                        }
                        this.datesColumn.push(temp);
                        this.monthDays.push(this.totdays[i]);
                    }
                }
            }
            var userTemplateId = ((!ej.isNullOrUndefined(this.model.timeScale.majorSlotTemplateId) && !ej.isNullOrUndefined(this.model.timeScale.minorSlotTemplateId)) || !ej.isNullOrUndefined(this.model.timeScale.minorSlotTemplateId)) ? true : false;
            var template = (!ej.isNullOrUndefined(this.model.timeScale.majorSlotTemplateId)) ? true : false;
            if (userTemplateId || template) {
                var userTemp = $.templates($(this.model.timeScale.minorSlotTemplateId).html());
                var userTemp1 = $.templates($(this.model.timeScale.majorSlotTemplateId).html());
                var timeValue1 = [], j = 0;
                for (var i = this.model.startHour; i < this.model.endHour;) {
                    var timeValue = [];
                    var value = this.model.timeScale.majorSlot + j;
                    var jvalue = j;
                    while (j < value) {
                        var jval = j;
                        j = j * 60 * 1000;
                        if (this._timeMode === "12") {
                            if (jval == jvalue && !ej.isNullOrUndefined(this.model.timeScale.majorSlotTemplateId))
                                timeValue.push(userTemp1.render(object = { date: new Date(new Date(this._dateRender[0]).setHours(i, 0, 0, j)) }).trim());
                            else
                                timeValue.push(userTemp.render(object = { date: new Date(new Date(this._dateRender[0]).setHours(i, 0, 0, j)) }).trim());
                        }
                        j = (j / 60000) + (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount);
                    }
                    i = (this.model.timeScale.majorSlot > 60) ? i + (this.model.timeScale.majorSlot / 60) : j >= 60 ? i + 1 : i;
                    j = (j >= 60) ? 0 : j;
                    timeValue1.push(timeValue);
                }
                template = true;
            }
            var multiResources = ((this._tempResource.length != 0) && !ej.isNullOrUndefined(this.model.group) && this._tempResource[0].resourceSettings.dataSource.length != 0) ? true : false;
            if (userTemplateId || template)
                var html = this.userTimeCellHoriTemplate.render({ cols: this.datesColumn, label: this._getLocalizedLabels("Resources"), multiRes: multiResources, view: view, timeTdCount: this._strTime, colspan: view == "month" ? 1 : (this._strTime.length / viewColCount) * 2, height: view == 'month' ? 62 : 59, width: this.model.width, headercellWidth: view == "day" ? "100%" : "55px", column: colValue, userTemplateId: userTemplateId, template: template });
            else
                var html = this.horizontalHeader.render({ tablelayout: customview ? "e-fixedlayout" : '', cols: this.datesColumn, label: this._getLocalizedLabels("Resources"), multiRes: multiResources, view: view, timeTdCount: this._strTime, colspan: view == "month" ? 1 : (this._strTime.length / viewColCount) * 2, height: view == 'month' ? 62 : 59, width: this.model.width, headercellWidth: view == "day" ? "100%" : "55px", column: colValue });
            this.aTR.append(html);
        },

        _renderHorizontalContent: function ($contentAreaDiv, $contentTable, $contentBody, $contentTR, $WorkCellTD, $scrollerbarDiv) {
            var templateValue = !ej.isNullOrUndefined(this.model.timeScale.majorSlotTemplateId) || !ej.isNullOrUndefined(this.model.timeScale.minorSlotTemplateId);
            var trCount, resHtml, columnValue = [], value = (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount);
            var strTime = this._strTime;
            columnValue = this._columnValue;
            if ((this._tempResource.length != 0) && !ej.isNullOrUndefined(this.model.group) && this._tempResource[0].resourceSettings.dataSource.length != 0) {
                resHtml = this._renderHorizontalResources();
                trCount = this._horiResources;
            }
            else {
                resHtml = "";
                trCount = [{ classname: "e-childnode" }];
            }
            var userTemplate = (!ej.isNullOrUndefined(this.model.workCellsTemplateId)) ? true : false;
            if (userTemplate) { var workHtml = this._getUserWorkCellsTemplate(); }
            var workCellhtml = this.cellTemplate.render({ cellrows: trCount, hourdiff: Math.ceil(((this.model.endHour - this.model.startHour)) * (60 / this.model.timeScale.majorSlot)), view: this.model.timeScale.enable ? (this._isCustomMonthView()) ? "month" : this.currentView() : "month", cols: (this.model.timeScale.enable ? this.currentView() == 'month' || (this._isCustomMonthView()) ? this.datesColumn : strTime : this.datesColumn), column: columnValue, userTemplate: userTemplate, userHtml: workHtml });
            if (resHtml == "")
                this.wTR.append(ej.buildTag('td').append($contentAreaDiv.append($contentTable.append($contentBody.append($contentTR.append($WorkCellTD.append($scrollerbarDiv.append(this.$WorkCellDiv.append(workCellhtml)))))))));
            else
                this.wTR.append(ej.buildTag('td.e-horizontalrestd', {}, {}, { width: "15%", height: "100%" }).append(resHtml)).append(ej.buildTag('td').append($contentAreaDiv.append($contentTable.append($contentBody.append($contentTR.append($WorkCellTD.append($scrollerbarDiv.append(this.$WorkCellDiv.append(workCellhtml)))))))));
        },
        _columnTimeScale: function (strTime) {
            this._columnValue = [], _cols2 = [];
            var value = (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount);
            var templateValue = !ej.isNullOrUndefined(this.model.timeScale.majorSlotTemplate) || !ej.isNullOrUndefined(this.model.timeScale.minorSlotTemplate);
            var userTemplateId = ((!ej.isNullOrUndefined(this.model.timeScale.majorSlotTemplate) && !ej.isNullOrUndefined(this.model.timeScale.minorSlotTemplate)) || !ej.isNullOrUndefined(this.model.timeScale.minorSlotTemplate)) ? true : false;
            var template = (!ej.isNullOrUndefined(this.model.timeScale.majorSlotTemplate)) ? true : false;
            if (!templateValue) {
                for (var j = 0; j < strTime.length; j++) {
                    for (var i = 0; i < this.model.timeScale.minorSlotCount - 1; i++) {
                        value = value + (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount);
                        if (value > (this.model.endHour - this.model.startHour) * 60) {
                            _cols2.push(i);
                            if (i == (this.model.timeScale.minorSlotCount - 2)) {
                                value = 0;
                                break;
                            }
                        }
                        else
                            _cols2.push(i);
                    }
                    this._columnValue.push(_cols2);
                    value = value + (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount);
                    _cols2 = [];
                }
            }
            else {
                for (var j = 0; j < strTime.length; j++) {
                    this._columnValue.push(j);
                }
            }
            return this._columnValue;
        },

        _getResourceHeadTemplate: function (record) {
            var userTemp = $.templates($(this.model.resourceHeaderTemplateId).html());
            var userTempHtml = userTemp.render(record);
            return userTempHtml;
        },

        _renderHorizontalResources: function () {
            this._resCollect = []; this._horizontalResRender = []; this._horiResources = [];
            var view = this.currentView();
            var viewColCount = view == "day" ? 1 : view == "week" || view == "month" || (this._isCustomMonthView()) ? 7 : this.model.workWeek.length;
            var userResTemplId = (this.model.resourceHeaderTemplateId) ? true : false;
            if (!ej.isNullOrUndefined(this.model.group)) {
                if (this._grouping.length === 1) {
                    var index;
                    for (var i = 0; i < this._grouping.length; i++) {
                        index = this._findResourceIndex(this._tempResource, "name", this._grouping[i]);
                    }
                    for (var i = 0; i < this._resourceInfo[index].dataSource.length; i++) {
                        this._horiResources.push({ cellHeight: this.model.cellHeight, name: this._resourceInfo[index].dataSource[i][this._resourceInfo[index].text], idnum: this._resourceInfo[index].dataSource[i][this._resourceInfo[index].id], classname: "e-childnode", marginleft: "10px", width: "10px", backgroundcolor: "", border: "1px solid #bbbcbb", bordertop: "", userResHeader: this._getResourceHeadTemplate($.extend(this._resourceInfo[index].dataSource[i], { classname: "e-childnode" })), userResTemplId: userResTemplId });
                        this._resCollect.push(this._resourceInfo[index].dataSource[i]);
                    }
                    this._horizontalResRender.push(this._resCollect);
                }
                else {
                    var cIndex, rText, rId, lastRes, rGroupId, tempResource1 = this._resourceSort();
                    for (var a = 0; a < tempResource1.length; a++) {
                        lastRes = this.res1.indexOf(tempResource1[a]);
                        for (var b = 0; b < this.render_Resources.length; b++) {
                            rIndex = this.render_Resources[b].indexOf(tempResource1[a]);
                            if (rIndex != -1) {
                                index = b;
                                rId = this._tempResource[b].resourceSettings.id;
                                rText = this._tempResource[b].resourceSettings.text;
                                rGroupId = this._tempResource[b].resourceSettings.groupId;
                                break;
                            }
                        }
                        if (index == this.render_Resources.length - 1) {
                            this._horiResources.push({ cellHeight: this.model.cellHeight, name: tempResource1[a][rText], classname: "e-childnode", marginleft: ((this._mediaQuery) ? (index * 11) : (index * 21)) + "px", width: "20px", backgroundcolor: "", border: "1px dotted #bbbcbb", bordertop: "", userResHeader: this._getResourceHeadTemplate($.extend(tempResource1[a], { classname: "e-childnode" })), userResTemplId: userResTemplId });
                            this._resCollect.push(tempResource1[a]);
                        }
                        else {
                            this._horiResources.push({ cellHeight: this.model.cellHeight, name: tempResource1[a][rText], idnum: tempResource1[a][rId] + "_" + tempResource1[a][rGroupId], classname: "e-parentnode", marginleft: (index * 10) + "px", width: "20px", backgroundcolor: "", border: "1px dotted #bbbcbb", bordertop: "", userResHeader: this._getResourceHeadTemplate($.extend(tempResource1[a], { classname: "e-parentnode" })), userResTemplId: userResTemplId });
                            this._resCollect.push(tempResource1[a]);
                        }
                    }
                    this._horizontalResRender.push(this._resCollect);
                }
            }
            else {
                for (var k = 0; k < this._tempResource.length; k++) {
                    this._horizontalResRender.push(this._tempResource[k].resourceSettings.dataSource);
                    this._resCollect.push(this._tempResource[k].resourceSettings.dataSource);
                }
            }
            var html = this.horizontalResHeader.render({ trs: this._horiResources });
            return html;
        },

        _horizontalResIcon: function () {
            var resCat = this.element.find(".e-parentnodecategory"), resId, cIndex, resAvail, count;
            for (var a = 0; a < resCat.length; a++) {
                resId = resCat[a].id.split("_")[0];
                for (var b = 0; b < this._tempResource.length; b++) {
                    cIndex = new ej.DataManager(this._tempResource[b].resourceSettings.dataSource).executeLocal(new ej.Query().where(this._tempResource[b].resourceSettings.id, ej.FilterOperators.equal, resId));
                    if (cIndex.length != 0) { cIndex = b; break; }
                }
                count = cIndex + 1;
                count = (count == this._tempResource.length) ? count - 1 : count;
                for (var c = 0; c < this._tempResource.length; c++) {
                    resAvail = new ej.DataManager(this._resourceSort()).executeLocal(new ej.Query().where(this._tempResource[count].resourceSettings.groupId, ej.FilterOperators.equal, resId));
                    if (resAvail.length == 0) { $(resCat[a]).removeClass("e-resourceicon e-resourcecollapse"); }
                    break;
                }
            }
        },

        _renderHorizontalCurrentTime: function () {
            if (this.currentView() !== "month" && !(this._isCustomMonthView())) {
                if (this.element.find("td.e-headerToday").length > 0) {
                    this.element.find('.e-horizontaltabletimecell').parent().append('<div id="' + this._id + '_HighlightCurrentTimeline" class="e-highlightcurrenttimeline" style="height: 92%; width: 2px; position: absolute; background-color: red; "></div>');
                    $('#' + this._id + '_HighlightCurrentTimeline').css("top", this.element.find('.e-headerdays tr')[1].offsetTop);
                }
            }
            else {
                var monthDays = this._horizontalMonthDates();
                var target = this.element.find(".e-headerdays").find("table").find("td");
                for (var i = 0; i < monthDays.length; i++) {
                    if (new Date(new Date(monthDays[i]).setHours(0, 0, 0, 0)).getTime() === new Date(new Date().setHours(0, 0, 0, 0)).getTime())
                        $(target[i]).addClass("e-monthcurrenttime");
                }
            }
        },

        _horizontalTimePosition: function (temp, now) {
            if (temp.element.find("td.e-headerToday").length > 0) {
                var headertodaypos = temp.element.find("td.e-headerToday")[0].cellIndex;
                var cellIndex = (((temp.model.endHour - temp.model.startHour) * ((60 / temp.model.timeScale.majorSlot) * temp.model.timeScale.minorSlotCount)) * headertodaypos) + ((now.getHours() - temp.model.startHour) * ((60 / temp.model.timeScale.majorSlot) * temp.model.timeScale.minorSlotCount));
                var leftPosition = (parseFloat((now.getMinutes())) * (temp.element.find(".e-workcells")[1].offsetWidth) * temp.model.timeScale.minorSlotCount / temp.model.timeScale.majorSlot);
                $('#' + temp._id + '_HighlightCurrentTimeline').css("left", (cellIndex * temp.element.find(".e-workcells")[1].offsetWidth) + leftPosition);
            }
        },

        _horizontalBusinessHighlight: function (renderDates, bStartHour, bEndHour, timeRowsCount, target) {
            var tdLength = (ej.scheduleFeatures.resources && !ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0) ? this._horiResources.length : 1;
            if (this.currentView() !== "month" && !(this._isCustomMonthView()) && this.model.timeScale.enable) {
                for (var res = 0; res < tdLength; res++) {
                    for (var k = 0; k < renderDates.length; k++) {
                        for (var j = 0; j < this.model.workWeek.length; j++) {
                            if (this._dayNamesArray.indexOf(this.model.workWeek[j]) == new Date(renderDates[k]).getDay()) {
                                $($(this.element.find(".e-workcellstab tr")[res]).find(".e-workcells")[((bStartHour * timeRowsCount) + ((this.model.endHour - this.model.startHour) * timeRowsCount * k)) - 1]).nextAll(".e-workcells").slice(0, ((bEndHour * timeRowsCount) - (bStartHour * timeRowsCount))).addClass("e-businesshighlightworkcells");
                            }
                        }
                    }
                }
            }
            else {
                var monthDays = this.monthDays;
                target = this.element.find(".e-workcells"); target.removeClass("e-monthcellhighlight");
                for (var res = 0; res < tdLength; res++) {
                    for (var i = 0; i < monthDays.length; i++) {
                        for (var j = 0; j < this.model.workWeek.length; j++) {
                            if (this._dayNamesArray.indexOf(this.model.workWeek[j]) == new Date(monthDays[i]).getDay())
                                $($(this.element.find(".e-workcellstab tr")[res]).find(".e-workcells")[i]).addClass("e-monthcellhighlight");
                        }
                    }
                }
            }
        },

        _onResourceClick: function (e) {
            var index, target, hide, show, tempRes, resCount, pNode, newResCollection, resHeadTable = [], resWorkTable = [];;
            target = $(e.currentTarget);
            if (target.hasClass("e-resourceicon e-resourcecollapse")) {
                target.removeClass("e-resourceicon e-resourcecollapse").addClass("e-resourceicon e-resourceexpand");
                hide = true;
            }
            else {
                target.removeClass("e-resourceicon e-resourceexpand").addClass("e-resourceicon e-resourcecollapse");
                show = true;
            }
            this.element.find(".e-workcellstab").css('height', '100%');
            this.element.find(".e-resourceheadertable").css('height', '100%');
            index = $(e.currentTarget).closest("td.e-parentnode").parent().index();
            newResCollection = this._getResourceCollection();
            for (i = 0; i < newResCollection.length; i++) {
                tempRes = new ej.DataManager(this._tempResource[i].resourceSettings.dataSource).executeLocal(new ej.Query().where(this._tempResource[i].resourceSettings.id, ej.FilterOperators.equal, e.currentTarget.id.split("_")[0]));
                if (tempRes.length != 0) {
                    resCount = tempRes[0].count;
                    break;
                }
            }
            for (var a = 0; a < resCount; a++) {
                resHeadTable.push(this.element.find(".e-resourceheadertable tr")[index + a + 1]);
                resWorkTable.push(this.element.find(".e-workcellstab tr")[index + a + 1]);
            }
            for (var i = 0; i < resHeadTable.length ; i++) {
                if (hide) {
                    pNode = $(resHeadTable[i]).children().hasClass("e-parentnode");
                    if (pNode) $(resHeadTable[i]).find(".e-parentnodecategory").removeClass("e-resourceicon e-resourcecollapse").addClass("e-resourceicon e-resourceexpand");
                    if ($(resHeadTable[i]).is(":visible")) {
                        $(resHeadTable[i]).toggle();
                        $(resWorkTable[i]).toggle();
                    }
                }
                else {
                    pNode = $(resHeadTable[i]).children().hasClass("e-parentnode");
                    if (pNode) $(resHeadTable[i]).find(".e-parentnodecategory").removeClass("e-resourceicon e-resourceexpand").addClass("e-resourceicon e-resourcecollapse");
                    if ($(resHeadTable[i]).is(":hidden")) {
                        $(resHeadTable[i]).toggle();
                        $(resWorkTable[i]).toggle();
                    }
                }
            }
            this.element.find(".e-horires").height(this.element.find(".e-draggableworkarea").height());
            this._horizontalRender();
            if (this.model.cellHeight != "20px") this._reRenderScroller();
            if (this._mediaQuery) this.refreshScroller();
            this._horizontalResIcon();
            this.element.find("div.e-prevapp,div.e-nextapp").remove();
            this.element.find(".e-categorybar").height(this.element.find(".e-parentworkcell").height() - 3);
            this._businessHourScroller();
            this._renderAppointmentAll();
        },

    };

})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
    ej.scheduleFeatures = ej.scheduleFeatures || {};

    var resourceHeadTemplate = function () {
        this._resHeadTemplate = (
        "{{for resourceName}}{{for ~cols=colspan}}<td class='e-resourcecells' colspan='{{:~cols}}'> {{for ~resource=resourceNam}}<div class='e-resourceheadertext' align='center' title='{{if userResTemplId == true}}{{:resourceNam}}{{else}}{{:~resource}}{{/if}}'>{{if userResTemplId == true}}{{:userResHeader}}{{else}}{{:~resource}}{{/if}}</div>{{/for}}  </td>{{/for}}{{/for}}");
        return this._resHeadTemplate;
    };

    ej.scheduleFeatures.resources = {
        _getMultipleResourceCellsCount: function (count) {
            if (this._grouping.length === 1) {
                var index = this._findResourceIndex(this._tempResource, "name", this._grouping[0]);
                var resCount = this._resourceInfo[index].dataSource.length;
                if (this._resWorkWeek) {
                    var count = 0; var res = this._resourceInfo[index].dataSource;
                    for (var a = 0; a < res.length; a++) {
                        if (!ej.isNullOrUndefined(res[a][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]])) {
                            count = count + res[a][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]].length;
                        }
                        else {
                            count = count + this.model.workWeek.length;
                        }
                    }
                }
            }
            else {
                var newResCollection = this._getResourceCollection(), resources = [];
                var groupData, prevGroupDataId, query, resApp;
                for (var j = 0; j < newResCollection.length; j++) {
                    resources = [];
                    if (j == 0) {
                        for (var i = 0; i < newResCollection[j].dataSource.length; i++) {
                            resources.push({ resourceNam: newResCollection[j].dataSource[i][newResCollection[j].text] });
                        }
                    }
                    else {
                        if (j > 1) {
                            newResCollection[j - 1].dataSource = [];
                            newResCollection[j - 1].dataSource = this.res;
                        }
                        this.res = [];
                        groupData = ej.group(newResCollection[j].dataSource, newResCollection[j].groupId);
                        prevGroupDataId = ej.group(newResCollection[j - 1].dataSource, newResCollection[j - 1].id);
                        this._resourceManager1 = groupData instanceof ej.DataManager ? groupData : ej.DataManager(groupData);
                        for (var l = 0; l < prevGroupDataId.length; l++) {
                            for (var k = 0; k < prevGroupDataId[l].items.length; k++) {
                                query = new ej.Query().where("key", ej.FilterOperators.equal, prevGroupDataId[l].items[k][newResCollection[j - 1].id]);
                                resApp = this._resourceManager1.executeLocal(query);
                                if (resApp.length > 0) {
                                    for (var a = 0; a < resApp[0].items.length; a++) {
                                        resources.push({ resourceNam: resApp[0].items[a][newResCollection[j].text] });
                                        this.res.push(resApp[0].items[a]);
                                    }
                                }
                            }
                        }
                    }
                }
                resCount = resources.length;
                this.res1 = resources.length;
            }
            count = (this._resWorkWeek) ? count : count * resCount;
            return { resCount: resCount, count: count };
        },

        _initResourceData: function (fields, i) {
            var query = this._columnToSelect(fields);
            var proxy = this;
            var queryPromise = fields.dataSource.executeQuery(query);
            queryPromise.done(function (e) {
                fields.dataSource = e.result;
                proxy._resourceInfo.push(fields);
                if (i == proxy.model.resources.length - 1) {
                    proxy._renderInitSchedule();
                    proxy._bindAppointmentsData("Load");
                }
            });
        },

        _showMultipleResourceDetails: function (temp) {
            var prevdata, query, resApp1;
            if (this._tempResource.length > 0) {
                var newResCollection = this._resCollection;
                for (var i = 0; i < newResCollection.length; i++) {
                    this._appointmentAddWindow.find('.owner_' + i).ejAutocomplete("clearText");
                }
                for (var j = 0; j < this.render_Resources.length - 1; j++) {
                    prevdata = this.render_Resources[j + 1] instanceof ej.DataManager ? this.render_Resources[j + 1] : ej.DataManager(this.render_Resources[j + 1]);
                    query = new ej.Query().where(newResCollection[j + 1].groupId, ej.FilterOperators.equal, temp[this._appointmentSettings.resourceFields.toString().split(',')[j].trim()]);
                    resApp1 = prevdata.executeLocal(query);
                    this._appointmentAddWindow.find('.owner_' + (j + 1)).ejAutocomplete("clearText");
                    this._appointmentAddWindow.find('.owner_' + (j + 1)).ejAutocomplete("option", "dataSource", resApp1);
                }
                for (var i = 0; i < newResCollection.length; i++) {
                    this._appointmentAddWindow.find('.owner_' + i).data("ejAutocomplete").selectValueByKey(temp[this._appointmentSettings.resourceFields.toString().split(',')[i].trim()]);
                }
            }
        },

        _renderAppWindowResources: function (control) {
            var newResCollection = this.render_Resources;
            var Text = this.model.enableRTL ? 'margin-right:30px;margin-top:-18px' : 'float:left';
            var Color = this.model.enableRTL ? 'float:none' : 'float:left';
            for (var i = 0; i < newResCollection.length; i++) {
                if (!this._tempResource[i].allowMultiple)
                    control.find('.owner_' + i).ejAutocomplete({
                        enableRTL: this.model.enableRTL,
                        showPopupButton: true,
                        width: "100%", cssClass: this.model.cssClass,
                        multiSelectMode: "none",
                        emptyResultText: this._getLocalizedLabels("EmptyResultText"),
                        dataSource: newResCollection[i], fields: { text: this._resCollection[i]["text"], key: this._resCollection[i]["id"] }, change: this._onResourceChange,
                        template: "<div class='e-resourcediv' style='height:15px; margin-right:5px; margin-top:3px; float:left; width:15px;" + Color + "; background-color: ${" + this._resCollection[i].color + "}'></div><div style= " + Text + ">${" + this._resCollection[i]["text"] + "}</div>"
                    });
                else
                    control.find('.owner_' + i).ejAutocomplete({
                        enableRTL: this.model.enableRTL,
                        showPopupButton: true,
                        width: "100%", cssClass: this.model.cssClass,
                        multiSelectMode: "visualmode",
                        emptyResultText: this._getLocalizedLabels("EmptyResultText"),
                        dataSource: newResCollection[i], fields: { text: this._resCollection[i]["text"], key: this._resCollection[i]["id"] }, change: this._onResourceChange,
                        template: "<div class='e-resourcediv' style='height:15px; margin-right:5px; margin-top:3px; float:left; width:15px;" + Color + "; background-color: ${" + this._resCollection[i].color + "}'></div> <div style= " + Text + ">${" + this._resCollection[i]["text"] + "}</div>"
                    });
            }
        },

        _onResourceChange: function (e) {
            if (!ej.isNullOrUndefined(e.value) && e.value != "") {
                var scheduleDiv = $("#" + this._id.toString().split("_")[0]), proxy = scheduleDiv.ejSchedule("instance");
                var controlId = parseInt(this._id.toString().split("_")[2]);
                var controlMode = proxy._appointmentAddWindow.find('.owner_' + controlId).ejAutocomplete("option", "multiSelectMode");
                var selectedItems = this.getSelectedItems();
                var resourceCollection = proxy._resCollection;
                if (controlId < proxy.render_Resources.length - 1 && selectedItems.length > 0) {
                    var j = controlId + 1;
                    var data = proxy.render_Resources[j - 1] instanceof ej.DataManager ? proxy.render_Resources[j - 1] : ej.DataManager(proxy.render_Resources[j - 1]);
                    var prevdata = proxy.render_Resources[j] instanceof ej.DataManager ? proxy.render_Resources[j] : ej.DataManager(proxy.render_Resources[j]);
                    var query, resApp1, fieldCollection = [];
                    if (controlMode == "none") {
                        if (!ej.isNullOrUndefined(e.value)) {
                            var textCheck = new ej.Query().where(resourceCollection[j - 1].text, ej.FilterOperators.equal, e.value);
                            var result = data.executeLocal(textCheck);
                        }
                        var currentVal = ((!e.value) || ej.isNullOrUndefined(e.value) || result.length <= 0) ? selectedItems[0][resourceCollection[j - 1].id] : result[0][resourceCollection[j - 1].id];
                        if (!ej.isNullOrUndefined(currentVal)) {
                            for (a = j; a < resourceCollection.length; a++) {
                                resApp1 = new ej.DataManager(resourceCollection[j].dataSource).executeLocal(new ej.Query().where(resourceCollection[j].groupId, ej.FilterOperators.equal, currentVal));
                                if (resApp1.length != 0)
                                    currentVal = resApp1[0][resourceCollection[j - 1].id];
                                fieldCollection = [];
                                for (var k = 0; k < resApp1.length; k++) {
                                    fieldCollection.push(resApp1[k]);
                                }
                                if (resApp1.length != 0) {
                                    proxy._appointmentAddWindow.find('.owner_' + j).ejAutocomplete("clearText");
                                    proxy._appointmentAddWindow.find('.owner_' + j).ejAutocomplete("option", "dataSource", fieldCollection);
                                    proxy._appointmentAddWindow.find('.owner_' + j).data("ejAutocomplete").selectValueByKey(resApp1[0][resourceCollection[j].id]);
                                    selectedItems = resApp1[0][resourceCollection[j].id];
                                }
                                else {
                                    proxy._appointmentAddWindow.find('.owner_' + j).ejAutocomplete("clearText");
                                    proxy._appointmentAddWindow.find('.owner_' + j).ejAutocomplete("option", "dataSource", fieldCollection);
                                }
                                j++;
                            }
                        }
                    }
                    else {
                        var predicate;
                        predicate = ej.Predicate(resourceCollection[j - 1].id, ej.FilterOperators.equal, selectedItems[0][resourceCollection[j - 1].id]);
                        selectedItems = e.value.split(",");
                        for (var i = 1; i < selectedItems.length; i++) {
                            predicate = predicate["or"](resourceCollection[j - 1].text, ej.FilterOperators.equal, selectedItems[i]);
                        }
                        query = new ej.Query().where(predicate);
                        resApp = data.executeLocal(query);
                        if (resApp.length > 0) {
                            var prevPredicate;
                            prevPredicate = ej.Predicate(resourceCollection[j].groupId, ej.FilterOperators.equal, resApp[0][resourceCollection[j - 1].id]);
                            for (var i = 1; i < resApp.length; i++) {
                                prevPredicate = prevPredicate["or"](resourceCollection[j].groupId, ej.FilterOperators.equal, resApp[i][resourceCollection[j - 1].id]);
                            }
                            query = new ej.Query().where(prevPredicate);
                            resApp1 = prevdata.executeLocal(query);
                            fieldCollection = [];
                            for (var k = 0; k < resApp1.length; k++) {
                                fieldCollection.push(resApp1[k]);
                            }
                            proxy._appointmentAddWindow.find('.owner_' + j).ejAutocomplete("clearText");
                            proxy._appointmentAddWindow.find('.owner_' + j).ejAutocomplete("option", "dataSource", fieldCollection);
                            proxy._appointmentAddWindow.find('.owner_' + j).data("ejAutocomplete").selectValueByKey(resApp1[0][resourceCollection[j].id]);
                            selectedItems.push(resApp1[0][resourceCollection[j].id]);
                        }
                    }
                }
            }
        },

        _getResourceCollection: function () {
            var resIndexCollection = [], index;
            if ((this._tempResource.length != 0)) {
                if (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0) {
                    for (var i = 0; i < this._grouping.length; i++) {
                        index = this._findResourceIndex(this._tempResource, "name", this._grouping[i]);
                        resIndexCollection.push({ index: index, name: this._tempResource[i].name });
                    }
                    resIndexCollection = resIndexCollection.sort(function (a, b) {
                        var x = a.index; var y = b.index;
                        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
                    });
                }
                else {
                    for (var i = 0; i < this._tempResource.length; i++) {
                        resIndexCollection.push({ index: i });
                    }
                }
                var newResCollection = [];
                for (var k = 0; k < resIndexCollection.length; k++) {
                    newResCollection.push(this._resourceInfo[resIndexCollection[k].index]);
                }
                this._resCollection = newResCollection;
                return newResCollection;
            }
        },

        _resourceSort: function () {
            var nextRes, count, resAvail, index, rIndex, cRes, rId, tempResource = [], rCollection = [], tempRes1 = [];
            if (this._tempResource.length > 1) {
                for (i = 0; i < this._tempResource.length; i++) {
                    for (j = 0; j < this._tempResource[i].resourceSettings.dataSource.length; j++) {
                        tempResource.push(this._tempResource[i].resourceSettings.dataSource[j]);
                    }
                }
                count = 1;
                for (a = 0; a < this._tempResource.length; a++) {
                    for (b = 0, cRes = this._tempResource[a].resourceSettings.dataSource; b < cRes.length; b++) {
                        rId = this._tempResource[a].resourceSettings.id;
                        resAvail = rCollection.indexOf(cRes[b]);
                        (resAvail == -1) ? rCollection.push(cRes[b]) : "";
                        nextRes = new ej.DataManager(tempResource).executeLocal(new ej.Query().where(this._tempResource[count].resourceSettings.groupId, ej.FilterOperators.equal, cRes[b][rId]));
                        nextRes = nextRes.filter(function (a) { return cRes.indexOf(a) === -1; });
                        index = rCollection.indexOf(cRes[b]);
                        if (nextRes.length != 0) {
                            for (c = 0; c < nextRes.length; c++) {
                                rIndex = index + c + 1;
                                resAvail = rCollection.indexOf(nextRes[c]);
                                (resAvail == -1) ? rCollection.splice(rIndex, 0, nextRes[c]) : "";
                            }
                        }
                    }
                    count++;
                    count = (count == this._tempResource.length) ? count - 1 : count;
                }
                for (x = 0; x < rCollection.length; x++) {
                    index = this.res1.indexOf(rCollection[x]);
                    if (index != -1) tempRes1.push(rCollection[x]);
                }
                this.res1 = tempRes1;
            }
            else
                rCollection = this.res1;
            return rCollection;
        },

        _renderMultipleResourceHeaderTemplate: function (tbody, cols) {
            this.res1 = []; this.render_Resources = []; this.level_Resources = [];
            var view = this.currentView(); var newResCollection = this._getResourceCollection();
            var viewColCount = view == "day" ? 1 : view == "week" || view == "month" ? 7 : this.model.workWeek.length;
            viewColCount = (view == "customview" && this._dateRender.length >= 7) ? 7 : (view == "customview" && this._dateRender.length < 7) ? this._dateRender.length : viewColCount;
            if (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0) {
                var userResTemplId = (this.model.resourceHeaderTemplateId) ? true : false;
                var resources = [];
                if (this._grouping.length === 1) {
                    var index;
                    for (var i = 0; i < this._grouping.length; i++) {
                        index = this._findResourceIndex(this._tempResource, "name", this._grouping[i]);
                    }
                    for (var i = 0; i < this._resourceInfo[index].dataSource.length; i++) {
                        if (this._resWorkWeek)
                            var colCount = !ej.isNullOrUndefined(this._resourceInfo[index].dataSource[i][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]]) ? this._resourceInfo[index].dataSource[i][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]].length : viewColCount;
                        (this.currentView() != "agenda") && resources.push({ resourceNam: this._resourceInfo[index].dataSource[i][this._resourceInfo[index].text], colspan: (this._resWorkWeek) ? colCount : viewColCount, userResHeader: this._getResourceHeadTemplate($.extend(this._resourceInfo[index].dataSource[i], { classname: "e-childnode" })), userResTemplId: userResTemplId });
                        this.res1.push(this._resourceInfo[index].dataSource[i]);
                        this.level_Resources.push(this.res1[i]);
                    }
                    this._valueCollection = this.res1;
                    this.render_Resources.push(this.res1);
                    if (this.model.orientation == "vertical" && this.currentView() != "agenda" && tbody !== null && cols != null) {
                        var leftCellwidth = view == "month" ? 50 : 56;
                        var resourceHeaderHtml = this.resourceHeadTemplate.render({ cols: cols, resourceName: resources, leftWidth: leftCellwidth });
                        tbody.append(ej.buildTag('tr.e-headerbar').append(resourceHeaderHtml));
                    }
                }
                else {
                    var groupDatasource = [], firstValue = [], collection = [], resAppValueCount = 0, valueCount = [];
                    var res = []; var level = []; var variable = []; this.resourceValue = 0; var resourceLength = 0;
                    groupDatasource = $.merge(groupDatasource, newResCollection);
                    if (this._tempResource.length) {
                        var k = 0;
                        for (j = 0; j < newResCollection[newResCollection.length - 2].dataSource.length; j++) {
                            var query = new ej.Query().where(newResCollection[newResCollection.length - 1].groupId, ej.FilterOperators.equal, newResCollection[newResCollection.length - 2].dataSource[j][newResCollection[newResCollection.length - 2].id]);
                            var resApp = new ej.DataManager(newResCollection[newResCollection.length - 1].dataSource).executeLocal(query);
                            var m = 0;
                            while (m < resApp.length) {
                                firstValue.push({ resourceNam: resApp[m][newResCollection[newResCollection.length - 1].text], colspan: 1 * viewColCount, userResHeader: this._getResourceHeadTemplate($.extend(resApp[m], { classname: "e-childnode" })), userResTemplId: userResTemplId });
                                collection[k] = resApp[m];
                                this.res1.push(resApp[m]);
                                k++;
                                m++;
                            }
                        }
                        this._valueCollection = collection;
                        newResCollection[newResCollection.length - 1].dataSource = collection;
                        var resClone = $.extend(true, [], newResCollection);
                    }
                    for (var i = this._tempResource.length - 1; i >= 0 ; i--) {
                        level.push(i);
                        for (var j = 0; j < newResCollection[i].dataSource.length; j++) {
                            var valuefirst = i != 0 ? this._findResourceIndex(newResCollection[i - 1].dataSource, newResCollection[i - 1].id, newResCollection[i].dataSource[j][newResCollection[i].groupId]) : 0;
                            var valuelast = i != this._tempResource.length - 1 ? this._findResourceIndex(newResCollection[i + 1].dataSource, newResCollection[i + 1].groupId, newResCollection[i].dataSource[j][newResCollection[i].id]) : this._tempResource.length - 1;
                            (ej.isNullOrUndefined(valuefirst) && ej.isNullOrUndefined(valuelast)) ? newResCollection[i].dataSource[j] = 0 : "";
                            if (!ej.isNullOrUndefined(valuefirst) && !ej.isNullOrUndefined(valuelast) && newResCollection[i].dataSource[j] !== 0) {
                                res.push(newResCollection[i].dataSource[j]);
                                this.resourceValue = res.length;
                                if (i <= this._tempResource.length - 2) {
                                    query = new ej.Query().where(newResCollection[i + 1].groupId, ej.FilterOperators.equal, newResCollection[i].dataSource[j][newResCollection[i].id]);
                                    var resApp = new ej.DataManager(newResCollection[i + 1].dataSource).executeLocal(query);
                                    if (i <= this._tempResource.length - 3) {
                                        for (k = 0; k < resApp.length; k++)
                                            resAppValueCount = resAppValueCount + (!ej.isNullOrUndefined(resApp[k].count) ? resApp[k].count : 0);

                                        resourceLength = this.model.orientation == "vertical" ? resAppValueCount : resAppValueCount + resApp.length;
                                        newResCollection[i].dataSource[j].count = resourceLength;
                                        resAppValueCount = 0;
                                    }
                                    if (i == this._tempResource.length - 2) {
                                        newResCollection[i].dataSource[j].count = resApp.length;
                                        resourceLength = resApp.length;
                                    }
                                    this.resourceValue = resourceLength;
                                    resApp.length = 0;
                                }
                                if (this._resWorkWeek) {
                                    var weekCount = 0;
                                    if (i != this._tempResource.length - 1) {
                                        var query = new ej.Query().where(resClone[i + 1].groupId, ej.FilterOperators.equal, resClone[i].dataSource[j][resClone[i].id]);
                                        var colCount = new ej.DataManager(resClone[i + 1].dataSource).executeLocal(query);
                                        for (var a = 0; a < colCount.length; a++) {
                                            weekCount += !ej.isNullOrUndefined(colCount[a][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]]) ? colCount[a][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]].length : !ej.isNullOrUndefined(colCount[a].colspan) ? colCount[a].colspan : viewColCount;
                                        }
                                    }
                                    else {
                                        weekCount += !ej.isNullOrUndefined(resClone[i].dataSource[j][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]]) ? resClone[i].dataSource[j][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]].length : viewColCount;
                                    }
                                    resClone[i].dataSource[j]["colspan"] = weekCount;
                                    this.resourceValue = weekCount;
                                }
                                (this.currentView() != "agenda") && resources.push({ resourceNam: newResCollection[i].dataSource[j][newResCollection[i].text], colspan: (this._resWorkWeek) ? this.resourceValue : this.resourceValue * viewColCount, userResHeader: this._getResourceHeadTemplate($.extend(newResCollection[i].dataSource[j], { classname: (this._tempResource.length - 1 == i) ? "e-childnode" : "e-parentnode" })), userResTemplId: userResTemplId });
                                this.level_Resources.push(newResCollection[i].dataSource[j]);
                                res.length = 0;

                            }
                            if (this.model.orientation == "vertical" && this.currentView() != "agenda" && tbody !== null && cols != null) {
                                leftCellwidth = view == "month" ? 50 : 56;
                                resourceHeaderHtml = this.resourceHeadTemplate.render({ cols: cols, resourceName: resources, leftWidth: leftCellwidth });
                                variable[i] = ej.buildTag('tr.e-headerbar').append(resourceHeaderHtml)[0];
                            }
                        }
                        valueCount[i] = newResCollection[i].dataSource;
                        resources.length = 0;
                    }
                    this.render_Resources = valueCount;
                    this.model.orientation == "vertical" && this.currentView() != "agenda" ? tbody.append(variable) : "";
                }
            }
            else {
                for (var k = 0; k < this._tempResource.length; k++) {
                    this.render_Resources.push(this._tempResource[k].resourceSettings.dataSource);
                }
                this.res1 = [0];
            }
            return tbody;
        },

        _getMultipleResourceAlldayApp: function (renderDate, day, res, i) {
            this.allDayCount = [];
            if ((new Date(new Date(renderDate[day]).setHours(0, 0, 0, 0)).getTime() == new Date(new Date(this._processed[i][this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime()) && (this._processed[i][this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 1].trim()] == this.res1[res][this._tempResource[this._tempResource.length - 1].resourceSettings.id]) &&
				(this._processed[i][this._appointmentSettings["allDay"]] === true || (((new Date(this._processed[i][this._appointmentSettings["endTime"]]) - new Date(this._processed[i][this._appointmentSettings["startTime"]])) / 3600000) >= 24))) {
                this._setAllDayPos(this._processed[i], day, res);
                this._filtered.push(this._processed[i]);
                this.allDayCount.push(i);
            }
        },

        _getResourceColor: function (record) {
            var newResCollection = this._resCollection;
            var resourceDataIndex, appointData = "", appointCustomcss = "";
            if (!ej.isNullOrUndefined(this.model.group)) {
                for (var a = 0; a < this.render_Resources.length; a++) {
                    resourceDataIndex = this._findResourceIndex(this.render_Resources[a], newResCollection[a].id, record[this._appointmentSettings.resourceFields.split(',')[a].trim()]);
                    if (!ej.isNullOrUndefined(resourceDataIndex)) {
                        appointData = (appointData == "" || ej.isNullOrUndefined(appointData)) ? this.render_Resources[a][resourceDataIndex][newResCollection[a].color] : appointData;
                        appointCustomcss = (appointCustomcss == "" || ej.isNullOrUndefined(appointCustomcss)) ? this.render_Resources[a][resourceDataIndex][newResCollection[a].appointmentClass] : appointCustomcss;
                        if (!ej.isNullOrUndefined(appointData) && !ej.isNullOrUndefined(appointCustomcss)) break;
                    }
                }
                appointData = !ej.isNullOrUndefined(appointData) && appointData != "" ? appointData : "";
                appointCustomcss = !ej.isNullOrUndefined(appointCustomcss) && appointCustomcss != "" ? appointCustomcss : "";
            }
            else {
                resourceDataIndex = this._findResourceIndex(this.render_Resources[this.render_Resources.length - 1], newResCollection[newResCollection.length - 1].id, record[this._appointmentSettings.resourceFields.split(',')[this._appointmentSettings.resourceFields.split(',').length - 1].trim()]);
                if (!ej.isNullOrUndefined(resourceDataIndex)) {
                    appointData = !ej.isNullOrUndefined(this.render_Resources[this.render_Resources.length - 1][resourceDataIndex][newResCollection[newResCollection.length - 1].color]) ? this.render_Resources[this.render_Resources.length - 1][resourceDataIndex][newResCollection[newResCollection.length - 1].color] : appointData;
                    appointCustomcss = !ej.isNullOrUndefined(this.render_Resources[this.render_Resources.length - 1][resourceDataIndex][newResCollection[newResCollection.length - 1].appointmentClass]) ? this.render_Resources[this.render_Resources.length - 1][resourceDataIndex][newResCollection[newResCollection.length - 1].appointmentClass] : appointCustomcss;
                }
            }
            return { appointData: appointData, appointCustomcss: appointCustomcss };
        },

        _getResourceValue: function (target, index) {
            var resDetails;
            if (ej.scheduleFeatures.resources && (this._tempResource.length != 0)) {
                var resource = this._getResourceDetails(target);
                resDetails = ej.DataManager(this._resCollection[resource.length - 1].dataSource).executeLocal(new ej.Query().where(this._tempResource[resource.length - 1].resourceSettings["id"], "equal", resource[0].id))[0];
            }
            return resDetails;
        },

        _getResourceDetails: function (target, index) {
            if ((this._tempResource.length != 0)) {
                if (this._tempResource.length > 0) {
                    var noOfDays = this.currentView() == "day" ? 1 : this.currentView() == "week" || this.currentView() == "month" ? 7 : this.model.workWeek.length;
                    noOfDays = (this.currentView() == "customview" && this._dateRender.length >= 7) ? 7 : (this.currentView() == "customview" && this._dateRender.length < 7) ? this._dateRender.length : noOfDays;
                    index = this.currentView() === "month" || this.currentView() == "customview" ? target.index() : (!ej.isNullOrUndefined(this._cellIndex) && ej.isNullOrUndefined(this._multiple)) ? this._cellIndex : target.index();
                    !target.hasClass("e-detailedapp") ? this.index = index : "";
                    index = target.hasClass("e-detailedapp") ? this.index : index;
                    if (this._resWorkWeek) {
                        var resIndex = 0;
                        for (var a = 0; a < this._valueCollection.length; a++) {
                            if (!ej.isNullOrUndefined(this._valueCollection[a][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]]))
                                resIndex += this._valueCollection[a][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]].length;
                            else
                                resIndex += this.model.workWeek.length;

                            if (resIndex > target.index()) {
                                index = a;
                                break;
                            }
                        }
                    }
                    else
                        index = this.model.orientation == "vertical" ? parseInt(index / noOfDays) : !ej.isNullOrUndefined(this._workCellIndex) ? this._workCellIndex : target.parent().index();
                    var res1 = this.model.orientation == "vertical" ? this._valueCollection : this._resCollect;
                    var group, resourceData, query, result; this._resourceCollection = [];
                    var newResCollection = this._resCollection;
                    for (var i = newResCollection.length - 1; i >= 0; i--) {
                        if (i == newResCollection.length - 1) {
                            if (!ej.isNullOrUndefined(this.model.group)) {
                                this._resourceCollection.push({ id: res1[index][newResCollection[i].id] });
                                group = res1[index][newResCollection[i].groupId];
                            }
                            else {
                                this._resourceCollection.push({ id: newResCollection[newResCollection.length - 1].dataSource[index][newResCollection[newResCollection.length - 1].id] });
                                group = newResCollection[newResCollection.length - 1].dataSource[index][newResCollection[newResCollection.length - 1].groupId];
                            }
                        }
                        else {
                            resourceData = newResCollection[i].dataSource instanceof ej.DataManager ? newResCollection[i].dataSource : ej.DataManager(newResCollection[i].dataSource);
                            query = new ej.Query().where(newResCollection[i].id, ej.FilterOperators.equal, group);
                            result = resourceData.executeLocal(query);
                            this._resourceCollection.push({ id: result[0][newResCollection[i].id] });
                            group = result[0][newResCollection[i].groupId];
                        }
                    }
                    return this._resourceCollection;
                }
            }
        },

        _getResourceFields: function (obj) {
            if (!ej.isNullOrUndefined(this.model.group) || this._tempResource.length > 1) {
                for (var j = 0, i = this._resourceCollection.length - 1; j < this._resourceCollection.length; j++, i--)
                    obj[this._appointmentSettings.resourceFields.split(',')[j].trim()] = this._resourceCollection[i].id;
            }
            else
                obj[this._appointmentSettings.resourceFields.split(',')[0].trim()] = this._resourceCollection[0].id;
            return obj;
        },
        _getDragDropResourceData: function (proxy, cellIndex, newAddList) {
            if (!ej.isNullOrUndefined(cellIndex)) {
                var noOfCols = proxy.currentView() == "day" ? 1 : proxy.currentView() == "week" || proxy.currentView() == "month" ? 7 : proxy.model.workWeek.length;
                noOfCols = (proxy.currentView() == "customview" && proxy._dateRender.length >= 7) ? 7 : (proxy.currentView() == "customview" && proxy._dateRender.length < 7) ? proxy._dateRender.length : noOfCols;
                var index = proxy.model.enableRTL ? proxy.res1.length - Math.floor(cellIndex / noOfCols) - 1 : Math.floor(cellIndex / noOfCols);
                if (proxy._resWorkWeek) {
                    var resIndex = 0;
                    for (var a = 0; a < proxy.res1.length; a++) {
                        if (!ej.isNullOrUndefined(proxy.res1[a][proxy.model.resources[proxy.model.resources.length - 1].resourceSettings["workWeek"]]))
                            resIndex += proxy.res1[a][proxy.model.resources[proxy.model.resources.length - 1].resourceSettings["workWeek"]].length;
                        else
                            resIndex += proxy.model.workWeek.length;

                        if (resIndex > cellIndex) {
                            index = a;
                            break;
                        }
                    }
                }
                var newRes = proxy.model.orientation == "vertical" ? proxy.res1[index] : proxy._resCollect[cellIndex];
                newAddList[proxy._appointmentSettings.resourceFields.split(',')[proxy._appointmentSettings.resourceFields.split(',').length - 1].trim()] = newRes[proxy.model.resources[proxy.model.resources.length - 1].resourceSettings.id];
                if (proxy._appointmentSettings.resourceFields.split(',').length > 1)
                    newAddList[proxy._appointmentSettings.resourceFields.split(',')[proxy._appointmentSettings.resourceFields.split(',').length - 2].trim()] = newRes[proxy.model.resources[proxy.model.resources.length - 1].resourceSettings.groupId];
            }
            return newAddList;
        },

        _renderResourceData: function (targetElement, index) {
            if ((targetElement.hasClass("e-workcells") || targetElement.hasClass("e-alldaycells") || targetElement.hasClass("e-monthcells")) && !targetElement.hasClass("e-resourceheadercells")) this._getResourceDetails(targetElement)
            var fieldCollection = [], collection = [];
            if (this._tempResource.length) {
                for (var k = this._resourceCollection.length - 1; k >= 0; k--) {
                    var resourceDataIndex = this._findResourceIndex(this._resCollection[k].dataSource, this._resCollection[k].id, this._resourceCollection[(this._resourceCollection.length - 1) - k].id);
                    fieldCollection.push(this._resCollection[k].dataSource[resourceDataIndex]);
                    if (k != 0) {
                        var query = new ej.Query().where(ej.Predicate(this._resCollection[k].groupId, ej.FilterOperators.equal, this._resCollection[k].dataSource[resourceDataIndex][this._resCollection[k].groupId]));
                        var resApp = new ej.DataManager(this._resCollection[k].dataSource).executeLocal(query);
                        index = this._findResourceIndex(resApp, this._resCollection[k].id, this._resourceCollection[(this._resourceCollection.length - 1) - k].id);
                        collection = resApp;
                        this._appointmentAddWindow.find('.owner_' + (k)).ejAutocomplete("clearText");
                        this._appointmentAddWindow.find('.owner_' + (k)).ejAutocomplete("option", "dataSource", collection);
                        this._appointmentAddWindow.find('.owner_' + (k)).data("ejAutocomplete").selectValueByKey(collection[index][this._resCollection[k].id]);
                    }
                    else {
                        this._appointmentAddWindow.find('.owner_' + (k)).ejAutocomplete("clearText");
                        this._appointmentAddWindow.find('.owner_' + (k)).data("ejAutocomplete").selectValueByKey(fieldCollection[(this._resourceCollection.length - 1) - k][this._resCollection[k].id]);
                    }
                }
            }
        },

        _bindResourcesData: function () {
            if ((this._tempResource.length != 0)) {
                this._resourceInfo = []; var resFlag = false;
                for (var i = 0; i < this._tempResource.length; i++) {
                    if (!ej.isNullOrUndefined(this._tempResource[i].resourceSettings)) {
                        if (ej.isNullOrUndefined(this._tempResource[i].resourceSettings.query) || !(this._tempResource[i].resourceSettings.query instanceof ej.Query))
                            this._tempResource[i].resourceSettings.query = ej.Query();
                        if (this._tempResource[i].resourceSettings.dataSource instanceof ej.DataManager)
                            this._initResourceData(this._tempResource[i].resourceSettings, i);
                        else {
                            this._resourceInfo.push(this._tempResource[i].resourceSettings);
                            resFlag = true;
                        }
                    }
                }
                if (resFlag)
                    this._renderInitSchedule();
            }
        },

        _renderResourceElements: function ($appWindow) {
            for (var i = 0; i < this._tempResource.length; i++) {
                $appWindow += "<tr><td class='e-leftfields e-textlabel'>" + this._tempResource[i].title + ":</td><td colspan='3' class='e-rightfields'><input id='" + this._id + "_ownerfield_" + i + "'  class='owner_" + i + "' type='text' value=''/><div id='ownerlist'></div></td></tr>";
            }
            return $appWindow;
        },

        _renderResourcesTemplate: function () {
            if (this.model.orientation == "vertical")
                this.resourceHeadTemplate = $.templates(this._createTemplate(resourceHeadTemplate(), "_ResourceHeader"));
        }
    };
})(jQuery, Syncfusion);;
/**
* @fileOverview Plugin to style the Html Schedule elements
* @copyright Copyright Syncfusion Inc. 2001 - 2016. All rights reserved.
*  Use of this code is subject to the terms of our license.
*  A copy of the current license can be obtained at any time by e-mailing
*  licensing@syncfusion.com. Any infringement will be prosecuted under
*  applicable laws. 
* @version 12.2
* @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
*/

(function ($, ej, undefined) {
    ej.scheduleFeatures = ej.scheduleFeatures || {};

    var monthCellsTemplate = function () {
        this._monthCellsTemplate = ("<table class='e-table e-workcellstab'  height='100%'width='100%' cellpadding='0px' cellspacing='0px'>" +
        "<tbody>{{for cellrows ~cols1=cols1 ~userTemp=userTemplate ~userHtml=userHtml}}" +
        "<tr>{{for ~cwidth=cwidth ~cheight=cheight ~cols1 ~value=#getIndex()}}" +
        "<td class='e-monthcells' width='{{:~cwidth}}' height='{{:~cheight}}'>" +
        "<div class='e-monthheader'></div>{{if ~userTemp == true}}{{:~userHtml[~value][#getIndex()]}}{{/if}}</td>{{/for}}" +
        "</tr>{{/for}}</tbody></table>");
        return this._monthCellsTemplate;
    };

    var appointmentTemplate = function () {
        this._appTemplate = ("<div class='{{:appClass}} {{:appointCustomcss}}' id='Appointment_{{:id}}' guid= '{{:uid}}' resource='{{:resId}}' role='presentation' style='{{if rtl == true}}right{{else}}left{{/if}}: {{:left}}; width: {{:appWidth}}; background: {{:appointData}};  color:{{:appointtextcolor}}; height: {{:appHeight}}px; top: {{:top}}px;' >" +
       "{{if appResize == true}}{{if appClass == 'e-appointment'}}" +
       "{{if orientation == 'vertical'}}<div class='e-tophandle'></div><div class='e-bottomhandle'></div>{{else}}<div class='e-lefthandle'></div><div class='e-righthandle'></div>{{/if}}" +
       "{{else}}{{if currentview != 'day'}}<div class='e-lefthandle'></div><div class='e-righthandle'></div>{{/if}}{{/if}}{{/if}}" +
       "<span class='e-icon e-schedulemouseclose'/></span>" +
	   "{{if (priority!=undefined && priority!='') && ((priorityTemplate!=undefined && priorityTemplate!=''))}}{{if enablePriority==null}}<div class='e-priority e-{{:priorityTemplate}}'></div>{{else}}<div class='e-priority'>{{:priorityTemplate}}</div>{{/if}}{{/if}}" +
	   "{{if userAppTemplId == false}}" +
       "{{if leftInd ==true}}<span class='e-icon e-arrow-sans-left e-leftind'></span>{{/if}}{{if rightInd ==true}}<span class='e-icon e-arrow-sans-right e-rightind'></span>{{/if}}" +
       "{{if bottomInd ==true}}<span class='e-icon e-arrow-sans-down e-bottomind'></span>{{/if}}{{if topInd ==true}}<span class='e-icon e-arrow-sans-up e-topind'></span>{{/if}}" +
       "<div class='e-appointinnertext'><div class='e-apptext {{if (priority!=undefined && priority!='')}}e-priorwidth{{/if}}'>{{if recurrence == true}}{{if recurrenceEdit == true}}<span class='e-icon e-recureditapp'></span>{{else}}<span class='e-icon e-recurapp'></span>{{/if}}{{/if}}{{:subject}} </div><div class='e-apptime {{if (priority!=undefined && priority!='')}}e-priorwidth{{/if}}'> {{:startTime}} - {{:endTime}}</div>{{if value == true}}<div class='e-multipleCategory'>{{:multiDiv}}</div>{{/if}}</div>" +
       "{{else}}{{if recurrence == true}}{{if recurrenceEdit == true}}<span class='e-icon e-recureditapp'></span>{{else}}<span class='e-icon e-recurapp'></span>{{/if}}{{/if}}{{:userTemplate}}{{/if}}</div>");
        return this._appTemplate;
    };

    var blockTimeTemplate = function () {
        this._blockTimeTemplate = ("<div class='e-blocktimewrapper'><div class='e-blocktimeappointment {{:blockClass}} {{:customStyle}}' id='BlockTime_{{:id}}' role='presentation' style='width: {{:appWidth}}; height: {{:appHeight}}px; left: {{:left}}px; top: {{:top}}px;'>" +
        "{{if userTempId == false}}{{:subject}}{{else}}{{:userTemplate}}{{/if}}</div></div>");
        return this._blockTimeTemplate;
    };

    var categorizeMultipleTemplate = function () {
        this._categorizeMultipleTemplate = ("{{for renderData }}<div style='background:{{:value}};height:11px;width:6px;float:left'></div>{{/for}}");
        return this._categorizeMultipleTemplate;
    };

    var headerTemplate = function () {
        this._headerTemplate = (
        "{{for cols ~view=view ~colspan=colspan}}" +
        "{{if cellToday == 'e-headerToday'}}<td class='e-headercells e-currentdayhighlight' colspan='{{:~colspan}}'>{{else}}<td class='e-headercells' colspan='{{:~colspan}}'>{{/if}}" +
        "<div class='e-dateheadercell'> <span class='e-headerdaydisplay'>{{:currentDay}}</span></div>" +
        "</td>" +
        "{{/for}}");
        return this._headerTemplate;
    };
    var leftHeaderTemplate = function () {
        this._leftIndent = ("<table class='e-table e-leftindenttable' width='{{:cswidth}}' cellpadding='0px' cellspacing='0px'>" +
        "<tbody> {{for trs ~tdClass=tdClass ~divClass=divClass}} <tr>{{for ~tdClass=tdClass ~divClass=divClass}} <td class='{{:~tdClass}}'style='height:27px;'> <div class='{{:~divClass}}'></div></td>{{/for}}</tr>" +
        "{{/for}}</tbody></table>");
        return this._leftIndent;
    };
    var alldayTemplate = function () {
        this._alldayTemplate = ("{{for cols ~colspan=colspan ~userTemp=userTemp ~allDayHtml=userHtml}}<td class='e-alldaycells' style='height:27px;' colspan='{{:~colspan}}'>{{if ~userTemp==true}}{{:~allDayHtml[#getIndex()]}}{{/if}}</td>{{/for}}");
        return this._alldayTemplate;
    };

    var workCellsTemplate = function () {
        this._workCellsTemplate = ("<table class='e-table e-workcellstab' width='100%' height='100%' cellpadding='0px' cellspacing='0px'>" +
        "<tbody >{{for cellrows  ~timesc=timeScale ~cols1=cols1 ~userTemp=userTemplate ~userHtml=userHtml}}" +
        "<tr>{{for ~index=#index ~cwidth=cwidth ~cheight=cheight ~cols1 ~value=#getIndex()}}" +
        "{{if ((~index+1) % ~timesc) == 0 }}<td class='e-workcells' width='{{:~cwidth}}' height='{{:~cheight}}'>{{else}}<td class='e-workcells e-alternatecells'width='{{:~cwidth}}' height='{{:~cheight}}'>{{/if}}{{if ~userTemp == true}}{{:~userHtml[~value][#getIndex()]}}{{/if}}</td>" +
        "{{/for}}</tr>{{/for}}</tbody></table>");
        return this._workCellsTemplate;
    };

    var timeCellsTemplate = function () {
        this._timeCellsTemplate = ("<div class='e-scrolltimecells' style='width:auto;height:100%;'><table class='e-table e-timecelltable' width='100%' height='100%' cellpadding='0px' cellspacing='0px'>" +
        "<tbody>{{for timerows ~timesc=timeScale ~cols1=cols1 ~view1=viewclass ~userTemplateId = userTemplateId ~timeValue1=timeValue1 ~template=template}}" +
        "<tr>{{for ~name=time ~id=id ~view=~view1 ~index=#index }}" +
        "{{if ~view == 0}}{{if ~userTemplateId==true}}<td class='e-timecells'>{{for ~cols1[~index] }}{{if (#index+1)% ~timesc ==0}}<div class='e-timecelldivs' style='height: 20px'>{{:~timeValue1[~index][#getIndex()]}}</div>{{else}}<div class='e-timecelldivs' style='height: 21px'>{{:~timeValue1[~index][#getIndex()]}}</div>{{/if}}{{/for}}</td>" +
        "{{else}}<td class='e-timecells'><div class='e-timecelldivs'>{{if ~template==true}}{{:~name}}{{else}}{{:~name.slice(0,2)}}{{/if}}</div></td>{{/if}}" +
        "<td class='e-timecells' rowspan='1'>{{for ~cols1[~index] }}{{if (#index+1)% ~timesc ==0}}<div class='e-ampmdisplay'></div>  {{else}} {{if (#getIndex())== 0}}<div id='{{:~id}}' class='e-ampmdisplay e-ampmstyle e-idAmpmstyle'> {{if ~template ==true || ~userTemplateId==true }}{{else}}{{:~name.slice(3,6)}}{{/if}}</div>{{else}}<div class='e-ampmdisplay e-ampmstyle'></div>{{/if}} {{/if}}{{/for}}</td>{{else}}<td class='e-timecells' style='width:51px;'><div class='e-timecelldivs'></div></td>{{/if}}{{/for}}</tr>{{/for}}</tbody></table></div>");
        return this._timeCellsTemplate;
    };

    var userTimeCellsTemplate = function () {
        this._userTimeCellsTemplate = ("<div class='e-scrolltimecells'><table class='e-table' cellpadding='0px' cellspacing='0px' width='70px'>" +
           "<tbody>{{for timerows ~timesc=timeScale ~cols1=cols1 ~view1=viewclass  ~userTemplateId = userTemplateId ~timeValue1=timeValue1 ~template=template ~cheight = cheight}}" +
           "<tr height='21px'>{{if ~timesc == 1}}<th class='e-timecells' rowspan='1'>{{else}}<th class='' rowspan='1'>{{/if}}{{:~timeValue1[#getIndex()][0]}}</th></tr>" +
           "{{for ~cols1 ~name=time ~id=id ~view=~view1 ~index=#index ~timeSc=~timesc}}" +
           "{{if  (#getIndex()+2)% ~timeSc ==0}}<tr height='21px'><th class='e-timecells' style='text-align:left' rowspan='1'>{{:~timeValue1[~index][#getIndex()+1]}}</th></tr> " +
           "{{else}}<tr height='21px'>{{if ~timesc == 1}}<th class='e-timecells' rowspan='1'>{{else}}<th class='' rowspan='1'>{{/if}}{{:~timeValue1[~index][#getIndex()+1]}}</th></tr>{{/if}}{{/for}}{{/for}}</tbody></table></div>");
        return this._userTimeCellsTemplate;
    };
    var agendaHeaderTemplate = function () {
        this._agendaHeaderTemplate = ("<tr>{{for cols}}<td class='e-headercells {{:className}} {{if (#index==0)}}e-firstcolumn{{/if}}'><div class='e-textwrapper'><b>{{:headertext}}</b></div></td>{{/for}}</tr>");
        return this._agendaHeaderTemplate;
    };

    var agendaCellsTemplate = function () {
        this._agendaCellsTemplate = ("<table class='e-table e-agendacellstab' width='100%' cellpadding='0px' cellspacing='0px'>" +
        "<tbody >{{for cols}}" +
        "<tr>" +
        "{{if resGroup}}{{for resGroup}}<td class='e-agendacells {{:resId}} e-resourcecolumn {{if (#index==0)}}e-firstcolumn{{/if}}'><div class='e-textwrapper'>{{:text}}</div></td>{{/for}}{{/if}}" +
        "{{if resChild}}<td rowspan={{:resRowSpan}} class='e-agendacells e-resourcecolumn {{if (resGroup.length==0)}}e-firstcolumn{{/if}}'><div class='e-textwrapper'>{{if userResourceId == false}}{{:resName}}{{else}}{{:userResourceHtml}}{{/if}}</div></td>{{/if}}" +
        "{{if dayChild}}<td rowspan={{:dayRowSpan}} class='e-agendacells e-datecolumn {{if (resGroup.length != 0) }}{{else (resName =='')}}e-firstcolumn{{/if}}'><div class='e-textwrapper'>{{if userDateId == false}}{{:date}}{{else}}{{:userDateHtml}}{{/if}}</div></td>{{/if}}" +
        "<td class='e-agendacells e-timecolumn {{if dayBorderBottom==false}}e-alternatecells{{/if}}'><div class='e-textwrapper'>{{if userTimeId == false}}{{:time}}{{else}}{{:userTimeHtml}}{{/if}}</div></td>" +
        "<td class='e-agendacells e-eventcolumn {{if dayBorderBottom==false}}e-alternatecells{{/if}}'><div class='e-textwrapper'><div id='Appointment_{{:id}}'  guid= '{{:uid}}' class='e-agendaappointment'>{{if userAppTemplId == false}}<span class='e-agendacolordiv' style='background:{{:background}};'/>{{:event}}{{else}}{{:userTemplate}}{{/if}}{{if readOnly == false}}<div class='e-agendahover'><span class='e-icon e-edit_05 e-editapp' title={{:edittext}}/><span class='e-icon e-close e-deleteapp' title={{:deletetext}}/></div>{{/if}}</div></div></td>" +
        "</tr>" +
        "{{/for}}</tbody></table>");
        return this._agendaCellsTemplate;
    };

    ej.widget("ejSchedule", "ej.Schedule", {
        _rootCSS: "e-schedule",
        element: null,
        validTags: ["div"],
        model: null,
        _requiresID: true,
        defaults: {
            timeZoneCollection: {
                dataSource: [
                { text: "UTC -12:00", id: "1", value: "UTC -12:00" },
                { text: "UTC -11:00", id: "2", value: "UTC -11:00" },
                { text: "UTC -10:00", id: "3", value: "UTC -10:00" },
                { text: "UTC -09:00", id: "4", value: "UTC -09:00" },
                { text: "UTC -08:00", id: "5", value: "UTC -08:00" },
                { text: "UTC -07:00", id: "6", value: "UTC -07:00" },
                { text: "UTC -06:00", id: "7", value: "UTC -06:00" },
                { text: "UTC -05:00", id: "8", value: "UTC -05:00" },
                { text: "UTC -04:30", id: "9", value: "UTC -04:30" },
                { text: "UTC -04:00", id: "10", value: "UTC -04:00" },
                { text: "UTC -03:30", id: "11", value: "UTC -03:30" },
                { text: "UTC -03:00", id: "12", value: "UTC -03:00" },
                { text: "UTC -02:00", id: "13", value: "UTC -02:00" },
                { text: "UTC -01:00", id: "14", value: "UTC -01:00" },
                { text: "UTC +00:00", id: "15", value: "UTC +00:00" },
                { text: "UTC +01:00", id: "16", value: "UTC +01:00" },
                { text: "UTC +02:00", id: "17", value: "UTC +02:00" },
                { text: "UTC +03:00", id: "18", value: "UTC +03:00" },
                { text: "UTC +03:30", id: "19", value: "UTC +03:30" },
                { text: "UTC +04:00", id: "20", value: "UTC +04:00" },
                { text: "UTC +04:30", id: "21", value: "UTC +04:30" },
                { text: "UTC +05:00", id: "22", value: "UTC +05:00" },
                { text: "UTC +05:30", id: "23", value: "UTC +05:30" },
                { text: "UTC +05:45", id: "24", value: "UTC +05:45" },
                { text: "UTC +06:00", id: "25", value: "UTC +06:00" },
                { text: "UTC +06:30", id: "26", value: "UTC +06:30" },
                { text: "UTC +07:00", id: "27", value: "UTC +07:00" },
                { text: "UTC +08:00", id: "28", value: "UTC +08:00" },
                { text: "UTC +09:00", id: "29", value: "UTC +09:00" },
                { text: "UTC +09:30", id: "30", value: "UTC +09:30" },
                { text: "UTC +10:00", id: "31", value: "UTC +10:00" },
                { text: "UTC +11:00", id: "32", value: "UTC +11:00" },
                { text: "UTC +12:00", id: "33", value: "UTC +12:00" },
                { text: "UTC +13:00", id: "34", value: "UTC +13:00" }
                ],
                text: "text",
                id: "id",
                value: "value"
            },
            views: ["Day", "Week", "WorkWeek", "Month", "Agenda"],
            agendaViewSettings: {
                daysInAgenda: 7,
                dateColumnTemplateId: null,
                timeColumnTemplateId: null
            },
            currentView: "week",
            timeMode: null,
            firstDayOfWeek: null,
            workWeek: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"],
            dateFormat: "",
            isDST: false,
            timeZone: null,
            timeScale: {
                enable: true,
                minorSlotCount: 2,
                majorSlot: 60,
                minorSlotTemplateId: null,
                majorSlotTemplateId: null
            },
            startHour: 0,
            endHour: 24,
            highlightBusinessHours: true,
            enableLoadOnDemand: false,
            enablePersistence: false,
            showQuickWindow: true,
            showLocationField: false,
            showTimeZoneFields: true,
            businessStartHour: 9,
            businessEndHour: 18,
            workHours: {
                highlight: true,
                start: 9,
                end: 18
            },
            width: "100%",
            height: "1120px",
            cellHeight: "20px",
            cellWidth: "",
            currentDate: new Date(),
            minDate: new Date(1900, 01, 01),
            maxDate: new Date(2099, 12, 31),
            cssClass: "",
            locale: "en-US",
            enableResize: false,
            readOnly: false,
            enableRTL: false,
            enableAppointmentNavigation: null,
            showAppointmentNavigator: true,
            appointmentTemplateId: null,
            allDayCellsTemplateId: null,
            dateHeaderTemplateId: null,
            workCellsTemplateId: null,
            resourceHeaderTemplateId: null,
            allowDragDrop: null,
            allowDragAndDrop: true,
            enableAppointmentResize: true,
            showCurrentTimeIndicator: true,
            showAllDayRow: true,
            showHeaderBar: true,
            isResponsive: true,
            enableRecurrenceValidation: true,
            appointmentDragArea: "",
            showOverflowButton: true,
            reminderSettings: {
                enable: false,
                alertBefore: 5
            },
            contextMenuSettings: {
                enable: false,
                menuItems: {
                    appointment: [
                        { id: "open", text: "Open Appointment" },
                        { id: "delete", text: "Delete Appointment" }
                    ],
                    cells: [
                        { id: "new", text: "New Appointment" },
                        { id: "recurrence", text: "New Recurring Appointment" },
                        { id: "today", text: "Today" },
                        { id: "gotodate", text: "Go to date" },
                        { id: "settings", text: "Settings" },
                        { id: "view", text: "View", parentId: "settings" },
                        { id: "timemode", text: "TimeMode", parentId: "settings" },
                        { id: "view_Day", text: "Day", parentId: "view" },
                        { id: "view_Week", text: "Week", parentId: "view" },
                        { id: "view_Workweek", text: "Workweek", parentId: "view" },
                        { id: "view_Month", text: "Month", parentId: "view" },
                        { id: "view_Agenda", text: "Agenda", parentId: "view" },
                        { id: "timemode_Hour12", text: "12 Hours", parentId: "timemode" },
                        { id: "timemode_Hour24", text: "24 Hours", parentId: "timemode" },
                        { id: "workhours", text: "Work Hours", parentId: "settings" }
                    ]
                }
            },
            group: null,
            resources: null,
            allowKeyboardNavigation: true,
            blockoutSettings: {
                enable: false,
                templateId: null,
                dataSource: [],
                query: null,
                tableName: null,
                id: "Id",
                subject: "Subject",
                startTime: "StartTime",
                endTime: "EndTime",
                isBlockAppointment: "IsBlockAppointment",
                isAllDay: null,
                customStyle: null,
                resourceId: null
            },
            appointmentSettings: {
                applyTimeOffset: true,
                dataSource: [],
                query: null,
                tableName: null,
                id: null,
                subject: null,
                description: null,
                startTime: null,
                endTime: null,
                recurrence: null,
                recurrenceRule: null,
                allDay: null,
                resourceFields: null,
                categorize: null,
                recurrenceId: null,
                recurrenceExDate: null,
                location: null,
                priority: null,
                startTimeZone: null,
                endTimeZone: null
            },
            renderDates: null,
            orientation: "vertical",
            categorizeSettings: {
                title: null,
                enable: false,
                allowMultiple: false,
                dataSource:
                   [
                   { text: "Blue Category", id: 1, color: "#43b496", fontColor: "#ffffff" },
                   { text: "Green Category", id: 2, color: "#7f993e", fontColor: "#ffffff" },
                   { text: "Orange Category", id: 3, color: "#cc8638", fontColor: "#ffffff" },
                   { text: "Purple Category", id: 4, color: "#ab54a0", fontColor: "#ffffff" },
                   { text: "Red Category", id: 5, color: "#dd654e", fontColor: "#ffffff" },
                   { text: "Yellow Category", id: 6, color: "#d0af2b", fontColor: "#ffffff" }
                   ],
                text: "text",
                id: "id",
                color: "color",
                fontColor: "fontColor"
            },
            prioritySettings: {
                title: null,
                enable: false,
                template: null,
                dataSource:
                [
                { text: "None", value: "none" },
                { text: "High", value: "high" },
                { text: "Medium", value: "medium" },
                { text: "Low", value: "low" }
                ],
                text: "text",
                value: "value"
            },
            showTimeScale: true,
            tooltipSettings: {
                enable: false,
                templateId: null
            },
            showDeleteConfirmationDialog: true,
            showNextPrevMonth: true,
            cellClick: null,
            cellHover: null,
            appointmentClick: null,
            appointmentHover: null,
            cellDoubleClick: null,
            appointmentWindowOpen: null,
            appointmentSaved: null,
            appointmentEdited: null,
            appointmentDeleted: null,
            beforeAppointmentCreate: null,
            beforeAppointmentChange: null,
            beforeAppointmentRemove: null,
            appointmentCreated: null,
            appointmentChanged: null,
            appointmentRemoved: null,
            keyDown: null,
            navigation: null,
            dragStart: null,
            drag: null,
            dragStop: null,
            resizeStart: null,
            resize: null,
            resizeStop: null,
            menuItemClick: null,
            beforeContextMenuOpen: null,
            reminder: null,
            actionBegin: null,
            actionComplete: null,
            overflowButtonClick: null,
            overflowButtonHover: null,
            create: null,
            load: null,
            destroy: null,
            queryCellInfo: null
        },
        dataTypes: {
            views: "array",
            workWeek: "array",
            timeZoneCollection: {
                dataSource: "data",
                query: "data"
            },
            renderDates: "data",
            enablePersistence: "boolean",
            showTimeScale: "boolean",
            resources: "array",
            group: {
                resources: "array"
            },
            appointmentSettings: {
                dataSource: "data",
                query: "data",
                subject: "parent",
                description: "parent",
                startTime: "parent",
                endTime: "parent",
                recurrence: "parent",
                recurrenceRule: "parent",
                allDay: "parent",
                resourceFields: "parent",
                categorize: "parent",
                location: "parent",
                priority: "parent",
                startTimeZone: "parent",
                endTimeZone: "parent"
            },
            categorizeSettings: {
                dataSource: "data",
                query: "data"
            },
            prioritySettings: {
                dataSource: "data",
                query: "data"
            },
            contextMenuSettings: {
                menuItems: {
                    appointment: "array",
                    cells: "array",
                }
            },
            blockoutSettings: {
                dataSource: "data",
                query: "data"
            }
        },
        _ignoreOnPersist: [
            "appointmentSettings.query", "appointmentSettings.dataSource", "timeZoneCollection.dataSource",
            "allowKeyboardNavigation", "showQuickWindow", "cssClass", "locale", "enableResize", "showHeaderBar",
            "readOnly", "enableRTL", "enableAppointmentNavigation", "showAppointmentNavigator", "appointmentTemplateId", "resourceHeaderTemplateId", "allowDragDrop", "allowDragAndDrop", "enableAppointmentResize",
            "showCurrentTimeIndicator", "reminderSettings.enable", "contextMenuSettings.enable", "group", "categorizeSettings.enable", "categorizeSettings.dataSource",
            "cellClick", "overflowButtonClick ", "overflowButtonHover", "keyDown", "appointmentClick", "cellDoubleClick", "appointmentWindowOpen", "appointmentSaved", "appointmentEdited", "appointmentDeleted", "beforeAppointmentCreate", "beforeAppointmentChange", "beforeAppointmentRemove", "appointmentCreated", "appiontmentChanged", "appointmentRemoved", "navigation", "dragStart", "dragStop",
            "resizeStart", "resize", "resizeStop", "menuItemClick", "beforeContextMenuOpen", "reminder", "prioritySettings.dataSource", "prioritySettings.enable", "agendaViewSettings.daysInAgenda", "agendaViewSettings.dateColumnTemplateId", "agendaViewSettings.timeColumnTemplateId", "blockoutSettings.dataSource"
        ],
        _ignoreFromAppointmentOnExport: ["dataSource", "query", "tableName", "resourceFields"],
        _ignoreFromModelOnExport: ["timezoneCollection", "timeZoneCollection", "contextMenuSettings", "prioritySettings"],
        _resources: function (index, property, value, old) {
            this.element.empty();
            this._bindResourcesData();
            if (!ej.isNullOrUndefined(this.dataSource()))
                this._renderAppointmentAll();
        },
        observables: ["appointmentSettings.dataSource", "currentView", "currentDate"],
        _tags: [
            { tag: "timeZoneCollection", attr: [], "singular": "timeZoneCollection" },
            { tag: "appointmentSettings.dataSource", attr: [], "singular": "dataSource" },
            { tag: "resources", attr: ["allowMultiple", "field", "title", "name", "resourceSettings"] },
            { tag: "contextMenuSettings.menuItems.appointment", attr: ["id", "text", "parentId"] },
            { tag: "contextMenuSettings.menuItems.cells", attr: ["id", "text", "parentId"] },
            { tag: "categorizeSettings.dataSource", attr: ["text", "id", "color", "fontColor"] },
            { tag: "timeZoneCollection.dataSource", attr: ["text", "id", "value"] },
			{ tag: "prioritySettings.dataSource", attr: ["text", "value"] }
        ],
        currentView: ej.util.valueFunction("currentView"),
        currentDate: ej.util.valueFunction("currentDate"),
        dataSource: ej.util.valueFunction("appointmentSettings.dataSource"),

        _init: function () {
            if ($.isEmptyObject(this.model.group)) this.model.group = null;
            this._localizedLabels = ej.getLocalizedConstants("ej.Schedule", this.model.locale);
            if (this.model.locale != "en-US")
                this._recurrenceLocal();
            if (ej.isNullOrUndefined(this.model.workHours.start)) this.model.workHours.start = this.model.businessStartHour;
            if (ej.isNullOrUndefined(this.model.workHours.end)) this.model.workHours.end = this.model.businessEndHour;
            if (ej.isNullOrUndefined(this.model.workHours.highlight)) this.model.workHours.highlight = this.model.highlightBusinessHours;
            if (ej.isNullOrUndefined(this.model.timeZoneCollection)) this.model.timeZoneCollection = this.model.timezoneCollection;
            if (ej.isNullOrUndefined(this.model.timeScale.enable)) this.model.timeScale.enable = this.model.showTimeScale;
            //Added the deprecating the enableAppointmentNavigation API
            this.model.showAppointmentNavigator = ej.isNullOrUndefined(this.model.enableAppointmentNavigation) ? this.model.showAppointmentNavigator : this.model.enableAppointmentNavigation;
            this.model.allowDragAndDrop = ej.isNullOrUndefined(this.model.allowDragDrop) ? this.model.allowDragAndDrop : this.model.allowDragDrop;
            //Added the deprecating the appointmentEvents API
            if (ej.isNullOrUndefined(this.model.beforeAppointmentCreate)) this.model.beforeAppointmentCreate = this.model.appointmentSaved;
            if (ej.isNullOrUndefined(this.model.beforeAppointmentChange)) this.model.beforeAppointmentChange = this.model.appointmentEdited;
            if (ej.isNullOrUndefined(this.model.beforeAppointmentRemove)) this.model.beforeAppointmentRemove = this.model.appointmentDeleted;
            this._processAppointmentSettings();
            this._currentDateFormat(this.model.dateFormat);
            this._trigger("load");
            this.element.addClass("e-schedule");
            if (ej.isNullOrUndefined(this.model.appointmentSettings.query) || !(this.model.appointmentSettings.query instanceof ej.Query))
                this.model.appointmentSettings.query = ej.Query();
            (this.model.cssClass != null) && this.element.addClass(this.model.cssClass);
            this._initPrivateProperties();
            if (ej.scheduleFeatures.resources && !ej.isNullOrUndefined(this.model.resources)) this._resourceSegregate();
            if (!ej.isNullOrUndefined(this.model.categorizeSettings) && (this.model.categorizeSettings.dataSource instanceof ej.DataManager))
                this._bindCategorizeData();
            if (!ej.isNullOrUndefined(this.model.prioritySettings) && (this.model.prioritySettings.dataSource instanceof ej.DataManager))
                this._bindPriorityData();
            if (ej.scheduleFeatures.resources && this._tempResource.length != 0)
                this._bindResourcesData();
            else
                this._renderInitSchedule();
            this._wireEvents();
            !ej.isNullOrUndefined(this.model.appointmentSettings) && (this._dataManager = this.dataSource() instanceof ej.DataManager ? this.dataSource() : this.dataSource() != null ? ej.DataManager(this.dataSource()) : null);
            this._bindAppointmentsData("Load");
            if (!ej.isNullOrUndefined(this.model.blockoutSettings) && (this.model.blockoutSettings.dataSource instanceof ej.DataManager))
                this._bindBlockData();
            else
                this._renderBlockAppointments();
            this.model.enableRTL && this.element.addClass("e-rtl");
            if (this.model.reminderSettings.enable) {
                this._checkReminders();
                this._reminderInterval = window.setInterval($.proxy(this._checkReminders, this), 60000);
            }
        },
        _processAppointmentSettings: function () {
            this._appointmentSettings = {}, resource = "";
            this._applyTimeOffset = this.model.appointmentSettings.applyTimeOffset;
            for (var col in this.model.appointmentSettings) {
                if (col != "applyTimeOffset") {
                    if (col !== "tableName" && col !== "query" && col !== "dataSource") {
                        this._appointmentSettings[col] = ($.type(this.model.appointmentSettings[col]) == "string" || ej.isNullOrUndefined(this.model.appointmentSettings[col])) ? this.model.appointmentSettings[col] : this.model.appointmentSettings[col].field;
                        if (col !== "resourceFields" && col !== "categorize" && col !== "priority")
                            (ej.isNullOrUndefined(this._appointmentSettings[col])) && (this._appointmentSettings[col] = col.charAt(0).toUpperCase() + col.slice(1));
                        if (col == "resourceFields" && ej.isNullOrUndefined(this._appointmentSettings.resourceFields) && !ej.isNullOrUndefined(this.model.resources)) {
                            for (var i = 0, len = this.model.resources.length; i < len; i++) {
                                resource = this.model.resources[i].field.charAt(0).toUpperCase() + this.model.resources[i].field.slice(1);
                                this._appointmentSettings[col] += ((i !== 0) ? "," : "") + resource;
                            }
                        }
                    }
                }
            }
        },
        _setModel: function (options) {
            var flag = false;
            for (var prop in options) {
                switch (prop) {
                    case "views":
                        this.model.views = options[prop];
                        this.model.views = (this.model.views.length == 0) ? this.currentView().toString().toLowerCase().split(",") : this.model.views.toString().toLowerCase().split(",");
                        this.hTR.find("table.e-viewstable").remove();
                        this.hTR.find("div.e-viewsdiv").append(this._renderViewNavigation(options[prop].toString().toLowerCase().split(",")));
                        this.element.find(".e-commonviewbutton.e-" + this.currentView()).addClass("e-activeview").attr("tabIndex", 0).focus();
                        if (!ej.isNullOrUndefined(this._scheduleDrawer)) {
                            this._scheduleDrawer.ejNavigationDrawer('destroy');
                            $(this._scheduleDrawer).remove(); this._scheduleDrawer = null;
                            ((this._mediaQuery || this.element.width() < 600) && !$("#" + this._id + "navDrawer").hasClass("e-scheduledrawer")) && this._renderNavigationDrawer();
                        }
                        if (this.model.views.toString().toLowerCase().split(',').indexOf(this.currentView()) == -1) {
                            this._navView = true;
                            if (this.model.views.length == 0) {
                                this.model.views = this.currentView().toString().toLowerCase().split(",");
                                flag = true;
                            }
                            else
                                this._viewChange(null, null, this.model.views[0].toLowerCase());
                        }
                        break;
                    case "currentView":
                        if (this.model.views.toString().toLowerCase().split(',').indexOf(ej.util.getVal(options[prop]).toLowerCase()) != -1) {
                            this._navView = true;
                            this._viewChange(null, null, ej.util.getVal(options[prop]).toLowerCase())
                        }
                        else {
                            this._navView = false;
                            this.currentView((this.element.find(".e-activeview")[0].className.split("e-")[2]).split(" ")[0]);
                        }
                        break;
                    case "currentDate":
                        if ($.type(options[prop]) == "string")
                            this._currentDateFormat(this.model.dateFormat);
                        else if ($.type(options[prop]) == "function" && $.type(ej.util.getVal(options[prop])) == "string")
                            this.currentDate(ej.parseDate(this.currentDate(), this._datepattern()));
                        if (this._keyPressed) {
                            this._keyPressed = false;
                            return false;
                        }
                        this._setCurrentDate = true;
                        ((this.currentDate() < this.model.minDate) && this.currentDate(this.model.minDate));
                        ((this.currentDate() > this.model.maxDate) && this.currentDate(this.model.maxDate));
                        this._navigateClick(null, "DateNavigation");
                        break;
                    case "minDate":
                    case "maxDate":
                        this._currentDateFormat(this.model.dateFormat);
                        flag = true;
                        break;
                    case "timeMode":
                        this.model.timeMode = this._timeMode = options[prop];
                        this._updateTimeMode();
                        break;
                    case "timeZone":
                        this._setmodelvalue = true;
                        this.model.timeZone = options[prop];
                        this.element.find("div.e-categorybar").remove();
                        this.element.find("div.e-appointment,div.e-alldayappointment,div.e-monthappointment,.e-appsoverflow").remove();
                        this._bindAppointmentsData("Load");
                        if (!ej.isNullOrUndefined(this.model.blockoutSettings) && (this.model.blockoutSettings.dataSource instanceof ej.DataManager))
                            this._bindBlockData();
                        else
                            this._renderBlockAppointments();
                        break;
                    case "timeScale":
                        $.extend(this.model.timeScale, options[prop]);
                        flag = true;
                        break;
                    case "timezoneCollection":
                    case "timeZoneCollection":
                        $.extend(this.model.timeZoneCollection, options[prop]);
                        this._appointmentAddWindow.find('.startutc').ejDropDownList({ dataSource: this.model.timeZoneCollection.dataSource });
                        this._appointmentAddWindow.find('.endutc').ejDropDownList({ dataSource: this.model.timeZoneCollection.dataSource });
                        break;
                    case "showTimeZoneFields":
                        this.model.showTimeZoneFields = options[prop];
                        if (this.model.showTimeZoneFields) {
                            if (this._appointmentAddWindow.find("#" + this._id + "_appStartTime").children().length < 4) {
                                if (this._mediaQuery) {
                                    var $startTimeZone = "<td width='31%'><input id='" + this._id + "startTimeZone' class='startutc'  name='" + this._appointmentSettings["startTimeZone"] + "' type='text' value=''/><div id='Timezoneliststr'></div></td>";
                                    var $endTimeZone = "<td><input  id='" + this._id + "endTimeZone' class='endutc' name='" + this._appointmentSettings["endTimeZone"] + "' type='text' value=''/><div id='Timezonelistend'></div></td>";
                                }
                                else {
                                    var $startTimeZone = "<td width='28%'><input  id='" + this._id + "startTimeZone'  class='startutc'  name='" + this._appointmentSettings["startTimeZone"] + "' type='text' value=''/><div id='Timezoneliststr'></div></td>";
                                    var $endTimeZone = "<td><input id='" + this._id + "endTimeZone'  class='endutc'  name='" + this._appointmentSettings["endTimeZone"] + "'  type='text' value=''/><div id='Timezonelistend'></div></td>";
                                }
                                this._appointmentAddWindow.find("#" + this._id + "_appStartTime").append($startTimeZone);
                                this._appointmentAddWindow.find("#" + this._id + "_appEndTime").append($endTimeZone);
                                this._appointmentAddWindow.find("#" + this._id + "startTimeZone").ejDropDownList({ enableRTL: this.model.enableRTL, dataSource: this.model.timeZoneCollection.dataSource, fields: { text: this.model.timeZoneCollection["text"], id: this.model.timeZoneCollection["id"], value: this.model.timeZoneCollection["value"] }, width: "100%", select: $.proxy(this._startUtc, this), cssClass: this.model.cssClass });
                                this._appointmentAddWindow.find("#" + this._id + "endTimeZone").ejDropDownList({ enableRTL: this.model.enableRTL, dataSource: this.model.timeZoneCollection.dataSource, fields: { text: this.model.timeZoneCollection["text"], id: this.model.timeZoneCollection["id"], value: this.model.timeZoneCollection["value"] }, width: "100%", select: $.proxy(this._endUtc, this), cssClass: this.model.cssClass });
                            }
                            this._timeZoneCollection(null);
                        }
                        else {
                            this._appointmentAddWindow.find("#" + this._id + "_appStartTime").children().last().remove();
                            this._appointmentAddWindow.find("#" + this._id + "_appEndTime").children().last().remove();
                        }
                        break;
                    case "startHour":
                        this.model.startHour = options[prop];
                        if (this.model.startHour < 0) this.model.startHour = 0;
                        (this.currentView() !== "agenda") && this._setNewStartEndHours();
                        break;
                    case "endHour":
                        this.model.endHour = options[prop];
                        if (this.model.endHour > 24) this.model.endHour = 24;
                        (this.currentView() !== "agenda") && this._setNewStartEndHours();
                        break;
                    case "highlightBusinessHours":
                        this.model.workHours.highlight = options[prop];
                        if (this.currentView() !== "agenda") {
                            (this.model.workHours.highlight) ? this._highlightBusinessHours() : this.element.find(".e-workcells").removeClass("e-businesshighlightworkcells") && this.element.find(".e-monthcells").removeClass("e-monthcellhighlight");
                            this._businessHourScroller();
                        }
                        break;
                    case "workHours":
                        $.extend(this.model.workHours, options[prop]);
                        if (this.currentView() !== "agenda") {
                            (this.model.workHours.highlight) ? this._highlightBusinessHours() : this.element.find(".e-workcells").removeClass("e-businesshighlightworkcells") && this.element.find(".e-monthcells").removeClass("e-monthcellhighlight");
                            this._businessHourScroller();
                            this._renderUpDownIconPosition();
                        }
                        break;
                    case "showAllDayRow":
                        this.model.showAllDayRow = options[prop];
                        (!this.model.timeScale.enable) && (this.model.showAllDayRow = false);
                        if (this.model.orientation == "vertical" && this.model.timeScale.enable && this.currentView() != "agenda" && this.currentView() != "month" && !(this._isCustomMonthView())) {
                            this.aTR.empty();
                            this._renderHeaderAllDayTemplate();
                            this._borderAddRemove();
                            this._headerbarWidth();
                            this.element.find(".e-schedulesettings").html(this._getLocalizedLabels("AllDay"));
                            (this.model.showAllDayRow) && this._reRenderAllDayAppointments();
                            if (this.model.orientation == "vertical" && this.model.cellWidth) {
                                this.element.find(".e-workcellstab tr td:first-child").width(this.element.find(".e-headercells").width());
                            }
                            this._reRenderScroller();
                        }
                        break;
                    case "isResponsive":
                        this.model.isResponsive = options[prop];
                        this._onScheduleResize();
                        break;
                    case "isDST":
                        this.model.isDST = options[prop];
                        if (ej.isNullOrUndefined(this.model.timeZone)) {
                            var today = new Date();
                            this._timeValue = this._true == false ? -(today.getTimezoneOffset() - this._stdTimezoneOffset()) : today.getTimezoneOffset() - this._stdTimezoneOffset();
                            this._true = (this.model.isDST == true) ? false : true;
                            this._dayLight = true;
                            this.element.find("div.e-categorybar").remove();
                            this.element.find("div.e-appointment,div.e-alldayappointment,div.e-monthappointment,div.e-appsoverflow").remove();
                            !ej.isNullOrUndefined(this.model.appointmentSettings) && (this._dataManager = this.dataSource() instanceof ej.DataManager ? this.dataSource() : this.dataSource() != null ? ej.DataManager(this.dataSource()) : null);
                            this._bindAppointmentsData("Load");
                        }
                        break;
                    case "enableRecurrenceValidation":
                        this.model.enableRecurrenceValidation = options[prop];
                        (this.model.enableRecurrenceValidation && ej.isNullOrUndefined(this._alertWindow)) && this._renderAlertWindow();
                        this._dataProcessing(this._currentAppointmentData);
                        this._renderAppointmentAll();
                        break;
                    case "businessStartHour":
                        this.model.workHours.start = options[prop];
                        if (this.currentView() !== "agenda") {
                            this.currentView() !== "month" && !(this._isCustomMonthView()) ? this.element.find(".e-workcells").removeClass("e-businesshighlightworkcells") : this.element.find(".e-monthcells").removeClass("e-monthcellhighlight");
                            this.model.workHours.highlight && this._highlightBusinessHours();
                            this._businessHourScroller();
                        }
                        break;
                    case "businessEndHour":
                        this.model.workHours.end = options[prop];
                        if (this.currentView() !== "agenda") {
                            this.currentView() !== "month" && !(this._isCustomMonthView()) ? this.element.find(".e-workcells").removeClass("e-businesshighlightworkcells") : this.element.find(".e-monthcells").removeClass("e-monthcellhighlight");
                            this.model.workHours.highlight && this._highlightBusinessHours();
                            this._businessHourScroller();
                        }
                        break;
                    case "height":
                        this.model.height = options[prop];
                        if (this.model.showCurrentTimeIndicator) this.element.find(".e-highlightcurrenttimeline").remove();
                        flag = true;
                        break;
                    case "width":
                        this.model.width = options[prop];
                        this._clientWidth = this.model.width;
                        if (this.model.showCurrentTimeIndicator) this.element.find(".e-highlightcurrenttimeline").remove();
                        flag = true;
                        break;
                    case "cssClass":
                        this.element.removeClass(this.model.cssClass).addClass(options[prop]);
                        break;
                    case "locale":
                        this.model.locale = options[prop];
                        this._localizedLabels = ej.getLocalizedConstants("ej.Schedule", this.model.locale);
                        if (this.model.locale != "en-US")
                            this._recurrenceLocal();
                        this._culture = ej.preferredCulture(this.model.locale);
                        this._dayShortNames = this._culture.calendar.days.namesAbbr;
                        this._dayFullNames = this._culture.calendar.days.names;
                        this._monthNames = this._culture.calendar.months.names;
                        this._pattern = this._culture.calendar.patterns;
                        if (this.model.contextMenuSettings.enable) {
                            $("#" + this._id + "gotoWindow_wrapper").remove();
                            this._gotoDate = true;
                        }
                        flag = true;
                        break;
                    case "dateFormat":
                        this._appointmentAddWindow.find('.startenddate').ejDatePicker({ dateFormat: options[prop] });
                        this._appointmentAddWindow.find('.recurstartdate').ejDatePicker({ dateFormat: options[prop] });
                        this._appointmentAddWindow.find('.e-until').ejDatePicker({ dateFormat: options[prop] });
                        this._currentDateFormat(options[prop]);
                        break;
                    case "enableResize":
                        this.model.enableResize = options[prop];
                        if (this.model.enableResize) {
                            !ej.isTouchDevice() ? this._on($(window), "resize", $.proxy(this._onScheduleResize, this)) : this._on($(window), "orientationchange", $.proxy(this._onScheduleResize, this));
                        }
                        break;
                    case "readOnly":
                        this.model.readOnly = options[prop];
                        this._renderAppointmentAll();
                        break;
                    case "showCurrentTimeIndicator":
                        this.model.showCurrentTimeIndicator = options[prop];
                        if (this.currentView() !== "agenda") {
                            this._highlightCurrentTime(this.model.showCurrentTimeIndicator);
                            if (!this.model.showCurrentTimeIndicator) this.currentView() !== "month" && !(this._isCustomMonthView()) ? this.element.find(".e-highlightcurrenttimeline").remove() : $(this.element.find(".e-monthcells")).removeClass("e-monthcurrenttime");
                        }
                        break;
                    case "enableRTL":
                        options[prop] ? this.element.addClass("e-rtl") : this.element.removeClass("e-rtl");
                        this.model.enableRTL = options[prop];
                        flag = true;
                        if (this.model.contextMenuSettings.enable) {
                            $("#" + this._id + "gotoWindow_wrapper").remove();
                            this._gotoDate = true;
                        }
                        this._quickAppointWindow = null;
                        break;
                    case "appointmentTemplateId":
                        this.model.appointmentTemplateId = options[prop];
                        this.element.find("div.e-appointment,div.e-alldayappointment,div.e-monthappointment,.e-appsoverflow").remove();
                        this.element.find("div.e-categorybar").remove();
                        if (!ej.isNullOrUndefined(this.dataSource()))
                            this._renderAppointmentAll();
                        break;
                    case "allDayCellsTemplateId":
                        this.model.allDayCellsTemplateId = options[prop];
                        flag = true;
                        break;
                    case "dateHeaderTemplateId":
                        this.model.dateHeaderTemplateId = options[prop];
                        flag = true;
                        break;
                    case "workCellsTemplateId":
                        this.model.workCellsTemplateId = options[prop];
                        flag = true;
                        break;
                    case "allowKeyboardNavigation":
                        this.model.allowKeyboardNavigation = options[prop];
                        if (this.model.allowKeyboardNavigation) {
                            this._on(this.element, "keydown", $.proxy(this._onKeyDown, this));
                            this._on($(document), "keydown", $.proxy(this._documentOnKeyDown, this));
                        }
                        else {
                            this._off(this.element, "keydown");
                            this._off($(document), "keydown");
                        }
                        break;
                    case "renderDates":
                        $.extend(this.model.renderDates, options[prop]);
                        this._navView = true; this._navigate = false;
                        this._viewChange(null, null, "customview");
                        break;
                    case "showTimeScale":
                        this.model.timeScale.enable = options[prop];
                        if (this.model.timeScale.enable) {
                            this.model.showAllDayRow ? (this.model.showAllDayRow = true) : "";
                            this.model.showCurrentTimeIndicator ? (this.model.showCurrentTimeIndicator = true) : "";
                        }
                        else {
                            this.model.showAllDayRow = false;
                            this.model.showCurrentTimeIndicator = false;
                        }
                        (this.currentView() !== "agenda") && (flag = true);
                        break;
                    case "appointmentSettings":
                        if (!$.isEmptyObject(options[prop])) {
                            $.extend(this.model.appointmentSettings, options[prop]);
                            this._processAppointmentSettings();
                            this.element.find("div.e-categorybar").remove();
                            this.element.find("div.e-appointment,div.e-alldayappointment,div.e-monthappointment,div.e-appsoverflow").remove();
                            !ej.isNullOrUndefined(this.model.appointmentSettings) && (this._dataManager = this.dataSource() instanceof ej.DataManager ? this.dataSource() : this.dataSource() != null ? ej.DataManager(this.dataSource()) : null);
                            this._setmodelvalue = true;
                            this._bindAppointmentsData("Load");
                        }
                        break;
                    case "contextMenuSettings":
                        $.extend(this.model.contextMenuSettings, options[prop]);
                        if (this.model.contextMenuSettings.enable && (ej.isNullOrUndefined(this._contextMenu) || this.model.categorizeSettings.enable))
                            this._showContextMenu(this.model.contextMenuSettings.enable);
                        break;
                    case "reminderSettings":
                        if (options[prop].enable)
                            this._checkReminders() && (this._reminderInterval = window.setInterval($.proxy(this._checkReminders, this), 60000));
                        else
                            window.clearInterval(this._reminderInterval);
                        break;
                    case "showAppointmentNavigator":
                    case "enableAppointmentNavigation":
                        this.model.showAppointmentNavigator = this.model.enableAppointmentNavigation = options[prop];
                        if (!this.model.showAppointmentNavigator) {
                            this.element.find(".e-prevapp,.e-nextapp").remove();
                            this.element.find(".e-upicon,.e-downicon").remove();
                        }
                        else {
                            this._nextPrevAppointment(this.model.showAppointmentNavigator);
                            if (this.model.orientation == "vertical" && this.element.find(".e-vscroll").length > 0 && this.currentView() != "month" && (!this._isCustomMonthView()) && (!this._mediaQuery))
                                this._renderUpDownIcon();
                            if (!ej.isNullOrUndefined(this.dataSource()))
                                this._renderAppointmentAll();
                        }
                        break;
                    case "enableLoadOnDemand":
                        this.model.enableLoadOnDemand = options[prop];
                        this.element.find("div.e-categorybar").remove();
                        this.element.find("div.e-appointment,div.e-alldayappointment,div.e-monthappointment,.e-appsoverflow").remove();
                        this._bindAppointmentsData("Load");
                        break;
                    case "resources":
                        if (ej.scheduleFeatures.resources && !ej.isNullOrUndefined(this.model.resources)) {
                            ej.copyObject(this.model.resources, options[prop]);
                            this.model.resources = options[prop];
                            if (this.model.resources.length == 0) {
                                this.model.resources = null;
                                this.model.group = null;
                                flag = true;
                            }
                            else
                                flag = true;
                        }
                        break;
                    case "categorizeSettings":
                        $.extend(this.model.categorizeSettings, options[prop]);
                        if (!ej.isNullOrUndefined(this.model.categorizeSettings)) {
                            if (this.model.categorizeSettings.enable) {
                                if (this._appointmentAddWindow.find('.e-categorizevalue').length == 1)
                                    this._appointmentAddWindow.find('#' + this._id + "categorizetr").remove();
                                var $appWindow = "<tr id='" + this._id + "categorizetr'><td class='e-leftfields e-textlabel'>" + this._getLocalizedLabels("Categorize") + ":</td><td colspan='3' class='e-rightfields'>" + "<input id= '" + this._id + "categorize' class='e-categorizevalue' type='text' name='" + this._appointmentSettings["categorize"] + "' value=''/></td></tr>";
                                this._appointmentAddWindow.find('.' + this._id + "summary").after($appWindow);
                                this._renderTemplates();
                                this._renderCategoryItems(this._appointmentAddWindow);
                            }
                            else
                                this._appointmentAddWindow.find('#' + this._id + "categorizetr").remove();
                            this._showContextMenu(this.model.contextMenuSettings.enable);
                            this._appointmentAddWindow.find(".e-categorizevalue").ejAutocomplete("clearText");
                            this._renderCategoryItems(this._appointmentAddWindow);
                            if (!ej.isNullOrUndefined(this.dataSource()))
                                this._renderAppointmentAll();
                        }
                        break;
                    case "group":
                        if (ej.scheduleFeatures.resources && !ej.isNullOrUndefined(this.model.resources)) {
                            $.extend(this.model.group, options[prop]);
                            if ($.isEmptyObject(this.model.group)) this.model.group = null;
                            flag = true;
                        }
                        break;
                    case "cellWidth":
                        this.model.cellWidth = options[prop];
                        (this.currentView() !== "agenda") && (flag = true);
                        break;
                    case "cellHeight":
                        this.model.cellHeight = options[prop];
                        (this.currentView() !== "agenda") && (flag = true);
                        break;
                    case "orientation":
                        this.model.orientation = options[prop];
                        if (ej.scheduleFeatures.resources && (this._tempResource.length != 0) && !ej.isNullOrUndefined(this.model.group) && this.model.orientation == "horizontal")
                            this._on(this.element, "click", ".e-parentnodecategory", $.proxy(this._onResourceClick, this));
                        flag = true;
                        break;
                    case "resourceHeaderTemplateId":
                        this.model.resourceHeaderTemplateId = options[prop];
                        if (ej.scheduleFeatures.resources && !ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) {
                            if (this.currentView() != "agenda") {
                                if (this.model.orientation == "horizontal") {
                                    var resDiv = $(this.wTR.find("td")[0]);
                                    resDiv.find("div.e-horizontresdiv").remove();
                                    var resHtml = this._renderHorizontalResources();
                                    resDiv.html(resHtml);
                                }
                                else {
                                    this.aTR.empty();
                                    this._renderHeaderAllDayTemplate();
                                    this._borderAddRemove();
                                    this._headerbarWidth();
                                    this.element.find(".e-schedulesettings").html(this._getLocalizedLabels("AllDay"));
                                    (this.model.showAllDayRow) && this._reRenderAllDayAppointments();
                                }
                            }
                            else
                                this._renderAgendaContent();
                        }
                        break;
                    case "showLocationField":
                        this.model.showLocationField = options[prop];
                        if (this.model.showLocationField) {
                            $appWindow = "<tr id='" + this._id + "showLocation' class='" + this._id + "showLocation'><td class='e-leftfields e-textlabel'>" + this._getLocalizedLabels("Location") + ":</td><td colspan='3' class='e-rightfields'>" +
                                 "<input id='" + this._id + "location' tabIndex='0' class='location e-inputtext' name='" + this._appointmentSettings["location"] + "' type='text' /></td></tr>";
                            this._appointmentAddWindow.find("." + this._id + "subjecttr").after($appWindow);
                        }
                        else {
                            this._appointmentAddWindow.find("." + this._id + "showLocation").remove();
                        }
                        break;
                    case "prioritySettings":
                        $.extend(this.model.prioritySettings, options[prop]);
                        if (this.model.prioritySettings.enable) {
                            if (this._appointmentAddWindow.find("." + this._id + "priorityshow").length == 1) {
                                this._appointmentAddWindow.find("." + this._id + "priorityshow").remove();
                                this._appointmentAddWindow.find("." + this._id + "prioritylistshow").remove();
                            }
                            $appWindow = "<td colspan='1' class='e-textlabel " + this._id + "priorityshow'>" + this._getLocalizedLabels("Priority") + ":</td><td colspan='1' class='" + this._id + "prioritylistshow'><input id='" + this._id + "priority' class='priority' type='text' name='" + this._appointmentSettings["priority"] + "' value='' /><div id='prioritylist'></div></td>";
                            this._appointmentAddWindow.find("." + this._id + "parrow").prepend($appWindow);
                            this._renderPriorityItems(this._appointmentAddWindow);
                            this._renderTemplates();
                        }
                        else {
                            this._appointmentAddWindow.find("." + this._id + "priorityshow").remove();
                            this._appointmentAddWindow.find("." + this._id + "prioritylistshow").remove();
                        }
                        if (!ej.isNullOrUndefined(this.dataSource())) {
                            this._renderAppointmentAll();
                        }
                        break;
                    case "showQuickWindow":
                        this.model.showQuickWindow = options[prop];
                        (this.model.showQuickWindow && ej.isNullOrUndefined(this._quickAppointWindow)) && (this._renderQuickAppWindow() || this._renderQuickAppDetailsView());
                        $.isFunction($.validator) && this._setQuickValidation();
                        (this._quickAppointWindow.ejDialog("close") && this._quickAppDetailsWindow.ejDialog("close"));
                        this._quickWindow = this.model.showQuickWindow;
                        break;
                    case "allowDragAndDrop":
                    case "allowDragDrop":
                        this.model.allowDragAndDrop = this.model.allowDragDrop = options[prop];
                        if (this.currentView() == "agenda") return false;
                        this.model.allowDragAndDrop ? this._dragdropAppointments() : this._unWireDragDrop();
                        break;
                    case "enableAppointmentResize":
                        this.model.enableAppointmentResize = options[prop];
                        if (this.currentView() == "agenda") return false;
                        this._renderAppointmentAll();
                        break;
                    case "showHeaderBar":
                        this.model.showHeaderBar = options[prop];
                        if (this.model.showHeaderBar) {
                            this.element.find(".e-scheduleheader").show();
                            this._reRenderHeaderBar();
                        }
                        else {
                            this.element.find(".e-scheduleheader").empty();
                            this.element.find(".e-scheduleheader").hide();
                        }
                        this.refreshScroller();
                        break;
                    case "tooltipSettings":
                        $.extend(this.model.tooltipSettings, options[prop]);
                        var target = this.model.tooltipSettings.enable ? ".e-appointment,.e-alldayappointment,.e-monthappointment,.e-agendacells.e-eventcolumn,.e-appup,.e-appdown,.e-appsoverflow" : ".e-appup,.e-appdown,.e-appsoverflow";
                        var toolTipObj = this.element.data("ejTooltip");
                        toolTipObj.setModel({ target: target });
                        break;
                    case "showOverflowButton":
                        this.model.showOverflowButton = options[prop];
                        flag = true;
                        break;
                    case "appointmentDragArea":
                        this.model.appointmentDragArea = options[prop];
                        flag = true;
                        break;
                    case "firstDayOfWeek":
                        this.model.firstDayOfWeek = this._firstdayofweek = options[prop];
                        if (this._firstdayofweek)
                            flag = true;
                        break;
                    case "workWeek":
                        this.model.workWeek = options[prop];
                        if (this.model.workWeek == null || this.model.workWeek.length >= 0)
                            flag = true;
                        break;
                    case "agendaViewSettings":
                        $.extend(this.model.agendaViewSettings, options[prop]);
                        if (this.currentView() == "agenda") {
                            (this.model.showHeaderBar) && (this.element.find("div.e-datedisplay")[0].innerHTML = this._getCurrentDateHeaderValue());
                            this._renderAgendaContent();
                        }
                        break;
                    case "showNextPrevMonth":
                        this.model.showNextPrevMonth = options[prop];
                        if (this.model.orientation == "vertical" && this.currentView() == "month") {
                            this._renderMonthTimeCells();
                            this._highlightBusinessHours();
                            this._dataProcessing(this._currentAppointmentData);
                            this._renderAppointmentAll();
                        }
                        break;
                    case "blockoutSettings":
                        if (!$.isEmptyObject(options[prop])) {
                            $.extend(this.model.blockoutSettings, options[prop]);
                            if (!ej.isNullOrUndefined(this.model.blockoutSettings) && (this.model.blockoutSettings.dataSource instanceof ej.DataManager))
                                this._bindBlockData();
                            else
                                this._renderBlockAppointments();
                        }
                        break;
                }
            }
            if (flag) {
                this.element.empty();
                !ej.isNullOrUndefined(this.element.data("ejTooltip")) && this.element.ejTooltip('destroy');
                this._scheduleDrawer = null;
                $("#" + this._id + "AppointmentAddEditWindow_wrapper,#" + this._id + "AppointmentQuickWindow_wrapper,#" + this._id + "AppDetailsWindow_wrapper,#" + this._id + "RecurrenceEdit_wrapper").remove();
                if (ej.scheduleFeatures.resources && !ej.isNullOrUndefined(this.model.resources)) this._resourceSegregate();
                this._setmodelvalue = true;
                (this._tempResource.length == 0 && this._grouping.length == 0) ? this._renderInitSchedule() : this._bindResourcesData();
                this._businessHourScroller();
                if (!ej.isNullOrUndefined(this.dataSource()))
                    this._dataProcessing(this._currentAppointmentData);
                this._renderAppointmentAll();
                this._renderBlockAppointments();
            }
        },

        _touchSchedule: function (e) {
            if ($(e.target).is(".e-appointment,.e-alldayappointment,.e-monthappointment") || $(e.target).parents().is(".e-appointment,.e-alldayappointment,.e-monthappointment"))
                return false;
            if (this.model.orientation == "horizontal") return false;
            var eventType = this.model.enableRTL ? (e.type == "swipeleft" ? "swiperight" : "swipeleft") : e.type;
            var marginType = this.model.enableRTL ? "margin-right" : "margin-left";
            var event, value = parseInt(this.element.find(".e-draggableworkarea").css(marginType));
            var resWidth = Math.round(this.element.find(".e-draggableworkarea").width() / this.res1.length);
            var resPos = Math.abs((this.element.find(".e-draggableworkarea").offset().left - this.element.find(".e-workleftindent").outerWidth() - 1) / resWidth);
            switch (eventType) {
                case "swipeleft":
                    if (this._mediaQuery && this.currentView() != "agenda" && this.model.orientation == "vertical") {
                        if (-value < (this.element.find(".e-draggableworkarea").width() - (resWidth))) {
                            var marginValue = -((resPos + 1) * resWidth);
                            this.element.find(".e-headeralldaydiv,.e-draggableworkarea").animate((this.model.enableRTL ? { "margin-right": marginValue } : { "margin-left": marginValue }), 500);
                            this.element.find(".e-headeralldaydiv,.e-draggableworkarea").css(this.model.enableRTL ? { "margin-left": 0 } : { "margin-right": 0 });
                            if (resPos + 1 == this.res1.length - 1) this._showScrollTd();
                            return false;
                        }
                        this.element.find(".e-headeralldaydiv,.e-draggableworkarea,.e-emptyscrolltd").css({ marginLeft: "0px", marginRight: "0px" });
                    }
                    event = { currentTarget: this.element.find('.e-navigatenext') };
                    this._navigateClick(event, "Next");
                    break;
                case "swiperight":
                    if (this._mediaQuery && this.currentView() != "agenda" && this.model.orientation == "vertical") {
                        if (-value > 0) {
                            var marginValue = -((resPos - 1) * resWidth);
                            this.element.find(".e-headeralldaydiv,.e-draggableworkarea").animate((this.model.enableRTL ? { "margin-right": marginValue } : { "margin-left": marginValue }), 500);
                            this.element.find(".e-headeralldaydiv,.e-draggableworkarea").css(this.model.enableRTL ? { "margin-left": 0 } : { "margin-right": 0 });
                            if (resPos + 1 == this.res1.length - 1) this._showScrollTd();
                            return false;
                        }
                        this.element.find(".e-headeralldaydiv,.e-draggableworkarea,.e-emptyscrolltd").css({ marginLeft: "0px", marginRight: "0px" });
                    }
                    event = { currentTarget: this.element.find('.e-navigateprevious') };
                    this._navigateClick(event, "Previous");
                    break;
            }
        },

        _initPrivateProperties: function () {
            this._navSelected = this._navDrawer = this._alldayLevel = this._reminderClose = this._navView = this._editKey = this._cellClick = this._recurChecked = this._setCurrentDate = this._leftResizing = this._rightResizing = this._topResizing = this._bottomResizing = this._navigate = this._navigate = this._allDayDrag = false;
            this._gotoDate = this._bindapp = this._showBlockAlert = true;
            this._tempStart = this._tempEnd = this._currentAction = "";
            this._currentRowIndex = this._currentColIndex = 0;
            this._appId = this._parentId = 1;
            this.overlapList = this._currentAppointmentData = this._processed = this._dateRender = this._app = this._grouping = this._tempResource = [];
            this.res1 = [0];
            this._appMainId = null;
            this._dayNamesArray = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];
            this._dayNames = ["SU", "MO", "TU", "WE", "TH", "FR", "SA"];
            this._culture = ej.preferredCulture(this.model.locale);
            this._dayShortNames = this._culture.calendar.days.namesAbbr;
            this._dayFullNames = this._culture.calendar.days.names;
            this._monthNames = this._culture.calendar.months.names;
            this._pattern = this._culture.calendar.patterns;
            this._browserInfo = ej.browserInfo();
            this._safariBrowser = this._browserInfo.name == "webkit" && !ej.isTouchDevice();
            this._focused = null;
            String.prototype.trim = String.prototype.trim || function () { return this.replace(/^\s+|\s+$/g, ''); };
            String.prototype.capitalizeFirstString = String.prototype.capitalizeFirstString || function () { return this.charAt(0).toUpperCase() + this.slice(1); };
            Date.prototype.parseISO8601 = function (date) { return (typeof (date) === 'string') ? new Date(date.replace(/-/g, "/")) : new Date(date); };
        },

        _destroy: function () {
            this.element.off();
            this._destorySubControls($("#" + this._id + "_AddEditForm"));
            this._appointmentAddWindow.find("#" + this._id + "recurrenceEditor").ejRecurrenceEditor("destroy");
            this.element.find("#" + this._id + "_navigator").ejDatePicker("destroy");
            window.clearInterval(this._intervalID);
            !ej.isNullOrUndefined(this.element.data("ejTooltip")) && this.element.ejTooltip("destroy");
            $("#" + this._id + "AppointmentAddEditWindow_wrapper,#" + this._id + "AppointmentQuickWindow_wrapper,#" + this._id + "AppDetailsWindow_wrapper,#" + this._id + "RecurrenceEdit_wrapper,#" + this._id + "gotoWindow_wrapper").remove();
            $("#" + this._id + "_WorkCells_Template,#" + this._id + "_MonthCells_Template,#" + this._id + "_TimeCells_Template,#" + this._id + "_HeaderDate_Template,#" + this._id + "_Appointment_Template,#" + this._id + "_AlldayCells_Template,#" + this._id + "_LeftIndentCells_Template,#" + this._id + "_AgendaCells_Template,#" + this._id + "_userTimeCells_Template,#" + this._id + "_BlockTime_Template,#" + this._id + "_HorizontalHeader_Template,#" + this._id + "_HorizontalCells_Template,#" + this._id + "_HorizontalResources_Template").remove();
            this.element.empty().removeClass("e-schedule");
        },

        _destorySubControls: function (formelement) {
            var $formEle = formelement.find('.e-timepicker,.e-datepicker,.e-dropdownlist,.e-autocomplete');
            for (var index = 0; index < $formEle.length; index++) {
                var $element = $($formEle[index]);
                if ($element.hasClass('e-timepicker'))
                    $element.ejTimePicker("destroy");
                else if ($element.hasClass('e-datepicker'))
                    $element.ejDatePicker("destroy");
                else if ($element.hasClass('e-dropdownlist'))
                    $element.ejDropDownList("destroy");
                else if ($element.hasClass('e-autocomplete'))
                    $element.ejAutocomplete("destroy");
            }
        },
        _closeRecurence: function (args) {
            if (this._appointmentAddWindow.find('.e-recuruntil').ejRadioButton("option", "checked") && args.model.text != this._getLocalizedLabels("Cancel") && this._appointmentAddWindow.find('.recurstartdate').ejDatePicker("option", "value") > this._appointmentAddWindow.find(".e-until").ejDatePicker("option", "value")) {
                this._alertWindow.find(".e-alerttext").html(this._getLocalizedLabels("WrongPattern"));
                this._alertWindow.ejDialog("open");
                return false;
            }
            if (args.model.text == this._getLocalizedLabels("Cancel")) {
                this._appointmentAddWindow.find(".e-recurFinalRule").html() == "" && this._appointmentAddWindow.find("#" + this._id + "recurrence").ejCheckBox({ checked: false });
            }
            else {
                var obj = this._appointmentAddWindow.find(".e-recurEditor").data("ejRecurrenceEditor");
                var _rRuleStr = obj.closeRecurPublic();
                var dateChange = obj.element.find(".recurstartdate").ejDatePicker("option", "value");
                if (new Date(this._appointmentAddWindow.find("#" + this._id + "startdate").ejDatePicker("option", "value")).setHours(0, 0, 0, 0) != new Date(dateChange).getTime())
                    this._recurDateChange(dateChange);
                this._appointmentAddWindow.find("." + this._id + "summary").css("display", "table-row");
                this._appointmentAddWindow.find(".e-recurFinalRule").html(_rRuleStr);
                this._appointmentAddWindow.find(".e-recuredit").css("display", "inline");
                recurOption = "";
            }
            this._appointmentAddWindow.find(".e-recurEditor").toggle()
            this._appointmentAddWindow.find(".e-appwindow").css("margin-left", 700).toggle().animate({ "margin-left": 10 }, 300);
            (this._mediaQuery) && this._appointmentAddWindow.parent().parent().find(".e-dialog-icon").css("display", "block");
            this._appointmentAddWindow.find('.done').focus();
        },
        _wireEvents: function () {
            this._on((this.element, $(window)), "mousedown", $.proxy(this._onScheduleMouseDown, this));
            this._on(this.element, "click", "div.e-navigateprevious,div.e-navigatenext", $.proxy(this._navigateClick, this));
            this._on($(window), "resize", $.proxy(this._onScheduleResize, this));
            this._on(this.element, "click", ".e-commonviewbutton", $.proxy(this._viewChange, this));
            this._on(this.element, "click", ".e-datedisplay", $.proxy(this._viewCalendar, this));
            this._on(this.element, "click", "div.e-appsoverflow", $.proxy(this._appOverflowClick, this));
            this._on(this.element, "click", ".e-prevapp.enable,.e-nextapp.enable", $.proxy(this._nextPrev, this));
            this._on(this.element, "dblclick", ".e-headercells", $.proxy(this._navigateView, this));
            this._on(this.element, "click", ".e-headercells,.e-timecells,td.e-monthcells div.e-monthheader", $.proxy(this._navigateView, this));
            this._on(this.element, "mouseover", "td.e-alldaycells,td.e-workcells:not('.e-resourceheadercells'),td.e-monthcells:not('.e-othermonths'),td.e-agendacells", $.proxy(this._onCellMouseOver, this));
            this._on(this.element, "mouseout", "td.e-alldaycells,td.e-workcells:not('.e-resourceheadercells'),td.e-monthcells:not('.e-othermonths'),td.e-agendacells", $.proxy(this._onCellMouseOver, this));
            this._on(this.element, "click", ".e-workcells,.e-alldaycells,.e-alldayappointment,.e-monthcells:not('.e-othermonths'),.e-agendacells", $.proxy(this._cellSelection, this));
            if (!this._mediaQuery && !ej.isTouchDevice()) {
                this._on(this.element, ej.eventType.mouseDown, "td.e-workcells,td.e-monthcells:not('.e-othermonths'),td.e-alldaycells", $.proxy(this._mouseButtonClick, this));
                this._on(this.element, "keydown click", "td.e-workcells,td.e-monthcells:not('.e-othermonths'),td.e-alldaycells", $.proxy(this._shiftSelection, this));
            }
            this._on(this.element, (ej.isMobile()) ? "click" : "dblclick", ".e-workcells:not('.e-resourceheadercells'),.e-alldaycells,.e-alldayappointment,.e-monthcells:not('.e-othermonths'),.e-agendacells.e-eventcolumn,.e-agendacells.e-timecolumn", $.proxy(this._appointmentWindow, this));
            (this._mediaQuery || ej.isMobile()) && this._on(this.element, "tap", ".e-appointment,.e-alldayappointment,div.e-monthappointment,.e-agendaappointment", $.proxy(this._appointmentWindow, this));
            this._on(this.element, "mouseover", ".e-appointment,.e-alldayappointment,.e-monthappointment,.e-agendaappointment", $.proxy(this._onAppointMouseOver, this));
            this._on(this.element, "mouseout", ".e-appointment,.e-alldayappointment,.e-monthappointment,.e-agendaappointment", $.proxy(this._onAppointMouseOver, this));
            this._on(this.element, "click", ".e-appup,.e-appdown", $.proxy(this._renderAppPosition, this));
            (this._mediaQuery || this.element.width() < 600) && this._on(this.element, "click", "#" + this._id + "navDrawerIcon", $.proxy(this._drawerOpen, this));
            if (this.model.allowKeyboardNavigation) {
                this._on(this.element, "keydown", $.proxy(this._onKeyDown, this));
                this._on($(this.element), "keydown", $.proxy(this._documentOnKeyDown, this));
            }
            if (this.model.orientation == "horizontal")
                this._on(this.element, "click", ".e-parentnodecategory", $.proxy(this._onResourceClick, this));
            if (this._mediaQuery || ej.isTouchDevice())
                this._on(this.element, "swipeleft swiperight", ".e-contentarearow .e-workcellstab,.e-agendacellstab", $.proxy(this._touchSchedule, this));
            if (this.model.enableResize)
                !ej.isTouchDevice() ? this._on($(window), "resize", $.proxy(this._onScheduleResize, this)) : this._on($(window), "orientationchange", $.proxy(this._onScheduleResize, this));
            this._on(this.element, "click", ".e-schedulemouseclose,.e-deleteapp", $.proxy(this._deleteAppoint, this));
            this._on(this.element, "click", ".e-editapp", $.proxy(this._appointmentWindow, this));
        },

        _drawerOpen: function () {
            this._scheduleDrawer.ejNavigationDrawer("open");
        },

        _mouseButtonClick: function (e) {
            if (!(e.altKey) && !(e.shiftKey) && !(e.ctrlKey) && (e.which != 3)) {
                if ((e.which == 1 || e.type == "touchstart") && !$(e.target).hasClass("e-resourceheadercells") && !$(e.target).hasClass("e-othermonths")) {
                    var oEl = e.target || document.activeElement || e.srcElement;
                    var oRowCell = this.element.find('div.e-draggableworkarea tr'), proxy = this;
                    ($(oEl).hasClass("e-alldaycells")) && (oRowCell = this.element.find(".e-alldaycells").parent());
                    if ($(oEl).hasClass("e-selectedAppointment")) {
                        this.element.find('.e-selectedAppointment').removeClass("e-selectedAppointment");
                        $(oRowCell[0].cells[0]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    }
                    this._currentRowIndex = $(oEl).parent()[0].rowIndex;
                    this._currentColIndex = $(oEl)[0].cellIndex;
                    var renderDate = (proxy.model.orientation == "horizontal" && proxy.currentView() == "month") ? proxy.monthDays : proxy.model.orientation == "vertical" ? proxy.dateRender : proxy._dateRender;
                    var cellindexs = $(e.target).hasClass("e-workcells") || $(e.target).hasClass("e-alldaycells") ? $(e.target).index() : 7 - ((parseInt($(e.target).index() / 7) + 1) * 7 - $(e.target).index()) + ($(e.target).parent().index() * 7);
                    ((this.model.orientation == "horizontal") && (cellindexs = proxy.currentView() !== "month" ? Math.floor(cellindexs / ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot))) : cellindexs));
                    var curDates = new Date(renderDate[cellindexs]);
                    if ((curDates >= this.model.minDate) && (curDates <= this.model.maxDate)) {
                        if ($(oEl).hasClass('e-workcells') || $(oEl).hasClass('e-monthcells') || $(oEl).hasClass('e-alldaycells')) {
                            oRowCell.on(ej.eventType.mouseMove, function (e) {
                                proxy.model.showQuickWindow && (proxy._quickAppointWindow.ejDialog("close") && proxy._quickAppDetailsWindow.ejDialog("close"));
                                e.preventDefault();
                                var currTarget = e.target;
                                if (e.type == 'touchmove') {
                                    var coor = e.originalEvent.changedTouches[0];
                                    currTarget = document.elementFromPoint(coor.pageX, coor.pageY);
                                }
                                $(currTarget).hasClass('e-selectedCell') && proxy.element.find(".e-workcells,.e-alldaycells,.e-monthcells").removeClass("e-selectedCell");
                                proxy._mouseSelection(e, proxy, oEl, currTarget);
                                proxy._moveScrollContent(oEl, proxy);
                            });
                            oRowCell.on(ej.eventType.mouseUp, function (e) {
                                oRowCell.off(ej.eventType.mouseMove);
                            });
                            this.element.find("e.workcells,e.alldaycells,.e-monthcells").removeClass("e-mousehover");
                            this.element.find(".e-workcells,.e-alldaycells,.e-monthcells").removeClass("e-selectedCell");
                            this.element.find('.e-selectedAppointment').removeClass("e-selectedAppointment");
                        }
                    }
                }
            }
        },
        _mouseSelection: function (e, proxy, oE1, currTarget) {
            var oRowCell = proxy.element.find('div.e-draggableworkarea tr');
            var sourceRowIndex = $(oE1).parent().index();
            var sourceColumnIndex = $(oE1).index();
            var rowcount = oRowCell.length - 1;
            var i, j, k;
            var currentRowIndex = $(currTarget).parent().index();
            var currentColumnIndex = $(currTarget).index();
            var ad = proxy.element.find(".e-alldaycells").parent();
            var alldaytr = proxy.model.showAllDayRow;
            if (this._resWorkWeek) {
                var resmincolindex = 0;
                for (var z = 0; z < this.res1.length; z++) {
                    if (currentColumnIndex <= (resmincolindex + (this.res1[z][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]].length - 1))) {
                        var resmaxcolindex = resmincolindex + this.res1[z][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]].length;
                        break;
                    }
                    else
                        resmincolindex += this.res1[z][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]].length;
                }
            }
            else {
                var viewCount = proxy.model.orientation == "horizontal" ? oRowCell[0].cells.length : ((proxy.currentView() == "month" || proxy._isCustomMonthView()) ? (oRowCell[0].cells.length / proxy.res1.length) : proxy._dateRender.length);
                var resIndex = Math.floor($(currTarget).index() / viewCount);
                var resmaxcolindex = (viewCount * (resIndex + 1));
                var resmincolindex = (viewCount * resIndex);
            }
            if ($(currTarget).hasClass('e-workcells')) {
                if (proxy.model.orientation == "vertical") {
                    if (sourceColumnIndex >= parseInt(resmincolindex) && sourceColumnIndex <= parseInt(resmaxcolindex) - 1 && currentColumnIndex != "undefined") {
                        if (sourceColumnIndex == currentColumnIndex) {
                            if (currentRowIndex > sourceRowIndex) {
                                for (k = parseInt(sourceRowIndex) ; k <= currentRowIndex; k++)
                                    $(oRowCell[k].cells[sourceColumnIndex]).addClass("e-selectedCell");
                            }
                            else if (currentRowIndex < sourceRowIndex) {
                                for (k = parseInt(sourceRowIndex) ; k >= currentRowIndex; k--)
                                    $(oRowCell[k].cells[sourceColumnIndex]).addClass("e-selectedCell");
                            }
                            else
                                $(oRowCell[currentRowIndex].cells[currentColumnIndex]).addClass("e-selectedCell");
                        }
                        else if (currentColumnIndex > sourceColumnIndex) {
                            var difference = currentColumnIndex - sourceColumnIndex;
                            for (i = parseInt(sourceRowIndex) ; i <= rowcount; i++)
                                $(oRowCell[i].cells[sourceColumnIndex]).addClass("e-selectedCell");
                            alldaytr && $(ad[0].cells[[sourceColumnIndex]]).addClass("e-selectedCell");
                            alldaytr && $(ad[0].cells[[currentColumnIndex]]).addClass("e-selectedCell");
                            if (difference > 1) {
                                for (k = 1; k <= difference - 1; k++) {
                                    for (var m = 0; m <= rowcount; m++)
                                        $(oRowCell[m].cells[currentColumnIndex - k]).addClass("e-selectedCell");
                                    alldaytr && $(ad[0].cells[[currentColumnIndex - k]]).addClass("e-selectedCell");
                                }
                            }
                            for (j = 0; j <= currentRowIndex; j++)
                                $(oRowCell[j].cells[currentColumnIndex]).addClass("e-selectedCell");
                        }
                        else if (currentColumnIndex < sourceColumnIndex) {
                            var difference = sourceColumnIndex - currentColumnIndex;
                            for (i = parseInt(sourceRowIndex) ; i >= 0 ; i--)
                                $(oRowCell[i].cells[sourceColumnIndex]).addClass("e-selectedCell");
                            alldaytr && $(ad[0].cells[[sourceColumnIndex]]).addClass("e-selectedCell");
                            alldaytr && $(ad[0].cells[[currentColumnIndex]]).addClass("e-selectedCell");
                            if (difference > 1) {
                                for (k = 1; k <= difference - 1; k++) {
                                    for (var m = 0; m <= rowcount; m++)
                                        $(oRowCell[m].cells[[currentColumnIndex + k]]).addClass("e-selectedCell");
                                    alldaytr && $(ad[0].cells[[currentColumnIndex + k]]).addClass("e-selectedCell");
                                }
                            }
                            for (j = parseInt(currentRowIndex) ; j <= rowcount; j++)
                                $(oRowCell[j].cells[currentColumnIndex]).addClass("e-selectedCell");
                        }
                        proxy._currentRowIndex = currentRowIndex;
                        proxy._currentColIndex = currentColumnIndex;
                        $(oRowCell[currentRowIndex].cells[currentColumnIndex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    }
                    else { return false; }
                }
                else {
                    if (sourceRowIndex == currentRowIndex && sourceColumnIndex >= parseInt(resmincolindex) && sourceColumnIndex <= parseInt(resmaxcolindex) - 1 && currentColumnIndex != "undefined") {
                        if (currentColumnIndex > sourceColumnIndex) {
                            for (j = sourceColumnIndex ; j <= currentColumnIndex; j++)
                                $(oRowCell[currentRowIndex].cells[j]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                        }
                        else if (currentColumnIndex <= sourceColumnIndex) {
                            for (j = sourceColumnIndex ; j >= currentColumnIndex; j--)
                                $(oRowCell[currentRowIndex].cells[j]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                        }
                    }
                    else { return false; }
                }
            }
            else if ($(currTarget).hasClass('e-alldaycells')) {
                if (sourceColumnIndex >= parseInt(resmincolindex) && sourceColumnIndex <= parseInt(resmaxcolindex) - 1 && currentColumnIndex != "undefined") {
                    if (currentColumnIndex < sourceColumnIndex) {
                        for (k = sourceColumnIndex; k >= currentColumnIndex; k--)
                            $(ad[0].cells[k]).addClass("e-selectedCell");
                    }
                    else if (currentColumnIndex > sourceColumnIndex) {
                        for (k = sourceColumnIndex; k <= currentColumnIndex; k++)
                            $(ad[0].cells[k]).addClass("e-selectedCell");
                    }
                    proxy._currentRowIndex = 0;
                    proxy._currentColIndex = currentColumnIndex;
                    $(ad[0].cells[currentColumnIndex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                }
                else { return false; }
            }
            else if ($(currTarget).hasClass('e-monthcells')) {
                if ($(currTarget).hasClass('e-othermonths')) return false;
                if (sourceColumnIndex >= parseInt(resmincolindex) && sourceColumnIndex <= parseInt(resmaxcolindex) - 1 && currentColumnIndex != "undefined") {
                    if (currentRowIndex == sourceRowIndex) {
                        if (currentColumnIndex < sourceColumnIndex) {
                            for (k = sourceColumnIndex; k >= currentColumnIndex; k--)
                                $(oRowCell[currentRowIndex].cells[k]).addClass("e-selectedCell");
                        }
                        else if (currentColumnIndex > sourceColumnIndex) {
                            for (k = sourceColumnIndex; k <= currentColumnIndex; k++)
                                $(oRowCell[currentRowIndex].cells[k]).addClass("e-selectedCell");
                        }
                        else if (currentColumnIndex == sourceColumnIndex)
                            $(oRowCell[currentRowIndex].cells[currentColumnIndex]).addClass("e-selectedCell");
                    }
                    else if (currentRowIndex > sourceRowIndex) {
                        var difference = (currentRowIndex - sourceRowIndex);
                        for (i = sourceColumnIndex; i < resmaxcolindex; i++)
                            $(oRowCell[sourceRowIndex].cells[i]).addClass("e-selectedCell");
                        if (difference > 1) {
                            for (k = 1; k <= difference - 1; k++) {
                                for (i = resmincolindex ; i < resmaxcolindex; i++)
                                    $(oRowCell[sourceRowIndex + k].cells[i]).addClass("e-selectedCell");
                            }
                        }
                        for (j = resmincolindex; j <= currentColumnIndex; j++)
                            $(oRowCell[currentRowIndex].cells[j]).addClass("e-selectedCell");
                    }
                    else if (currentRowIndex < sourceRowIndex) {
                        var difference = (sourceRowIndex - currentRowIndex);
                        for (i = sourceColumnIndex; i >= resmincolindex; i--)
                            $(oRowCell[sourceRowIndex].cells[i]).addClass("e-selectedCell");
                        if (difference > 1) {
                            for (k = 1; k <= difference - 1; k++) {
                                for (i = resmincolindex; i < resmaxcolindex; i++)
                                    $(oRowCell[sourceRowIndex - k].cells[i]).addClass("e-selectedCell");
                            }
                        }
                        for (j = resmaxcolindex - 1; j >= currentColumnIndex; j--)
                            $(oRowCell[currentRowIndex].cells[j]).addClass("e-selectedCell");
                    }
                    proxy._currentRowIndex = currentRowIndex;
                    proxy._currentColIndex = currentColumnIndex;
                    $(oRowCell[currentRowIndex].cells[currentColumnIndex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                }
                else { return false; }
            }
        },
        _shiftSelection: function (e) {
            if (e.shiftKey == true && e.which == 1 && !$(e.target).hasClass("e-resourceheadercells")) {
                var oE1 = this._focused, proxy = this, currTarget = e.target;
                this.model.showQuickWindow && (this._quickAppointWindow.ejDialog("close") && this._quickAppDetailsWindow.ejDialog("close"));
                this.element.find("e.workcells,e.alldaycells,.e-monthcells").removeClass("e-mousehover");
                this.element.find(".e-workcells,.e-alldaycells,.e-monthcells").removeClass("e-selectedCell");
                this.element.find('.e-selectedAppointment').removeClass("e-selectedAppointment");
                var renderDate = (this.model.orientation == "horizontal" && this.currentView() == "month") ? this.monthDays : this.model.orientation == "vertical" ? this.dateRender : this._dateRender;
                var cellindex = ($(e.target).hasClass("e-workcells") || $(e.target).hasClass("e-alldaycells")) ? $(e.target).index() : 7 - ((parseInt($(e.target).index() / 7) + 1) * 7 - $(e.target).index()) + ($(e.target).parent().index() * 7);
                ((this.model.orientation == "horizontal") && (cellindex = this.currentView() !== "month" ? Math.floor(cellindex / ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot))) : cellindex));
                var curDate = new Date(renderDate[cellindex]);
                if ((curDate >= this.model.minDate) && (curDate <= this.model.maxDate))
                    this._mouseSelection(e, proxy, oE1, currTarget);
            }
        },
        _moveScrollContent: function (oEl, proxy) {
            if (proxy.model.orientation === "horizontal") {
                var leftValue = proxy.element.find(".e-draggableworkarea").scrollLeft();
                if (proxy.model.enableRTL) {
                    if (proxy._browserInfo.name == "mozilla")
                        leftValue = leftValue > 0 ? leftValue : (leftValue * -1);
                    else if (proxy._browserInfo.name == "chrome" || proxy._browserInfo.name == "webkit")
                        leftValue = proxy.element.find(".e-workcells")[0].offsetLeft + proxy.element.find(".e-workcells").width() - proxy.element.find(".e-draggableworkarea").scrollLeft() - proxy.element.find(".e-draggableworkarea").width();
                    else
                        leftValue = Math.abs(leftValue);
                }
                else
                    leftValue = (-leftValue);
                proxy.currentView() != "month" ? $(proxy.element.find(".e-horizontaltimecells").find("table tr")[2]).css("left", leftValue + "px") : proxy.element.find(".e-headerdays").css("left", leftValue + "px");
                if (proxy.currentView() !== "day" && proxy.currentView() !== "month" && !(proxy.currentView() == "customview" && proxy._dateRender.length > 7) && proxy.model.timeScale.enable) {
                    var currentDateIndex = $(proxy.element.find(".e-headercells").find(".e-activeview").parent()).index();
                    var index = Math.floor((Math.abs(leftValue) / (proxy.element.find(".e-workcells").width() + 1)) / ((proxy.model.endHour - proxy.model.startHour) * 2));
                    if (currentDateIndex !== index)
                        proxy.element.find(".e-headercells").children().removeClass("e-activeview");
                    $(proxy.element.find(".e-headercells")[index]).children().addClass("e-activeview");
                }
            }
            else
                if (!$(oEl).hasClass("e-monthcells"))
                    proxy.element.find(".e-scrolltimecells").css("top", (-proxy.element.find('.e-draggableworkarea').scrollTop()) + "px");
        },

        _onScheduleMouseDown: function (e) {
            var _targ = $(e.target);
            var appointdiv = _targ.hasClass("e-appointment,e-alldayappointment,e-monthappointment") ? _targ : _targ.parents(".e-appointment,.e-alldayappointment,.e-monthappointment");
            if (!_targ.hasClass("e-workcells") && !appointdiv.hasClass("e-appointment") && !appointdiv.hasClass("e-alldayappointment") && !appointdiv.hasClass("e-monthappointment") && !_targ.hasClass("e-alldaycells") && !_targ.hasClass("e-monthcells") && !(_targ).parents(".e-scheduledialog").hasClass("e-scheduledialog")) {
                this.model.showQuickWindow && (this._quickAppointWindow.ejDialog("close") && this._quickAppDetailsWindow.ejDialog("close"));
                this.element.find(".e-workcells").removeClass("e-mousehover");
                this._scrollerPosition();
            }
        },

        _onCellMouseOver: function (e) {
            if ($(e.target).hasClass("e-blocktimeappointment") || $(e.target).closest(".e-blocktimeappointment").length > 0) return false;
            if (this.currentView() == "agenda") {
                if (this._mediaQuery == true) return false;
                var element = $(e.currentTarget);
                if (e.type === "mouseover") {
                    this.element.find(".e-mousehover").removeClass("e-mousehover");
                    if (element.hasClass("e-agendacells")) {
                        element.parent().find(".e-timecolumn,.e-eventcolumn").addClass("e-mousehover");
                        element.parent().find(".e-editapp").parent().show();
                    }
                }
                else if (e.type === "mouseout") {
                    if (element.hasClass("e-agendacells")) {
                        element.parent().find(".e-timecolumn,.e-eventcolumn").removeClass("e-mousehover");
                        element.parent().find(".e-editapp").parent().hide();
                    }
                }
            }
            else {
                var element = $(e.currentTarget);
                var index = $(e.target).hasClass("e-workcells") ? $(e.target).index() : $(e.target).hasClass("e-alldaycells") ? $(e.target).index() : 7 - ((parseInt($(e.target).index() / 7) + 1) * 7 - $(e.target).index()) + ($(e.target).parent().index() * 7);
                if (this.model.orientation == "horizontal") {
                    index = this.currentView() !== "month" ? Math.floor(index / ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot))) : index;
                }
                var renderDate = (this.model.orientation == "horizontal" && this.currentView() == "month") ? this.monthDays : this.model.orientation == "vertical" ? this.dateRender : this._dateRender;
                var curDate = new Date(renderDate[index]);
                this._slotByElement($(e.target), "cellHover");
                var event = { cellIndex: index, startTime: new Date(this.cellHoverStartTime), endTime: new Date(this.cellHoverEndTime), target: e, resources: (!ej.isNullOrUndefined(this.model.cellHover) && (this._tempResource.length != 0)) ? this._getResourceValue(element, index) : null };
                if ((curDate >= this.model.minDate) && (curDate <= this.model.maxDate)) {
                    if (e.type === "mouseover") {
                        if (this._trigger("cellHover", event)) return false;
                        this.element.find(".e-mousehover").removeClass("e-mousehover");
                        if ((element.hasClass("e-workcells") || element.hasClass("e-monthcells")) && !element.hasClass("e-resourceheadercells"))
                            element.addClass("e-mousehover");
                    }
                    else if (e.type === "mouseout") {
                        if (element.hasClass("e-workcells") || element.hasClass("e-monthcells"))
                            element.removeClass("e-mousehover");
                    }
                } else
                    return false;
            }
        },

        _getAppDetails: function (e) {
            var _target = !ej.isNullOrUndefined(e.target) ? $(e.target) : $(e);
            var appoint = _target.hasClass("e-appointment") || _target.hasClass("e-monthappointment") || _target.hasClass("e-alldayappointment") || _target.hasClass("e-agendaappointment") ? _target : _target.parents(".e-appointment,.e-alldayappointment,.e-monthappointment,.e-agendaappointment");
            if (this.currentView() == "agenda" && _target.hasClass("e-eventcolumn"))
                appoint = _target.find(".e-agendaappointment");
            appId = appoint.attr('guid');
            if (ej.isNullOrUndefined(appId)) return false;
            var tempApp = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, appId));
            if (!tempApp[0][this._appointmentSettings["recurrence"]]) {
                var applist = new ej.DataManager(this._currentAppointmentData).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, appId))[0];
            }
            else {
                var templist = $.extend(true, [], tempApp);
                templist[0][this._appointmentSettings["endTime"]] = templist[templist.length - 1][this._appointmentSettings["endTime"]];
                var applist = (tempApp[0][this._appointmentSettings["recurrence"]] && (tempApp[0][this._appointmentSettings["recurrenceRule"]].toString().indexOf("RECUREDITID") == 1)) ? this._getAppointmentByParentId(appId) : templist[0];
            }
            return applist;
        },

        _onAppointMouseOver: function (e) {
            if (!this.model.readOnly) {
                if (!ej.isNullOrUndefined(this.model.appointmentHover)) {
                    var data = { appointment: this._getAppDetails(e) };
                    if (this._trigger("appointmentHover", data))
                        return false;
                }
                if (this.currentView() == "agenda") {
                    if (this._mediaQuery == true) return false;
                    var element = $(e.currentTarget);
                    if (e.type === "mouseover") {
                        this.element.find(".e-mousehover").removeClass("e-mousehover");
                        if (element.hasClass("e-agendaappointment")) {
                            element.addClass("e-mousehover");
                            element.find(".e-editapp").parent().show();
                        }
                    }
                    else if (e.type === "mouseout") {
                        if (element.hasClass("e-agendaappointment")) {
                            element.removeClass("e-mousehover");
                            element.find(".e-editapp").parent().hide();
                        }
                    }
                }
                else {
                    var appointdiv = $(e.target).hasClass("e-appointment,e-alldayappointment,e-monthappointment") ? $(e.target) : $(e.target).parents(".e-appointment,.e-alldayappointment,.e-monthappointment");
                    if (appointdiv.hasClass("e-appointment") && this.model.orientation == "vertical") {
                        if (e.type === "mouseover") {
                            if (this.model.enableAppointmentResize) {
                                appointdiv.find(".e-bottomhandle,.e-tophandle").addClass("e-icon e-nsexpand");
                                appointdiv.find(".e-bottomhandle").addClass("e-appointresizer-bottom");
                                appointdiv.find(".e-tophandle").addClass("e-appointresizer-top");
                            }
                            appointdiv.find(".e-schedulemouseclose").css("display", "block");
                        }
                        else if (e.type === "mouseout") {
                            if (this.model.enableAppointmentResize) {
                                appointdiv.find(".e-bottomhandle,.e-tophandle").removeClass("e-icon e-nsexpand");
                            }
                            appointdiv.find(".e-schedulemouseclose").css("display", "none");
                        }

                    }
                    else if (((appointdiv.hasClass("e-alldayappointment") || appointdiv.hasClass("e-monthappointment")) && this.model.orientation == "vertical") || (this.model.orientation == "horizontal")) {
                        if (e.type === "mouseover") {
                            if (this.model.enableAppointmentResize) {
                                appointdiv.find(".e-lefthandle,.e-righthandle").addClass("e-icon e-ewexpand");
                                appointdiv.find(".e-lefthandle").addClass("e-appointresizer-left");
                                appointdiv.find(".e-righthandle").addClass("e-appointresizer-right");
                            }
                            appointdiv.find(".e-schedulemouseclose").css("display", "block");
                        }
                        else if (e.type === "mouseout") {
                            if (this.model.enableAppointmentResize) {
                                appointdiv.find(".e-lefthandle,.e-righthandle").removeClass("e-icon e-ewexpand");
                            }
                            appointdiv.find(".e-schedulemouseclose").css("display", "none");
                        }
                    }
                }
            }
        },

        _quickWindowPosition: function (x, y, targetEle, quickWindow) {
            var quickWindowTable = quickWindow.find(".e-tableAppoint");
            var wrapperWidth = $("#" + quickWindow.prop("id") + "_wrapper").width();
            var left = this.element.offset().left, right = this.element.offset().left + this.element.width(), top = this.element.offset().top, bottom = this.element.offset().top + this.element.height();
            var widthDiff = targetEle.width() / 2;
            var transform = "rotate(0deg)", topposflag = true, leftpos = "40%", quickWindowTop = "4px";
            if (x > left && x + wrapperWidth > right && y > top) {
                x = right - wrapperWidth - 5;
                leftpos = targetEle.offset().left - x + widthDiff;
            }
            else if (x < left && x + wrapperWidth < right && y > top) {
                x = left + 5;
                leftpos = targetEle.offset().left - x + widthDiff;
            }
            else if (y < top) {
                topposflag = false, transform = "rotate(180deg)", quickWindowTop = "-10px";
                if (x < left) {
                    x = left + 5;
                    leftpos = targetEle.offset().left - x + widthDiff;
                }
                else if ((x + wrapperWidth) > right) {
                    x = right - wrapperWidth - 5;
                    leftpos = targetEle.offset().left - x + widthDiff;
                }
                var heightDiff = (quickWindow.prop("id") == this._id + "AppDetailsWindow") ? targetEle.height() : (this.model.orientation == "horizontal" ? targetEle.height() / 2 : targetEle.height() - 4);
                y = targetEle.offset().top + 10 + heightDiff;
                if (y < top || y > bottom - $("#" + quickWindow.prop("id") + "_wrapper").height()) {
                    y = top + 4; topposflag = true, transform = "rotate(0deg)", quickWindowTop = "4px";
                }
            }
            topposflag ? quickWindowTable.removeClass("e-tablePosition") : quickWindowTable.addClass("e-tablePosition");
            quickWindow.find(".e-quickarrow").css("transform", transform).css("top", topposflag ? quickWindowTable.outerHeight() + 1 : 0).css("left", leftpos);
            quickWindow.css("top", quickWindowTop);
            return { X: x, Y: y };
        },

        _scrollerPosition: function () {
            if (this.currentView() != "agenda" && (this.element.find(".e-vscroll").length > 0 || this.element.find(".e-hscroll").length > 0)) {
                var scrolObj = this.element.find("#" + this._id + "_scroller").ejScroller("instance");
                if (this.model.orientation == "vertical") {
                    if (scrolObj.isVScroll()) {
                        var scrollValue = this.element.find(".e-draggableworkarea").offset().top - this.element.find(".e-workcellstab").offset().top;
                        this.element.find("#" + this._id + "_scroller").ejScroller({ scrollTop: scrollValue });
                    }
                    if (scrolObj.isHScroll()) {
                        var scrollValue = this.element.find(".e-draggableworkarea").offset().left - this.element.find(".e-workcellstab").offset().left;
                        this.element.find("#" + this._id + "_scroller").ejScroller({ scrollLeft: Math.abs(scrollValue) });
                    }
                }
                else {
                    if (this._grouping.length > 0) {
                        if (scrolObj.isVScroll()) {
                            if (this.element.find(".e-resourceheadertable").offset().top != this.element.find(".e-workcellstab").offset().top) {
                                var scrollValue = this.element.find(".e-draggableworkarea").offset().top - this.element.find(".e-workcellstab").offset().top;
                                this.element.find("#" + this._id + "_scroller").ejScroller({ scrollTop: scrollValue });
                            }
                        }
                        if (scrolObj.isHScroll()) {
                            var leftValue = (this.currentView() == "month" || this._isCustomMonthView()) ? this.element.find(".e-headerdays").offset().left : this.element.find(".e-horizontaltabletimecell").closest("tr").offset().left;
                            if (this.element.find(".e-workcellstab").offset().left != leftValue) {
                                var scrollValue = this.element.find(".e-draggableworkarea").offset().left - this.element.find(".e-workcellstab").offset().left;
                                this.element.find("#" + this._id + "_scroller").ejScroller({ scrollLeft: Math.abs(scrollValue) });
                            }
                        }
                    }
                }
            }
        },

        _cellSelection: function (e) {
            if (e.shiftKey)
                return false;
            !ej.isNullOrUndefined(this.element.data("ejTooltip")) && this.element.ejTooltip('hide');
            this.element.find("e.workcells,e.alldaycells,.e-monthcells,.e-agendacells").removeClass("e-mousehover");
            this.element.find('.e-selectedAppointment').removeClass("e-selectedAppointment");
            var _target = !ej.isNullOrUndefined(e.target) ? $(e.target) : $(e);
            if (_target.hasClass("e-blocktimeappointment") || _target.closest(".e-blocktimeappointment").length > 0)
                return false;
            if (this.currentView() != "agenda" && !_target.hasClass("e-schedulemouseclose") && (!ej.isNullOrUndefined(this.model.workCellsTemplateId) || !ej.isNullOrUndefined(this.model.allDayCellsTemplateId))) {
                _target = (_target.closest(".e-appointment,.e-monthappointment").length > 0) ? _target.closest(".e-appointment,.e-monthappointment") : (_target.hasClass("e-apptime") || _target.hasClass("e-apptext") || _target.hasClass("e-appointinnertext") || _target.hasClass("e-schedulemouseclose") || _target.hasClass("e-monthheader")) ? $(e.target) : _target.closest(".e-workcells, .e-alldaycells, .e-monthcells");
            }
            _target.hasClass("e-appointwrapper") || _target.hasClass("e-textwrapper") && (_target = $(_target).parent());
            if (!ej.isNullOrUndefined(e.type) && e.type == "beforeOpen") {
                var selectedCells = this.element.find("td.e-selectedCell");
                if ((selectedCells.length > 0) && !(_target.hasClass("e-selectedCell")))
                    this.element.find(".e-workcells,.e-alldaycells,.e-monthcells,.e-agendacells").removeClass("e-selectedCell");
            }
            else
                this.element.find(".e-workcells,.e-alldaycells,.e-monthcells,.e-agendacells").removeClass("e-selectedCell");
            if (this.currentView() != "agenda") {
                if ((_target.hasClass("e-workcells") || _target.hasClass("e-alldaycells") || _target.hasClass("e-monthcells")) && !_target.hasClass("e-resourceheadercells")) {
                    this.model.showQuickWindow && this._quickAppDetailsWindow.ejDialog("close");
                    this._slotByElement(_target, "cellClick");
                    if ((this.model.minDate > this.curDate || this.model.maxDate < this.curDate)) { return false; }
                    var _quickString = this._dayFullNames[new Date(this.curDate).getDay()] + ", " + ej.format(new Date(this.curDate), "MMMM", this.model.locale) + " " + new Date(this.curDate).getDate() + ", " + ej.format(new Date(this.cur_StartTime), this._timeMode == "12" ? this._pattern.t : "HH:mm", this.model.locale) + " - " + ej.format(new Date(this.cur_EndTime), this._timeMode == "12" ? this._pattern.t : "HH:mm", this.model.locale);
                    var event = { cellIndex: this._cellIndex, startTime: new Date(this.cur_StartTime), endTime: this.cur_EndTime, target: e, resources: ((this.model.cellClick != null || !ej.isNullOrUndefined(this.model.serverEvents) && (this.model.serverEvents.indexOf("cellClick") != -1)) && (this._tempResource.length != 0)) ? this._getResourceValue(_target) : null, quickString: _quickString };
                    if (this._trigger("cellClick", event)) return false;
                    _target.addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    this._scrollerPosition();
                    if (this.model.showQuickWindow) {
                        this._quickAppointWindow.find("#" + this._id + "_quickAppwindow").css("display", "block");
                        this._quickAppointWindow.find('.e-quickstartend').html(event.quickString);
                        var topElmt = $(e).hasClass("e-workcells") || $(e).hasClass("e-alldaycells") || $(e).hasClass("e-monthcells") ? $(e) : $(e.target);
                        (e.type != "beforeOpen" && !this.model.readOnly) ? this._quickAppointWindow.ejDialog("open") : "";
                        this._quickAppointWindow.find('.subject').val("");
                        var x = topElmt.offset().left - ((this._quickAppointWindow.width() - topElmt.width()) / 2) + 10;
                        var y = topElmt.offset().top - this._quickAppointWindow.height() - 10;
                        var xy = this._quickWindowPosition(x, y, topElmt, this._quickAppointWindow);
                        this._quickAppointWindow.ejDialog({ position: { X: xy["X"], Y: xy["Y"] } });
                        if (ej.scheduleFeatures.resources && (this._tempResource.length != 0))
                            this._getResourceDetails(_target, this._cellIndex);
                    }
                    this._focused = $(":focus");
                    this.model.showQuickWindow && this._quickAppointWindow.find('.subject').focus();
                    this._cellClick = true;
                    this._appointmentAddWindow.ejDialog({ title: this._getLocalizedLabels("CreateAppointmentTitle") });
                }
                else {
                    if (!_target.hasClass("e-resourceheadercells") && !_target.hasClass("e-appsoverflow") && !_target.hasClass("e-monthheader") && !_target.hasClass("e-categorybar")) {
                        this._cellClick = false;
                        this._quickAppDetailsWindow && this._quickAppDetailsWindow.find("" + "#" + this._id + "_quickAppDetailswindow").css("display", "block");
                        this.model.showQuickWindow && this._quickAppointWindow.ejDialog("close");
                        var appoint = _target.hasClass("e-appointment") || _target.hasClass("e-monthappointment") || _target.hasClass("e-alldayappointment") ? _target : _target.parents(".e-appointment,.e-alldayappointment,.e-monthappointment");
                        this._appUid = appoint.attr('guid');
                        if (_target.hasClass("e-schedulemouseclose")) return false;
                        this._processed = this._sortAppById(this._processed);
                        var splitObj = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid));
                        for (i = 0; i < splitObj.length; i++) {
                            var templist = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, splitObj[i]["Guid"]));
                            break;
                        }
                        for (i = 0; i < templist.length; i++) {
                            var eleFind = this.element.find('[guid=' + templist[i]["Guid"] + ']');
                            eleFind.addClass("e-selectedAppointment");
                        }
                        if (this._mediaQuery)
                            this._mAppId = this._appUid;
                        var templist1 = this._sortAppById(templist);
                        var temp = templist1[0][this._appointmentSettings["recurrence"]] ? templist1[0] : this._getAppointmentByParentId(this._appUid);
                        var diffTime = new Date().getTime() - (temp[this._appointmentSettings["startTime"]].getTime());
                        var diffMinute = 60 * 1000;
                        var diffHour = 60 * diffMinute;
                        var diffDays = 24 * diffHour;
                        var result = Math.abs(new Date() - temp[this._appointmentSettings["startTime"]]);
                        var h = Math.floor(result / 1000 / 60 / 60); h = (h <= 9 ? '0' + h : h);
                        var m = new Date(result).getUTCMinutes(); m = (m <= 9 ? '0' + m : m);
                        var dueIn = Math.ceil(diffTime / diffMinute - 1) < 0 && h < 24 ? this._getLocalizedLabels("EventBeginsin") + " " + h + " " + this._getLocalizedLabels("Hours") + " " + m + " " + this._getLocalizedLabels("Minutes") : Math.ceil(diffTime / diffMinute - 1) < 0 && h >= 24 ? this._getLocalizedLabels("EventBeginsin") + " " + Math.abs(Math.ceil(diffTime / diffDays)) + " " + this._getLocalizedLabels("Days") : this._getLocalizedLabels("Overdue");
                        var data = { appointment: templist[0] };
                        if (this._trigger("appointmentClick", data)) {
                            $(".e-selectedAppointment").css({ 'border': "none" });
                            return false;
                        }
                        if (this.model.showQuickWindow) {
                            this._quickAppDetailsWindow && this._quickAppDetailsWindow.find('.e-quicksubject').html(temp[this._appointmentSettings["subject"]]).attr("title", temp[this._appointmentSettings["subject"]]);
                            var startTimeDisp = this._timeMode == "12" ? ej.format(templist[0][this._appointmentSettings["startTime"]], this._pattern.t, this.model.locale) : ej.format(templist[0][this._appointmentSettings["startTime"]], "HH:mm", this.model.locale);
                            var endTimeDisp = this._timeMode == "12" ? ej.format(templist[templist.length - 1][this._appointmentSettings["endTime"]], this._pattern.t, this.model.locale) : ej.format(templist[templist.length - 1][this._appointmentSettings["endTime"]], "HH:mm", this.model.locale);
                            this._quickAppDetailsWindow.find('.e-rightfields').html(dueIn);
                            var days = Math.ceil((templist[0][this._appointmentSettings["endTime"]] - templist[0][this._appointmentSettings["startTime"]]) / 3600000) / 24;
                            if ((templist.length > 1) || (this.model.orientation == "horizontal" && this.currentView() == "month" && days > 1) || (templist[0][this._appointmentSettings["startTime"]].getDay() != templist[templist.length - 1][this._appointmentSettings["endTime"]].getDay()))
                                var dateShow = this._dayFullNames[templist[0][this._appointmentSettings["startTime"]].getDay()] + ", " + ej.format(templist[0][this._appointmentSettings["startTime"]], "MMMM", this.model.locale) + " " + templist[0][this._appointmentSettings["startTime"]].getDate() + " - " + startTimeDisp + " " + "to" + " " + this._dayFullNames[templist[templist.length - 1][this._appointmentSettings["endTime"]].getDay()] + ", " + ej.format(templist[templist.length - 1][this._appointmentSettings["endTime"]], "MMMM", this.model.locale) + " " + templist[templist.length - 1][this._appointmentSettings["endTime"]].getDate() + " - " + endTimeDisp;
                            else
                                var dateShow = this._dayFullNames[templist[0][this._appointmentSettings["startTime"]].getDay()] + ", " + ej.format(templist[0][this._appointmentSettings["startTime"]], "MMMM", this.model.locale) + " " + templist[0][this._appointmentSettings["startTime"]].getDate() + ", " + startTimeDisp + " " + "-" + " " + endTimeDisp;
                            this._quickAppDetailsWindow.find('.e-quickstartendtime').html(dateShow);
                            if (temp[this._appointmentSettings["recurrence"]] == 1)
                                this._quickAppDetailsWindow.find('.e-editseries').removeClass("e-disable");
                            else
                                this._quickAppDetailsWindow.find('.e-editseries').addClass("e-disable");
                            (e.type != "beforeOpen") ? this._quickAppDetailsWindow.ejDialog("open") : "";
                            (this.model.readOnly) ? this._quickAppDetailsWindow.find(".e-scheduledelete").addClass("e-disable") : this._quickAppDetailsWindow.find(".e-scheduledelete").removeClass("e-disable");
                            if ($(appoint).width() > this.element.width())
                                var left = ($(appoint).offset().left > this.element.offset().left) ? $(appoint).offset().left : (this.element.find('.e-draggableworkarea').scrollLeft() > $(appoint).width()) ? this.element.offset().left : this.element.width() / 2 - 4;
                            else
                                var left = $(appoint).offset().left - ((this._quickAppDetailsWindow.width() - $(appoint).width()) / 2 - 4);
                            var top = $(appoint).offset().top - this._quickAppDetailsWindow.height() - 10;
                            var xy = this._quickWindowPosition(left, top, appoint, this._quickAppDetailsWindow);
                            this._quickAppDetailsWindow.ejDialog({ position: { X: xy["X"], Y: xy["Y"] } });
                            this._quickAppDetailsWindow.focus();
                        }
                        this._appointmentAddWindow.ejDialog({ title: this._getLocalizedLabels("Editevent") });
                    }
                }
                if (!$(_target).hasClass("e-monthcells"))
                    this.element.find(".e-scrolltimecells").css("top", (-this.element.find('.e-draggableworkarea').scrollTop()) + "px");
            } else {
                this._cellIndex = 0;
                this.cur_StartTime = new Date(new Date(this.currentDate()).setHours(0, 0));
                this.cur_EndTime = new Date(new Date(this.currentDate()).setHours(23, 59));
                $(_target).parentsUntil('.e-agendacellstab tbody').find(".e-eventcolumn,.e-timecolumn").addClass("e-selectedCell").attr("tabIndex", 0).focus();
                var appoint = _target.hasClass("e-agendaappointment") ? _target : this.element.find(".e-selectedCell").parent().find(".e-agendaappointment");
                this._appUid = appoint.attr('guid');
                if (this._mediaQuery)
                    this._mAppId = this._appUid;
                if (_target.hasClass("e-editapp") || _target.hasClass("e-deleteapp")) return false;
                var appoint = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid));
                if (this._trigger("appointmentClick", { appointment: appoint[0] })) {
                    return false;
                }
                this._cellClick = false;
            }
        },

        _getDateByElement: function (_target) {
            if (this.model.timeScale.enable)
                this._cellIndex = _target.hasClass("e-workcells") ? _target.index() : _target.hasClass("e-alldaycells") ? _target.index() : this._isCustomMonthView() && this._oneWeek ? _target.index() : 7 - ((parseInt(_target.index() / 7) + 1) * 7 - _target.index()) + (_target.parent().index() * 7);
            else
                this._cellIndex = this.model.orientation == "vertical" && this.currentView() == "month" || (this.currentView() == "customview" && this._dateRender.length >= 7) ? 7 - ((parseInt(_target.index() / 7) + 1) * 7 - _target.index()) + (_target.parent().index() * 7) : _target.index();
            if (this.model.orientation == "horizontal") {
                this._cellIndex = this.model.timeScale.enable ? this.currentView() !== "month" && !(this._isCustomMonthView()) ? Math.floor(this._cellIndex / ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot))) : this._cellIndex : _target.index();
                this._workCellIndex = _target.parent().index();
            }
            var renderDate = (this.model.orientation == "horizontal" && this.currentView() == "month") ? this.monthDays : (this.model.orientation == "vertical" || this.currentView() == "customview" && this._dateRender.length <= 7) ? (this._resWorkWeek) ? this._dateRender : this.dateRender : this._dateRender;
            renderDate = this.model.orientation == "horizontal" && this.currentView() == "customview" && this._dateRender.length <= 7 ? this._dateRender : renderDate;
            this.curDate = new Date(renderDate[this._cellIndex]);
        },

        _slotByElement: function (_target, type) {
            this._getDateByElement(_target);
            var curDate = this.curDate;
            if (_target.hasClass("e-workcells") && (this.model.timeScale.enable) && this.currentView() !== "month" && !(this._isCustomMonthView())) {
                this._calcCurrentTime(curDate, _target, type);
                this._appointmentAddWindow.find(".allday").ejCheckBox({ checked: false });
            }
            else {
                if (type == "cellHover") {
                    this.cellHoverStartTime = new Date(new Date(curDate).setHours(0, 0, 0));
                    this.cellHoverEndTime = new Date(new Date(curDate).setHours(23, 59, 59));
                }
                else {
                    this.cur_StartTime = new Date(new Date(curDate).setHours(0, 0, 0));
                    this.cur_EndTime = new Date(new Date(curDate).setHours(23, 59, 59));
                    this._appointmentAddWindow.find(".allday").ejCheckBox({ checked: true });
                }
            }
        },
        _calcCurrentTime: function (curDate, _target, type) {
            var time = this.model.orientation == "vertical" ? (this.model.startHour * 60) + _target.parent().index() * (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount) : ((this.model.startHour * 60) + _target.index() * (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) - (((this.model.endHour - this.model.startHour) * (this.model.timeScale.minorSlotCount)) * this._cellIndex) * (60 / this.model.timeScale.majorSlot) * (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount);
            time = time * 60 * 1000;
            this._timeScaleMin = (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount);
            this._timeScaleMin = this._timeScaleMin * 60 * 1000;
            if (type == "cellHover") {
                this.cellHoverStartTime = new Date(curDate).setMilliseconds(time);
                var min = (parseInt(new Date(this.cellHoverStartTime).getHours()) == new Date(new Date(curDate).setMinutes((this._timeScaleMin * this.model.timeScale.minorSlotCount * (this.model.endHour - this.model.startHour)) - this.model.timeScale.minorSlotCount)).getHours() && parseInt(new Date(this.cellHoverStartTime).getMinutes()) == new Date(new Date(curDate).setMinutes((this._timeScaleMin * this.model.timeScale.minorSlotCount * (this.model.endHour - this.model.startHour)) - this.model.timeScale.minorSlotCount)).getMinutes()) ? time + (this._timeScaleMin - 1) : new Date(this.cellHoverStartTime).getMilliseconds() + this._timeScaleMin;
                this.cellHoverEndTime = new Date(new Date(this.cellHoverStartTime).setMilliseconds(min));
                this.cellHoverEndTime = (new Date(this.cellHoverStartTime).setHours(0, 0, 0, 0) < new Date(this.cellHoverEndTime).setHours(0, 0, 0, 0)) ? new Date(new Date(this.cellHoverStartTime).setHours(23, 59, 59)) : this.cellHoverEndTime;
            }
            else {
                this.cur_StartTime = new Date(curDate).setMilliseconds(time);
                var min = (parseInt(new Date(this.cur_StartTime).getHours()) == new Date(new Date(curDate).setMinutes((this._timeScaleMin * this.model.timeScale.minorSlotCount * (this.model.endHour - this.model.startHour)) - this.model.timeScale.minorSlotCount)).getHours() && parseInt(new Date(this.cur_StartTime).getMinutes()) == new Date(new Date(curDate).setMinutes((this._timeScaleMin * this.model.timeScale.minorSlotCount * (this.model.endHour - this.model.startHour)) - this.model.timeScale.minorSlotCount)).getMinutes()) ? time + (this._timeScaleMin - 1) : new Date(this.cur_StartTime).getMilliseconds() + this._timeScaleMin;
                this.cur_EndTime = new Date(new Date(this.cur_StartTime).setMilliseconds(min));
                this.cur_EndTime = (new Date(this.cur_StartTime).setHours(0, 0, 0, 0) < new Date(this.cur_EndTime).setHours(0, 0, 0, 0)) ? new Date(new Date(this.cur_StartTime).setHours(23, 59, 59)) : this.cur_EndTime;
            }
        },
        _checkReminders: function (args) {
            this._todayAppointments = [];
            for (var i = 0; i < this._processed.length; i++) {
                if ((new Date(new Date(this._processed[i][this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() >= new Date(new Date().setHours(0, 0, 0, 0)).getTime())) {
                    this._todayAppointments.push(this._processed[i]);
                }
            }
            var proxy = this;
            jQuery.each(this._todayAppointments, function (val, i) {
                var reminderValue = proxy.model.reminderSettings.alertBefore;
                var startTime = i[proxy._appointmentSettings["startTime"]];
                if (reminderValue != -1 && reminderValue != null) {
                    var currTime = new Date().getTime();
                    var difference = (currTime - new Date(startTime).getTime()) / (1000 * 60);
                    if (Math.round(difference) == (reminderValue * -1))
                        proxy._trigger("reminder", { reminderAppointment: i });
                }
            });
        },

        _showContextMenu: function (flag) {
            var gotoFlag = false, categorizeFlag = false, cellCollection = this.model.contextMenuSettings.menuItems.cells;
            if (flag) {
                this._contextMenu = ej.buildTag("ul#" + this._id + "contextMenu");
                this.element.append(this._contextMenu);
                this._contextMenu.ejMenu({
                    fields: { id: "id", text: "text", parentId: "parentId" },
                    menuType: ej.MenuType.ContextMenu,
                    openOnClick: false,
                    contextMenuTarget: "#" + this._id,
                    width: "auto",
                    click: $.proxy(this._onMenuSelect, this),
                    beforeOpen: $.proxy(this._beforeopen, this)
                });
                if (this.model.categorizeSettings.enable && this.model.contextMenuSettings.menuItems.appointment) {
                    var menuItems = this.model.contextMenuSettings.menuItems.appointment;
                    var dataLength = this.model.categorizeSettings.dataSource.length;
                    for (var i = 0; i < menuItems.length; i++) {
                        if (menuItems[i].id == 'categorize') {
                            var menuId = i;
                            categorizeFlag = true;
                            break;
                        }
                    }
                    if (categorizeFlag) {
                        var deletedItems = new ej.DataManager(this.model.contextMenuSettings.menuItems.appointment).executeLocal(new ej.Query().where("parentId", ej.FilterOperators.equal, "categorize"));
                        new ej.DataManager(this.model.contextMenuSettings.menuItems.appointment).saveChanges({ added: [], changed: [], deleted: deletedItems }, "parentId");
                        for (var i = 0; i < dataLength; i++) {
                            var dataSet = this.model.categorizeSettings;
                            this.model.contextMenuSettings.menuItems.appointment.push({ text: dataSet.dataSource[i][dataSet.text], id: "categorize_" + dataSet.dataSource[i][dataSet.id], fontColor: dataSet.dataSource[i][dataSet.fontColor], color: dataSet.dataSource[i][dataSet.color], parentId: this.model.contextMenuSettings.menuItems.appointment[menuId].id.toString() });
                        }
                    }
                }
                if (this._gotoDate) {
                    if (this.model.contextMenuSettings.enable) {
                        for (var id in cellCollection) {
                            if (cellCollection[id].id == "gotodate") {
                                gotoFlag = true;
                                break;
                            }
                        }
                        if (gotoFlag) {
                            this._renderGotoWindow();
                            this._gotoDate = false;
                        }
                    }
                }
            }
        },

        _beforeopen: function (args) {
            if (this.model.contextMenuSettings.enable) {
                $(document).off(ej.eventType.mouseMove);
                var targetClass = $(args.target), appFlag, appointment = null, event;
                var tempargs = ($(targetClass).parents(".e-draggableworkarea tr").length > 0 && $(targetClass).parentsUntil(".e-draggableworkarea tr").is(".e-agendaappointment,.e-eventcolumn,.e-timecolumn")) || $(targetClass).is(".e-agendaappointment,.e-eventcolumn,.e-timecolumn");
                if (!targetClass.hasClass("e-appointment") && !targetClass.hasClass("e-workcells") && !targetClass.hasClass("e-alldaycells") && !targetClass.hasClass("e-monthcells") && !ej.isNullOrUndefined(this.model.appointmentTemplateId)) {
                    targetClass = $(args.target).offsetParent();
                }
                args.cancel = (targetClass.hasClass("e-alldayappointment") || targetClass.hasClass("e-monthappointment") || targetClass.hasClass("e-appointment") || targetClass.hasClass("e-workcells") || targetClass.hasClass("e-alldaycells") || targetClass.hasClass("e-appointinnertext") || targetClass.hasClass("e-monthcells") || targetClass.hasClass("e-apptime") || targetClass.hasClass("e-apptext") || tempargs) ? false : true;
                if (args.cancel == true) {
                    var obj = this._contextMenu.data("ejMenu");
                    obj.hide();
                    return false;
                }
                if (this.currentView() == "agenda" && tempargs) {
                    args = $(targetClass).hasClass("e-agendaappointment") ? args : $(targetClass).parents(".e-draggableworkarea tr").find(".e-agendaappointment");
                }
                this._cellSelection(args);
                if (targetClass.hasClass("e-workcells") || targetClass.hasClass("e-alldaycells") || targetClass.hasClass("e-monthcells")) {
                    event = { currentDate: this.curDate, cellIndex: this._cellIndex, events: args, resources: (!ej.isNullOrUndefined(this.model.beforeContextMenuOpen) && (this._tempResource.length != 0)) ? this._getResourceValue(targetClass, this._cellIndex) : null };
                }
                if (targetClass.hasClass("e-alldayappointment") || targetClass.hasClass("e-monthappointment") || targetClass.hasClass("e-appointinnertext") || targetClass.hasClass("e-apptime") || targetClass.hasClass("e-apptext") || targetClass.hasClass("e-appointment")) {
                    appointment = this._getAppDetails(args);
                    event = { appointment: appointment, events: args };
                }
                if (this.currentView() == "agenda") {
                    appointment = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid))[0];
                    event = { appointment: appointment, events: args };
                }
                this._baseTarget = targetClass;
                if (this._trigger("beforeContextMenuOpen", event)) return false;
                var menuObj = this._contextMenu.data("ejMenu");
                appFlag = (targetClass.hasClass("e-alldayappointment") || targetClass.hasClass("e-monthappointment") || targetClass.hasClass("e-appointment") || targetClass.hasClass("e-appointinnertext") || targetClass.hasClass("e-apptime") || targetClass.hasClass("e-apptext") || tempargs) ? false : true;
                (appFlag) ? menuObj.option("fields.dataSource", this.model.contextMenuSettings.menuItems.cells) : menuObj.option("fields.dataSource", this.model.contextMenuSettings.menuItems.appointment);
                if (this.model.readOnly) {
                    menuObj.disableItemByID("new");
                    menuObj.disableItemByID("recurrence");
                    menuObj.disableItemByID("delete");
                    menuObj.disableItemByID("categorize");
                }
                else {
                    menuObj.enableItemByID("new");
                    menuObj.enableItemByID("recurrence");
                    menuObj.enableItemByID("delete");
                    menuObj.enableItemByID("categorize");
                }
                var tds = this.element.find('td.e-selectedCell');
                if (tds.length > 1 && this.currentView() != "agenda")
                    this._multipleCellAppointCreation(args);
                this._target = args;
                if (this.model.showQuickWindow) {
                    this._quickAppointWindow.ejDialog("close");
                    this._quickAppDetailsWindow.ejDialog("close");
                }
                if (this.model.categorizeSettings.enable && appFlag == false) {
                    var findDiv = this._contextMenu.find('li#categorize').find('li').children();
                    if (findDiv.find('div').length == 0) {
                        for (var i = 0; i < this.model.categorizeSettings.dataSource.length; i++) {
                            this._contextMenu.find('li#categorize').find('li#categorize_' + this.model.categorizeSettings.dataSource[i][this.model.categorizeSettings["id"]]).children().append('<div><div style="border: 1px solid black;height: 12px;margin-left: 2px;margin-top: 2px;width: 12px;background-color:' + this.model.categorizeSettings.dataSource[i][this.model.categorizeSettings["color"]] + '"></div></div>');
                        }
                    }
                    for (var i = 1; i <= this.model.categorizeSettings.dataSource.length; i++) {
                        if (this._contextMenu.find('li#categorize').find('li#categorize_' + i).children().find('div:first-child.e-categorizeMenuSelected'))
                            this._contextMenu.find('li#categorize').find('li#categorize_' + i).children().find('div:first-child').removeClass('e-categorizeMenuSelected');
                    }
                    var query = new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid);
                    var addItem = ej.DataManager(this._processed).executeLocal(query);
                    if (addItem[0][this._appointmentSettings["categorize"]]) {
                        var categorizeItems = addItem[0][this._appointmentSettings["categorize"]].split(',');
                        if (this.model.categorizeSettings.allowMultiple) {
                            if (categorizeItems[0].length > 0) {
                                for (var i = 0; i < categorizeItems.length; i++) {
                                    this._contextMenu.find('li#categorize').find('li#categorize_' + categorizeItems[i]).children().find('div:first-child').addClass('e-categorizeMenuSelected');
                                }
                            }
                        }
                        else {
                            if (categorizeItems[0].length > 0) {
                                var lastValue = categorizeItems.length - 1;
                                this._contextMenu.find('li#categorize').find('li#categorize_' + categorizeItems[lastValue]).children().find('div:first-child').addClass('e-categorizeMenuSelected');
                            }
                        }
                    }
                }
                else {
                    if (this._contextMenu.find('li#categorize'))
                        this._contextMenu.find('li#categorize').css("display", "none");
                }

            }
            else {
                var obj = this._contextMenu.data("ejMenu");
                obj.hide();
                return false;
            }
        },

        _onMenuSelect: function (args) {
            var id = args.events.ID.split("_"), parentData = "", menuApp;
            var target = this._baseTarget;
            var proxy = this;
            if ($(target).is(".e-appointment,.e-alldayappointment,.e-monthappointment,.e-agendaappointment") || target.parents(".e-appointment").hasClass("e-appointment") || target.parents(".e-monthappointment").hasClass("e-monthappointment") || target.parents(".e-alldayappointment").hasClass("e-alldayappointment") || this.currentView() == "agenda" && this.element.find(".e-selectedCell").parent().find(".e-agendaappointment")) {
                var query = new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid);
                var appointDetails = ej.DataManager(this._processed).executeLocal(query);
                parentData = (appointDetails[0][this._appointmentSettings["recurrence"]] == 1 && appointDetails[0][this._appointmentSettings["recurrenceRule"]].indexOf("RECUREDITID") != -1) ? appointDetails[0] : this._getAppointmentByParentId(this._appUid);
            }
            else {
                parentData = { startTime: new Date(this.cur_StartTime), endTime: this.cur_EndTime, resourceInfo: this._getResourceDetails(target) };
            }
            if (this._trigger("menuItemClick", { events: args, targetInfo: parentData })) return false;
            var oldIdValue = parentData[this._appointmentSettings["categorize"]];
            switch (id[0]) {
                case "new":
                    this._appointmentWindow(this._target);
                    break;
                case "recurrence":
                    this._appointmentWindow(this._target);
                    this._appointmentAddWindow.find(".recurrence").ejCheckBox({ checked: true });
                    this._repeat(args = { isChecked: true, isInteraction: true });
                    break;
                case "open":
                    this._appointmentWindow(this._target);
                    break;
                case "today":
                    this._navigateClick(this.currentDate(new Date()), "DateNavigation");
                    break;
                case "view":
                    if (!ej.isNullOrUndefined(id[1])) {
                        var newView = id[1].toLowerCase();
                        this._navView = true;
                        (this.currentView() != newView) && this._viewChange(null, this.currentView(), newView);
                    }
                    break;
                case "timemode":
                    if (!ej.isNullOrUndefined(id[1])) {
                        this.model.timeMode = this._timeMode = (id[1] == "Hour12") ? "12" : "24";
                        this._updateTimeMode();
                    }
                    break;
                case "businesshours":
                case "workhours":
                    this.model.workHours.highlight = (this.model.workHours.highlight) ? false : true;
                    (this.model.workHours.highlight) ? this._highlightBusinessHours() : this.element.find(".e-workcells").removeClass("e-businesshighlightworkcells") && this.element.find(".e-monthcells").removeClass("e-monthcellhighlight");
                    break;
                case "gotodate":
                    this._gotoWindow.ejDialog("open");
                    break;
                case "delete":
                    this._deleteAppoint();
                    break;
                case "print":
                    this._printAppointment(this._appUid);
                    break;
                case "categorize":
                    if (ej.isNullOrUndefined(id[1]))
                        this.element.find(".e-appointment,.e-alldayappointment,.e-monthappointment,.e-agendaappointment").removeClass("e-selectedAppointment");
                    else {
                        if (this.model.categorizeSettings.enable) {
                            var getId = id[1]; var idValue = "";
                            if (parentData[this._appointmentSettings["categorize"]]) {
                                var categorizeItems = parentData[this._appointmentSettings["categorize"]].split(',');
                                if (!this.model.categorizeSettings.allowMultiple) {
                                    if (categorizeItems[categorizeItems.length - 1] == getId)
                                        idValue = "";
                                    else
                                        idValue = getId.toString();
                                }
                                else {
                                    if (categorizeItems[0].length > 0) {
                                        for (var i = 0; i < categorizeItems.length; i++) {
                                            if (categorizeItems[i] == getId) {
                                                var findId = true;
                                                break;
                                            }
                                        }
                                        if (findId == true) {
                                            for (var i = 0; i < categorizeItems.length; i++) {
                                                if (categorizeItems[categorizeItems.length - 1] != getId) {
                                                    if (categorizeItems[i] != getId) {
                                                        if (categorizeItems.length - 1 != i)
                                                            idValue = idValue + categorizeItems[i] + ",";
                                                        else
                                                            idValue = idValue + categorizeItems[i];
                                                    }
                                                }
                                                else {
                                                    if (categorizeItems[i] != getId) {
                                                        if (categorizeItems.length - 2 != i)
                                                            idValue = idValue + categorizeItems[i] + ",";
                                                        else
                                                            idValue = idValue + categorizeItems[i];
                                                    }
                                                }
                                            }
                                        }
                                        else
                                            idValue = parentData[this._appointmentSettings["categorize"]] + "," + getId;
                                    }
                                }
                            }
                            else {
                                idValue = getId.toString();
                            }
                            parentData[this._appointmentSettings["categorize"]] = idValue;
                            if (!ej.isNullOrUndefined(id[1])) {
                                if (this._trigger("beforeAppointmentChange", { appointment: parentData })) {
                                    parentData[this._appointmentSettings["categorize"]] = oldIdValue;
                                    return false;
                                }
                            }
                            var temp = this._timeZoneAppointments(parentData, "");
                            var promise;
                            if (this.dataSource() instanceof ej.DataManager) {
                                promise = this._dataManager.update(this._appointmentSettings["id"], temp, this.model.appointmentSettings.query._fromTable);
                            }
                            else
                                promise = this._dataManager.update("AppTaskId", temp);
                            new ej.DataManager(this._currentAppointmentData).update("AppTaskId", this._timeZoneAppointments(temp, "reverse"));
                            if ($.isFunction(promise.promise) && this.dataSource() instanceof ej.DataManager) {
                                promise.done(function (e) {
                                    proxy._processUrlBinding(e);
                                    proxy._trigger("appointmentChanged", { appointment: parentData });
                                });
                            }
                            else {
                                this._renderSingleApp();
                                this._trigger("appointmentChanged", { appointment: parentData });
                            }
                            break;
                        }
                    }
            }
        },

        _updateTimeMode: function () {
            var userTemplateId = ((!ej.isNullOrUndefined(this.model.timeScale.majorSlotTemplateId) && !ej.isNullOrUndefined(this.model.timeScale.minorSlotTemplateId)) || !ej.isNullOrUndefined(this.model.timeScale.minorSlotTemplateId)) ? true : false;
            var template = (!ej.isNullOrUndefined(this.model.timeScale.majorSlotTemplateId)) ? true : false;
            var columnValueCount = this._timeSlotCount(userTemplateId, template);
            this._appointmentAddWindow.find('.startendtime').ejTimePicker({ timeFormat: (this._timeMode == "12") ? this._pattern.t : "HH:mm" });
            if (this.model.orientation == "horizontal" && this.currentView() !== "month" && !(this._isCustomMonthView()) && this.currentView() !== "agenda") {
                var view = this.model.timeScale.enable ? (this._isCustomMonthView()) ? "month" : this.currentView() : "month";
                var viewColCount = view == "day" ? 1 : view == "week" ? 7 : (this.currentView() === "customview" && this._renderDays <= 7) ? this._dateRender.length : 5;
                this.datesColumn = this._getHeaderAllDayCellsCount();
                var multiResources = ((this._tempResource.length != 0) && !ej.isNullOrUndefined(this.model.group)) ? true : false;
                if (userTemplateId || template)
                    var html = this.userTimeCellHoriTemplate.render({ cols: this.datesColumn, label: this._getLocalizedLabels("Resources"), multiRes: multiResources, view: view, timeTdCount: columnValueCount.strTime, colspan: view == "month" ? 1 : (columnValueCount.strTime.length / viewColCount) * 2, height: view == 'month' ? 62 : 59, width: this.model.width, headercellWidth: view == "day" ? "100%" : "55px", column: columnValueCount.columnCount, userTemplateId: userTemplateId, template: template });
                else
                    var html = this.horizontalHeader.render({ cols: this.datesColumn, label: this._getLocalizedLabels("Resources"), multiRes: multiResources, view: view, timeTdCount: columnValueCount.strTime, colspan: view == "month" ? 1 : (columnValueCount.strTime.length / viewColCount) * 2, height: view == 'month' ? 62 : 59, width: this.model.width, headercellWidth: view == "day" ? "100%" : "55px", column: columnValueCount.columnCount });
                this.aTR.children().remove();
                this.aTR.append(html);
                this._borderAddRemove();
                this._moveScroller();
                (this.model.workHours.highlight) ? this._highlightBusinessHours() : this.element.find(".e-workcells").removeClass("e-businesshighlightworkcells");
                this.element.find(".e-headercells").addClass("e-dateheaderselect");
                this._businessHourScroller();
            }
            else {
                if (this.currentView() !== "month" && !(this._isCustomMonthView()) && this.currentView() !== "agenda") {
                    var viewclass = this.currentView() == "month" ? 1 : 0;
                    if ((userTemplateId || template) && (this.currentView() !== "month" && !(this._isCustomMonthView()))) {
                        columnValueCount.columnCount.pop();
                        timeCellhtml = this.userTimeCellTemplate.render({ timerows: columnValueCount.strTime, cols1: columnValueCount.columnCount, viewclass: viewclass, timeScale: this.model.timeScale.minorSlotCount, cheight: this.model.cellHeight, userTemplateId: userTemplateId, timeValue1: columnValueCount.timeValue1, template: template });
                    }
                    else
                        var timeCellhtml = this.timeCellTemplate.render({ timerows: columnValueCount.strTime, cols1: columnValueCount.columnCount, viewclass: viewclass, timeScale: this.model.timeScale.minorSlotCount, userTemplateId: userTemplateId, template: template });
                    this.$TimeCellTD.children().remove();
                    this.$TimeCellTD.append(timeCellhtml); if (this.model.showCurrentTimeIndicator) this.element.find(".e-highlightcurrenttimeline").remove();
                    this.element.find(".e-scrolltimecells").css("top", -(this.element.find(".e-draggableworkarea").scrollTop()) + "px");
                    this.element.find(".e-headercells").addClass("e-dateheaderselect");
                    this._highlightCurrentTime(this.model.showCurrentTimeIndicator);
                }
            }
            if (!ej.isNullOrUndefined(this.dataSource()))
                this._renderAppointmentAll();
        },

        _gotoOk: function (args) {
            if ($(args.currentTarget).hasClass("e-gotoOk")) {
                var date = this._gotoWindow.find("#" + this._id + "gotodate").ejDatePicker("option", "value");
                var view = this._gotoWindow.find("#" + this._id + "show").ejDropDownList("option", "itemValue");
                data = { currentView: this.currentView(), currentDate: new Date(this.currentDate()), target: args };
                if (this._trigger("actionBegin", { data: data, requestType: "dateNavigate" }))
                    return false;
                var oldDate = this.currentDate();
                var oldview = this.currentView();
                this.currentDate(new Date(date));
                this.currentView(view.toLowerCase());
                data = { previousDate: oldDate, currentDate: this.currentDate(), previousView: oldview, currentView: this.currentView(), target: args, requestType: "dateNavigate" };
                if (this._trigger("navigation", data)) {
                    this.currentDate(new Date(oldDate));
                    this.currentView(oldview);
                    this._navView = false;
                    return false;
                }
                this._renderCurrentView("ViewChange");
                this._trigger("actionComplete", { data: data, requestType: "dateNavigate" });
            }
            this._gotoCancel();
        },

        _gotoCancel: function () {
            this._gotoWindow.find("#" + this._id + "gotodate").ejDatePicker({ value: this.currentDate() });
            this._gotoWindow.find("#" + this._id + "show").ejDropDownList({ value: this.currentView() });
            this._gotoWindow.ejDialog("close");
        },

        _renderGoto: function () {
            this._gotoWindow.find("#" + this._id + "gotodate").ejDatePicker({ buttonText: this._getLocalizedLabels("Today"), enableRTL: this.model.enableRTL, width: '100%', value: this.currentDate(), locale: this.model.locale, cssClass: this.model.cssClass, minDate: this.model.minDate, maxDate: this.model.maxDate });
            var views = []
            for (var i = 0; i < this.model.views.length; i++) {
                switch (this.model.views[i]) {
                    case "day": views.push({ text: this._getLocalizedLabels("Day"), value: "day" });
                        break;
                    case "week": views.push({ text: this._getLocalizedLabels("Week"), value: "week" });
                        break;
                    case "workweek": views.push({ text: this._getLocalizedLabels("WorkWeek"), value: "workweek" });
                        break;
                    case "month": views.push({ text: this._getLocalizedLabels("Month"), value: "month" });
                        break;
                    case "customview": views.push({ text: this._getLocalizedLabels("CustomView"), value: "customview" });
                        break;
                    case "agenda": views.push({ text: this._getLocalizedLabels("Agenda"), value: "agenda" });
                        break;
                }
            }
            this._gotoWindow.find("#" + this._id + "show").ejDropDownList({ enableRTL: this.model.enableRTL, dataSource: views, width: "100%", selectedItemIndex: 0, cssClass: this.model.cssClass });
            this._gotoWindow.find(".e-gotobutton").ejButton({ enableRTL: this.model.enableRTL, showRoundedCorner: true, width: "60px", cssClass: this.model.cssClass });
        },

        _renderGotoWindow: function () {
            this._gotoWindow = ej.buildTag('div.e-gotodialog#' + this._id + "gotoWindow");
            var $goWindow = "<div><table width='100%' cellpadding='5'><tbody><tr><td>" + this._getLocalizedLabels("Date") + ":</td><td><input id='" + this._id + "gotodate' type='text' value='' /></td></tr>" +
                    "<tr><td>" + this._getLocalizedLabels("Showin") + ":</td><td><input type='text' id='" + this._id + "show' /></td></tr></tbody></table>";
            $goWindow += "<div class='e-floatright'><table><tr><td><div><button id='" + this._id + "gotook' type='button' class='e-gotobutton e-gotoOk'>" + this._getLocalizedLabels("Done") + "</button></div></td>" +
                                  "<td><div><button id='" + this._id + "gotocancel' type='button' class='e-gotobutton e-gotoCancel'>" + this._getLocalizedLabels("Cancel") + "</button></div></td></tr></table></div></div>";
            this._on(this._gotoWindow, "click", ".e-gotobutton", $.proxy(this._gotoOk, this));
            this._gotoWindow.append($goWindow);
            this.element.append(this._gotoWindow);
            this._renderGoto();
            this._gotoWindow.ejDialog({
                width: 300,
                cssClass: this.model.cssClass,
                showOnInit: false,
                enableRTL: this.model.enableRTL, enableModal: true,
                title: this._getLocalizedLabels("Gotodate"),
                target: "#" + this._id,
                enableResize: false,
                allowKeyboardNavigation: false,
                close: $.proxy(this._gotoCancel, this)
            });
            $("#" + this._id + "gotoWindow_wrapper").appendTo("body").addClass("e-scheduledialog").find(".e-titlebar").addClass("e-dialogheader");
        },


        _highlightCurrentTime: function (showIndicator) {
            ej.preferredCulture(this.model.locale);
            if (showIndicator && this.model.timeScale.enable) {
                var flag = false, index = 0;
                for (var i = 0; i < this._dateRender.length; i++) {
                    if (new Date(new Date(this._dateRender[i]).setHours(0, 0, 0, 0)).getTime() === new Date(new Date().setHours(0, 0, 0, 0)).getTime()) {
                        flag = true;
                        index = i;
                        break;
                    }
                }
                var tdelement = this.element.find(".e-workcellstab tr").first().find("td");
                if (this.currentView() !== "month" && !(this._isCustomMonthView())) {
                    if (flag) {
                        var temp = this;
                        var view = this.currentView() === "week" ? 7 : this.currentView() === "workweek" ? this.model.workWeek.length : this.currentView() == "customview" ? this._dateRender.length : 1;
                        var timeWidth = (this.model.cellWidth) ? parseInt(this.model.cellWidth) : this.element.find('.e-draggableworkarea')[0].offsetWidth / (view * this.res1.length);
                        if (new Date().getHours() >= temp.model.startHour && new Date().getHours() <= temp.model.endHour) {
                            if (temp.model.orientation == "vertical") {
                                for (var i = 0; i < this.res1.length; i++) {
                                    this.element.find('.e-draggableworkarea').append('<div id="' + this._id + i + '_HighlightCurrentTimeline" class="e-highlightcurrenttimeline"></div>');
                                    $('#' + this._id + i + '_HighlightCurrentTimeline').append('<div class="e-currenttime"></div>').append(ej.buildTag("div.e-icon e-circle_01 e-timeidicatorcircle e-lefttimeindicator")).append(ej.buildTag("div.e-icon e-circle_01 e-timeidicatorcircle e-righttimeindicator")).css("width", timeWidth + "px").css("left", tdelement[index + (view * i)].offsetLeft + "px").find('.e-righttimeindicator').css("margin-left", (timeWidth - 3) + "px");
                                }
                            }
                            else {
                                this._renderHorizontalCurrentTime();
                            }
                        }
                        function ChangeCurrentTimePosition() {
                            if (temp.currentView() != "month" && !temp._isCustomMonthView()) {
                                var tdelement = temp.element.find(".e-workcellstab tr").first().find("td");
                                var view = temp.currentView() === "week" ? 7 : temp.currentView() === "workweek" ? temp.model.workWeek.length : temp.currentView() == "customview" ? temp._dateRender.length : 1;
                                var now = new Date();
                                now.setMinutes(now.getMinutes());
                                var index = temp._dateRender.indexOf(new Date(now).setHours(0, 0, 0, 0));
                                if (now.getHours() >= temp.model.startHour && now.getHours() <= temp.model.endHour) {
                                    if (temp.model.orientation == "vertical") {
                                        temp.element.find(".e-currentdayhighlight").removeClass("e-currentdayhighlight");
                                        var topVal = ((((now.getHours() - temp.model.startHour) * 60) + now.getMinutes()) * (temp.element.find(".e-workcells").height() + 1) * temp.model.timeScale.minorSlotCount) / temp.model.timeScale.majorSlot;
                                        for (var i = 0; i < temp.res1.length; i++) {
                                            temp.element.find('#' + temp._id + i + '_HighlightCurrentTimeline').css("top", topVal - 1);
                                            temp.element.find('#' + temp._id + i + '_HighlightCurrentTimeline').css("left", tdelement[index + (view * i)].offsetLeft);
                                            $(temp.element.find(".e-dateheader").children()[index + (view * i)]).addClass("e-currentdayhighlight");
                                        }
                                        var currentTime = temp._timeMode == "12" ? ej.format(new Date(), "hh:mm tt", temp.model.locale) : ej.format(new Date(), "HH:mm", temp.model.locale);
                                        for (var i = 0; i < temp.res1.length; i++) {
                                            temp.element.find('#' + temp._id + i + '_HighlightCurrentTimeline').find(".e-currenttime").html(currentTime);
                                            if (temp._timeMode == "12") temp.element.find('#' + temp._id + i + '_HighlightCurrentTimeline').find(".e-currenttime").addClass("e-timewidth");
                                        }
                                    }
                                    else {
                                        temp._horizontalTimePosition(temp, now);
                                    }
                                }
                            }
                        }
                        ChangeCurrentTimePosition();
                        if (ej.isNullOrUndefined(this._intervalID))
                            this._intervalID = window.setInterval(ChangeCurrentTimePosition, 60000);
                    }
                    else {
                        window.clearInterval(this._intervalID);
                        this._intervalID = null;
                        this.element.find(".e-highlightcurrenttimeline").remove();
                    }
                }
                else {
                    if (flag) {
                        if (this.model.orientation == "vertical") {
                            var rowPosition = Math.floor(index / 7);
                            var cellId = Math.abs(index - (rowPosition * 7));
                            if (!this.model.group) this.res1 = ["0"];
                            for (var i = 0; i < this.res1.length; i++) {
                                !$($(this.element.find(".e-workcellstab tr")[rowPosition]).children()[Math.floor(cellId)]).hasClass("e-othermonths") && $($(this.element.find(".e-workcellstab tr")[rowPosition]).children()[Math.floor(cellId)]).addClass("e-currentdayhighlight");
                                cellId += 7;
                            }
                        }
                        else
                            this._renderHorizontalCurrentTime();
                    }
                    else
                        this.model.orientation == "vertical" ? this.element.find(".e-monthcells").removeClass("e-currentdayhighlight") : this.element.find(".e-workcells").removeClass("e-currentdayhighlight");
                }
            }
        },
        _filter: function () {
            var filter = []; var filtAppoint = [];
            this._filt = true;
            this._dataProcessing(this._currentAppointmentData);
            filtAppoint = $.extend(true, [], this._processed);
            this._filt = false;
            for (var a = 0; a < filtAppoint.length; a++) {
                if ((new Date(filtAppoint[a][this._appointmentSettings["endTime"]]) >= this.model.minDate) && (new Date(filtAppoint[a][this._appointmentSettings["endTime"]]) <= this.model.maxDate))
                    filter.push(filtAppoint[a]);
            }
            return filter;
        },
        _getPreviousNextAppointment: function () {
            var dateCount = ((this.model.orientation == "horizontal" || !this.model.showNextPrevMonth) && this.currentView() == "month") ? this.monthDays : this._dateRender;
            var appointmentsList = this._filter();
            this._previousList = [];
            this._nextList = [];
            this.appointment;
            if (this.currentView() != "workweek") {
                for (var app = 0; app < appointmentsList.length; app++) {
                    if (new Date(appointmentsList[app][this._appointmentSettings["startTime"]]) < new Date(dateCount[0]) && new Date(appointmentsList[app][this._appointmentSettings["endTime"]]) < new Date(dateCount[0]))
                        this._previousList.push(appointmentsList[app]);
                    else if (new Date(appointmentsList[app][this._appointmentSettings["startTime"]]) > new Date(dateCount[(dateCount.length - 1)]) && new Date(appointmentsList[app][this._appointmentSettings["endTime"]]) > new Date(dateCount[(dateCount.length - 1)]))
                        this._nextList.push(appointmentsList[app]);
                }
            }
            else {
                for (var app = 0; app < appointmentsList.length; app++) {
                    for (var i = 0; i < dateCount.length; i++) {
                        if (new Date(appointmentsList[app][this._appointmentSettings["startTime"]]).getDay() == new Date(dateCount[i]).getDay()) {
                            if (new Date(appointmentsList[app][this._appointmentSettings["startTime"]]) < new Date(dateCount[0]) && new Date(appointmentsList[app][this._appointmentSettings["endTime"]]) < new Date(dateCount[0]))
                                this._previousList.push(appointmentsList[app]);
                            else if (new Date(appointmentsList[app][this._appointmentSettings["startTime"]]) > new Date(dateCount[(dateCount.length - 1)]) && new Date(appointmentsList[app][this._appointmentSettings["endTime"]]) > new Date(dateCount[(dateCount.length - 1)]))
                                this._nextList.push(appointmentsList[app]);
                        }
                    }
                }
            }
            this.appointment = { previous: this._previousList, next: this._nextList };
        },

        _nextPrevAppointment: function (flag) {
            if (flag && !(this._browserInfo.name === "msie" && this._browserInfo.version < 9)) {
                var base = this.element.find("#" + this._id + "_scroller");
                this.height = base.height();
                this.width = base.width();
                var scroll = (base.ejScroller('instance').isVScroll()) ? this.element.find("#" + this._id + "_scroller").find(".e-vscroll").width() : 0;
                var timecell = this.element.find(".e-scrolltimecells").width();
                timecell = ej.isNullOrUndefined(timecell) ? this.model.orientation == "vertical" ? 56 : 0 : timecell;
                var top = (this.height / 2) - (150 / 2), left;
                var prev = ej.buildTag("div.e-prevapp enable", this._getLocalizedLabels("PreviousAppointment"), {}, {});
                var next = ej.buildTag("div.e-nextapp enable", this._getLocalizedLabels("NextAppointment"), {}, {});
                left = (this.model.timeScale.enable && this.currentView() != "agenda") ? (this.model.orientation == "vertical") ? ((this.currentView() != "month") && !(this._isCustomMonthView()) ? -4 : -10) : -61 : -61;
                this.width = (this.model.timeScale.enable && this.currentView() != "agenda") ? this.width : this.width - timecell;
                if (!this.model.enableRTL) {
                    prev.css("top", (top + 40) + "px").css("transform", "rotate(90deg)").css("left", left + "px");
                    next.css("top", (top + 40) + "px").css("transform", "rotate(-90deg)").css("left", (this.width - scroll - (this.model.orientation == "vertical" && (this.currentView() == "month" || this._isCustomMonthView()) ? 40 : this.model.orientation == "vertical" ? 35 : 90)) + "px");
                }
                else {
                    prev.css("top", (top + 40) + "px").css("transform", "rotate(-90deg)").css("right", left + "px");
                    next.css("top", (top + 40) + "px").css("transform", "rotate(90deg)").css("right", (this.width - scroll - (this.model.orientation == "vertical" && (this.currentView() == "month" || this._isCustomMonthView()) ? 40 : this.model.orientation == "vertical" ? 35 : 90)) + "px");
                }
                base.append(prev).append(next);
            }
        },

        _nextPrev: function (e) {
            var proxy = this;
            if ($(e.currentTarget).hasClass("e-prevapp")) {
                if (!ej.isNullOrUndefined(this.appointment)) {
                    this.appointment.previous.sort(function (a, b) {
                        return new Date(b[proxy._appointmentSettings["startTime"]]) - new Date(a[proxy._appointmentSettings["startTime"]]);
                    });
                    if (this.currentView() == "customview") this._daterend = this.appointment.previous[0][this._appointmentSettings["startTime"]];
                    this._navigateClick(this.currentDate(new Date(this.appointment.previous[0][this._appointmentSettings["startTime"]])), "Previous");
                }
            }
            else if ($(e.currentTarget).hasClass("e-nextapp")) {
                if (!ej.isNullOrUndefined(this.appointment)) {
                    this.appointment.next.sort(function (a, b) {
                        return new Date(a[proxy._appointmentSettings["startTime"]]) - new Date(b[proxy._appointmentSettings["startTime"]]);
                    });
                    if (this.currentView() == "customview") this._daterend = this.appointment.next[0][this._appointmentSettings["startTime"]];
                    this._navigateClick(this.currentDate(new Date(this.appointment.next[0][this._appointmentSettings["startTime"]])), "Next");
                }
            }
        },

        _nextPrevButton: function (app) {
            if (app.length != 0)
                this.element.find(".e-prevapp,.e-nextapp").css("display", "none");
            else {
                this.currentView() == "agenda" && this._refreshAppNavigation();
                this._getPreviousNextAppointment();
                this.element.find(".e-prevapp,.e-nextapp").css("display", "block");
                if (this.appointment.previous.length == 0)
                    this.element.find(".e-prevapp").removeClass("enable").css("opacity", "0.4");
                else
                    this.element.find(".e-prevapp").addClass("enable").css("opacity", "1");
                if (this.appointment.next.length == 0)
                    this.element.find(".e-nextapp").removeClass("enable").css("opacity", "0.4");
                else
                    this.element.find(".e-nextapp").addClass("enable").css("opacity", "1");
            }
        },

        _navigateView: function (e) {
            var newView, navidate, index, cellIndex, oldview = this.currentView();
            var target = $(e.target);
            if (this.currentView() == "agenda") {
                return false;
            }
            else {
                if (this.model.orientation == "vertical") {
                    if (this.currentView() === "month" || (this._isCustomMonthView())) {
                        if (target.hasClass("e-monthheader")) {
                            if (this.model.views.toString().toLowerCase().split(",").indexOf("day") == -1) return false;
                            cellIndex = target.parent().index();
                            index = (cellIndex > 6) ? (cellIndex % 7) : cellIndex;
                            navidate = new Date(this._dateRender[((target.parent().parent().index() * 7) + index)]);
                            if (this.model.minDate <= navidate && this.model.maxDate >= navidate)
                                this.currentDate(navidate);
                            else return false;
                            newView = "day";
                        }
                        else if (target.hasClass("e-timecells") || target.hasClass("e-timecelldivs")) {
                            target = target.hasClass("e-timecells") ? target : target.parent();
                            if (this.model.views.toString().toLowerCase().split(",").indexOf("week") == -1) return false;
                            navidate = new Date(this._dateRender[(target.parent().index() * 7)]);
                            if (this.model.minDate <= navidate && this.model.maxDate >= navidate)
                                this.currentDate(navidate);
                            else return false;
                            newView = "week";
                        }
                    }
                    else if (this.currentView() === "week" || this.currentView() === "workweek" || (this.currentView() === "customview" && this._renderDays <= 7)) {
                        var dayTarget = target.hasClass("e-headercells") ? target : target.parent().hasClass("e-headercells") ? target.parent() : target.closest(".e-headercells");
                        if (this.model.views.toString().toLowerCase().split(",").indexOf("day") == -1 || !dayTarget.hasClass("e-headercells")) return false;
                        cellIndex = dayTarget.index();
                        var cols = this.currentView() === "workweek" ? this.model.workWeek.length : this.currentView() === "customview" ? this._dateRender.length : 7;
                        index = (cellIndex > cols - 1) ? (cellIndex % cols) : cellIndex;
                        navidate = new Date(this._dateRender[index]);
                        if (this.model.minDate <= navidate && this.model.maxDate >= navidate)
                            this.currentDate(new Date(navidate));
                        else return false;
                        newView = "day";
                    }
                    this._navView = true;
                    if (oldview != "day" && !ej.isNullOrUndefined(newView)) {
                        this._viewChange(e, oldview, newView);
                        this._businessHourScroller();
                    }
                }
                else if (this.model.orientation == "horizontal" && ej.scheduleFeatures.horizontal)
                    this._horizontalViewNavigation(e);
            }
        },

        _appOverflowClick: function (e) {
            if (this.model.views.toString().toLowerCase().split(",").indexOf("day") !== -1) {
                if (this._trigger("overflowButtonClick", { event: e, Datas: this._overflowApp })) return false;
                !ej.isNullOrUndefined(this.element.data("ejTooltip")) && this.element.ejTooltip('hide');
                if (this.model.orientation == "vertical") {
                    var index = ($(e.target).closest(".e-monthcells,.e-workcells").parent().index() * 7) + ($(e.target).closest(".e-monthcells,.e-workcells").index() % 7);
                    this.currentDate(new Date(this._dateRender[index]));
                }
                else {
                    var index = parseInt($(e.target).attr("id").split("_")[$(e.target).attr("id").split("_").length - 1]);
                    this.currentDate((this.currentView() == "month" || this._isCustomMonthView()) ? new Date(this.monthDays[index]) : new Date(parseInt($(e.target).attr("cellinfo"))));
                }
                this._navView = true;
                this._viewChange(e, this.currentView(), "day");
            }
            else return false;
        },

        _viewCalendar: function (e) {
            var obj = this.element.find("#" + this._id + "_navigator").data("ejDatePicker");
            if (obj) {
                obj.show();
                this.element.find("#" + this._id + "_navigator").ejDatePicker({ value: new Date(this.currentDate()) });
                var controlmargin = this.element.offset();
                if (this.model.enableRTL) {
                    var leftvalue = controlmargin.left + this.element.width() - 280;
                    if (leftvalue < 0) leftvalue = 0;
                }
                else {
                    var leftvalue = controlmargin.left + 55, winWidth = $(document).scrollLeft() + $(window).width();
                    if ((winWidth - leftvalue) < $("#e-" + this._id + "_navigator").width())
                        leftvalue = winWidth - $("#e-" + this._id + "_navigator").width();
                }
                $("#e-" + this._id + "_navigator").css("top", (controlmargin.top + 47) + "px").css("left", leftvalue + "px");
            }
            this.element.find(".e-workcells").removeClass("e-selectedCell");
            this.element.find(".e-workcells").removeClass("e-mousehover");
            this.element.find(".e-appointment,.e-alldayappointment,.e-monthappointment").removeClass("e-selectedAppointment");
        },

        _viewChange: function (e, oldview, newView) {
            this._viewchange = true; this._renderedApp = [];
            newView = ej.isNullOrUndefined(newView) ? (e.currentTarget.className.split("e-")[2]).split(" ")[0] : newView;
            var flag = true, data;
            data = { currentView: this.currentView(), currentDate: new Date(this.currentDate()), target: e };
            if (this._trigger("actionBegin", { data: data, requestType: "viewNavigate" }))
                return false;
            this.model.showQuickWindow && (this._quickAppointWindow.ejDialog("close") && this._quickAppDetailsWindow.ejDialog("close"));
            if (oldview !== newView || (!oldview && !newView)) {
                oldview = this.currentView();
                if (!this._navView) {
                    flag = (this.currentView() == (e.currentTarget.className.split("e-")[2]).split(" ")[0]) ? false : true;
                    this.currentView($(e.currentTarget).hasClass("e-activeview") ? this.currentView() : (e.currentTarget.className.split("e-")[2]).split(" ")[0]);
                }
                else
                    this.currentView(newView);
                data = { previousView: oldview, currentView: this.currentView(), currentDate: new Date(this.currentDate()), target: e, requestType: "viewNavigate" };
                if (this._trigger("navigation", data)) {
                    this.currentView(oldview);
                    this._navView = false;
                    return false;
                }
                if (flag) this._renderCurrentView("ViewChange");
            }
            data = { previousView: oldview, currentView: this.currentView(), currentDate: new Date(this.currentDate()), target: e, requestType: "viewNavigate" };
            (this._mediaQuery && (oldview != this.currentView())) && this.element.find(".e-workareadiv,.e-navigate").addClass("navigate");
            this._trigger("actionComplete", { data: data, requestType: "viewNavigate" });
        },

        _renderCurrentView: function (currentAction) {
            !ej.isNullOrUndefined(this.element.data("ejTooltip")) && this.element.ejTooltip('hide');
            this._resWorkWeek = (this.model.orientation == "vertical" && this.currentView() == "workweek" && (this._tempResource.length != 0) && !ej.isNullOrUndefined(this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]));
            this.element.find(".e-commonviewbutton").blur().removeClass("e-activeview");
            if (this.model.orientation == "vertical")
                this.element.find(".e-headerdaydisplay,.e-datedisplay,.e-headrealldaytable").children().remove();
            this.wTR.children().remove();
            this.aTR.children().remove();
            this._calculateCustomDays()._getRenderDates();
            this.element.find(".e-commonviewbutton.e-" + this.currentView()).addClass("e-activeview").attr("tabIndex", 0).focus();
            if ((!ej.isNullOrUndefined(this._scheduleDrawer)) && (!this._navSelected))
                this._scheduleDrawer.ejNavigationDrawer({ listViewSettings: { selectedItemIndex: this.model.views.toString().toLowerCase().split(',').indexOf(this.currentView()) + 1 } });
            this._renderHeaderAllDayTemplate();
            this._renderContentAreaTemplate();
            if (this.currentView() == "agenda" && this.model.showHeaderBar) {
                this.element.find("div.e-datedisplay")[0].innerHTML = this._getCurrentDateHeaderValue();
            }
            this._renderCommon('current');
            if (!ej.isNullOrUndefined(this.dataSource())) {
                if (this.model.enableLoadOnDemand)
                    this._bindAppointmentsData(currentAction);
                else {
                    this._dataProcessing(this._currentAppointmentData);
                    this._renderAppointmentAll();
                }
                if (this._app.length < 1 && this.model.showAppointmentNavigator)
                    this._nextPrevButton(this._app);
            }
            this._renderBlockAppointments();
            this._navView = false;
        },

        _renderHeaderDays: function () {
            this.dateRender = [];
            var dateList = this._getRenderDates();
            this.res1 = (!ej.isNullOrUndefined(this.model.group)) ? this.res1 : [0];
            if (!this._resWorkWeek) {
                for (var i = 0; i < this.res1.length; i++) {
                    for (var j = 0; j < dateList.length; j++) {
                        this.dateRender.push(new Date(dateList[j]));
                    }
                }
            }
            if (this.model.showHeaderBar) {
                var dateVal = this._getCurrentDateHeaderValue();
                this.element.find("div.e-datedisplay")[0].innerHTML = dateVal;
            }
            (this.currentDate() < this.model.minDate) && this.currentDate(this.model.minDate);
            (this.currentDate() > this.model.maxDate) && this.currentDate(this.model.maxDate);
            if (this.model.orientation == "vertical") {
                this.element.find(".e-currentdayhighlight").removeClass("e-currentdayhighlight");
                if (this.currentView() !== "month" && !(this._isCustomMonthView())) {
                    var curday, temp;
                    if (!ej.isNullOrUndefined(this.model.dateHeaderTemplateId)) {
                        var cols = [], columns = this._getUserDateheaderTemplate();
                        if ((this._tempResource.length != 0) && !ej.isNullOrUndefined(this.model.group) && ej.scheduleFeatures.resources) {
                            for (i = 0; i < this.res1.length; i++) { cols = $.merge(cols, columns); }
                        }
                        else cols = $.merge(cols, columns);
                        for (i = 0; i < this.dateRender.length; i++) {
                            this.element.find(".e-headerdaydisplay")[i].innerHTML = cols[i].currentDay;
                            if (new Date(new Date(this.dateRender[i]).setHours(0, 0, 0, 0)).getTime() == new Date(new Date().setHours(0, 0, 0, 0)).getTime())
                                $(this.element.find("td.e-headercells")[i]).addClass("e-currentdayhighlight");
                        }
                    }
                    else {
                        for (var i = 0; i < this.dateRender.length; i++) {
                            curday = (this.currentView() === "day") ? (this._tempResource.length == 0 && ej.isNullOrUndefined(this.model.group)) ? this._dayFullNames[new Date(this.dateRender[i]).getDay()] : this._dayShortNames[new Date(this.dateRender[i]).getDay()] : this._dayShortNames[new Date(this.dateRender[i]).getDay()];
                            temp = this.currentView() === "day" ? (this._tempResource.length == 0 && ej.isNullOrUndefined(this.model.group)) ? curday + " " + ej.format(new Date(this.dateRender[i]), "dd MMMM yyyy", this.model.locale) : curday + " " + ej.format(new Date(this.dateRender[i]), "dd MMM yy", this.model.locale) : curday + " " + new Date(this.dateRender[i]).getDate();
                            this.element.find(".e-headerdaydisplay")[i].innerHTML = temp;
                            if (new Date(new Date(this.dateRender[i]).setHours(0, 0, 0, 0)).getTime() == new Date(new Date().setHours(0, 0, 0, 0)).getTime())
                                $(this.element.find("td.e-headercells")[i]).addClass("e-currentdayhighlight");
                        }
                    }
                    if (!this._mediaQuery)
                        this.element.find(".e-alldaycells,.e-leftindent,.e-emptyalldaytd").css('height', "27px");
                    else {
                        this.element.find(".e-alldaycells,.e-leftindent,.e-emptyalldaytd").attr('style', "height:40px !important");
                        if (!this.model.enableRTL)
                            this.element.find(".e-alldaycells").first().css("border-left", "none");
                        else
                            this.element.find(".e-alldaycells").first().css("border-right", "none");
                    }
                    if (!ej.isNullOrUndefined(this.model.allDayCellsTemplateId) && this.model.timeScale.enable) {
                        var allDayHtml = this._getUserAllDayCellsTemplate();
                        for (a = 0; a < allDayHtml.length; a++) { this.element.find(".e-alldaycells")[a].innerHTML = allDayHtml[a]; }
                        this.element.find(".e-leftindent, .e-emptyalldaytd").height(this.element.find(".e-alldaycells").height());
                    }
                    this.element.find(".e-headercells").addClass("e-dateheaderselect");
                }
                else
                    this._renderMonthTimeCells();
            }
            else if (this.model.orientation == "horizontal" && ej.scheduleFeatures.horizontal)
                this._renderHorizontalHeaderDays(this._culture);
        },

        _renderMonthTimeCells: function () {
            var timeCellIndex = 0; var dateRender = this._dateRender, k = 0, resCount = !ej.isNullOrUndefined(this.model.group) ? this.res1.length * 7 : 7;
            var findResource = ((this._tempResource.length != 0) && ej.scheduleFeatures.resources) ? true : false;
            if (findResource)
                resCount = this._isCustomMonthView() && this._oneWeek ? this.res1.length * this._dateRender.length : this.res1.length * 7;
            else
                resCount = !ej.isNullOrUndefined(this.model.group) ? this._isCustomMonthView() && this._oneWeek ? this.res1.length * this._dateRender.length : this.res1.length * 7 : 7;
            var res = findResource && this._isCustomMonthView() && this._oneWeek ? true : false;
            for (var i = 0; i < dateRender.length; i++) {
                for (var j = k; j < resCount; j = res ? j + this._dateRender.length : j + 7) {
                    $(this.element.find("div.e-monthheader"))[j].innerHTML = (ej.format(new Date(dateRender[i]), "dd", this.model.locale)).toString();
                    if (this.currentView() !== "customview") {
                        if (new Date(dateRender[i]).getMonth() !== new Date(this.currentDate()).getMonth()) {
                            if (!this.model.showNextPrevMonth)
                                $(this.element.find("div.e-monthheader")[j]).addClass("e-monthdateshighlight").closest(".e-monthcells").addClass("e-othermonths").children().hide();
                            else
                                $(this.element.find("div.e-monthheader")[j]).addClass("e-monthdateshighlight").closest(".e-monthcells").removeClass("e-othermonths").children().show();
                        }
                        else
                            $(this.element.find("div.e-monthheader")[j]).removeClass("e-monthdateshighlight").closest(".e-monthcells").removeClass("e-othermonths").children().show();
                    }
                    if (new Date(dateRender[i]).getTime() == new Date(new Date().setHours(0, 0, 0, 0)).getTime())
                        !$(this.element.find("td.e-monthcells")[j]).hasClass("e-othermonths") && $(this.element.find("td.e-monthcells")[j]).addClass("e-currentdayhighlight");
                }
                k++;
                if ((i + 1) % 7 == 0) {
                    k = resCount;
                    resCount = resCount + ((!ej.isNullOrUndefined(this.model.group) ? this.res1.length : 1) * 7);
                    if (this.model.showNextPrevMonth || this.currentView() == "customview") {
                        start = ej.format(new Date(dateRender[i - 6]), "MMM dd", this.model.locale);
                        end = ej.format(new Date(dateRender[i]), "MMM dd", this.model.locale);
                    }
                    else {
                        tempDate = new Date(this.currentDate());
                        start = (i == 6) ? ej.format(new Date(tempDate.getFullYear(), tempDate.getMonth(), 1), "MMM dd", this.model.locale) : ej.format(new Date(dateRender[i - 6]), "MMM dd", this.model.locale);
                        end = (i == dateRender.length - 1) ? ej.format(new Date(tempDate.getFullYear(), tempDate.getMonth() + 1, 0), "MMM dd", this.model.locale) : ej.format(new Date(dateRender[i]), "MMM dd", this.model.locale);
                    }
                    if (this.model.timeScale.enable) $(this.element.find(".e-timecelldivs"))[timeCellIndex].innerHTML = start + "- " + end;
                    timeCellIndex++;
                }
            }
            if (!this.model.showNextPrevMonth && this.currentView() == "month") {
                this._refreshOtherMonthsBorder();
            }
            this.element.find(".e-timecells").addClass("e-dateheaderselect");
            this.element.find(".e-monthcells, .e-timecells").outerHeight(this.model.cellHeight != "20px" ? parseInt(this.model.cellHeight) + 1 : parseInt(this.element.find(".e-draggableworkarea").height() / this.element.find(".e-draggableworkarea tr").length));
        },

        _refreshOtherMonthsBorder: function () {
            var border = this.model.enableRTL ? "e-borderright" : "e-borderleft";
            var prevMonthlen = this.element.find(".e-workcellstab tr").first().find(".e-othermonths").length;
            var prevRes = prevMonthlen / this.res1.length;
            for (var a = prevRes; a < prevMonthlen; a = a + prevRes) {
                $(this.element.find(".e-workcellstab tr").first().find(".e-othermonths")[a]).addClass(border);
            }
            var nextMonthlen = this.element.find(".e-workcellstab tr").last().find(".e-othermonths").length;
            var nextRes = nextMonthlen / this.res1.length;
            for (var b = 0; b < nextMonthlen; b = b + nextRes) {
                $(this.element.find(".e-workcellstab tr").last().find(".e-othermonths")[b]).addClass(border);
            }
        },

        _nextMonthDate: function (args) {
            var date = new Date(this.currentDate());
            if (date.setHours(0, 0, 0) == new Date(date.getFullYear(), date.getMonth() + 1, 0).setHours(0, 0, 0))
                return (args == "navigateprevious") ? new Date(new Date(this.currentDate()).getFullYear(), new Date(this.currentDate()).getMonth(), 0) : new Date(new Date(this.currentDate()).getFullYear(), new Date(this.currentDate()).getMonth() + 2, 0);
            else
                return (args == "navigateprevious") ? new Date(date.getFullYear(), date.getMonth() - 1, date.getDate()) : new Date(date.getFullYear(), date.getMonth() + 1, date.getDate());
        },

        _navigateClick: function (e, dateNavigate) {
            this._viewchange = true;
            var data, currentAction = dateNavigate;
            var oldDate = new Date(this.currentDate());
            data = { currentView: this.currentView(), currentDate: new Date(this.currentDate()), target: e };
            if (this._trigger("actionBegin", { data: data, requestType: "dateNavigate" }))
                return false;
            if (!ej.isNullOrUndefined(e) && !ej.isNullOrUndefined(e.value)) {
                var selectdate = ej.parseDate(e.value, this._pattern.d);
                this.currentDate(selectdate);
            }
            if (e != null && !this._setCurrentDate) {
                if ($(e.currentTarget).hasClass("e-disable")) { return false; }
                var dat = new Date(this.currentDate());
                var day = this.currentView() === "day" || this.currentView() === "agenda" ? 1 : this.currentView() === "customview" ? this._dateRender.length : 7;
                var todayDate;
                if ($(e.currentTarget).hasClass("e-navigateprevious")) {
                    this._daterend = this._dateRender;
                    if (this._isCustomMonthView()) {
                        todayDate = new Date(this._dateRender[0]), weekDate = new Date(this._dateRender[0]);
                        weekDate.setTime(todayDate.getTime() - (this._dateRender.length * 24 * 3600000));
                        this.currentDate(new Date(weekDate));
                    }
                    else
                        this.currentDate((this.currentView() === "month" ? this._nextMonthDate("navigateprevious") : new Date(dat.setDate(new Date(this.currentDate()).getDate() - day))));
                    this.element.find(".e-navigateprevious").attr("tabIndex", 0).focus();
                    currentAction = "Previous";
                }
                else if ($(e.currentTarget).hasClass("e-navigatenext")) {
                    if (this.currentView() == "customview") {
                        this._daterend = this._dateRender;
                        todayDate = new Date(this._dateRender[0]), weekDate = new Date(this._dateRender[0]);
                        weekDate.setTime(todayDate.getTime() + (this._dateRender.length * 24 * 3600000));
                        this.currentDate(new Date(weekDate));
                    }
                    else
                        this.currentDate((this.currentView() === "month" ? this._nextMonthDate("navigatenext") : new Date(dat.setDate(new Date(this.currentDate()).getDate() + day))));
                    this.element.find(".e-navigatenext").attr("tabIndex", 0).focus();
                    currentAction = "Next";
                }

            }
            if (e != null)
                if ($(e.currentTarget).hasClass("e-navigateprevious") || $(e.currentTarget).hasClass("e-navigatenext") || (e.type == "select"))
                    data = { previousDate: oldDate, currentDate: dat, currentView: this.currentView(), target: e, requestType: "dateNavigate" };
            if (this._trigger("navigation", data)) {
                this.currentDate(new Date(oldDate));
                return false;
            }
            this.element.find(".e-workcells,.e-alldaycells,.e-monthcells").removeClass("e-selectedCell");
            this.element.find('.e-selectedAppointment').removeClass("e-selectedAppointment"); this.element.find(".e-appsoverflow").remove();
            this.element.find(".e-monthcells").removeClass("e-monthcurrenttime");
            if (this.model.showCurrentTimeIndicator) this.element.find(".e-highlightcurrenttimeline").remove();
            this.model.showQuickWindow && (this._quickAppointWindow.ejDialog("close") && this._quickAppDetailsWindow.ejDialog("close"));
            !ej.isNullOrUndefined(this._scheduleDrawer) && this._scheduleDrawer.ejNavigationDrawer("close");
            if (this.currentView() === "month" || this.currentView() === "agenda" || (this._isCustomMonthView())) {
                this._navigate = true;
                this._renderCurrentView(currentAction);
            }
            else {
                this.model.timeScale.enable ? (!ej.isNullOrUndefined(this.model.workCellsTemplateId)) ? this._renderCurrentView(currentAction) : this._renderHeaderDays() : this._renderCurrentView(currentAction);
                if (!ej.isNullOrUndefined(this.model.queryCellInfo)) {
                    this._renderQueryCellInfo("renderHeaderAllDayTemplate");
                    this._renderQueryCellInfo("renderContentAreaTemplate");
                    this._renderQueryCellInfo("emptycell");
                }
                (!this._mediaQuery) && this.model.orientation == "vertical" && (this.model.timeScale.enable) && this._reRenderScroller();
                if (!this.model.showOverflowButton && this.model.orientation == "horizontal") {
                    this._horizontalRender();
                    this._reRenderScroller();
                }
                if (!ej.isNullOrUndefined(this.dataSource())) {
                    if (this.model.enableLoadOnDemand)
                        this._bindAppointmentsData(currentAction);
                    else {
                        this._dataProcessing(this._currentAppointmentData);
                        this._renderAppointmentAll();
                    }
                }
                (this.model.workHours.highlight) ? this._highlightBusinessHours() : this.element.find(".e-workcells").removeClass("e-businesshighlightworkcells");
                this._businessHourScroller();
                this._highlightCurrentTime(this.model.showCurrentTimeIndicator);
                this._renderBlockAppointments();
            }
            this._validateMinMaxDate();
            if (!ej.isNullOrUndefined(this.oldDate) && this.oldDate != "" && this._setCurrentDate) {
                this.currentDate(new Date(this.oldDate));
                this.oldDate = "";
            }
            this._setCurrentDate = false;
            if (this._mediaQuery && !ej.isNullOrUndefined(e)) {
                var value = ($(e.currentTarget).hasClass("e-navigateprevious")) ? this.element.width() : ($(e.currentTarget).hasClass("e-navigatenext") || (e.type == "select")) ? -this.element.width() : 0;
                this.element.find(".e-headeralldaydiv,.e-draggableworkarea,.e-vscroll,.e-emptyscrolltd").toggle();
                if (!this.model.enableRTL)
                    this.element.find(".e-headeralldaydiv,.e-draggableworkarea,.e-vscroll").css({ marginLeft: -value, marginRight: value }).toggle().animate({ marginLeft: 0, marginRight: 0 }, 500, (this.model.orientation == "vertical" && this.element.find(".e-vscroll").length == 1) ? $.proxy(this._animateScroll, this) : "");
                else
                    this.element.find(".e-headeralldaydiv,.e-draggableworkarea,.e-vscroll").css({ marginRight: -value, marginLeft: value }).toggle().animate({ marginLeft: 0, marginRight: 0 }, 500, (this.model.orientation == "vertical" && this.element.find(".e-vscroll").length == 1) ? $.proxy(this._animateScroll, this) : "");
            }
            this._trigger("actionComplete", { data: data, requestType: "dateNavigate" });
        },
        _animateScroll: function () {
            this.element.find(".e-emptyscrolltd").toggle();
            this.element.find(".e-headeralldaydiv,.e-draggableworkarea,.e-vscroll").css({ marginRight: 0, marginLeft: 0 });
            if (this._browserInfo.name == "webkit" || this._browserInfo.name == "msie") {
                highScrol = this.element.find('.e-businesshighlightworkcells').length != 0 ? this.element.find('.e-businesshighlightworkcells').first().parent()[0].rowIndex * $('.e-workcells').height() : 0;
                $("#" + this._id + "_scroller").ejScroller({ scrollTop: highScrol + 1 });
                this.element.find('.e-scrolltimecells').css('top', -(highScrol + 1) + 'px');
            }
        },
        _validateMinMaxDate: function () {
            this.element.find(".e-navigateprevious,.e-navigatenext").removeClass("e-disable");
            var renderDate = (this.model.orientation == "horizontal" && this.currentView() == "month") ? this.monthDays : this._dateRender;
            var firstWeekDate = new Date(renderDate[0]);
            var lastWeekDate = new Date(renderDate[renderDate.length - 1]);
            if (this.currentView() == "workweek") {
                firstWeekDate = new Date(firstWeekDate.setDate(firstWeekDate.getDate() - 1));
                lastWeekDate = new Date(lastWeekDate.setDate(lastWeekDate.getDate() + 1));
            }
            if (firstWeekDate <= this.model.minDate)
                this.element.find(".e-navigateprevious").addClass("e-disable");
            else
                this.element.find(".e-navigateprevious").removeClass("e-disable");
            if (lastWeekDate >= this.model.maxDate)
                this.element.find(".e-navigatenext").addClass("e-disable");
            else
                this.element.find(".e-navigatenext").removeClass("e-disable");
        },

        _onScheduleResize: function () {
            if (!ej.isNullOrUndefined(this._scheduleDrawer)) {
                if (ej.isNullOrUndefined(this._scheduleDrawer.data("ejNavigationDrawer"))) {
                    $(this._scheduleDrawer).remove(); this._scheduleDrawer = null;
                }
                else this._scheduleDrawer.ejNavigationDrawer("close");
            }
            if (this._mediaQuery && ej.isMobile()) {
                this._recurEditWindow.ejDialog("refresh");
                this._appointmentAddWindow.ejDialog("refresh");
                if (window.orientation == this._screenOrientation)
                    return false;
                this._screenOrientation = window.orientation;
            }
            this.model.showQuickWindow && this._quickAppointWindow.ejDialog("close") && this._quickAppDetailsWindow.ejDialog("close");
            var temp = this._mediaQuery;
            var hasScrollbar = (typeof window.innerWidth === 'number') && window.innerWidth > document.documentElement.clientWidth;
            this._mediaQuery = (this._browserInfo.name == "msie" && parseInt(this._browserInfo.version, 10) <= 8) ? false : ((document.documentElement.clientWidth + (hasScrollbar ? 17 : 0) < 361 || ej.isMobile()) && this.model.isResponsive);
            (this._mediaQuery) ? this.element.addClass("e-scheduleresponsive") : this.element.removeClass("e-scheduleresponsive");
            var scrollerObj = this.element.find('div#' + this._id + '_scroller').data("ejScroller");
            if (this.currentView() != "agenda") {
                var scroll = (scrollerObj.isVScroll()) ? this.element.find('div#' + this._id + '_scroller').find(".e-vscroll").width() : 0;
                this.element.find(".e-nextapp").css("left", (this.element.width() - scroll - 90) + "px");
                this.model.enableRTL && this.element.find(".e-nextapp").css("left", -45 + "px");
                this.model.enableRTL && this.element.find(".e-prevapp").css("left", (this.element.width() - this.element.find(".e-scrolltimecells").width() - 89) + "px");
                if (this.model.orientation == "horizontal" && !ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) {
                    this.element.find(".resemptytd").width((this.element.find(".e-horizontalrestd").width() < 100) ? 5 : (this.element.find(".e-horizontalrestd").width() >= 100 && this.element.find(".e-horizontalrestd").width() <= 150) ? 10 : 25);
                    this.element.find(".e-horizontalresheader").width((this._mediaQuery) ? "50px" : "100%");
                    this.element.find(".e-parentnodecategory").width((this._mediaQuery) ? "12px" : "20px");
                }
                var scrollWidth = (this.model.orientation === "vertical") ? ((hasScrollbar && this._mediaQuery) ? this.element.outerWidth() + 17 : this.element.outerWidth()) - (this._mediaQuery && (this.currentView() == "month" || this._isCustomMonthView()) ? 1 : (this.element.find('.e-scrolltimecells').length > 0 ? this.element.find('.e-scrolltimecells').parent().outerWidth() : 0)) : (this.model.orientation == "horizontal") && (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) ? this.element.width() - this.element.find(".e-resourceheadertable").width() : this.element.width();
                scrollerObj.model.width = parseInt(scrollWidth) - 2;
                scrollerObj.model.height = this.scHeight - 1 - (this.element.find('.e-draggableworkarea').offset().top - this.element.offset().top);
                scrollerObj.refresh();
                if (this.model.orientation == "vertical") {
                    this._renderHoriVerticalScroll();
                    this.element.find(".e-datecommondiv").parent().width(parseInt(this.element.width()) - 2);
                    this.element.find(".e-headrealldaytable").css("left", -(this.element.find(".e-draggableworkarea").scrollLeft()) + "px");
                    this.element.find(".e-upicon, .e-downicon").children().width(this.element.find(".e-workcells").width());
                    this.element.find(".e-headeralldaydiv,.e-draggableworkarea,.e-emptyscrolltd").css("margin-left", "0px");
                    this.element.find(".e-scrolltimecells").css("top", -(this.element.find(".e-draggableworkarea").scrollTop()) + "px");
                }
                else {
                    if (!this._isCustomMonthView() || this.currentView() != "month" || this.currentView() != "day" || !this.model.enableRTL || this.model.timeScale.enable) {
                        this.element.find(".e-headrealldaytable").parent().width(this.element.find(".e-draggableworkarea").width());
                        $(this.element.find(".e-horizontaltimecells").find("table tr")[2]).css("left", -(this.element.find(".e-draggableworkarea").scrollLeft()) + "px");
                        this._horizontalRender();
                        if (!this.model.showOverflowButton) {
                            this._renderAppointmentAll();
                        }
                    }
                }
                if (this.currentView() != "month" && !(this._isCustomMonthView()) && this.model.orientation == "vertical") {
                    if (this.model.enableRTL && (this.model.cellWidth || this.model.cellHeight != "20px"))
                        this._renderCurrentView("ScheduleResize");
                    else {
                        (this.model.showAllDayRow && this.model.timeScale.enable) && this.element.find("div.e-alldayappointment").remove() && this._renderAllDayAppointments();
                        if (!this.model.timeScale.enable) {
                            this.element.find("div.e-monthappointment").remove();
                            this._renderMonthAppointment();
                        }
                        this._unWireResizeEvents();
                        this._wireResizeEvents();
                        this._dragdropAppointments();
                    }
                }
                else {
                    if (this._isCustomMonthView() || this.currentView() == "month" || this.currentView() == "day" || this.model.enableRTL || !this.model.timeScale.enable)
                        this._renderCurrentView("ScheduleResize");
                }
                if (this.model.showCurrentTimeIndicator) this.element.find(".e-highlightcurrenttimeline").remove();
                this._highlightCurrentTime(this.model.showCurrentTimeIndicator);
            } else {
                scrollerObj.model.width = parseInt(this.element.width()) - 2;
                scrollerObj.model.height = this.scHeight - 1 - (this.element.find('.e-draggableworkarea').offset().top - this.element.offset().top);
                scrollerObj.refresh();
                var _scrollDiv = $('div#' + this._id + "_scroller");
                this.element.find(".e-headrealldaytable").parent().width(this.element.find(".e-draggableworkarea").width());
                this.element.find(".e-datecommondiv").parent().width(parseInt(this.element.width()) - 2);
                _scrollDiv.ejScroller("isVScroll") ? (this.element.find(".e-emptyscrolltd").show() && this.element.find('.e-draggableworkarea').height(this.element.find('.e-draggableworkarea').height() + 1)) : this.element.find(".e-emptyscrolltd").hide();
            }
            ((this._mediaQuery || this.element.width() < 600) && !$("#" + this._id + "navDrawer").hasClass("e-scheduledrawer")) && this._renderNavigationDrawer();
            var flag = (this._mediaQuery == temp) ? false : true;
            if (!flag && (this.element.width() < 600 && this.hTR.find(".e-mobileNavigation").length < 1 || this.element.width() > 600 && this.hTR.find("table.e-viewstable").length < 1)) {
                this._reRenderHeaderBar();
                this._on(this.element, "click", "#" + this._id + "navDrawerIcon", $.proxy(this._drawerOpen, this));
            }
            if (flag) {
                if (this.model.orientation == "horizontal") {
                    var renderDate = this._dateRender;
                    for (var i = 0; i < renderDate.length; i++) {
                        var curday = (this._mediaQuery && (this.currentView() == "week" || this.currentView() == "workweek")) ? this._dayNames[new Date(renderDate[i]).getDay()].split("")[0] : (this.currentView() === "day") ? (ej.isNullOrUndefined(this._tempResource) && ej.isNullOrUndefined(this.model.group)) ? this._dayFullNames[new Date(renderDate[i]).getDay()] : this._dayShortNames[new Date(renderDate[i]).getDay()] : this._dayShortNames[new Date(renderDate[i]).getDay()];
                        var temp = (this._mediaQuery && (this.currentView() == "week" || this.currentView() == "workweek")) ? curday + parseInt(ej.format(new Date(renderDate[i]), "dd", this.model.locale)) : (this.currentView() === "day") ? (ej.isNullOrUndefined(this._tempResource) && ej.isNullOrUndefined(this.model.group)) ? curday + " " + ej.format(new Date(renderDate[i]), "dd MMMM yyyy", this.model.locale) : curday + " " + ej.format(new Date(renderDate[i]), "dd MMM yy", this.model.locale) : curday + " " + new Date(renderDate[i]).getDate();
                        if (this.element.find(".e-headerdaydisplay,.e-horizontalheaderdiv").length != 0) this.element.find(".e-headerdaydisplay,.e-horizontalheaderdiv")[i].innerHTML = temp;
                    }
                }
                this.model.showAppointmentNavigator = flag && !this._mediaQuery;
                if (!this.model.showAppointmentNavigator)
                    this.element.find(".e-prevapp,.e-nextapp").remove();
                else {
                    this._nextPrevAppointment(this.model.showAppointmentNavigator);
                }
                this.model.showHeaderBar && this._reRenderHeaderBar();
                this.element.find(".e-leftindenttable").width(this.element.find(".e-workleftindent").width());
                this.element.find(".e-ampmdisplay").height(this.element.find(".e-workcells").height());
                this._businessHourScroller();
                this.model.showQuickWindow = this._mediaQuery ? false : this._quickWindow;
                (this.model.showQuickWindow && ej.isNullOrUndefined(this._quickAppointWindow)) && (this._renderQuickAppWindow() || this._renderQuickAppDetailsView());
                $.isFunction($.validator) && this._setQuickValidation();
                this._refreshAppointmentWindow();
                (!ej.isNullOrUndefined(this._alertWindow)) && this._alertWindow.ejDialog("close");
                this._recurEditWindow.ejDialog("close");
                this._recurEditWindow.ejDialog({ width: (this._mediaQuery) ? "90%" : 360 });
                if (this._mediaQuery)
                    this._phoneChanges();
                this._renderAppointmentAll();
                this._renderBlockAppointments();
                if (this._mediaQuery) {
                    this._off(this.element, ej.eventType.mouseDown, "td.e-workcells,td.e-monthcells,td.e-alldaycells");
                    this._off(this.element, "keydown click", "td.e-workcells,td.e-monthcells,td.e-alldaycells");
                    this._on(this.element, "click", "#" + this._id + "navDrawerIcon", $.proxy(this._drawerOpen, this));
                }
                else {
                    this._on(this.element, ej.eventType.mouseDown, "td.e-workcells,td.e-monthcells,td.e-alldaycells", $.proxy(this._mouseButtonClick, this));
                    this._on(this.element, "keydown click", "td.e-workcells,td.e-monthcells,td.e-alldaycells", $.proxy(this._shiftSelection, this));
                    (this.element.width() > 600) && this._off(this.element, "click", "#" + this._id + "navDrawerIcon");
                }
                (this._mediaQuery || ej.isTouchDevice()) ? this._on(this.element, "swipeleft swiperight", ".e-contentarearow .e-workcellstab,.e-agendacellstab", $.proxy(this._touchSchedule, this)) : this._off(this.element, "swipeleft swiperight", ".e-contentarearow .e-workcellstab,.e-agendacellstab");
                this._on(this.element, (ej.isMobile()) ? "click" : "dblclick", ".e-workcells,.e-alldaycells,.e-alldayappointment,.e-monthcells", $.proxy(this._appointmentWindow, this));
                if (this._mediaQuery || ej.isMobile())
                    this._on(this.element, "tap", ".e-appointment,.e-alldayappointment,div.e-monthappointment,.e-agendaappointment", $.proxy(this._appointmentWindow, this));
                else
                    this._off(this.element, "tap", ".e-appointment,.e-alldayappointment,div.e-monthappointment,.e-agendaappointment");
                var scheduleResponsive = $("#" + this._id + "AppointmentAddEditWindow_wrapper,#" + this._id + "RecurrenceEdit_wrapper,#" + this._id + "navDrawer,#" + this._id + "alertWindow_wrapper");
                (this._mediaQuery) ? scheduleResponsive.addClass("e-scheduleresponsive") : scheduleResponsive.removeClass("e-scheduleresponsive");
                (this._mediaQuery && this.res1.length > 1) && this.element.addClass("e-resources");
            }
            (this._mediaQuery || this.element.width() < 600) && this.element.find(".e-mobileNavigation").css(this.model.enableRTL ? "right" : "left", this.element.outerWidth() - 36);
        },

        _reRenderHeaderBar: function () {
            var header = this.element.find(".e-scheduleheader");
            header.empty();
            this._renderHeaderBar(header);
            this.element.find("#" + this._id + "_navigator").ejDatePicker({ enableRTL: this.model.enableRTL, buttonText: this._getLocalizedLabels("Today"), select: $.proxy(this._onselect, this), locale: this.model.locale, cssClass: this.model.cssClass, minDate: this.model.minDate, maxDate: this.model.maxDate });
            this.element.find(".e-datecommondiv").find(".e-datewidget").css("display", "none");
            this.element.find(".e-commonviewbutton.e-" + this.currentView()).addClass("e-activeview");
        },

        _renderTemplates: function () {
            if (this.model.orientation == "vertical") {
                this.workcellTemp = $.templates(this._createTemplate(workCellsTemplate(), "_WorkCells"));
                this.monthcellTemp = $.templates(this._createTemplate(monthCellsTemplate(), "_MonthCells"));
                this.timeCellTemplate = $.templates(this._createTemplate(timeCellsTemplate(), "_TimeCells"));
                this.userTimeCellTemplate = $.templates(this._createTemplate(userTimeCellsTemplate(), "_userTimeCells"));

                this.headTemplate = $.templates(this._createTemplate(headerTemplate(), "_HeaderDate"));
                this.alldayTemp = $.templates(this._createTemplate(alldayTemplate(), "_AlldayCells"));
                this.leftIndent = $.templates(this._createTemplate(leftHeaderTemplate(), "_LeftIndentCells"));
            }
            if (ej.scheduleFeatures.resources && (this._tempResource.length != 0))
                this._renderResourcesTemplate();
            this.agendaheadTemplate = $.templates(this._createTemplate(agendaHeaderTemplate(), "_HeaderDate"));
            this.agendacellTemp = $.templates(this._createTemplate(agendaCellsTemplate(), "_AgendaCells"));
            this.appTemplate = $.templates(this._createTemplate(appointmentTemplate(), "_Appointment"));
            this.blockTimeTemplate = $.templates(this._createTemplate(blockTimeTemplate(), "_BlockTime"));
            if (ej.scheduleFeatures.horizontal && this.model.orientation === "horizontal")
                this._renderHorizontalTemplates();
            if (!ej.isNullOrUndefined(this.model.categorizeSettings) && this.model.categorizeSettings.enable) {
                this._renderCategorizeTemplate();
                this._categorizeMultipleTemplate = $.templates(this._createTemplate(categorizeMultipleTemplate(), "_CategorizeMultiple"));
            }
        },

        _setNewStartEndHours: function () {
            if (this.currentView() !== "month" && !(this._isCustomMonthView())) {
                if (this.model.orientation == "horizontal") {
                    this.aTR.children().remove();
                    this._renderHeaderAllDayTemplate();
                }
                this.wTR.children().remove();
                this._renderContentAreaTemplate();
                this._borderAddRemove();
                if (this.model.orientation == "horizontal") this._horizontalRender();
                this._renderScroller();
                this.element.find(".e-ampmdisplay").height(this.element.find(".e-workcells").height());
                (this.model.workHours.highlight) ? this._highlightBusinessHours() : this.element.find(".e-workcells").addClass("e-businesshighlightworkcells");
                this._businessHourScroller();
                if (this.model.showCurrentTimeIndicator) this.element.find(".e-highlightcurrenttimeline").remove();
                this._highlightCurrentTime(this.model.showCurrentTimeIndicator);
                this._renderAppointmentAll();
                if (!ej.isNullOrUndefined(this.model.blockoutSettings) && (this.model.blockoutSettings.dataSource instanceof ej.DataManager))
                    this._bindBlockData();
                else
                    this._renderBlockAppointments();
            }
        },

        _renderInitSchedule: function () {
            this.element.addClass("e-scheduleouter");
            this._screenOrientation = window.orientation;
            this._quickWindow = this.model.showQuickWindow;
            var hasScrollbar = (typeof window.innerWidth === 'number') && window.innerWidth > document.documentElement.clientWidth;
            this._mediaQuery = (this._browserInfo.name == "msie" && parseInt(this._browserInfo.version, 10) <= 8) ? false : ((document.documentElement.clientWidth + (hasScrollbar ? 17 : 0) < 361 || ej.isMobile()) && this.model.isResponsive);
            (this._mediaQuery) ? this.element.addClass("e-scheduleresponsive") : this.element.removeClass("e-scheduleresponsive");
            (this._mediaQuery) && (this.model.showQuickWindow = false);
            var culture = ej.preferredCulture(this.model.locale);
            var localizeAmPm = culture.calendar;
            (ej.isNullOrUndefined(this._clientWidth)) && (this._clientWidth = this.model.width);
            this.currentView(this.currentView().toLowerCase());
            this.model.views = (this.model.views.length == 0) ? this.currentView().toString().toLowerCase().split(",") : this.model.views.toString().toLowerCase().split(",");
            this.model.workWeek = (this.model.workWeek == "" || this.model.workWeek == null) ? this._dayNamesArray : this.model.workWeek;
            this._resWorkWeek = (this.model.orientation == "vertical" && this.currentView() == "workweek" && (this._tempResource.length != 0) && !ej.isNullOrUndefined(this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]));
            if (this.model.endHour > 24) this.model.endHour = 24;
            if (this.model.startHour < 0) this.model.startHour = 0;
            this._timeMode = (this.model.timeMode == null) ? (localizeAmPm.AM == null && localizeAmPm.PM == null) ? "24" : "12" : this.model.timeMode;
            if (this.model.timeMode == null) { this._pattern = culture.calendar.patterns; }
            else this._pattern.t = (this._timeMode == "12") ? "h:mm tt" : "HH:mm";
            this._firstdayofweek = (this.model.firstDayOfWeek != null) ? (typeof this.model.firstDayOfWeek == "string") ? this._dayNamesArray.indexOf(this.model.firstDayOfWeek.toString().toLowerCase()) : this.model.firstDayOfWeek : culture.calendar.firstDay;
            this.model.workWeek = this.model.workWeek.toString().toLowerCase().split(",");
            this.model.width = this.model.width ? this.element.width(this._clientWidth).width() : this.element.width();
            this.model.height = this.model.height ? this.element.height(this.model.height).height() : this.element.height();
            this.scWidth = this._scWidth ? parseInt(this._scWidth) : parseInt(this.model.width);
            this.scHeight = this._scHeight ? parseInt(this._scHeight) : parseInt(this.model.height);
            (this.currentDate() < this.model.minDate) && this.currentDate(this.model.minDate);
            (this.currentDate() > this.model.maxDate) && this.currentDate(this.model.maxDate);
            this.element.addClass("e-scheduleouter").height(this.model.height).width(this._clientWidth).attr("role", "presentation");
            var orientationClass = this.model.orientation == "vertical" ? "e-vertical" : "e-horizontal";
            $(this.element).attr("tabIndex", 1);
            var $scheduleDiv = ej.buildTag('div.e-scheduleinner ' + orientationClass, "", {}, { height: this.scHeight, width: this.scWidth }).css("height", this.scHeight - 2 + "px").css("position", "relative");
            var $scheduleTable = ej.buildTag('table.e-table', "", {}, { cellpadding: "0px", cellspacing: "0px" }).addClass("e-scheduleoutertable");
            var $tBody = ej.buildTag('tbody');
            this.hTR = ej.buildTag("tr.e-scheduleheader");
            this.aTR = ej.buildTag("tr.e-headerarearow");
            this.model.views.toString().toLowerCase().split(',').indexOf(this.currentView()) == -1 && this.currentView(this.model.views[0].toLowerCase());
            this._calculateCustomDays()._getRenderDates();
            this.wTR = ej.buildTag("tr.e-contentarearow");
            this._renderTemplates();
            this.model.showHeaderBar && this._renderHeaderBar(this.hTR);
            this._renderHeaderAllDayTemplate();
            this._renderContentAreaTemplate();
            $scheduleDiv.append($scheduleTable.append($tBody.append(this.hTR).append(this.aTR).append(this.wTR)));
            (this._mediaQuery && this.res1.length > 1) && this.element.addClass("e-resources");
            this._renderDialogs();
            this._renderToolTip();
            this.element.append($scheduleDiv);
            !this.model.showHeaderBar && this.element.find(".e-scheduleheader").hide();
            if (this.model.showHeaderBar) {
                this.hTR.find(".e-commonviewbutton.e-" + this.currentView()).addClass("e-activeview");
                this.element.find("#" + this._id + "_navigator").ejDatePicker({ startDay: this._firstdayofweek, enableRTL: this.model.enableRTL, buttonText: this._getLocalizedLabels("Today"), select: $.proxy(this._onselect, this), locale: this.model.locale, cssClass: this.model.cssClass, minDate: this.model.minDate, maxDate: this.model.maxDate });
                this.element.find("span.e-datewidget").css("display", "none");
            }
            (this._mediaQuery || this.element.width() < 600) && this._renderNavigationDrawer();
            this._showContextMenu(this.model.contextMenuSettings.enable);
            this._renderAlertWindow();
            var scheduleResponsive = $("#" + this._id + "AppointmentAddEditWindow_wrapper,#" + this._id + "RecurrenceEdit_wrapper,#" + this._id + "navDrawer,#" + this._id + "alertWindow_wrapper");
            (this._mediaQuery) ? scheduleResponsive.addClass("e-scheduleresponsive") : scheduleResponsive.removeClass("e-scheduleresponsive");
            if (this._mediaQuery)
                this._phoneChanges();
            if (this.model.enableRTL && this._browserInfo.name == "webkit")
                this._appointmentAddWindow.find(".e-chk-image").css("margin-right", "-13px");
            this._renderCommon('init');
        },

        _renderToolTip: function () {
            var proxy = this;
            if (ej.isNullOrUndefined(this.element.data("ejTooltip"))) {
                var target = this.model.tooltipSettings.enable ? ".e-appointment,.e-alldayappointment,.e-monthappointment,.e-agendacells.e-eventcolumn,.e-appup,.e-appdown,.e-appsoverflow" : ".e-appup,.e-appdown,.e-appsoverflow";
                this.element.ejTooltip({
                    target: target,
                    associate: "mousefollow",
                    isBalloon: false,
                    beforeOpen: function (args) {
                        if (!proxy._showToolTip(args)) {
                            args.cancel = true;
                            proxy._openTooltip = false;
                        } else
                            proxy._openTooltip = true;
                    },
                    containment: "#" + this._id,
                    tip: {
                        adjust: {
                            xValue: 20,
                            yValue: 20
                        }
                    },
                    position: {
                        target: { horizontal: "center", vertical: "bottom" },
                        stem: { horizontal: "left", vertical: "top" }
                    },
                    tracking: function (args) {
                        if (!proxy._openTooltip || $(args.event.target).is(".e-tophandle,.e-bottomhandle,.e-schedulemouseclose,.e-righthandle,.e-lefthandle,.e-schedulerepeat,.e-editapp,.e-deleteapp")) {
                            args.cancel = true;
                            this.hide();
                        }
                    }
                });
            }
        },

        _renderDialogs: function () {
            this._renderAppointmentWindow();
            $.isFunction($.validator) && this._setValidation();
            this._renderRecurEditWindow();
            this.model.showQuickWindow && (this._renderQuickAppWindow() || this._renderQuickAppDetailsView());
            $.isFunction($.validator) && this._setQuickValidation();
        },

        _renderCommon: function (type) {
            if (this.currentView() != "agenda") {
                if (this.model.orientation == "vertical") {
                    this._headerbarWidth();
                    (type == 'init') && (this.currentView() === "month" || (this._isCustomMonthView())) && this._renderMonthTimeCells();
                    if (!this.model.timeScale.enable) {
                        this.element.find(".e-headercells").first("td").css("border-left", "none");
                        this.element.find(".e-workcellstab").find("tr").find("td:first-child").css("border-left", "none");
                    }
                    if (!this.model.showAllDayRow && this.model.cellWidth) {
                        this.element.find(".e-workcellstab tr td:first-child").width(this.element.find(".e-headercells").width());
                    }
                    this.element.find(".e-schedulesettings").html(this._getLocalizedLabels("AllDay"));
                    this.element.find(".e-ampmdisplay").height(this.element.find(".e-workcells").height());
                }
                if (this.currentView() != "agenda" && this.model.orientation == "horizontal" && (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0))) {
                    var border = this.model.enableRTL ? 'border-right' : 'border-left';
                    this.element.find(".e-horizontaldaterender").css(border, '0px');
                    this.wTR.find(".e-workareadiv").parent().css(border, '0px');
                }
                this.model.enableRTL && this.element.addClass("e-rtl");
                (this.model.timeScale.enable) && this._borderAddRemove();
                this.model.enableRTL && this.element.removeClass("e-rtl");
                this.model.orientation == "vertical" ? (this.currentView() !== "month" && !(this._isCustomMonthView())) ? this.element.find(".e-headercells").addClass("e-dateheaderselect") : "" : this.element.find(".e-headercells").addClass("e-dateheaderselect");
                if (this.model.orientation == "horizontal" && (this.currentView() == "month" || this._isCustomMonthView()) && this.element.find('.e-workcells').width() < this.element.find('.e-dateheadercell').width() && this.model.cellWidth == "")
                    this.element.find('.e-workcells').width(this.element.find('.e-horizontmonthheaderdaytd').width());
                this.element.find(".e-horizontalresheader").width((this._mediaQuery) ? "50px" : "100%");
                this._renderScroller();
                if (this.model.showAppointmentNavigator && this.model.orientation == "vertical" && this.element.find(".e-vscroll").length > 0 && this.currentView() != "month" && (!this._isCustomMonthView()) && (!this._mediaQuery)) this._renderUpDownIcon();
                if (this.model.orientation == "horizontal")
                    this._horizontalRender();
                else {
                    if (!this.model.showOverflowButton && this.currentView() == "month")
                        this._monthCellsRender();
                    else
                        this.currentView() == "month" || (this._isCustomMonthView()) ? this.element.find(".e-monthcells, .e-timecells").outerHeight(this.model.cellHeight != "20px" ? parseInt(this.model.cellHeight) + 1 : parseInt(this.element.find(".e-draggableworkarea").height() / this.element.find(".e-draggableworkarea tr").length)) : this.element.find(".e-ampmdisplay").height(this.element.find(".e-workcells").height());
                }
                this._highlightCurrentTime(this.model.showCurrentTimeIndicator);
                this.model.enableRTL && this.element.addClass("e-rtl");
                if (this.model.orientation == "horizontal" && ej.scheduleFeatures.horizontal) {
                    this._moveScroller();
                    if (!this.model.timeScale.enable)
                        this.element.find(".e-headercells").removeClass("e-dateheaderselect");
                    if (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0)
                        this._horizontalResIcon();
                    if (!ej.isNullOrUndefined(this.model.dateHeaderTemplateId) && (this.currentView() == "day" || this.currentView() == "week" || this.currentView() == "workweek" || (this.currentView() == "customview" && this._oneWeek)))
                        this.element.find(".e-headercells").parent().parent().parent().css("width", ((this.element.width() * 10) / 100) * this._dateRender.length + "px");
                    this.element.find(".e-parentnodecategory").width((this._mediaQuery) ? "12px" : "20px");
                }
                else {
                    if (!ej.isNullOrUndefined(this.model.allDayCellsTemplateId))
                        this.element.find(".e-leftindent, .e-emptyalldaytd").height(this.element.find(".e-alldaycells").height());
                }
                (this.model.workHours.highlight) ? this._highlightBusinessHours() : this.element.find(".e-workcells").removeClass("e-businesshighlightworkcells");
                (type == 'current') && this._renderHeaderDays();
                (this._dateRender.length > 60 || ($.isNumeric(this.element.find(".e-monthcells").height()) && (this.element.find(".e-monthcells").height() != $(this.element.find(".e-timecells")[3]).height()) && this.model.orientation == "vertical" && this.model.showOverflowButton)) ? this.element.find('td.e-timecells .e-timecelldivs').addClass('e-timedivcells') : "";
                (this.model.orientation == "horizontal" && this._safariBrowser) && this.element.find(".e-workcells.e-dayend").width(this.element.find(".e-workcells.e-dayend").outerWidth() + 1);
                if (this._browserInfo.name == "msie" && this._browserInfo.version < 9 && this.model.orientation == "vertical") {
                    this.element.find(".e-workleftindent").find("tr").last().find("td").addClass("e-lastcell");
                    this.element.find(".e-workcellstab").find("tr").last().find("td").addClass("e-lastcell");
                }
            }
            this._validateMinMaxDate();
            (!ej.isNullOrUndefined(this.model.queryCellInfo)) && this._renderQueryCellInfo("emptycell");
            this._businessHourScroller();
        },
        _resourceSegregate: function () {
            var resourceFields = ""; this._tempResource = []; this._grouping = [];
            if (!ej.isNullOrUndefined(this.model.group) && !ej.isNullOrUndefined(this.model.resources)) {
                for (var i = 0; i < this.model.group.resources.length; i++) {
                    index = this._findResourceIndex(this.model.resources, "name", this.model.group.resources[i]);
                    if (!ej.isNullOrUndefined(index)) {
                        if (this.model.resources.length != 0 && this.model.resources[index].resourceSettings.dataSource.length != 0) {
                            this._tempResource.push(this.model.resources[index]);
                            this._grouping.push(this.model.group.resources[i]);
                            if (i == this.model.group.resources.length - 1)
                                resourceFields = resourceFields + this.model.resources[index].field;
                            else
                                resourceFields = resourceFields + this.model.resources[index].field + ",";
                        }
                        else
                            return false;
                    }
                }
                this._appointmentSettings.resourceFields = resourceFields;
            }
            else if (ej.isNullOrUndefined(this.model.group) && !ej.isNullOrUndefined(this.model.resources)) {
                $.merge(this._tempResource, this.model.resources);
            }
        },
        _borderAddRemove: function () {
            if (!this.model.enableRTL) {
                this.element.find(".e-headrealldaytable tr td:first-child,.e-workcellstab tr td:first-child,.e-headerdays table tr td:first-child").css("border-left", "none");
                this.element.find(".e-horizontalheader,.e-horizontalrestd,.e-monthleftindent,.e-workleftindent,.e-empty").addClass("e-borderright");
            }
            else {
                this.element.find(".e-headrealldaytable tr td:first-child,.e-workcellstab tr td:first-child,.e-headerdays table tr td:first-child").css("border-right", "none");
                this.element.find(".e-horizontalheader,.e-horizontalrestd,.e-monthleftindent,.e-workleftindent,.e-empty").addClass("e-borderleft");
            }
            if (this.model.orientation == "horizontal") {
                parseInt(this.element.find(".e-horizontaltimetd,.e-horizontmonthheaderdaytd").css("border-bottom-width"), 10) > 1 ? "" : this.element.find(".e-horizontaltimecells").height(this.element.find(".e-horizontaltimecells").height() - 2);
                if (this.currentView() == "month")
                    if (this._browserInfo.name != "webkit" || this.model.cellWidth == "")
                        this.element.find(".e-headerdays table tr td:first-child").width(this.element.find(".e-workcellstab tr td:first-child").width());
                    else
                        this.element.find(".e-workcellstab tr td:not(:first-child)").width(this.element.find(".e-horizontmonthheaderdaytd").first().width() + 1);
                else if (this._browserInfo.name == "webkit")
                    this.element.find(".e-workcellstab tr td:first-child").width(this.element.find(".e-horizontaltimetd").first().width());
            }
            else {
                if (this.model.cellWidth != "")
                    this.element.find(".e-workcellstab tr td:first-child").width(this.element.find(".e-headercells").first().width());
                this._safariBrowser && (this.currentView() == "month" ? this.element.find(".e-monthleftindent").width(this.element.find(".e-monthempty").width() + 1) : this.element.find(".e-workleftindent").attr('style', "width:" + (this.element.find(".e-empty").width() + 1) + "px !important"));
            }
            if (!ej.isNullOrUndefined(this.oldDate) && this.oldDate != "") {
                this.currentDate(new Date(this.oldDate));
                this.oldDate = "";
            }
        },
        _phoneChanges: function () {
            this._appointmentAddWindow.ejDialog({
                allowDraggable: false,
                position: { X: "0", Y: "0" }
            });
        },
        _dateConvert: function (dtstr) {
            if (!ej.isNullOrUndefined(dtstr)) {
                var convdt = new Date(parseInt(dtstr.match(/\d+/).toString()));
                convdt = $.type(convdt) == "date" ? convdt : new Date();
            }
            else
                convdt = null;
            return convdt;
        },
        _calculateCustomDays: function () {
            if (!ej.isNullOrUndefined(this.model.renderDates) && this.currentView() == "customview" && !this._navigate) {
                var startdate = $.type(this.model.renderDates.start) != "date" ? ej.parseDate(this.model.renderDates.start, this._datepattern()) : new Date(this.model.renderDates.start);
                startdate = (!ej.isNullOrUndefined(startdate)) ? startdate : ((new Date(this.model.renderDates.start).toString() == "Invalid Date" || new Date(this.model.renderDates.start).toString() == "NaN") ? this._dateConvert(this.model.renderDates.start) : new Date(this.model.renderDates.start));
                var enddate = $.type(this.model.renderDates.end) != "date" ? ej.parseDate(this.model.renderDates.end, this._datepattern()) : new Date(this.model.renderDates.end);
                enddate = (!ej.isNullOrUndefined(enddate)) ? enddate : ((new Date(this.model.renderDates.end).toString() == "Invalid Date" || new Date(this.model.renderDates.end).toString() == "NaN") ? this._dateConvert(this.model.renderDates.end) : new Date(this.model.renderDates.end));;
                if (!ej.isNullOrUndefined(this.model.minDate) && !ej.isNullOrUndefined(this.model.maxDate)) {
                    startdate = (this.model.minDate >= startdate && this.model.maxDate <= startdate) ? startdate : (this.model.minDate >= startdate && this.model.maxDate >= startdate) ? this.model.minDate : (this.model.maxDate <= startdate) ? this.model.minDate : startdate;
                    enddate = (this.model.minDate >= enddate && this.model.maxDate <= enddate) ? enddate : (this.model.minDate <= enddate && this.model.maxDate <= enddate) ? this.model.maxDate : (this.model.minDate >= enddate) ? this.model.maxDate : enddate;
                }
                this._renderStart = !ej.isNullOrUndefined(startdate) ? new Date(startdate.getFullYear(), startdate.getMonth(), startdate.getDate()) : enddate;
                this._renderEnd = !ej.isNullOrUndefined(enddate) ? new Date(enddate.getFullYear(), enddate.getMonth(), enddate.getDate()) : startdate;
                this._renderDays = Math.round((this._renderEnd - this._renderStart) / 86400000) + 1;
                this.oldDate = this.currentDate();
                if (this._renderStart.getTime() > this.currentDate().getTime() || this._renderEnd.getTime() < this.currentDate().getTime()) {
                    this._renderStart = new Date(this.currentDate());
                    this._renderEnd = new Date(this._renderStart.getTime() + ((this._renderDays - 1) * 86400000));
                }
                else if ((this._renderStart.getTime() < this.currentDate().getTime()) && (this._renderEnd.getTime() > this.currentDate().getTime()))
                    this.currentDate(new Date(this._renderStart));
                else
                    this.currentDate(new Date(this._renderStart));
                if (this._renderDays > 7) {
                    var firstDay = this.model.orientation == "vertical" ? new Date(this._firstweekdate(this._renderStart)) : new Date(this._renderStart);
                    var endDay = new Date(this._renderEnd); var day = endDay.getDay();
                    (this._firstdayofweek == 0 && day != 6) ? endDay.setDate(new Date(this._renderEnd).getDate() + (6 - day)) : endDay.setDate(new Date(this._renderEnd).getDate() + (6 - day) + this._firstdayofweek);
                    endDay = this.model.orientation == "vertical" ? endDay : new Date(this._renderEnd);
                    this._numDays = Math.round((endDay - firstDay) / 86400000) + 1;
                }
            }
            return this;
        },

        _isCustomMonthView: function () {
            if (this.currentView() == "customview") {
                this._oneWeek = (this._dateRender.length > 7) ? false : true;
                return !this._oneWeek;
            }
            return false;
        },

        _headerbarWidth: function () {
            var cols = this.currentView() == "workweek" ? this.model.workWeek.length : this.currentView() == "day" ? 1 : (this.currentView() === "customview" && this._renderDays <= 7) ? this._dateRender.length : 7;
            var col = (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) ? (this.res1.length * cols) : cols;
            var border = this.element.outerWidth() - (this.element.find('.e-draggableworkarea').offset().left - this.element.offset().left) < parseInt(this.model.cellWidth) * col ? 1 : 0;
            if (this._browserInfo.name == "webkit")
                this.aTR.find(".e-headrealldaytable").width(this.model.cellWidth ? (parseInt(this.model.cellWidth) * col + (border ? 0 : col)) : "100%");
            else
                this.aTR.find(".e-headrealldaytable").width(this.model.cellWidth ? (parseInt(this.model.cellWidth) * col) + col : "100%");
        },

        _renderScroller: function () {
            var _scrollDiv = this.element.find('div#' + this._id + '_scroller');
            var hghtdiff = this.scHeight - (this.element.find('.e-draggableworkarea').offset().top - this.element.offset().top);
            var proxy = this;
            var scrollWidth = (this.model.orientation === "vertical") ? this.element.width() - (this._mediaQuery && (this.currentView() == "month" || this._isCustomMonthView()) ? 1 : (this.element.find('.e-scrolltimecells').length > 0 ? this.element.find('.e-scrolltimecells').parent().outerWidth() : 0)) : (this.model.orientation == "horizontal") && (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) ? this.element.width() - this.element.find(".e-resourceheadertable").width() - 1 : this.element.width();
            _scrollDiv.ejScroller({
                enableRTL: this.model.enableRTL, height: (hghtdiff - 1), width: parseInt(scrollWidth) - 2, cssClass: this.model.cssClass,
                thumbStart: function (e) {
                    var target = $(e.originalEvent.target);
                    if ((!proxy._mediaQuery) && target.closest(".e-workcells").hasClass("e-workcells") || target.closest(".e-appointment").hasClass("e-appointment") || target.closest(".e-monthappointment").hasClass("e-monthappointment") || target.closest(".e-categorybar").hasClass("e-categorybar")) return false;
                },
                scroll: function (e) {
                    !ej.isNullOrUndefined(e.scrollTop) && (e.scrollTop = parseInt(e.scrollTop));
                    var scrollerObj = proxy.element.find('div#' + proxy._id + "_scroller").data("ejScroller");
                    if ((scrollerObj.isVScroll()) || (scrollerObj.isHScroll())) {
                        (proxy.model.orientation === "vertical") ? proxy.element.find(".e-scrolltimecells").css("top", (-e.scrollTop) + "px") : (proxy.model.timeScale.enable && proxy.currentView() !== "month" && !(proxy._isCustomMonthView())) ? $(proxy.element.find(".e-horizontaltimecells").find("table tr")[2]).css("left", (-e.scrollLeft) + "px") : proxy.element.find(".e-headerdays").css("left", (-e.scrollLeft) + "px");
                        if (proxy.element.find('.e-vhandle').length == 1)
                            proxy.element.find(".e-horires").css("top", (-e.scrollTop) + "px");
                        if (proxy.model.orientation == "vertical") {
                            proxy.element.find(".e-headrealldaytable").css("left", (proxy.model.enableRTL) ? (e.scrollData.scrollable - e.scrollLeft) : (-e.scrollLeft) + "px");
                            var timeWidth = proxy.element.find(".e-scrolltimecells").width() - 3;
                            proxy.element.find(".e-upicon, .e-downicon").css("left", -(e.scrollLeft - timeWidth) + "px");
                            if (proxy._timeMode === "12" && (proxy.currentView() !== "month" && !(proxy._isCustomMonthView()))) {
                                var top = (e.scrollTop / (proxy.element.find(".e-workcells").height() * proxy.model.timeScale.minorSlotCount));
                                top = (Math.round(top) < top) ? Math.round(top) + 1 : Math.round(top);
                                var localizeAmPm = ej.preferredCulture(proxy.model.locale).calendar;
                                if (localizeAmPm.AM && localizeAmPm.PM) {
                                    proxy.element.find('.e-idAmpmstyle').each(function (i, val) {
                                        if (i == (top) && $(val).text().trim() == "00")
                                            (parseInt($(val)[0].id) < 12) ? $(val).text(localizeAmPm.AM[0]) : $(val).text(localizeAmPm.PM[0]);
                                        else if (($(val).text() == localizeAmPm.AM[0] && i > 0) || ($(val).text() == localizeAmPm.PM[0] && parseInt($(val)[0].id) > 12))
                                            $(val).text("00");
                                    });
                                }
                            }
                            if (proxy.model.showAppointmentNavigator && proxy.model.orientation == "vertical" && scrollerObj.isVScroll() && proxy.currentView() != "month" && (!proxy._isCustomMonthView()) && (!proxy._mediaQuery)) {
                                proxy._renderUpDownIcon();
                                proxy._renderUpDownIconPosition();
                            }
                        }
                        else if (ej.scheduleFeatures.horizontal && proxy.model.orientation == "horizontal")
                            proxy._horizontalScroll(e, proxy);
                    }
                    if (proxy.model.showQuickWindow) {
                        (proxy._quickAppointWindow.ejDialog("close") && proxy._quickAppDetailsWindow.ejDialog("close"));
                    }
                }
            });
            (!this._mediaQuery) && this._nextPrevAppointment(this.model.showAppointmentNavigator);
            this._renderHoriVerticalScroll();
            this.element.find(".e-mobileNavigation").css(this.model.enableRTL ? "right" : "left", this.element.outerWidth() - 36);
            this._showScrollTd();
        },

        _showScrollTd: function () {
            var border = this.model.enableRTL ? "e-borderright" : "e-borderleft";
            var tdwidth = this.model.orientation == "horizontal" ? "16px" : "18px";
            if (this.model.orientation == "horizontal") {
                if (this.element.find(".e-vscroll").length > 0) {
                    this.element.find(".e-scheduleheader td").first().attr("colspan", "3");
                    this.element.find(".e-workareadiv").parent().attr("colspan", "2");
                    if (this.element.find(".e-emptyscrolltd").length == 0)
                        this.aTR.append(ej.buildTag('td.e-emptyscrolltd', "", {}, { width: this._mediaQuery ? "0px" : "16px" }));
                    this.element.find(".e-emptyscrolltd").addClass("e-horizontalemptytd");
                }
                else {
                    this.element.find(".e-scheduleheader td").first().attr("colspan", "2");
                    this.element.find(".e-workareadiv").parent().attr("colspan", "2");
                }
            }
            this.element.find(".e-vscroll").length > 0 ? this.element.find(".e-emptyscrolltd").addClass(border).attr('width', tdwidth).show() : this.element.find(".e-emptyscrolltd").removeClass(border).attr('width', "0px").hide();
        },
        _renderHoriVerticalScroll: function () {
            var _scrollDiv = this.element.find('div#' + this._id + '_scroller');
            var scrollWidth = (this.model.orientation === "vertical") ? this.element.width() - (this._mediaQuery && (this.currentView() == "month" || this._isCustomMonthView()) ? 1 : (this.element.find('.e-scrolltimecells').length > 0 ? this.element.find('.e-scrolltimecells').parent().outerWidth() : 0)) : (this.model.orientation == "horizontal") && (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) ? this.element.width() - this.element.find(".e-resourceheadertable").width() : this.element.width();
            scrollWidth = parseInt(scrollWidth) - 1;
            var hghtdiff = parseInt(this.scHeight) - (this.element.find('.e-draggableworkarea').offset().top - this.element.offset().top);
            var vScrollBarWidth = (_scrollDiv.ejScroller("isVScroll") ? 18 : 0), hScrollBarWidth = (_scrollDiv.ejScroller("isHScroll") ? 18 : 0);
            if (this.model.orientation == "vertical") {
                if (this.currentView() != "month" && !this._isCustomMonthView() && this.model.timeScale.enable)
                    if (vScrollBarWidth == 0)
                        this.element.find(".e-workcells").height((hghtdiff / this.element.find('div.e-draggableworkarea tr').length) - 1);
                    else
                        this.element.find(".e-workcells").height(this.model.cellHeight != "20px" ? parseInt(this.model.cellHeight) : 20);
                if (this.model.cellWidth || this.model.cellHeight != "20px") {
                    var cols = this.currentView() == "workweek" ? this.model.workWeek.length : this.currentView() == "day" ? 1 : (this.currentView() === "customview" && this._renderDays <= 7) ? this._dateRender.length : 7;
                    var col = (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) ? (this.res1.length * cols) : cols;
                    (this.currentView() == "day") && this.element.find(".e-headerdaydisplay").css("width", this.model.cellWidth);
                    var overallWidth = (parseInt(this.model.cellWidth) + 1) * col;
                    var overallHeight = parseInt(this.model.cellHeight) * (this.element.find('div.e-draggableworkarea tr').length);
                    var timeScaleWidth = this.element.find(".e-scrolltimecells").length > 0 ? this.element.find(".e-scrolltimecells").width() : 0;
                    this.element.find(".e-draggableworkarea").width((this.element.width() > overallWidth + timeScaleWidth + vScrollBarWidth) ? overallWidth - 1 : scrollWidth - 1 - vScrollBarWidth);
                    (this.model.cellHeight == "20px") ? this.element.find(".e-draggableworkarea").height(hghtdiff - 1 - hScrollBarWidth) : this.element.find(".e-draggableworkarea").height(hghtdiff > overallHeight ? overallHeight : hghtdiff - 1 - hScrollBarWidth);
                    (this.model.cellWidth) && this.element.find(".e-datecommondiv").parent().width(parseInt(this.element.width()) - 2);
                }
                else {
                    this.element.find(".e-draggableworkarea").height(hghtdiff - 1);
                    if (!this.model.showOverflowButton) this._monthCellsRender();
                    if (this.element.find(".e-vscroll").length > 0 && !this._mediaQuery)
                        this.element.find(".e-draggableworkarea").width(scrollWidth - 1 - (_scrollDiv.ejScroller("isVScroll") ? 18 : 0));
                    else if ((this.currentView() == "month" || (this._isCustomMonthView())) || !this.model.timeScale.enable) {
                        this.element.find(".e-draggableworkarea").width(scrollWidth - 1);
                    }
                }
                if (this._mediaQuery && this.res1.length > 1)
                    this.element.find(".e-draggableworkarea").width(this.element.find(".e-draggableworkarea").width() * this.res1.length);
                this.element.find(".e-headrealldaytable").parent().width(this.element.find(".e-draggableworkarea").width());
                this.element.find(".e-scrolltimecells").height(this.element.find('.e-draggableworkarea').height());
            }
            else {
                !(_scrollDiv.ejScroller("isHScroll")) ? this.element.find(".e-draggableworkarea").css("height", "100%") && this.element.find(".e-resfootertr").css("height", "0px") : "";
                !(_scrollDiv.ejScroller("isVScroll")) ? this.element.find(".e-draggableworkarea").css("height", hghtdiff - 19) : "";
                if (this._mediaQuery) {
                    this.element.find(".e-horizontresdiv").height(_scrollDiv.height());
                    this.element.find(".e-draggableworkarea").children().height("100%");
                    this.element.find(".e-horires").height(this.element.find(".e-draggableworkarea").height());
                    this.element.find(".e-horires").children().height("100%");
                }
                if (this.model.cellWidth || this.model.cellHeight != "20px") {
                    var count = $(this.element.find(".e-workcells")[0]).parent().find("td").length;
                    !(_scrollDiv.ejScroller("isHScroll")) ? this.element.find(".e-draggableworkarea").width((parseInt(this.model.cellWidth) * count) + count) : "";
                    (this.currentView() == "month" || (this._isCustomMonthView()) || !this.model.timeScale.enable) && this.element.find(".e-headerdays").children().css("width", (this.element.find(".e-draggableworkarea").children().width() + "px")).css("table-layout","auto");
                    (this.model.cellHeight != "20px" && !this._tempResource) && this.element.find('.e-draggableworkarea').height(parseInt(this.model.cellHeight) - 1);
                }
                else if (this.currentView() == "month" || this._isCustomMonthView())
                    this.element.find(".e-headerdays table tr td:first-child").width(this.element.find(".e-workcellstab tr td:first-child").width());
                //Temp if scroll left issue fixed need to remove
                this.currentView() == "day" && this.model.timeScale.enable && $(this.element.find(".e-horizontaltimecells").find("table tr")[2]).css("left", -(this.element.find(".e-draggableworkarea").scrollLeft()) + "px");
                this.element.find('.e-horizontaltabletimecell').width(this.element.find('.e-workcellstab').width());
                if (this.model.timeScale.enable && !_scrollDiv.ejScroller("isHScroll") && this.currentView() != "month" && !this._isCustomMonthView()) {
                    var width = Math.floor(this.element.find(".e-draggableworkarea").width() / $(this.element.find(".e-workcells")[0]).parent().find("td").length);
                    this.element.find(".e-workcells").width(width);
                    this.element.find(".e-horizontaltabletimecell").find("tr td").width(width);
                    this.element.find(".e-horizontaltabletimecell").css("table-layout", "fixed").width(this.element.find('.e-draggableworkarea').width());
                    _scrollDiv.ejScroller("refresh");
                }
                if (!this.model.timeScale.enable && this.currentView() != "month" && !this._isCustomMonthView()) {
                    if (!this.model.cellWidth && this._browserInfo.name != "webkit") {
                        this.element.find(".e-dateheadercell").width(this.element.find(".e-workcells").width());
                        this.element.find(".e-workcells").width(this.element.find(".e-workcells").width());
                    }
                    else if (this._browserInfo.name == "webkit" && this.currentView() != "month") {
                        (this.model.cellWidth) && this.element.find(".e-headerdays").width(this.model.cellWidth);
                        this.element.find(".e-workcells").width(this.element.find(".e-draggableworkarea").width / this._dateRender.length);
                        this.element.find(".e-dateheadercell").width(this.element.find(".e-workcells").width());
                        this.element.find(".e-headerdays table tr td:not(:first-child)").find(".e-dateheadercell").width(this.element.find(".e-workcells").width() - 1);
                        this.element.find(".e-workcells").width(this.element.find(".e-workcells").width());
                    }
                }
            }
            //if (this.model.timeScale.enable && this._isCustomMonthView()) this.element.find(".e-timecells").children().height(this.element.find(".e-workcells,.e-monthcells").height());
        },

        _getDayNameIndex: function (day) {
            var dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
            var cultureNames = [], index = this._firstdayofweek;
            do {
                if (index > 6) index = 0;
                cultureNames.push(dayNames[index]);
                index++;
            } while (cultureNames.length < 7)
            return cultureNames.indexOf(day.capitalizeFirstString());
        },

        _highlightBusinessHours: function () {
            if (this.currentView() == "agenda") return false;
            var resource = (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) ? ((!ej.isNullOrUndefined(this.model.group) && !ej.isNullOrUndefined(this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"])) || (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && !ej.isNullOrUndefined(this._tempResource[this._tempResource.length - 1].resourceSettings["start"]) || !ej.isNullOrUndefined(this._tempResource[this._tempResource.length - 1].resourceSettings["end"]))) : false;
            if (resource) {
                this.element.find(".e-workcells, .e-monthcells").removeClass("e-businesshighlightworkcells e-monthcellhighlight");
                var renderDates, startHour, endHour, resStartHour, resEndHour, noOfHours, startIndex, endIndex, tdLength, colCount, customDays, dayIndex, index, rowFirst, rowLast, dayCount = 0, dateCount = [];;
                var target = this.element.find(".e-workcellstab tr");
                var resources = (this.model.orientation == "horizontal" && this._grouping.length > 1) ? this._resourceSort() : this.res1;
                if (this.model.orientation == "vertical") {
                    for (var i = 0; i < resources.length; i++) {
                        if (!ej.isNullOrUndefined(resources[i][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]]))
                            customDays = resources[i][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]];
                        else
                            customDays = this.model.workWeek;
                        if (this.currentView() !== "month" && !(this._isCustomMonthView()) && this.model.timeScale.enable) {
                            renderDates = this.dateRender;
                            if (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && !ej.isNullOrUndefined(this._tempResource[this._tempResource.length - 1].resourceSettings["start"]) || !ej.isNullOrUndefined(this._tempResource[this._tempResource.length - 1].resourceSettings["end"])) {
                                resStartHour = resources[i][this._tempResource[this._tempResource.length - 1].resourceSettings["start"]];
                                resEndHour = resources[i][this._tempResource[this._tempResource.length - 1].resourceSettings["end"]];
                                startHour = !ej.isNullOrUndefined(resStartHour) ? (resStartHour >= this.model.startHour) ? resStartHour : (this.model.workHours.start >= this.model.startHour) ? this.model.workHours.start : this.model.startHour : (this.model.workHours.start >= this.model.startHour) ? this.model.workHours.start : this.model.startHour;
                                endHour = !ej.isNullOrUndefined(resEndHour) ? (resEndHour <= this.model.endHour) ? resEndHour : (this.model.workHours.end <= this.model.endHour) ? this.model.endHour : this.model.workHours.end : (this.model.workHours.end <= this.model.endHour) ? this.model.workHours.end : this.model.endHour;
                            }
                            else {
                                startHour = this.model.workHours.start >= this.model.startHour ? this.model.workHours.start - this.model.startHour : 0;
                                endHour = this.model.workHours.end <= this.model.endHour ? this.model.workHours.end - this.model.startHour : this.model.endHour - this.model.startHour;
                            }
                            noOfHours = this.model.endHour - this.model.startHour;
                            startIndex = Math.floor((target.length / noOfHours) * startHour) - (this.model.startHour * this.model.timeScale.minorSlotCount);
                            endIndex = Math.floor((target.length / noOfHours) * endHour) - (this.model.startHour * this.model.timeScale.minorSlotCount);
                            colCount = this.currentView() === "week" ? 7 : this.currentView() === "workweek" ? customDays.length : (this.currentView() === "customview" && this._renderDays <= 7) ? this._dateRender.length : 1;
                            for (var a = startIndex; a < endIndex; a++) {
                                for (var b = dayCount; b < (dayCount + colCount) ; b++) {
                                    for (var c = 0; c < customDays.length; c++) {
                                        dayIndex = this._dayNamesArray.indexOf(customDays[c]);
                                        if (dayIndex == -1) {
                                            dayIndex = this._getDayNameIndex(customDays[c]);
                                        }
                                        if (dayIndex == new Date(renderDates[b]).getDay()) {
                                            $($(target[a]).children()[b]).addClass("e-businesshighlightworkcells");
                                        }
                                    }
                                }
                            }
                            dayCount += colCount;
                        }
                        else {
                            if (this._resWorkWeek) {
                                for (var a = 0; a < customDays.length; a++) {
                                    index = this._dayFullNames.indexOf(customDays[a].capitalizeFirstString());
                                    if (index == -1) {
                                        index = this._getDayNameIndex(customDays[a]);
                                    }
                                    dateCount.push(this._renderDates[index]);
                                }
                                renderDates = dateCount;
                            }
                            else renderDates = (this.currentView() != "month" && !this._isCustomMonthView()) ? this.dateRender : this._dateRender;
                            colCount = (this._resWorkWeek) ? customDays.length : (this.currentView() == "day") ? 1 : 7;
                            rowFirst = (this.currentView() != "month" && !this._isCustomMonthView()) ? dayCount : (i * 7);
                            rowLast = (this.currentView() != "month" && !this._isCustomMonthView()) ? (dayCount + colCount) : ((i + 1) * 7);
                            for (var a = 0; a < target.length; a++) {
                                for (var b = rowFirst; b < rowLast; b++) {
                                    for (var c = 0; c < customDays.length; c++) {
                                        dayIndex = this._dayNamesArray.indexOf(customDays[c]);
                                        if (dayIndex == -1) {
                                            dayIndex = this._getDayNameIndex(customDays[c]);
                                        }
                                        if (dayIndex == new Date(renderDates[b]).getDay()) {
                                            !$($(target[a]).children()[b]).hasClass("e-othermonths") ? $($(target[a]).children()[b]).addClass("e-monthcellhighlight") : $($(target[a]).children()[b]).removeClass("e-monthcellhighlight");
                                        }
                                    }
                                }
                            }
                            dayCount += colCount;
                        }
                    }
                }
                else {
                    if (this.currentView() !== "month" && !(this._isCustomMonthView()) && this.model.timeScale.enable) {
                        renderDates = this._dateRender;
                        for (var i = 0; i < resources.length; i++) {
                            if (resources[i].classname != "e-parentnode") {
                                resStartHour = resources[i][this._tempResource[this._tempResource.length - 1].resourceSettings["start"]];
                                resEndHour = resources[i][this._tempResource[this._tempResource.length - 1].resourceSettings["end"]];
                                startHour = !ej.isNullOrUndefined(resStartHour) ? (resStartHour >= this.model.startHour) ? resStartHour : (this.model.workHours.start >= this.model.startHour) ? this.model.workHours.start : this.model.startHour : (this.model.workHours.start >= this.model.startHour) ? this.model.workHours.start : this.model.startHour;
                                endHour = !ej.isNullOrUndefined(resEndHour) ? (resEndHour <= this.model.endHour) ? resEndHour : (this.model.workHours.end <= this.model.endHour) ? this.model.endHour : this.model.workHours.end : (this.model.workHours.end <= this.model.endHour) ? this.model.workHours.end : this.model.endHour;
                                noOfHours = this.model.endHour - this.model.startHour;
                                tdLength = $(target[i]).children().length / renderDates.length;
                                startIndex = Math.floor((tdLength / noOfHours) * startHour);
                                endIndex = Math.floor((tdLength / noOfHours) * endHour);
                                for (var a = 0; a < renderDates.length; a++) {
                                    for (var b = 0; b < this.model.workWeek.length; b++) {
                                        dayIndex = this._dayNamesArray.indexOf(this.model.workWeek[b]);
                                        if (dayIndex == -1) {
                                            dayIndex = this._getDayNameIndex(this.model.workWeek[b]);
                                        }
                                        if (dayIndex == new Date(renderDates[a]).getDay()) {
                                            for (var c = ((tdLength * a) + startIndex) ; c < ((tdLength * a) + endIndex) ; c++) {
                                                $($(target[i]).children()[c]).addClass("e-businesshighlightworkcells");
                                                if (this._grouping.length > 1) {
                                                    var resIndex = i;
                                                    var index = this._tempResource.length - 1;
                                                    do {
                                                        var resParent = new ej.DataManager(this._tempResource[index - 1].resourceSettings.dataSource).executeLocal(new ej.Query().where(this._tempResource[index - 1].resourceSettings["id"], ej.FilterOperators.equal, resources[resIndex][this._tempResource[this._tempResource.length - 1].resourceSettings["groupId"]]));
                                                        if (!ej.isNullOrUndefined(resParent)) {
                                                            resIndex = resources.indexOf(resParent[0]);
                                                            $($(target[resIndex]).children()[c]).addClass("e-businesshighlightworkcells");
                                                        }
                                                        index -= 1;
                                                    } while (index > 0)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                        this._horizontalBusinessHighlight(null, null, null, null, null);
                }
            }
            else if (this.currentView() !== "month" && !(this._isCustomMonthView()) && this.model.timeScale.enable) {
                this.element.find(".e-workcells").removeClass("e-businesshighlightworkcells");
                var renderDates = this.dateRender;
                var target = this.element.find(".e-workcells");
                var b_startHour = this.model.workHours.start >= this.model.startHour ? this.model.workHours.start - this.model.startHour : 0;
                var b_endHour = this.model.workHours.end <= this.model.endHour ? this.model.workHours.end - this.model.startHour : this.model.endHour - this.model.startHour;
                var timeRowsCount = (60 / this.model.timeScale.majorSlot) * (this.model.timeScale.minorSlotCount);
                this.res1 = (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) ? this.res1 : [0];
                var colCount = this.currentView() === "week" ? 7 * this.res1.length : this.currentView() === "workweek" ? this.model.workWeek.length * this.res1.length : (this.currentView() === "customview" && this._renderDays <= 7) ? this._dateRender.length * this.res1.length : 1 * this.res1.length;
                if (this.model.orientation == "vertical") {
                    for (var i = (b_startHour * timeRowsCount) ; i < (b_endHour * timeRowsCount) ; i++) {
                        for (var j = 0; j < colCount; j++) {
                            for (var k = 0; k < this.model.workWeek.length; k++) {
                                if (this._dayNamesArray.indexOf(this.model.workWeek[k]) == new Date(renderDates[j]).getDay())
                                    $(target[(i * colCount) + j]).addClass("e-businesshighlightworkcells");
                            }
                        }
                    }
                }
                else
                    this._horizontalBusinessHighlight(this._dateRender, b_startHour, b_endHour, timeRowsCount, target);
            }
            else {
                var target, monthDays;
                if (this.model.orientation == "vertical") {
                    monthDays = this.dateRender;
                    target = this.element.find(".e-monthcells");
                    target.removeClass("e-monthcellhighlight");
                    for (var i = 0; i < monthDays.length; i++) {
                        for (var j = 0; j < this.model.workWeek.length; j++) {
                            if (this._dayNamesArray.indexOf(this.model.workWeek[j]) == new Date(monthDays[i]).getDay())
                                !$(target[i]).hasClass("e-othermonths") ? $(target[i]).addClass("e-monthcellhighlight") : $(target[i]).removeClass("e-monthcellhighlight");
                        }
                    }
                }
                else
                    this._horizontalBusinessHighlight(null, null, null, null, null);
            }
        },

        _onselect: function (e) {
            this._navigateClick(e, "DateNavigation");
        },

        _renderHeaderBar: function (hTR) {
            var colsVal = this.model.orientation == "vertical" ? 1 : 3;
            var hTD = ej.buildTag('td', "", {}, { colspan: colsVal });
            var commonDiv = ej.buildTag('div.e-datecommondiv').append(ej.buildTag('div.e-icon e-navigateprevious', "", {}, { title: this._getLocalizedLabels("Previous") })).append(ej.buildTag('div', "", {}, { "aria-live": "assertive", tabindex: 0 }).html(this._getCurrentDateHeaderValue()).addClass("e-datedisplay")).append(ej.buildTag("input#" + this._id + "_navigator").css("display", "none").addClass("dateCalendar")).append(ej.buildTag('div.e-icon e-navigatenext', "", {}, { title: this._getLocalizedLabels("Next") }));
            if (this._mediaQuery || this.element.width() < 600) {
                this._mediaQuery && (commonDiv = ej.buildTag('div.e-datecommondiv').append(ej.buildTag('div.e-icon e-navigateprevious', "", {}, { title: this._getLocalizedLabels("Previous") })).append(ej.buildTag('div.e-icon e-navigatenext', "", {}, { title: this._getLocalizedLabels("Next") }).css("margin-left", "5px")).append(ej.buildTag('div', "", {}, { "aria-live": "assertive", tabindex: 0 }).html(this._getCurrentDateHeaderValue()).addClass("e-datedisplay").css("font-size", "18px")).append(ej.buildTag("input#" + this._id + "_navigator").css("display", "none").addClass("dateCalendar")));
                var menuIcon = ej.buildTag('div#' + this._id + 'navDrawerIcon.e-mobileNavigation e-icon');
                hTR.append(hTD.append(ej.buildTag("div").css("width", "100%").append(commonDiv).append(menuIcon)));
            }
            else {
                var buttonsDiv = ej.buildTag('div.e-viewsdiv');
                hTR.append(hTD.append(ej.buildTag("div").css("width", "100%").append(commonDiv).append(buttonsDiv.append(this._renderViewNavigation(this.model.views)))));
            }
            (!ej.isNullOrUndefined(this.model.queryCellInfo)) && this._renderQueryCellInfo("renderHeaderBar", "", hTR);
        },

        _renderViewNavigation: function (views) {
            var $viewTable = ej.buildTag('table.e-table e-viewstable', "", {}, { cellspacing: '0px', cellpadding: '0px' });
            var $viewBody = ej.buildTag('tbody');
            var $viewTR = ej.buildTag('tr');
            var _viewCollection = views, viewClassname;
            for (var i = 0; i < _viewCollection.length; i++) {
                viewClassname = (_viewCollection.length == 1) ? "e-" + _viewCollection[i].toLowerCase() + " e-singleview" : (i == 0) ? "e-" + _viewCollection[i].toLowerCase() + " e-firstview" : i == (_viewCollection.length - 1) ? "e-" + _viewCollection[i].toLowerCase() + " e-lastview" : "e-" + _viewCollection[i].toLowerCase();
                switch (_viewCollection[i]) {
                    case "day": $viewTR.append(ej.buildTag('td').append(ej.buildTag('div', this._getLocalizedLabels("Day"), {}, {}).addClass("e-commonviewbutton").addClass(viewClassname)));
                        break;
                    case "week": $viewTR.append(ej.buildTag('td').append(ej.buildTag('div', this._getLocalizedLabels("Week"), {}, {}).addClass("e-commonviewbutton").addClass(viewClassname)));
                        break;
                    case "workweek": $viewTR.append(ej.buildTag('td').append(ej.buildTag('div', this._getLocalizedLabels("WorkWeek"), {}, {}).addClass("e-commonviewbutton").addClass(viewClassname)));
                        break;
                    case "month": $viewTR.append(ej.buildTag('td').append(ej.buildTag('div', this._getLocalizedLabels("Month"), {}, {}).addClass("e-commonviewbutton").addClass(viewClassname)));
                        break;
                    case "customview": $viewTR.append(ej.buildTag('td').append(ej.buildTag('div', this._getLocalizedLabels("CustomView"), {}, {}).addClass("e-commonviewbutton").addClass(viewClassname)));
                        break;
                    case "agenda": $viewTR.append(ej.buildTag('td').append(ej.buildTag('div', this._getLocalizedLabels("Agenda"), {}, {}).addClass("e-commonviewbutton").addClass(viewClassname)));
                        break;
                }
            }
            $viewTable.append($viewBody.append($viewTR))
            return $viewTable;
        },
        _renderNavigationDrawer: function () {
            if (ej.isNullOrUndefined(this._scheduleDrawer)) {
                this._scheduleDrawer = ej.buildTag('div#' + this._id + 'navDrawer.navDrawerMenu e-scheduledrawer');
                var $scheduleDrawer = "<ul><li data-ej-imageClass='e-icon e-mAddEvent' data-ej-text='" + this._getLocalizedLabels("AddEvent") + "' id='addEvent'></li>";
                for (var i = 0; i < this.model.views.length; i++) {
                    switch (this.model.views[i]) {
                        case "day": $scheduleDrawer += "<li data-ej-imageClass='e-icon e-m" + this.model.views[i] + " e-" + this.model.views[i] + "' data-ej-text='" + this._getLocalizedLabels("Day") + "' id='" + this.model.views[i] + "'></li>";
                            break;
                        case "week": $scheduleDrawer += "<li data-ej-imageClass='e-icon e-m" + this.model.views[i] + " e-" + this.model.views[i] + "' data-ej-text='" + this._getLocalizedLabels("Week") + "' id='" + this.model.views[i] + "'></li>";
                            break;
                        case "workweek": $scheduleDrawer += "<li data-ej-imageClass='e-icon e-m" + this.model.views[i] + " e-" + this.model.views[i] + "' data-ej-text='" + this._getLocalizedLabels("WorkWeek") + "' id='" + this.model.views[i] + "'></li>";
                            break;
                        case "month": $scheduleDrawer += "<li data-ej-imageClass='e-icon e-m" + this.model.views[i] + " e-" + this.model.views[i] + "' data-ej-text='" + this._getLocalizedLabels("Month") + "' id='" + this.model.views[i] + "'></li>";
                            break;
                        case "customview": $scheduleDrawer += "<li data-ej-imageClass='e-icon e-m" + this.model.views[i] + " e-" + this.model.views[i] + "' data-ej-text='" + this._getLocalizedLabels("CustomView") + "' id='" + this.model.views[i] + "'></li>";
                            break;
                        case "agenda": $scheduleDrawer += "<li data-ej-imageClass='e-icon e-m" + this.model.views[i] + " e-" + this.model.views[i] + "' data-ej-text='" + this._getLocalizedLabels("Agenda") + "' id='" + this.model.views[i] + "'></li>";
                            break;
                    }
                }
                $scheduleDrawer += "</ul>";
                this._scheduleDrawer.append($scheduleDrawer);
                this.element.find(".e-scheduleinner").append(this._scheduleDrawer);
                this._navDrawer = true;
                this._scheduleDrawer.ejNavigationDrawer({ type: "overlay", targetId: this._id + "navDrawerIcon", direction: (this.model.enableRTL) ? "left" : "right", enableListView: true, listViewSettings: { persistSelection: true, selectedItemIndex: this.model.views.toString().toLowerCase().split(',').indexOf(this.currentView()) + 1, width: 100, height: "auto", mouseUp: $.proxy(this._slideMenuClick, this) }, position: "normal" });
                this.model.enableRTL && this._scheduleDrawer.parent().css("left", "0px");
                this._navDrawer = false;
            }
        },

        _slideMenuClick: function (e) {
            if (this._navDrawer) return false;
            this._scheduleDrawer.ejNavigationDrawer("close");
            var menu = (e.item.find("div").hasClass("e-day")) ? "day" : (e.item.find("div").hasClass("e-week")) ? "week" : (e.item.find("div").hasClass("e-workweek")) ? "workweek" : (e.item.find("div").hasClass("e-month")) ? "month" : (e.item.find("div").hasClass("e-customview")) ? "customview" : (e.item.find("div").hasClass("e-agenda")) ? "agenda" : "open";
            if (menu != "open") {
                this._navView = this._navSelected = true;
                (this.currentView() != menu) && this._viewChange(null, this.currentView(), menu);
                this._navSelected = false;
            }
            else {
                if (this.currentView() != "agenda") {
                    var date = new Date(this.currentDate()), targetElement;
                    var column = 0;
                    date = new Date(date.setHours(0, 0, 0, 0));
                    for (var i = 0; i < this.dateRender.length; i++) {
                        if (new Date(this.dateRender[i]).getTime() == date.getTime()) {
                            column = i;
                            break;
                        }
                    }
                    if (this.model.orientation == "vertical")
                        var row = this.model.startHour + ((new Date().getHours()) * (this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot)));
                    else
                        var row = this.res1.length - 1;
                    targetElement = (this.currentView() != "month" && this.currentView() != "customview") && this.model.timeScale.enable ? this.element.find(".e-draggableworkarea tr")[row].cells[column] : this.element.find(".e-monthcells")[column];
                    $(targetElement).addClass(".e-selectedCell").trigger($.Event('click'));
                    this._appointmentWindow({ target: targetElement });
                }
            }
        },

        _renderAlertWindow: function () {
            this._alertWindow = ej.buildTag('div.e-alertdialog#' + this._id + "alertWindow");
            var $alertWindow = "<div><div class='e-alerttext'></div><div class='e-alertbtn'><button id='" + this._id + "alertok' type='button' class='e-alertbutton e-alertOk e-buttonactive'>" + this._getLocalizedLabels("Ok") + "</button></div></div>";
            this._alertWindow.append($alertWindow);
            this.element.append(this._alertWindow);
            this._alertWindow.find(".e-alertbutton").ejButton({ enableRTL: this.model.enableRTL, showRoundedCorner: true, width: "100px", click: $.proxy(this._alertClose, this), cssClass: this.model.cssClass });
            this._alertWindow.ejDialog({
                width: (this._mediaQuery) ? "75%" : 450,
                cssClass: this.model.cssClass,
                showOnInit: false,
                enableRTL: this.model.enableRTL, enableModal: true,
                title: this._getLocalizedLabels("RecurrenceAlert"),
                target: "#" + this._id,
                enableResize: false,
                allowKeyboardNavigation: false,
                close: $.proxy(this._alertClose, this)
            });
            $("#" + this._id + "alertWindow_wrapper").addClass("e-scheduledialog").find(".e-titlebar").addClass("e-dialogheader");
        },

        _alertClose: function (args) {
            this._alertWindow.find(".e-alerttext").html("");
            var value;
            if (args.type == "click" && args.model.text == this._getLocalizedLabels("Ok") && this._alertWindow.find(".e-alertCancel").length != 0) {
                this._deletingAppointment();
            }
            if ($("#" + this._id + "alertcancel").length != 0) {
                $("#" + this._id + "alertcancel").remove();
            }
            this._alertWindow.ejDialog("close");
        },

        _renderAppointmentWindow: function () {
            this._appointmentAddWindow = ej.buildTag('div.e-scheduledialog#' + this._id + "AppointmentAddEditWindow");
            var $appWindow = "<div class='e-appwindow e-windowmargin'><form id='" + this._id + "_AddEditForm'><table class='e-table' width='100%' cellpadding='7'><tbody>";
            if (this._mediaQuery) {
                $appWindow += "<tr id='" + this._id + "subjectlabeltr'><td colspan='3' class='e-leftfields e-textlabel'>" + this._getLocalizedLabels("AppointmentSubject") + ":</td></tr><tr id='" + this._id + "subjecttr' class='" + this._id + "subjecttr'><td colspan='3' class='e-rightfields'>" +
                              "<input id='" + this._id + "subject' tabIndex='0' class='subject e-inputtext' name='" + this._appointmentSettings["subject"] + "' type='text' /><input id='id' class='id' type='text' name='" + this._appointmentSettings["id"] + "' value='' style='display: none'/></td></tr>";
                if (this.model.showLocationField) {
                    $appWindow += "<tr><td colspan='3' class='e-leftfields e-textlabel'>" + this._getLocalizedLabels("Location") + ":</td></tr><tr><td colspan='3' class='e-rightfields'>" +
                                      "<input id='" + this._id + "location' tabIndex='0' class='location e-inputtext' name='" + this._appointmentSettings["location"] + "' type='text' /></td></tr>";
                }
                $appWindow += "<tr id='" + this._id + "_appStartTime'><td class='e-textlabel' colspan='3'>" + this._getLocalizedLabels("StartTime") + ":</td></tr><tr><td width='37%'><input id='" + this._id + "startdate' class='startenddate' type='text' name='StartDate' value='' /></td><td width=31%'><input type='text' id='" + this._id + "starttime' class='startendtime' name='StartTime'/></td>";
                if (this.model.showTimeZoneFields) {
                    $appWindow += "<td width='31%'><input id='" + this._id + "startTimeZone' class='startutc'  name='" + this._appointmentSettings["startTimeZone"] + "' type='text' value=''/><div id='Timezoneliststr'></div></td>";
                }
                $appWindow += "</tr>";
                $appWindow += "<tr id='" + this._id + "_appEndTime'><td class='e-textlabel' colspan='3'>" + this._getLocalizedLabels("EndTime") + ":</td></tr><tr><td><input id='" + this._id + "enddate' class='startenddate' type='text' name='EndDate' value='' /></td><td><input type=''text' id='" + this._id + "endtime' class='startendtime' name='EndTime'/></td>";
                if (this.model.showTimeZoneFields) {
                    $appWindow += "<td><input  id='" + this._id + "endTimeZone' class='endutc' name='" + this._appointmentSettings["endTimeZone"] + "' type='text' value=''/><div id='Timezonelistend'></div></td>";
                }
                $appWindow += "</tr>";
                if (this.model.prioritySettings.enable) {
                    $appWindow += "<tr><td class='e-leftfields e-textlabel' colspan='3'>" + this._getLocalizedLabels("Priority") + ":</td></tr><tr><td colspan='3' class='e-rightfields'>" + "<input id= '" + this._id + "priority' class='priority' type='text' name='" + this._appointmentSettings["priority"] + "' value=''/><div id='prioritylist'></div></td></tr>";
                }
                $appWindow += "<tr class='" + this._id + "parrow'><td class='" + this._id + "allDay' colspan='3'><table class='e-table' cellpadding='3'><tr><td><div class='e-allday e-checkboxmargin'><input id='" + this._id + "allday' tabIndex='0' class='allday' type='checkbox' name='" + this._appointmentSettings["allDay"] + "'/></div></td><td><div class='e-alldaytext'>" +
                                  "<label for='" + this._id + "allday'>" + this._getLocalizedLabels("AllDay") + "</label></div></td><td><div class='e-checkboxmargin e-recurrence'>" +
                                  "<input id='" + this._id + "recurrence' tabIndex='0' class='recurrence' type='checkbox' name='" + this._appointmentSettings["recurrence"] + "' value='recurrence'/></div></td><td><label class='e-repeatlbl' for='" + this._id + "recurrence'>" +
                                      this._getLocalizedLabels("Recurrence") + "</label></td></tr></table></td></tr>";
                $appWindow += "<tr id='" + this._id + "summary' class='" + this._id + "summary' style='display:none'><td class='e-textlabel'><label>" + this._getLocalizedLabels("Summary") + ":</label></td></tr><tr class='" + this._id + "summary' style='display:none'><td colspan='4'><table><tr><td><label class='e-recurFinalRule'></label></td><td><div class='e-recuredit'><a class='e-recuredit' href='#'>" + this._getLocalizedLabels("Edit") + "</a><span class='e-icon e-edit_01 e-scheduleedit'></span></div></td></tr></table></td></tr>";
                if (this.model.categorizeSettings.enable)
                    $appWindow += "<tr id='" + this._id + "categorizetr'><td class='e-leftfields e-textlabel' colspan='3'>" + this._getLocalizedLabels("Categorize") + ":</td></tr><tr><td colspan='3' class='e-rightfields'>" + "<input id= '" + this._id + "categorize' name='" + this._appointmentSettings["categorize"] + "' class='e-categorizevalue' type='text' value=''/></td></tr>";
                if ((this._tempResource.length != 0) && this._tempResource.length > 0 && ej.scheduleFeatures.resources)
                    $appWindow = this._renderResourceElements($appWindow);
                $appWindow += "<tr><td colspan='3'><textarea class='e-description e-inputtext' id='" + this._id + "description' name='" + this._appointmentSettings["description"] + "'></textarea></td></tr>";
                $appWindow += "</tbody></table></form>";
                $appWindow += "<div class='e-floatright' style='width:100%'><table width='100%' class='e-table' cellpadding='5'><tr><td width='30%'><div class='e-btnmargin e-floatleft'><button id='mDelete' class='e-btndelete e-appdelete'>" + this._getLocalizedLabels("Delete") + "</button></div></td><td width='30%'><div class='e-btnmargin e-floatleft'><button id='done' class='e-btndone e-appsave e-buttonactive'>" + this._getLocalizedLabels("Done") + "</button></div></td>" +
                              "<td width='30%'><div class='e-btnmargin e-floatleft'><button id='cancel' class='e-appointcancel cancel'>" + this._getLocalizedLabels("Cancel") + "</button></div></td></tr></table></div></div>";
            }
            else {
                $appWindow += "<tr  id='" + this._id + "subjecttr' class='" + this._id + "subjecttr'><td class='e-leftfields e-textlabel'>" + this._getLocalizedLabels("AppointmentSubject") + ":</td><td colspan='3' class='e-rightfields'>" +
                                 "<input id='" + this._id + "subject' tabIndex='0' class='subject e-inputtext' name='" + this._appointmentSettings["subject"] + "' type='text' /><input id='id' class='id' type='text' name='" + this._appointmentSettings["id"] + "' value='' style='display: none'/></td></tr>";
                if (this.model.showLocationField) {
                    $appWindow += "<tr id='" + this._id + "showLocation' class='" + this._id + "showLocation'><td class='e-leftfields e-textlabel'>" + this._getLocalizedLabels("Location") + ":</td><td colspan='3' class='e-rightfields'>" +
                                     "<input id='" + this._id + "location' tabIndex='0' class='location e-inputtext' name='" + this._appointmentSettings["location"] + "' type='text' /></td></tr>";
                }
                $appWindow += "<tr id='" + this._id + "_appStartTime'><td class='e-textlabel'>" + this._getLocalizedLabels("StartTime") + ":</td><td width='25%'><input id='" + this._id + "startdate' class='startenddate' type='text' name='StartDate' value='' /></td><td width=22%'><input type='text' id='" + this._id + "starttime' class='startendtime' name='StartTime'/></td>";
                if (this.model.showTimeZoneFields) {
                    $appWindow += "<td width='28%'><input  id='" + this._id + "startTimeZone'  class='startutc'  name='" + this._appointmentSettings["startTimeZone"] + "' type='text' value=''/><div id='Timezoneliststr'></div></td>";
                }
                $appWindow += "</tr>";
                $appWindow += "<tr id='" + this._id + "_appEndTime'><td class='e-textlabel'>" + this._getLocalizedLabels("EndTime") + ":</td><td><input id='" + this._id + "enddate' class='startenddate' type='text' name='EndDate' value='' /></td><td><input type=''text' id='" + this._id + "endtime' class='startendtime' name='EndTime'/></td>";
                if (this.model.showTimeZoneFields) {
                    $appWindow += "<td><input id='" + this._id + "endTimeZone'  class='endutc'  name='" + this._appointmentSettings["endTimeZone"] + "'  type='text' value=''/><div id='Timezonelistend'></div></td>";
                }
                $appWindow += "</tr>";
                var win = this.model.prioritySettings.enable ? "<td colspan='1' class='e-textlabel " + this._id + "priorityshow'>" + this._getLocalizedLabels("Priority") + ":</td><td colspan='1' class='" + this._id + "prioritylistshow'><input id='" + this._id + "priority' class='priority' type='text' name='" + this._appointmentSettings["priority"] + "' value='' /><div id='prioritylist'></div></td>" : '';
                $appWindow += "<tr class='" + this._id + "parrow'>" + win + "<td class='" + this._id + "allDay' colspan='4'><table class='e-table' cellpadding='3'><tr><td><div class='e-allday e-checkboxmargin'><input id='" + this._id + "allday' tabIndex='0' class='allday' type='checkbox' name='" + this._appointmentSettings["allDay"] + "'/></div></td><td><div class='e-alldaytext'>" +
                                 "<label for='" + this._id + "allday'>" + this._getLocalizedLabels("AllDay") + "</label></div></td><td><div class='e-checkboxmargin e-recurrence'>" +
                                  "<input id='" + this._id + "recurrence' tabIndex='0' class='recurrence' type='checkbox' name='" + this._appointmentSettings["recurrence"] + "' value='recurrence'/></div></td><td><label class='e-repeatlbl' for='" + this._id + "recurrence'>" +
                                  this._getLocalizedLabels("Recurrence") + "</label></td></tr></table></td></tr>";
                $appWindow += "<tr id='" + this._id + "summary' class='" + this._id + "summary' style='display:none'><td class='e-textlabel'><label>" + this._getLocalizedLabels("Summary") + ":</label></td><td colspan='3'><table><tr><td><label class='e-recurFinalRule'></label></td><td><div class='e-recuredit'><a class='e-recuredit' href='#'>" + this._getLocalizedLabels("Edit") + "</a><span class='e-icon e-edit_01 e-scheduleedit'></span></div></td></tr></table></td></tr>";
                if (this.model.categorizeSettings.enable)
                    $appWindow += "<tr id='" + this._id + "categorizetr'><td class='e-leftfields e-textlabel'>" + this._getLocalizedLabels("Categorize") + ":</td><td colspan='3' class='e-rightfields'>" + "<input id= '" + this._id + "categorize' name='" + this._appointmentSettings["categorize"] + "' class='e-categorizevalue' type='text' value=''/></td></tr>";
                if ((this._tempResource.length != 0) && this._tempResource.length > 0 && ej.scheduleFeatures.resources)
                    $appWindow = this._renderResourceElements($appWindow);
                $appWindow += "<tr><td colspan='4'><textarea class='e-description e-inputtext' id='" + this._id + "description' name='" + this._appointmentSettings["description"] + "'></textarea></td></tr>";
                $appWindow += "</tbody></table></form>";
                $appWindow += "<div class='e-floatright'><table class='e-table' cellpadding='5'><tr><td><div class='e-btnmargin e-floatleft'><button id='done' class='e-btndone e-appsave e-buttonactive'>" + this._getLocalizedLabels("Done") + "</button></div></td>" +
                              "<td><div class='e-btnmargin e-floatleft'><button id='cancel' class='e-appointcancel cancel'>" + this._getLocalizedLabels("Cancel") + "</button></div></td></tr></table></div></div>";
            }
            var value = ej.buildTag('div.e-recurEditor#' + this._id + 'recurrenceEditor').ejRecurrenceEditor({ selectedRecurrenceType: 1, frequencies: ["daily", "weekly", "monthly", "yearly", "everyweekday"], startDate: this.currentDate(), minDate: this.model.minDate, maxDate: this.model.maxDate, firstDayOfWeek: this.model.firstDayOfWeek, enableRTL: this.model.enableRTL, cssClass: this.model.cssClass, dateFormat: this.model.dateFormat, locale: this.model.locale });
            var recurWin = "<div class='e-floatright'><table class='e-table' cellpadding='5'><tr><td><div class='e-btnmargin e-floatleft'><button id='" + this._id + "donerecur'  class='recurbutton e-buttonactive'>" + this._getLocalizedLabels("Done") + "</button></div></td>" +
                     "<td><div class='e-btnmargin e-floatleft'><button id='" + this._id + "cancelrecur' class='e-cancelrecur recurbutton'>" + this._getLocalizedLabels("Cancel") + "</button></div></td></tr></table></div>";
            this._appointmentAddWindow.append($appWindow).append(value);
            this._appointmentAddWindow.find(".e-recurEditor").append(recurWin);
            this._appointmentAddWindow.find('#' + this._id + 'donerecur').ejButton({ enableRTL: this.model.enableRTL, showRoundedCorner: true, width: "100px", click: $.proxy(this._closeRecurence, this), cssClass: this.model.cssClass });
            this._appointmentAddWindow.find('#' + this._id + 'cancelrecur').ejButton({ enableRTL: this.model.enableRTL, showRoundedCorner: true, width: "100px", click: $.proxy(this._closeRecurence, this), cssClass: this.model.cssClass });
            this._appointmentAddWindow.find('.e-recurEditor').css("display", "none");
            this.element.append(this._appointmentAddWindow);
            this._renderControls();
            this._appointmentAddWindow.ejDialog({
                width: (this._mediaQuery) ? "100%" : 600,
                cssClass: this.model.cssClass,
                showOnInit: false,
                enableRTL: this.model.enableRTL, enableModal: true,
                title: this._getLocalizedLabels("CreateAppointmentTitle"),
                target: "#" + this._id,
                enableResize: false,
                allowKeyboardNavigation: false,
                close: $.proxy(this._onclose, this)
            });
            $("#" + this._id + "AppointmentAddEditWindow_wrapper").appendTo("body").addClass("e-scheduledialog").find(".e-titlebar").addClass("e-dialogheader");
            $("#" + this._id + "priority_popup_wrapper").addClass("e-schedulepriority");
            this._on(this._appointmentAddWindow, "click", "a.e-recuredit", $.proxy(this._editRecurrence, this));
            this._mediaQuery && this._appointmentAddWindow.ejDialog("refresh");
        },
        _refreshAppointmentWindow: function () {
            this._destorySubControls($("#" + this._id + "_AddEditForm"));
            this._destorySubControls($("#" + this._id + "_RecurForm"));
            $("#" + this._id + "AppointmentAddEditWindow_wrapper").remove();
            this._renderAppointmentWindow();
            $.isFunction($.validator) && this._setValidation();
        },
        _renderQuickAppWindow: function () {
            this._quickAppointWindow = ej.buildTag('div.e-scheduledialog#' + this._id + "AppointmentQuickWindow");
            var $quickWin = "<div id='" + this._id + "_quickAppwindow' class='e-tableAppoint'>" +
                        "<table cellpadding='7' class='e-qappwindow'><tbody>";
            $quickWin += "<tr><td colspan='2'><div class='e-quickstartend'></div> <div title='" + this._getLocalizedLabels("Close") + "'class='e-icon e-scheduleclose e-schedclosemargin e-pointercursor'></div></td></tr><tr><td class='e-subjectlabel'>" + this._getLocalizedLabels("AppointmentSubject") + ":</td><td colspan='2' class='e-rightfields'>" +
                              "<form id='" + this._id + "_AddForm' onsubmit='return false;'><input id='" + this._id + "subject' class='subject e-inputtext' name='" + this._appointmentSettings["subject"] + "'  type='text' /></form></td></tr></tbody></table>";
            $quickWin += "<div style='margin-top:5px; padding-bottom: 30px;'><div tabIndex='0' class='e-detailedapp e-detailedwindow'> " + this._getLocalizedLabels("Detailed") + " >></div><div style='margin-right:-3px;' class='e-floatright'><div class='e-quickAppDone'><button id='done' class='e-btndone qAppDone e-buttonactive' style='font-size:12px !important;'>" + this._getLocalizedLabels("CreateAppointmentTitle") + "</button></div>" +
                              "</div></div></div>";
            this._quickAppointWindow.append($quickWin);
            this.element.append(this._quickAppointWindow);
            this._quickAppointWindow.append(ej.buildTag("div.e-quickarrow").append("<div class='e-outerarrowline'></div>").append("<div class='e-innerarrow'></div>"));
            var control = this._quickAppointWindow;
            control.find('.e-btndone').ejButton({ showRoundedCorner: true, width: "130px", click: $.proxy(this._saveAppointment, this), cssClass: this.model.cssClass, enableRTL: this.model.enableRTL });
            this._on(control.find('.e-scheduleclose'), "click", $.proxy(this._quickWindowClose, this));
            this._on(control.find('.e-detailedapp'), "click", $.proxy(this._appointmentWindow, this));
            this._quickAppointWindow.ejDialog({
                width: 330, minHeight: 0,
                cssClass: this.model.cssClass,
                enableRTL: this.model.enableRTL,
                enableAnimation: false,
                showOnInit: false,
                enableResize: false,
                allowDraggable: false, showHeader: false,
                allowKeyboardNavigation: false,
                close: $.proxy(function () { this._processFocus(); }, this)
            });
            $("#" + this._id + "AppointmentQuickWindow_wrapper").addClass("e-scheduledialog e-schedulequickdialog").css("overflow", "visible").find("#" + this._id + "AppointmentQuickWindow").addClass("e-dialogouter");
        },

        _renderQuickAppDetailsView: function () {
            this._quickAppDetailsWindow = ej.buildTag('div.e-scheduledialog#' + this._id + "AppDetailsWindow");
            var $quickAppWin = "<div id='" + this._id + "_quickAppDetailswindow' class='e-tableAppoint e-appdetails'>" +
                              "<table cellpadding='1' class='e-qappwindow'><tbody>";
            $quickAppWin += "<tr><td colspan='2'><div class='e-quicksubject e-textellipsis'></div> <div title='" + this._getLocalizedLabels("Close") + "' class='e-icon e-scheduleclose e-schedclosemargin e-pointercursor'></div></td></tr><tr><td colspan='2' class='e-rightfields'>" +
                              "</td></tr><tr><td colspan='2'><div class='e-quickstartendtime'></div></td></tr></tbody></table>";
            $quickAppWin += "<div style='margin-top:5px;'><div title='" + this._getLocalizedLabels("Delete") + "' class='e-icon e-delete e-scheduledelete e-pointercursor' tabIndex='0'></div><div class='e-floatright'><div class='e-editevents'><div class='e-editevent e-textellipsis' tabIndex='0'>" + this._getLocalizedLabels("Editevent") + " | " + "</div><div class='e-editseries e-textellipsis' tabIndex='0'>" + this._getLocalizedLabels("Editseries") + " >></div> </div>" +
                              "</div></div></div>";
            this._quickAppDetailsWindow.append($quickAppWin);
            this.element.append(this._quickAppDetailsWindow);
            this._quickAppDetailsWindow.append(ej.buildTag("div.e-quickarrow").append("<div class='e-outerarrowline'></div>").append("<div class='e-innerarrow'></div>"));
            this._on(this._quickAppDetailsWindow.find('.e-scheduleclose'), "click", $.proxy(this._quickAppDetailWindowClose, this));
            this._on(this._quickAppDetailsWindow.find('.e-scheduledelete'), "click", $.proxy(this._deleteAppoint, this));
            this._on(this._quickAppDetailsWindow.find('.e-editevent,.e-editseries'), "click", $.proxy(this._editClick, this));
            this._quickAppDetailsWindow.ejDialog({
                width: 270, minHeight: 0,
                cssClass: this.model.cssClass,
                enableRTL: this.model.enableRTL,
                enableAnimation: false,
                showOnInit: false,
                enableResize: false,
                allowDraggable: false, showHeader: false,
                allowKeyboardNavigation: false,
                close: $.proxy(function () { this._processFocus(); }, this)
            });
            $("#" + this._id + "AppDetailsWindow_wrapper").addClass("e-scheduledialog e-schedulequickdialog").css("overflow", "visible").find("#" + this._id + "AppDetailsWindow").addClass("e-dialogouter");
        },

        _editClick: function (e) {
            if ($(e.target).hasClass("e-editseries") && (this._quickAppDetailsWindow.find('.e-editseries').hasClass("e-disable"))) return false;
            var query = new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid);
            var templist = new ej.DataManager(this._processed).executeLocal(query);
            if ($(e.target).hasClass("e-editevent")) {
                if (templist[0][this._appointmentSettings["recurrence"]] == 1) {
                    this._parentId = templist[0]["ParentId"];
                    this._currentAction = ej.Schedule.Actions.EditOccurrence;
                    this._showAppointmentDetails(this._appUid, true);
                }
                else if (ej.isNullOrUndefined(templist[0][this._appointmentSettings["recurrence"]])) {
                    this._currentAction = ej.Schedule.Actions.Save;
                    this._showAppointmentDetails(this._appUid, true);
                }
                else {
                    this._currentAction = ej.Schedule.Actions.Save;
                    this._showAppointmentDetails(templist[0]["Guid"], true);
                }
            }
            else if ($(e.target).hasClass("e-editseries")) {
                if (templist[0][this._appointmentSettings["recurrence"]] == 1) {
                    this._parentId = (templist[0][this._appointmentSettings["recurrenceId"]] == null) ? templist[0]["ParentId"] : templist[0][this._appointmentSettings["recurrenceId"]];
                    this._currentAction = ej.Schedule.Actions.EditSeries;
                    this._showAppointmentDetails(this._parentId, false);
                }
            }
            this.model.showQuickWindow && this._quickAppDetailsWindow.ejDialog("close");
        },

        _deleteAppoint: function (e) {
            if (!this.model.readOnly) {
                if (!ej.isNullOrUndefined(e) && (ej.isNullOrUndefined(this._quickAppDetailsWindow) || !this._quickAppDetailsWindow.ejDialog("isOpen"))) {
                    var _target = $(e.target).parent();
                    var appoint = _target.hasClass("e-appointment") || _target.hasClass("e-monthappointment") || _target.hasClass("e-alldayappointment") || _target.hasClass("e-agendaappointment") ? _target : _target.parents(".e-appointment,.e-alldayappointment,.e-monthappointment,.e-agendaappointment");
                    this._appUid = appoint.attr("guid");
                    if (this._mediaQuery) this._mAppId = this._appUid;
                    var _editApp = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid));
                    if (_editApp[0][this._appointmentSettings["recurrence"]] || !this.model.showDeleteConfirmationDialog)
                        this._deletingAppointment();
                    else
                        this._deleteConfirmation();
                }
                else {
                    var _editApp = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid));
                    if (_editApp[0][this._appointmentSettings["recurrence"]] || !this.model.showDeleteConfirmationDialog) {
                        this.model.showQuickWindow && this._quickAppDetailsWindow.ejDialog("isOpen") && this._quickAppDetailsWindow.ejDialog("close");
                        this._deletingAppointment();
                    }
                    else
                        this._deleteConfirmation();
                }
            }
        },

        _deletingAppointment: function () {
            this._appUid = ej.isNullOrUndefined(this._appUid) ? this._deleteUid : this._appUid;
            if (this._appUid) {
                this._currentAction = ej.Schedule.Actions.Delete;
                var parentData = this._getAppointmentByParentId((this._mediaQuery) ? ej.isNullOrUndefined(this._mAppId) ? this._appUid : this._mAppId : this._appUid);
                if (!parentData[this._appointmentSettings["recurrence"]])
                    this._deleteApp((this._mediaQuery) ? ej.isNullOrUndefined(this._mAppId) ? this._appUid : this._mAppId : this._appUid);
                else {
                    this._parentId = parentData["ParentId"];
                    this._recurEditWindow.ejDialog("open");
                    this._recurEditWindow.focus();
                    this._deleteBeforeOpen();
                }
            }
            (!ej.isNullOrUndefined(this._alertWindow)) && this._alertWindow.ejDialog("close");
        },

        _deleteConfirmation: function () {
            this.model.showQuickWindow && this._quickAppDetailsWindow.ejDialog("close");
            ej.isNullOrUndefined(this._alertWindow) && this._renderAlertWindow();
            if ($(".e-alertbtn").find(".e-alertCancel").length == 0) {
                var canButton = "<button id='" + this._id + "alertcancel' class='e-alertbutton e-alertCancel'>" + this._getLocalizedLabels("Cancel") + "</button>";
                this._alertWindow.find(".e-alertbtn").append(canButton);
                this._alertWindow.find(".e-alertCancel").ejButton({ enableRTL: this.model.enableRTL, showRoundedCorner: true, width: "100px", click: $.proxy(this._alertClose, this), cssClass: this.model.cssClass });
                if (this._mediaQuery)
                    this._alertWindow.find(".e-alertCancel").css({ 'margin': '0px 20px 15px 10px' });
                $("#" + this._id + "alertWindow").ejDialog({
                    width: (this._mediaQuery) ? "90%" : 450,
                    title: this._getLocalizedLabels("MouseOverDeleteTitle")
                });
                this._alertWindow.find(".e-alerttext").html(this._getLocalizedLabels("DeleteConfirmation"));
                this._alertWindow.find(".e-alertOk").html(this._getLocalizedLabels("Delete"));
            }
            if (!this._alertWindow.ejDialog("isOpen")) {
                this._alertWindow.ejDialog("open");
                this._alertWindow.find(".e-alertOk").attr("tabIndex", 0).focus();
            }

        },

        _quickAppDetailWindowClose: function () {
            this._quickAppDetailsWindow.ejDialog("close");
            this._processFocus();
        },

        _alldayCheck: function () {
            if (this._appointmentAddWindow.find(".allday").ejCheckBox("option", "checked")) {
                this._appointmentAddWindow.find("#" + this._id + "starttime").ejTimePicker({ value: (this._timeMode == "12") ? "12:00 AM" : "00:00", enabled: false });
                this._appointmentAddWindow.find("#" + this._id + "endtime").ejTimePicker({ value: (this._timeMode == "12") ? "11:59 PM" : "23:59", enabled: false });
                this._appointmentAddWindow.find(".startutc,.endutc").ejDropDownList({ enabled: false });
            }
            else {
                if (this._tempStart != "" || this._tempEnd != "") {
                    var dayStTime = ej.format(new Date(new Date().setHours(0, 0, 0)), this._pattern.t, this.model.locale);
                    var dayEndTime = ej.format(new Date(new Date().setHours(23, 59, 59)), this._pattern.t, this.model.locale);
                    this._appointmentAddWindow.find("#" + this._id + "starttime").ejTimePicker({ value: this._tempStart });
                    this._appointmentAddWindow.find("#" + this._id + "endtime").ejTimePicker({ value: this._tempEnd });
                    if (((this._timeMode == "12") ? (this._tempStart == dayStTime && this._tempEnd == dayEndTime) : (this._tempStart == "00:00" && this._tempEnd == "23:59"))) {
                        this._appointmentAddWindow.find("#" + this._id + "starttime").ejTimePicker({ value: ej.format(new Date("1/1/2000 " + this.model.workHours.start + ":00:00"), this._pattern.t, this.model.locale) });
                        this._appointmentAddWindow.find("#" + this._id + "endtime").ejTimePicker({ value: ej.format(new Date("1/1/2000 " + this.model.workHours.start + ":30:00"), this._pattern.t, this.model.locale) });
                    }
                }
                this._appointmentAddWindow.find(".startendtime").ejTimePicker({ enabled: true });
                this._appointmentAddWindow.find(".startutc,.endutc").ejDropDownList({ enabled: true });
                this._endSlotChange = true;
                this._startSlotChange = true;
            }
        },

        _renderRecurEditWindow: function () {
            this._recurEditWindow = ej.buildTag('div.e-scheduledialog#' + this._id + "RecurrenceEdit");
            var msgDiv = ej.buildTag('div.e-recureditmsg', this._getLocalizedLabels("RecurrenceEditMessage"));
            var editOnly = this._getLocalizedLabels("RecurrenceEditOnly");
            var editSeries = this._getLocalizedLabels("RecurrenceEditSeries");
            var btns = ej.buildTag('div.e-recureditbtns').append(ej.buildTag('button.e-editonly#' + this._id + "Editonly", editOnly, {}, { name: "recurrenceeditonly", value: editOnly })).append(ej.buildTag('button.e-editseries#' + this._id + "EditSeries", editSeries, {}, { name: "recurrenceeditseries", value: editSeries }));
            this._recurEditWindow.append(msgDiv).append(btns);
            btns.find('.e-editonly,.e-editseries').ejButton({ cssClass: this.model.cssClass, enableRTL: this.model.enableRTL, showRoundedCorner: true });
            this._on(this._recurEditWindow, "click", ".e-editonly,.e-editseries", $.proxy(this._recurBtnClick, this));
            this._on(this._recurEditWindow, "click", "div.e-scheduleclose", $.proxy(this._recrConformClose, this));
            this._recurEditWindow.appendTo(this.element);
            if (this._mediaQuery) {
                this._recurEditWindow.find('.e-editonly,.e-editseries').css({ 'margin-top': '10px' });
            }
            this._recurEditWindow.ejDialog({
                width: (this._mediaQuery) ? "90%" : 360,
                cssClass: this.model.cssClass,
                enableRTL: this.model.enableRTL,
                title: this._getLocalizedLabels("RecurrenceEditTitle"),
                showOnInit: false,
                enableModal: true,
                enableResize: false,
                target: "#" + this._id,
                allowKeyboardNavigation: false,
                close: $.proxy(this._processFocus, this),
                beforeOpen: $.proxy(this._deleteBeforeOpen, this)
            });
            $("#" + this._id + "RecurrenceEdit_wrapper").appendTo("body").addClass("e-scheduledialog");
        },

        _recrConformClose: function () {
            this._recurEditWindow.ejDialog("close");
            this._processFocus();
        },
        _deleteBeforeOpen: function () {
            $('#' + this._id + 'RecurrenceEdit_title').addClass('e-dialogheader');
            $('#' + this._id + 'RecurrenceEdit_title').find('.e-title').html(this._currentAction == ej.Schedule.Actions.Delete ? this._getLocalizedLabels("RecurrenceDeleteTitle") : this._getLocalizedLabels("RecurrenceEditTitle"));
        },

        _recurBtnClick: function (args) {
            if ($(args.target).hasClass("e-editonly")) {
                this._editOnlyClicked = true;
                if (this._currentAction == ej.Schedule.Actions.Delete) {
                    var _newAddList = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid))[0];
                    if (_newAddList[this._appointmentSettings["recurrenceRule"]].toString().indexOf("RECUREDITID") != -1) {
                        if (this._trigger("actionBegin", { id: this._appUid, requestType: "appointmentDelete", currentAction: ej.Schedule.Actions.DeleteOccurrence }))
                            return false;
                        var Parid = _newAddList[this._appointmentSettings["recurrenceId"]] == null ? _newAddList["ParentId"] : _newAddList[this._appointmentSettings["recurrenceId"]]
                        var deleted = new ej.DataManager(this._currentAppointmentData).executeLocal(new ej.Query().where(this._appointmentSettings["id"], ej.FilterOperators.equal, Parid));
                        if (this._trigger("beforeAppointmentRemove ", { appointment: deleted, currentAction: ej.Schedule.Actions.DeleteOccurrence }))
                            return false;
                        if (this.dataSource() instanceof ej.DataManager)
                            var promise = this._dataManager.remove(this._appointmentSettings["id"], _newAddList[this._appointmentSettings["id"]], this.model.appointmentSettings.query._fromTable);
                        else
                            var promise = this._dataManager.remove("Guid", _newAddList["Guid"]);
                        var proxy = this;
                        if ($.isFunction(promise.promise)) {
                            promise.done(function (e) {
                                proxy._processUrlBinding(e);
                                proxy._trigger("appointmentRemoved", { appointment: deleted, requestType: "appointmentDeleted", currentAction: ej.Schedule.Actions.DeleteOccurrence });
                                proxy._trigger("actionComplete", { appointment: deleted, requestType: "appointmentDelete", currentAction: ej.Schedule.Actions.DeleteOccurrence });
                            });
                            promise.fail(function (e) { });
                        }
                        else {
                            var deleteApp = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid));
                            new ej.DataManager(this._processed).saveChanges({ added: [], changed: [], deleted: deleteApp }, "Guid");
                            this._renderAppointmentAll();
                            this._trigger("appointmentRemoved", { appointment: deleted, requestType: "appointmentDeleted", currentAction: ej.Schedule.Actions.DeleteOccurrence });
                            this._trigger("actionComplete", { appointment: deleted, requestType: "appointmentDelete", currentAction: ej.Schedule.Actions.DeleteOccurrence });
                        }
                    }
                    else {
                        if (this._trigger("actionBegin", { id: this._appId, requestType: "appointmentDelete", currentAction: ej.Schedule.Actions.DeleteOccurrence }))
                            return false;
                        var Parid = _newAddList[this._appointmentSettings["recurrenceId"]] == null ? _newAddList["ParentId"] : _newAddList[this._appointmentSettings["recurrenceId"]]
                        var deleApp = this._deleteOcurrence(Parid, _newAddList[this._appointmentSettings["startTime"]]);
                        var temp = this._timeZoneAppointments(deleApp[0], "");
                        if (this._trigger("beforeAppointmentRemove", { appointment: _newAddList, currentAction: ej.Schedule.Actions.DeleteOccurrence })) {
                            this._recurEditWindow.ejDialog("close");
                            return false;
                        }
                        if (this.dataSource() instanceof ej.DataManager)
                            var promise = this._dataManager.update(this._appointmentSettings["id"], temp, this.model.appointmentSettings.query._fromTable);
                        else
                            var promise = this._dataManager.update("AppTaskId", temp);
                        var updateTemp = (this._timeZoneAppointments(temp, "reverse"));
                        new ej.DataManager(this._currentAppointmentData).update("AppTaskId", updateTemp);
                        var proxy = this;
                        if (promise && $.isFunction(promise.promise) && this.dataSource() instanceof ej.DataManager) {
                            promise.done(function (e) {
                                proxy._processUrlBinding(e);
                                proxy._trigger("appointmentRemoved", { appointment: _newAddList, requestType: "appointmentDeleted", currentAction: ej.Schedule.Actions.DeleteOccurrence });
                                proxy._trigger("actionComplete", { appointment: _newAddList, requestType: "appointmentDelete", currentAction: ej.Schedule.Actions.DeleteOccurrence });
                            });
                            promise.fail(function (e) {
                            });
                        }
                        else {
                            this._refreshCellsHeight();
                            if ((new Date(new Date(updateTemp[this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(updateTemp[this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime()) && (((updateTemp[this._appointmentSettings["endTime"]] - updateTemp[this._appointmentSettings["startTime"]]) / 3600000) < 24) && (updateTemp[this._appointmentSettings["allDay"]] !== true)) {
                                var splitApp = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid));
                                for (i = 0; i < splitApp.length; i++) {
                                    new ej.DataManager(this._processed).remove("Guid", splitApp[i]["Guid"]);
                                }
                            }
                            else {
                                new ej.DataManager(this._processed).remove("Guid", this._appUid);
                                this._appUid = null;
                            }
                            this._renderAppointmentAll();
                            this._trigger("appointmentRemoved", { appointment: _newAddList, requestType: "appointmentDeleted", currentAction: ej.Schedule.Actions.DeleteOccurrence });
                            this._trigger("actionComplete", { appointment: _newAddList, requestType: "appointmentDelete", currentAction: ej.Schedule.Actions.DeleteOccurrence });
                        }
                    }
                    var appCount = this._appointmentCount();
                    if (appCount.length < 1) {
                        if (this.model.showAppointmentNavigator)
                            this._nextPrevButton(appCount);
                    }
                }
                else {
                    this._currentAction = ej.Schedule.Actions.EditOccurrence;
                    this._showAppointmentDetails(this._appUid, true);
                }
            }
            else {
                this._editOnlyClicked = false;
                if (this._currentAction == ej.Schedule.Actions.Delete) {
                    this._actionType = ej.Schedule.Actions.DeleteSeries;
                    this._deleteApp(this._appUid);
                }
                else {
                    this._currentAction = ej.Schedule.Actions.EditSeries;
                    this._showAppointmentDetails(this._parentId, false);
                }
            }
            this._recurEditWindow.ejDialog("close");
        },

        _repeat: function (e) {
            if (e.isInteraction) {
                if (e.isChecked || this._recurChecked) {
                    if (this._currentAction == ej.Schedule.Actions.EditSeries || this._appointmentAddWindow.find(".e-recurFinalRule").html() != "") {
                        this._appointmentAddWindow.find("." + this._id + "summary").css("display", "table-row");
                    }
                    else {
                        (this._mediaQuery) && this._appointmentAddWindow.parent().parent().find(".e-dialog-icon").css("display", "none");
                        this._appointmentAddWindow.find(".e-appwindow").toggle();
                        this._appointmentAddWindow.find(".e-recurEditor").css("margin-left", 700).toggle().animate({ "margin-left": 10 }, 400);
                        var recurEdit = this._appointmentAddWindow.find(".e-recurrenceeditor").data("ejRecurrenceEditor");
                        recurEdit.clearRecurrenceFields();
                        this._appointmentAddWindow.find('.e-recurEditor').css("display", "block");
                        var strDate = new Date(this._appointmentAddWindow.find('.startenddate').ejDatePicker("option", "value"));
                        recurEdit.model.startDate = strDate;;
                        recurEdit.setDefaultValues();
                    }
                }
                else 
                (this._currentAction == ej.Schedule.Actions.EditSeries || this._appointmentAddWindow.find(".e-recurFinalRule").html() != "") && this._appointmentAddWindow.find("." + this._id + "summary").css("display", "none");
                this._recurChecked = false;
            }
        },

        _resourceDaysReorder: function (days) {
            var dayNames = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];
            var cultureNames = [], resDays = [], oldOrder = [], newOrder = [], index = this._firstdayofweek;
            do {
                if (index > 6) index = 0;
                cultureNames.push(dayNames[index]);
                index++;
            } while (cultureNames.length < 7)
            for (var a = 0; a < days.length; a++) { resDays.push(days[a].toLowerCase()); }
            for (var b = 0; b < resDays.length; b++) { if (cultureNames.indexOf(resDays[b]) != -1) oldOrder[cultureNames.indexOf(resDays[b])] = resDays[b]; }
            for (var c = 0; c < oldOrder.length; c++) { if (!ej.isNullOrUndefined(oldOrder[c])) newOrder.push(oldOrder[c]); }
            return newOrder;
        },

        _getRenderDates: function () {
            this._dateRender = []; var firstDay, endDay, newDate, week = [], workweek = [], workweeks = [];
            if (this.currentView() === "week" || this.currentView() === "workweek") {
                firstDay = this._firstweekdate(this.currentDate());
                if (firstDay.getDay() != 0 || this._firstdayofweek == 0 && this.model.workWeek.length > 0 && this.currentView() == "workweek" || this.currentView() == "week") {
                    for (var i = 0; i < 7; i++) {
                        newDate = new Date(firstDay);
                        newDate.setDate(firstDay.getDate() + i);
                        this._dateRender.push(new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate()).getTime());
                    }
                    this._renderDates = $.extend(true, [], this._dateRender);
                }

                if (this._resWorkWeek) {
                    if (this._tempResource.length > 1) {
                        var resCollection = this._resourceSort();
                        var resource = [];
                        for (x = 0; x < resCollection.length; x++) {
                            var index = this._tempResource[this._tempResource.length - 1].resourceSettings.dataSource.indexOf(resCollection[x]);
                            if (index != -1) resource.push(resCollection[x]);
                        }
                        this.res1 = resource;
                    }
                    else
                        var resource = this._tempResource[this._tempResource.length - 1].resourceSettings.dataSource;
                    var resDateRender = [];
                    for (var a = 0; a < resource.length; a++) {
                        var resColl = resource[a][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]];
                        if (!ej.isNullOrUndefined(resColl)) {
                            resColl = this._resourceDaysReorder(resColl);
                            for (var b = 0; b < resColl.length; b++) {
                                var index = this._dayFullNames.indexOf(resColl[b].capitalizeFirstString());
                                if (index == -1) {
                                    index = this._getDayNameIndex(resColl[b]);
                                }
                                resDateRender.push(this._renderDates[index]);
                            }
                        }
                        else {
                            var resCustomDates = $.extend(true, [], this._dateRender);
                            resCustomDates = resCustomDates.filter(function (date) { return new Date(date).getDay() != 0 && new Date(date).getDay() != 6 });
                            $.merge(resDateRender, resCustomDates);
                        }
                    }
                    this.dateRender = this._dateRender = resDateRender;
                }
                else if (this.currentView() == "workweek") {
                    if (this.model.workWeek[0] == "monday" && this.model.workWeek[4] == "friday" && ej.isNullOrUndefined(this.model.workWeek[5])) {
                        this._dateRender = this._dateRender.filter(function (date) { return new Date(date).getDay() != 0 && new Date(date).getDay() != 6 });
                    }
                    else {
                        var proxy = this;
                        workweek = this.model.workWeek.map(function (day) { return proxy._dayNamesArray.indexOf(day) });

                        for (var k = 0; k < workweek.length; k++) {
                            if (this._firstdayofweek >= workweek[0]) {
                                if (this._firstdayofweek <= workweek[k]) {
                                    var firstday = workweek[k];
                                    break;
                                }
                            }
                            else {
                                if (this._firstdayofweek > workweek[k]) {
                                    var firstday = workweek[k];
                                    break;
                                }
                            }
                        }

                        for (var i = 0, j = 0; i < workweek.length; i++) {
                            if (firstday <= workweek[i]) {
                                workweeks[j] = workweek[i];
                                j++;
                            }
                        }
                        workweeks = $.merge(workweeks, workweek);
                        var weekDays = (this._firstdayofweek != 0 && this._firstdayofweek <= firstday) ? workweeks : workweek;
                        workweeks = $.grep(weekDays, function (el, index) { return index === $.inArray(el, weekDays); });
                        var filterDate = this._dateRender.map(function (date) { if (workweek.indexOf(new Date(date).getDay()) != -1) return date });
                        this._dateRender = filterDate.filter(function (date) { return date != undefined });
                    }
                }
            }
            else if (this.currentView() === "month") {
                this._dateRender = this._monthdates();
            }
            else if (this.currentView() === "customview") {
                if (!ej.isNullOrUndefined(this.model.renderDates)) {
                    if (this._setCurrentDate && this.model.orientation != "horizontal") {
                        this.oldDate = this.currentDate();
                        if ((this._renderStart.getTime() < this.currentDate().getTime()) && (this._renderEnd.getTime() > this.currentDate().getTime()))
                            this.currentDate(new Date(this._renderStart));
                        else {
                            this._renderStart = new Date(this.currentDate());
                            this._renderEnd = new Date(this._renderStart.getTime() + ((this._renderDays - 1) * 86400000));
                        }
                    }
                    var daysRender = this._renderDays <= 7 ? this._renderDays : this._numDays;
                    firstDay = this._renderDays <= 7 ? new Date(this.currentDate()) : this.model.orientation == "vertical" ? this._firstweekdate(this.currentDate()) : new Date(this.currentDate());
                    for (var i = 0; i < daysRender; i++) {
                        newDate = new Date(firstDay);
                        newDate.setDate(firstDay.getDate() + i);
                        this._dateRender.push(new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate()).getTime());
                    }
                }
                else {
                    var monthDays = this._monthdates();
                    this._dateRender = this.model.orientation == "vertical" ? monthDays : this.monthDays;
                }
            }
            else {
                this._dateRender.push(new Date(this.currentDate()).setHours(0, 0, 0, 0));
            }
            return this._dateRender;
        },

        _getCurrentDateHeaderValue: function () {
            var dateValue, value = (this._resWorkWeek) ? this._renderDates : this._dateRender;
            if (this.currentView() === "day")
                dateValue = this._dayShortNames[new Date(value[0]).getDay()] + " " + new Date(value[0]).getDate() + " " + ej.format(new Date(value[0]), "MMM", this.model.locale) + " " + new Date(value[0]).getFullYear();
            else if (this.currentView() === "week" || this.currentView() === "workweek") {
                if (new Date(value[0]).getYear() === new Date(value[value.length - 1]).getYear()) {
                    if (new Date(value[0]).getMonth() === new Date(value[value.length - 1]).getMonth()) {
                        dateValue = ej.format(new Date(value[0]), "dd", this.model.locale) + " - " + ej.format(new Date(value[value.length - 1]), "dd MMM yyyy", this.model.locale);
                    }
                    else if (new Date(value[0]).getMonth() !== new Date(value[value.length - 1]).getMonth()) {
                        dateValue = this.model.enableRTL ? ej.format(new Date(value[value.length - 1]), "MMM dd", this.model.locale) + " - " + ej.format(new Date(value[0]), "dd MMM yyyy", this.model.locale) :
                               ej.format(new Date(value[0]), "dd MMM", this.model.locale) + " - " + ej.format(new Date(value[value.length - 1]), "dd MMM yyyy", this.model.locale);
                    }
                }
                else {
                    dateValue = ej.format(new Date(value[0]), "MMM dd yyyy", this.model.locale) + " - " + ej.format(new Date(value[value.length - 1]), "MMM dd yyyy", this.model.locale);
                }
            }
            else if (this.currentView() === "customview") {
                if (value.length == 1)
                    dateValue = this._dayShortNames[new Date(value[0]).getDay()] + " " + new Date(value[0]).getDate() + " " + ej.format(new Date(value[0]), "MMM", this.model.locale) + " " + new Date(value[0]).getFullYear();
                else if (value.length > 1 && value.length <= 7) {
                    if (new Date(value[0]).getYear() === new Date(value[value.length - 1]).getYear()) {
                        if (new Date(value[0]).getMonth() === new Date(value[value.length - 1]).getMonth()) {
                            dateValue = ej.format(new Date(value[0]), "dd", this.model.locale) + " - " + ej.format(new Date(value[value.length - 1]), "dd MMM yyyy", this.model.locale);
                        }
                        else if (new Date(value[0]).getMonth() !== new Date(value[value.length - 1]).getMonth()) {
                            dateValue = this.model.enableRTL ? ej.format(new Date(value[value.length - 1]), "MMM dd", this.model.locale) + " - " + ej.format(new Date(value[0]), "dd MMM yyyy", this.model.locale) :
                                   ej.format(new Date(value[0]), "dd MMM", this.model.locale) + " - " + ej.format(new Date(value[value.length - 1]), "dd MMM yyyy", this.model.locale);
                        }
                    }
                    else {
                        dateValue = ej.format(new Date(value[0]), "MMM dd yyyy", this.model.locale) + " - " + ej.format(new Date(value[value.length - 1]), "MMM dd yyyy", this.model.locale);
                    }
                }
                else {
                    if (new Date(value[0]).getFullYear() == new Date(value[value.length - 1]).getFullYear()) {
                        if (new Date(value[0]).getMonth() == new Date(value[value.length - 1]).getMonth())
                            dateValue = ej.format(new Date(this.currentDate()), "MMM yyyy", this.model.locale);
                        else
                            dateValue = ej.format(new Date(value[0]), "MMM", this.model.locale) + " - " + ej.format(new Date(value[value.length - 1]), "MMM yyyy", this.model.locale);
                    }
                    else {
                        dateValue = ej.format(new Date(value[0]), "MMM yyyy", this.model.locale) + " - " + ej.format(new Date(value[value.length - 1]), "MMM yyyy", this.model.locale);
                    }
                }
            }
            else if (this.currentView() === "agenda") {
                value = new Date(this.currentDate());
                var days = this.model.agendaViewSettings.daysInAgenda > 0 ? this.model.agendaViewSettings.daysInAgenda - 1 : 0;
                if (new Date(value).getYear() === new Date(new Date(value).setDate(value.getDate() + days)).getYear()) {
                    if (new Date(value).getMonth() === new Date(new Date(value).setDate(value.getDate() + days)).getMonth()) {
                        dateValue = ej.format(new Date(value), "dd", this.model.locale) + " - " + ej.format(new Date(new Date(value).setDate(value.getDate() + days)), "dd MMM yyyy", this.model.locale);
                    }
                    else if (new Date(value).getMonth() !== new Date(new Date(value).setDate(value.getDate() + days)).getMonth()) {
                        dateValue = this.model.enableRTL ? ej.format(new Date(new Date(value).setDate(value.getDate() + days)), "MMM dd", this.model.locale) + " - " + ej.format(new Date(value), "dd MMM yyyy", this.model.locale) :
                               ej.format(new Date(value), "dd MMM", this.model.locale) + " - " + ej.format(new Date(new Date(value).setDate(value.getDate() + days)), "dd MMM yyyy", this.model.locale);
                    }
                }
                else
                    dateValue = ej.format(new Date(value), "MMM dd yyyy", this.model.locale) + " - " + ej.format(new Date(new Date(value).setDate(value.getDate() + days)), "MMM dd yyyy", this.model.locale);
            }
            else
                dateValue = ej.format(new Date(this.currentDate()), "MMM yyyy", this.model.locale);
            return dateValue;
        },

        _firstweekdate: function (currentDate) {
            var firstdayofweek = new Date(currentDate);
            var day = firstdayofweek.getDay();
            if (this._firstdayofweek == 0) {
                if (day != 0) {
                    firstdayofweek.setDate(firstdayofweek.getDate() - day);
                    if (!this.model.timeScale.enable && (this.currentView() == "workweek" || this._oneWeek) && this._resize)
                        firstdayofweek = new Date(this._dateRender[0]);
                }
            }
            else if (this._firstdayofweek != 0) {
                var diff = ((firstdayofweek.getDay() - this._firstdayofweek) < 0) ? (7 + firstdayofweek.getDay() - this._firstdayofweek) : (firstdayofweek.getDay() - this._firstdayofweek);
                firstdayofweek = new Date(firstdayofweek.setDate(firstdayofweek.getDate() - diff));
            }
            return firstdayofweek;
        },

        _getHeaderAllDayCellsCount: function () {
            var temp, headerCellClass, count, columns = [], cols, curday; this.dateRender = []; this._value = []; this.value = [];
            var resCount = 1;
            cols = [];
            if (this.model.orientation == "vertical") {
                this._isCustomMonthView();
                if (!ej.isNullOrUndefined(this.model.dateHeaderTemplateId) && (this.currentView() == "day" || this.currentView() == "week" || this.currentView() == "workweek" || (this.currentView() == "customview" && this._oneWeek))) {
                    columns = this._getUserDateheaderTemplate();
                    if ((this._tempResource.length != 0) && !ej.isNullOrUndefined(this.model.group) && ej.scheduleFeatures.resources) {
                        var getCount = this._getMultipleResourceCellsCount(count);
                        resCount = getCount.resCount;
                        if ((this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length == 0)
                            resCount = 1;
                    }
                }
                else {
                    count = this._getColumnCount().length;
                    if ((this._tempResource.length != 0) && !ej.isNullOrUndefined(this.model.group) && ej.scheduleFeatures.resources) {
                        var getCount = this._getMultipleResourceCellsCount(count);
                        resCount = getCount.resCount;
                        if ((this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length == 0)
                            resCount = 1;
                    }
                    for (i = 0; i < count; i++) {
                        curday = (this.currentView() === "month" || this.currentView() === "day" || (this._isCustomMonthView())) ? (this._tempResource.length == 0 && ej.isNullOrUndefined(this.model.group)) ? this._dayFullNames[new Date(this._dateRender[i]).getDay()] : this._dayShortNames[new Date(this._dateRender[i]).getDay()] : this._dayShortNames[new Date(this._dateRender[i]).getDay()];
                        headerCellClass = (new Date(new Date(this._dateRender[i]).setHours(0, 0, 0, 0)).getTime() === new Date(new Date().setHours(0, 0, 0, 0)).getTime()) ? "e-headerToday" : "";
                        temp = (this.currentView() === "month" || (this._isCustomMonthView())) ? { currentDay: curday, currentDateClass: "", cellToday: headerCellClass } : this.currentView() === "day" ? (this._tempResource.length == 0 && ej.isNullOrUndefined(this.model.group)) ? { currentDay: curday + " " + ej.format(new Date(this._dateRender[i]), "dd MMMM yyyy", this.model.locale), currentDateClass: "", cellToday: headerCellClass } : { currentDay: curday + " " + ej.format(new Date(this._dateRender[i]), "dd MMM yy", this.model.locale), currentDateClass: "", cellToday: headerCellClass } : { currentDay: curday + " " + new Date(this._dateRender[i]).getDate(), currentDateClass: new Date(this._dateRender[i]).getDate() === new Date(this.currentDate()).getDate() ? "e-activeview" : "", cellToday: headerCellClass };
                        columns.push(temp);
                        this._value.push(i);
                    }
                }
                if (this._resWorkWeek) {
                    cols = $.merge(cols, columns);
                    this.value = $.merge(this.value, this._value);
                }
                else {
                    for (var i = 0; i < resCount; i++) {
                        this.dateRender = $.merge(this.dateRender, this._dateRender);
                        cols = $.merge(cols, columns);
                        this.value = $.merge(this.value, this._value);
                    }
                }
            }
            else
                cols = this._getHorizontalheaderCellCount(this._culture);
            return cols;
        },

        _findResourceIndex: function (data, attr, value) {
            for (var i = 0; i < data.length; i++) {
                if (data[i][attr] === value) {
                    return i;
                }
            }
        },

        _renderHeaderAllDayTemplate: function () {
            if (this.currentView() != "agenda") {
                if (ej.scheduleFeatures.horizontal && this.model.orientation == "horizontal") {
                    if ((this._tempResource.length != 0) && ej.scheduleFeatures.resources)
                        this._renderMultipleResourceHeaderTemplate(null, null);
                    this._renderHorizontalHeaderBar();
                }
                else {
                    var headerScrollDiv = $(document.createElement('div')).addClass('e-headerscrolldiv');
                    var headerDiv = ej.buildTag('div.e-headeralldaydiv', "", {}, { height: "100%" }).css("position", "relative").css("overflow", "hidden");
                    var resCount = 0;
                    var table = ej.buildTag('table.e-table e-headrealldaytable', "", {}, { cellspacing: "0px", cellpadding: "0px", width: "100%" });
                    var tbody = ej.buildTag('tbody');
                    var headTR = ej.buildTag('tr.e-dateheader');
                    var cols = this._getHeaderAllDayCellsCount();
                    var html = this.headTemplate.render({ cols: cols, view: this.currentView(), colspan: 1 });
                    if ((this._tempResource.length != 0) && ej.scheduleFeatures.resources) {
                        tbody = this._renderMultipleResourceHeaderTemplate(tbody, cols);
                        resCount = !ej.isNullOrUndefined(this.model.group) ? this._grouping.length : 0;
                        if ((this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length == 0)
                            resCount = 0;
                    }
                    var tempNavigate = ej.buildTag('div.e-navigate', "", {}, {});
                    var inner_table = ej.buildTag('table.e-table e-headertable', "", {}, { cellspacing: "0px", cellpadding: "0px" });
                    var tb = ej.buildTag('tbody');
                    var headT = ej.buildTag('tr.e-headertr');
                    headTrCount = (this.currentView() == "month") || (this._isCustomMonthView()) ? 1 : 2;
                    var rowCount = resCount + headTrCount; var rows = [];
                    for (var i = 0; i < rowCount; i++) {
                        if (this.currentView() == "month" || (this._isCustomMonthView()))
                            rows.push({ tdClass: (i == rowCount - 1) ? "e-monthleftcells" : "e-resourceleftindentcells", divClass: (i == rowCount - 1) ? "e-dateheadercell" : "" });
                        else
                            rows.push({ tdClass: (i == rowCount - 1) ? "e-leftindent" : (i == rowCount - 2) ? "e-settingsindent" : "e-resourceleftindentcells", divClass: (i == rowCount - 1) ? "e-schedulesettings e-textellipsis" : (i == rowCount - 2) ? "e-dateheadercell" : "" });
                    }
                    var widths = (this._mediaQuery) ? this.currentView() == "month" || (this._isCustomMonthView()) ? "50px" : "30px" : this.currentView() == "month" || (this._isCustomMonthView()) ? "50px" : "56px";
                    if (!this.model.showAllDayRow)
                        new ej.DataManager(rows).remove("tdClass", "e-leftindent");
                    var leftIndentHtml = this.leftIndent.render({ trs: rows, cswidth: widths });
                    if (this.model.timeScale.enable)
                        this.aTR.append(ej.buildTag('td').append(tempNavigate.append(inner_table.append(tb.append(headT.append(ej.buildTag('td.e-empty', "", {}, { width: (this._mediaQuery) ? (this.currentView() == "month" || (this._isCustomMonthView())) ? "0px" : "30px" : (this.currentView() == "month" || this._isCustomMonthView()) ? "50px" : "56px" }).addClass((this.currentView() == "month" || this._isCustomMonthView()) ? "e-monthempty" : "").append(leftIndentHtml)).append(ej.buildTag('td').append(headerScrollDiv.append(headerDiv.append(table.append(tbody.append(headTR.append(html))))))).append(ej.buildTag('td.e-emptyscrolltd', "", {}, { width: (this.currentView() == "month" || this._isCustomMonthView()) ? "0px" : (this._mediaQuery) ? "0px" : "18px" })))))));
                    else
                        this.aTR.append(ej.buildTag('td').append(tempNavigate.append(inner_table.append(tb.append(headT.append(ej.buildTag('td').append(headerScrollDiv.append(headerDiv.append(table.append(tbody.append(headTR.append(html))))))).append(ej.buildTag('td.e-emptyscrolltd', "", {}, { width: (this.currentView() == "month" || this._isCustomMonthView()) ? "0px" : (this._mediaQuery) ? "0px" : "18px" })))))));
                    if (this.currentView() !== "month" && !(this._isCustomMonthView()) && this.model.timeScale.enable && this.model.showAllDayRow) {
                        var userTemplate = (!ej.isNullOrUndefined(this.model.allDayCellsTemplateId)) ? true : false;
                        if (userTemplate) { var allDayHtml = this._getUserAllDayCellsTemplate(); }
                        var allHtml = this.alldayTemp.render({ cols: cols, colspan: 1, userTemp: userTemplate, userHtml: allDayHtml });
                        tbody.append(ej.buildTag('tr').append(allHtml));
                    }
                }
            }
            else {
                var tempNavigate = ej.buildTag('div.e-navigate', "", {}, {});
                var inner_table = ej.buildTag('table.e-table e-headertable', "", {}, { cellspacing: "0px", cellpadding: "0px" });
                var tb = ej.buildTag('tbody');
                var headT = ej.buildTag('tr.e-headertr');
                var headerScrollDiv = $(document.createElement('div')).addClass('e-headerscrolldiv');
                var headerDiv = ej.buildTag('div.e-headeralldaydiv', "", {}, { height: "100%" }).css("position", "relative").css("overflow", "hidden");
                var table = ej.buildTag('table.e-table e-headrealldaytable', "", {}, { cellspacing: "0px", cellpadding: "0px", width: "100%" });
                var tbody = ej.buildTag('tbody tr');
                var colspan = 1;
                var cols = [{ headertext: this._getLocalizedLabels("Date"), className: "e-datecolumn" }, { headertext: this._getLocalizedLabels("Time"), className: "e-timecolumn" }, { headertext: this._getLocalizedLabels("Event"), className: "e-eventcolumn" }];
                if (this._tempResource.length != 0 && ej.scheduleFeatures.resources) {
                    this._renderMultipleResourceHeaderTemplate(null, null);
                    var res = [];
                    for (var resLevel = 0; resLevel < this.render_Resources.length; resLevel++)
                        res.push({ headertext: "", className: "e-resourcecolumn" });
                    (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0) && (cols = $.merge(res, cols));
                }
                var html = this.agendaheadTemplate.render({ cols: cols });
                this.aTR.append(ej.buildTag('td').append(tempNavigate.append(inner_table.append(tb.append(headT.append(ej.buildTag('td').append(headerScrollDiv.append(headerDiv.append(table.append(tbody.append(html)))))).append(ej.buildTag('td.e-emptyscrolltd', "", {}, { width: "18px" })))))));
            }
            (!ej.isNullOrUndefined(this.model.queryCellInfo)) && this._renderQueryCellInfo("renderHeaderAllDayTemplate");
        },
        _getDateTime: function (args) {
            var _target = args;
            if (this.model.timeScale.enable)
                this._cellIndex = (_target.is('.e-workcells, .e-alldaycells') || this._isCustomMonthView() && this._oneWeek) ? _target.index() : 7 - ((parseInt(_target.index() / 7) + 1) * 7 - _target.index()) + (_target.parent().index() * 7);
            else
                this._cellIndex = (this.model.orientation == "vertical" && this.currentView() == "month") || (this.currentView() == "customview" && this._dateRender.length >= 7) ? 7 - ((parseInt(_target.index() / 7) + 1) * 7 - _target.index()) + (_target.parent().index() * 7) : _target.index();
            if (this.model.orientation == "horizontal") {
                this._cellIndex = this.model.timeScale.enable ? this.currentView() !== "month" && !(this._isCustomMonthView()) ? Math.floor(this._cellIndex / ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot))) : this._cellIndex : _target.index();
                this._workCellIndex = _target.parent().index();
            }
            var renderDate = (this.model.orientation == "horizontal" && this.currentView() == "month") ? this.monthDays : (this.model.orientation == "vertical" || this.currentView() == "customview" && this._dateRender.length <= 7) ? (this._resWorkWeek) ? this._dateRender : this.dateRender : this._dateRender;
            renderDate = this.model.orientation == "horizontal" && this.currentView() == "customview" && this._dateRender.length <= 7 ? this._dateRender : renderDate;
            var curDate = new Date(renderDate[this._cellIndex]);
            if ((this.model.minDate > curDate || this.model.maxDate < curDate)) { return false; }
            if (_target.hasClass("e-workcells") && (this.model.showTimeScale) && this.currentView() !== "month" && !(this._isCustomMonthView())) {
                this._calcCurrentTime(curDate, _target, "");
            }
            else {
                this.cur_StartTime = new Date(new Date(curDate).setHours(0, 0));
                this.cur_EndTime = new Date(new Date(curDate).setHours(23, 59));
            }
            var result;
            if (_target.hasClass("e-horizontmonthheaderdaytd")) {
                result = { startTime: new Date(this.cur_StartTime), endTime: this.cur_EndTime, currentDate: curDate, cellIndex: this._cellIndex, currentDate: curDate };
            }
            else {
                result = { startTime: new Date(this.cur_StartTime), endTime: this.cur_EndTime, currentDate: curDate, cellIndex: this._cellIndex, currentDate: curDate, resources: (this._tempResource.length != 0) ? this._getResourceValue(_target, this._cellIndex) : null };
            }
            return result;
        },

        _getAgendaAppointment: function (_target) {
            var appoint = [];
            if (_target.hasClass("e-datecolumn")) {
                var rowspan = $(_target).attr('rowspan');
                var appEvents = $(_target).parent().nextAll("tr").andSelf().slice(0, parseInt(rowspan));
                if (appEvents.length > 0) {
                    for (var m = 0; m < appEvents.length; m++) {
                        var tempGUID = $(appEvents[m]).find(".e-eventcolumn .e-agendaappointment").attr('guid');
                        appoint.push(new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, tempGUID))[0]);
                    }
                }
            } else {
                var appoint = _target.hasClass("e-agendaappointment") ? _target : _target.parent().find(".e-agendaappointment");
                var _appUid = appoint.attr('guid');
                if (this._mediaQuery)
                    this._mAppId = _appUid;
                appoint = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, _appUid));
            }
            return appoint;
        },
        _monthdates: function () {
            var currentDate = new Date(this.currentDate());
            var header = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
            var day = header.getDay() + 1;
            if (this._firstdayofweek)
                header.setDate(header.getDate() - day + this._firstdayofweek);
            else
                header.setDate(header.getDate() - day);
            if (header.getMonth() == new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getMonth())
                header.setDate(new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDate() - day + this._firstdayofweek - 7);
            var strtDate = new Date(header.setDate(header.getDate() + 1));
            var endDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
            var dayDiff = Math.round((Math.abs(strtDate.getTime() - endDate.getTime()) / (1000 * 60 * 60 * 24)) + 1);
            if (dayDiff <= 28)
                rows = 4;
            else if (dayDiff > 28 && dayDiff <= 35)
                rows = 5;
            else
                rows = 6;
            new Date(header.setDate(header.getDate() - 1));
            var dates = [];
            this.monthDays = [];
            for (var row = 0; row < (rows * 7) ; row++) {
                header.setDate(header.getDate() + 1);
                dates.push(new Date(header.getFullYear(), header.getMonth(), header.getDate(), 0, 0, 0).getTime());
                if (new Date(this.currentDate()).getMonth() === new Date(dates[row]).getMonth())
                    this.monthDays.push(dates[row]);
            }
            if (new Date(dates[0]).getDate() == new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDate()) {
                dates = dates.splice(0, 35);
            }
            return dates;
        },

        _getStartEndTime: function () {
            var timerows, startendTimes = [], timelist;
            this._timeInitial = 0;
            var localizeAmPm = this._culture.calendar;
            if (this.model.orientation === "vertical") {
                if (this.currentView() == "month" || (this._isCustomMonthView())) {
                    var row = this._dateRender.length;
                    for (var i = 0; i < (row / 7) ; i++) {
                        startendTimes.push(i);
                    }
                }
                else {
                    if (!ej.isNullOrUndefined(this.model.timeScale.majorSlotTemplateId)) {
                        startendTimes = this._getUserTimeCellsTemplate();
                    }
                    else {
                        var dateValue = new Date(new Date().setHours(0, 0, 0, 0));

                        for (var i = this.model.startHour * 60; i < this.model.endHour * 60;) {
                            if (this._timeMode === "12") {
                                if (new Date(new Date(dateValue).setHours(this.model.endHour, 0, 0, 0)).getTime() > new Date(new Date(dateValue).setHours(0, i, 0, 0)).getTime()) {
                                    timelist = (((i / 60) === this.model.startHour || (i / 60) === 12) && (localizeAmPm.AM && localizeAmPm.PM)) ? ej.format(new Date(new Date(dateValue).setHours(0, i, 0, 0)), "hh tt", this.model.locale) : ej.format(new Date(new Date(dateValue).setHours(0, i, 0, 0)), "hh mm", this.model.locale);
                                    startendTimes.push({ time: timelist, id: (i / 60) });
                                }
                            }
                            else
                                startendTimes.push({ time: new Date(new Date(dateValue).setHours(0, i, 0, 0)).toTimeString().slice(0, 5) + " 00" });
                            i = i + this.model.timeScale.majorSlot;
                        }
                    }
                }
            }
            else if (this.model.orientation == "horizontal" && ej.scheduleFeatures.horizontal)
                startendTimes = this._getHoriStartEndTime(localizeAmPm);
            return startendTimes;
        },

        _getWorkCellsCount: function () {
            var workcells = [];
            if (this.model.timeScale.enable) {
                if (this.currentView() == "month" || (this._isCustomMonthView())) {
                    var row = this._dateRender.length;
                    for (var i = 0; i < (row / 7) ; i++) {
                        workcells.push({ crow: i, cwidth: this.model.cellWidth, cheight: this.model.cellHeight });
                    }
                }
                else {
                    var strEndTime = this._getStartEndTime();
                    var value = 0;
                    for (var i = 0; i < (this.model.timeScale.minorSlotCount * strEndTime.length) ; i++) {
                        value = value + (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount);
                        if (value > (this.model.endHour - this.model.startHour) * 60) {
                            workcells.push({ crow: i, cwidth: this.model.cellWidth, cheight: this.model.cellHeight });
                            break;
                        }
                        else
                            workcells.push({ crow: i, cwidth: this.model.cellWidth, cheight: this.model.cellHeight });
                    }
                }
            }
            else {
                var row = (this._resWorkWeek) ? 1 : this._dateRender.length;
                for (var i = 0; i < (row / 7) ; i++) {
                    workcells.push({ crow: i, cwidth: this.model.cellWidth, cheight: this.model.cellHeight });
                }
            }
            return workcells;
        },

        _renderContentAreaTemplate: function () {
            var $contentAreaDiv = ej.buildTag('div.e-workareadiv');
            var $contentTable = ej.buildTag('table.e-table e-worktable', "", {}, { height: "100%", cellpadding: "0px", cellspacing: "0px", width: "100%" });
            var $contentBody = ej.buildTag('tbody');
            var $contentTR = ej.buildTag('tr');
            var $WorkCellTD = ej.buildTag('td');
            var $scrollerbarDiv = ej.buildTag('div#' + this._id + "_scroller");
            this.$WorkCellDiv = ej.buildTag('div').attr('class', 'e-draggableworkarea').attr("width", "100%").attr("height", "100%");
            if (this.currentView() != "agenda") {
                if (ej.scheduleFeatures.horizontal && this.model.orientation == "horizontal")
                    this._renderHorizontalContent($contentAreaDiv, $contentTable, $contentBody, $contentTR, $WorkCellTD, $scrollerbarDiv);
                else {
                    this.$TimeCellTD = ej.buildTag('td', "", {}, {}).addClass((this.currentView() == "month" || this._isCustomMonthView()) ? "e-monthleftindent" : "e-workleftindent");
                    var timeCellhtml, workCellhtml;
                    var userTemplateId = ((!ej.isNullOrUndefined(this.model.timeScale.majorSlotTemplateId) && !ej.isNullOrUndefined(this.model.timeScale.minorSlotTemplateId)) || !ej.isNullOrUndefined(this.model.timeScale.minorSlotTemplateId)) ? true : false;
                    var template = (!ej.isNullOrUndefined(this.model.timeScale.majorSlotTemplateId)) ? true : false;
                    var viewclass = this.currentView() == "month" || (this._isCustomMonthView()) ? 1 : 0;
                    var columnValueCount = this._timeSlotCount(userTemplateId, template);
                    if ((userTemplateId || template) && (this.currentView() != "month" && !(this._isCustomMonthView()))) {
                        columnValueCount.columnCount.pop();
                        timeCellhtml = this.userTimeCellTemplate.render({ timerows: this._getStartEndTime(), cols1: columnValueCount.columnCount, viewclass: viewclass, timeScale: this.model.timeScale.minorSlotCount, cheight: this.model.cellHeight, userTemplateId: userTemplateId, timeValue1: columnValueCount.timeValue1, template: template });
                    }
                    else
                        timeCellhtml = this.timeCellTemplate.render({ timerows: this._getStartEndTime(), cols1: columnValueCount.columnCount, viewclass: viewclass, timeScale: this.model.timeScale.minorSlotCount, userTemplateId: userTemplateId, template: template });
                    var userTemplate = (!ej.isNullOrUndefined(this.model.workCellsTemplateId)) ? true : false;
                    if (userTemplate) { var workHtml = this._getUserWorkCellsTemplate(); }
                    if (this.currentView() != "month" && !(this._isCustomMonthView()) && this.model.timeScale.enable)
                        workCellhtml = this.workcellTemp.render({ cellrows: this._getWorkCellsCount(), cols1: this.value, orientation: this.model.orientation, timeScale: this.model.timeScale.minorSlotCount, userTemplate: userTemplate, userHtml: workHtml });
                    else
                        workCellhtml = this.monthcellTemp.render({ cellrows: this._getWorkCellsCount(), cols1: this.value, orientation: this.model.orientation, timeScale: this.model.timeScale.minorSlotCount, userTemplate: userTemplate, userHtml: workHtml });
                    if (this.model.timeScale.enable)
                        this.wTR.append(ej.buildTag('td').append($contentAreaDiv.append($contentTable.append($contentBody.append($contentTR.append(this.$TimeCellTD.append(timeCellhtml)).append($WorkCellTD.append($scrollerbarDiv.append(this.$WorkCellDiv.append(workCellhtml)))))))));
                    else
                        this.wTR.append(ej.buildTag('td').append($contentAreaDiv.append($contentTable.append($contentBody.append($contentTR.append($WorkCellTD.append($scrollerbarDiv.append(this.$WorkCellDiv.append(workCellhtml)))))))));
                }
            }
            else
                this.wTR.append(ej.buildTag('td').append($contentAreaDiv.append($contentTable.append($contentBody.append($contentTR.append($WorkCellTD.append($scrollerbarDiv.append(this.$WorkCellDiv))))))));
            (!ej.isNullOrUndefined(this.model.queryCellInfo)) && this._renderQueryCellInfo("renderContentAreaTemplate");
        },

        _renderQueryCellInfo: function (method, record, temp) {
            if (method == "renderHeaderBar") {
                this._trigger("queryCellInfo", { element: temp, requestType: "headerBar" });
            }
            if (method == "appointment") {
                this._trigger("queryCellInfo", { appointment: record, element: temp, requestType: "appointment" });
            }
            if (method == "blockAppointment") {
                this._trigger("queryCellInfo", { appointment: record, element: temp, requestType: "blockoutCells" });
            }
            if (method == "emptycell") {
                var emptytd = this.aTR.find(".e-emptyscrolltd");
                this._trigger("queryCellInfo", { element: $(emptytd[0]), requestType: "emptytd" });
            }
            if (method == "renderAgendaContent") {
                var headerCells = this.aTR.find(".e-headercells");
                for (var i = 0; i < headerCells.length; i++) {
                    this._trigger("queryCellInfo", { element: $(headerCells[i]), cellType: "agendaheadercells", requestType: "agendacells" });
                }
                var dateColumn = this.element.find(".e-draggableworkarea").find(".e-datecolumn");
                var timeColumn = this.element.find(".e-draggableworkarea").find(".e-timecolumn");
                var eventColumn = this.element.find(".e-draggableworkarea").find(".e-eventcolumn");
                if (this._tempResource.length != 0) {
                    var resourceColumn = this.element.find(".e-draggableworkarea").find(".e-resourcecolumn");
                    for (var i = 0; i < resourceColumn.length; i++) {
                        var result = this._getAgendaAppointment($(resourceColumn[i]));
                        this._trigger("queryCellInfo", { appointment: result[0], element: $(resourceColumn[i]), cellType: "agendaresourcecell", requestType: "agendacells" });
                    }
                }
                for (var i = 0; i < dateColumn.length; i++) {
                    var result = this._getAgendaAppointment($(dateColumn[i]));
                    this._trigger("queryCellInfo", { currentAppointmentDate: new Date(new Date(result[0][this._appointmentSettings['startTime']]).setHours(0, 0, 0)), appointments: result, element: $(dateColumn[i]), cellType: "agendadatecell", requestType: "agendacells" });
                }
                for (var i = 0; i < timeColumn.length; i++) {
                    var result = this._getAgendaAppointment($(timeColumn[i]));
                    this._trigger("queryCellInfo", { appointment: result[0], element: $(timeColumn[i]), cellType: "agendatimecell", requestType: "agendacells" });
                }
                for (var i = 0; i < eventColumn.length; i++) {
                    var result = this._getAgendaAppointment($(eventColumn[i]));
                    this._trigger("queryCellInfo", { appointment: result[0], element: $(eventColumn[i]), cellType: "agendaeventcell", requestType: "agendacells" });
                }
            }
            else if (method == "renderHeaderAllDayTemplate") {
                if (this.model.orientation == "vertical") {
                    var headerCells = this.aTR.find(".e-headercells");
                    var resInfo = this.res1;
                    var headerDates = this._getHeaderAllDayCellsCount();
                    this.res1 = resInfo;
                    if (this.model.showAllDayRow) {
                        var alldayElements = this.aTR.find(".e-alldaycells");
                        for (var i = 0; i < alldayElements.length; i++) {
                            var result = this._getDateTime($(alldayElements[i]));
                            var event = {
                                cellIndex: result.cellIndex,
                                currentDate: result.currentDate,
                                resources: result.resources
                            };
                            this._trigger("queryCellInfo", { cell: event, element: $(alldayElements[i]), requestType: "alldaycells" });
                        }
                    }
                    if (this.currentView() != "agenda") {
                        var numberOfDates = headerCells.length / this.res1.length;
                        for (var i = 0; i < headerCells.length; i++) {
                            var k = Math.floor(i / numberOfDates);
                            this._trigger("queryCellInfo", { resource: this.res1[k], currentDay: headerDates[i].currentDay, element: $(headerCells[i]), requestType: "headercells" });
                        }
                    }
                    if ((this._tempResource.length != 0)) {
                        var resource = [];
                        var resourceHeaderCells = this.aTR.find(".e-resourcecells");
                        var resourceHeaderDivCells = this.aTR.find(".e-resourceleftindentcells");
                        for (var j = 0; j < this._tempResource.length; j++) {
                            $.merge(resource, this._tempResource[j].resourceSettings.dataSource);
                        }
                        for (var i = 0; i < resourceHeaderCells.length; i++) {
                            this._trigger("queryCellInfo", { resource: resource[i], element: $(resourceHeaderCells[i]), cellType: "headercells", requestType: "resourceheadercells" });
                        }
                        for (var i = 0; i < resourceHeaderDivCells.length; i++) {
                            this._trigger("queryCellInfo", { element: $(resourceHeaderDivCells[i]), cellType: "headerdivcells", requestType: "resourceheadercells" });
                        }
                    }
                    if (this.currentView() != "month" || !this._isCustomMonthView()) {
                        var indent = this.aTR.find(".e-leftindent");
                        this._trigger("queryCellInfo", { element: indent, requestType: "leftindentcells" });
                    }
                    var leftHeaderCells = (this.currentView() == "month" || this._isCustomMonthView()) ? this.aTR.find(".e-monthleftcells") : this.aTR.find(".e-settingsindent");
                    this._trigger("queryCellInfo", { element: leftHeaderCells, requestType: "leftheadercells" });
                }
                else {
                    var headercells = this.aTR.find(".e-headercells");
                    var resInfo = this.res1;
                    var headerDates = this._getHeaderAllDayCellsCount();
                    this.res1 = resInfo;
                    var timeCells = this.aTR.find(".e-horizontaltimetd ");
                    var timeCellsDiv = this.aTR.find(".e-horizontalalternatetd");
                    var timeCellsStartTime = this._getStartEndTime();
                    for (var i = 0; i < timeCells.length; i++) {
                        this._trigger("queryCellInfo", { cell: timeCellsStartTime[i], element: $(timeCells[i]), cellType: "timecell", requestType: "timecells" });
                    }
                    for (var i = 0; i < timeCellsDiv.length; i++) {
                        this._trigger("queryCellInfo", { element: $(timeCellsDiv[i]), cellType: "timeampmcell", requestType: "timecells" });
                    }

                    if (this.currentView() != "agenda") {
                        for (var i = 0; i < headercells.length; i++) {
                            this._trigger("queryCellInfo", { currentDay: headerDates[i].currentDay, element: $(headercells[i]), requestType: "headercells" });
                        }
                    }
                    var dateHeader = this.aTR.find(".e-horizontmonthheaderdaytd");
                    for (var i = 0; i < dateHeader.length; i++) {
                        var result = this._getDateTime($(dateHeader[i]));
                        var event = {
                            cellIndex: result.cellIndex,
                            currentDate: result.currentDate
                        };
                        this._trigger("queryCellInfo", { cell: event, element: $(dateHeader[i]), requestType: "headerdate" });
                    }
                    if ((this._tempResource.length != 0)) {
                        var resourceGroupHeader = this.aTR.find(".e-horizontalheader");
                        for (var i = 0; i < resourceGroupHeader.length; i++) {
                            this._trigger("queryCellInfo", { element: $(resourceGroupHeader[i]), requestType: "resourcegroupheader" });
                        }
                    }
                }
            }
            else if (method == "renderContentAreaTemplate") {
                if (this.model.orientation == "vertical") {
                    var tdElements, reqType;
                    timeCellsDiv = this.wTR.find(".e-timecelldivs");
                    timeCellAMPM = this.wTR.find(".e-ampmdisplay");
                    timeCellsStartTime = this._getStartEndTime();
                    if (this.currentView() != "month" && !this._isCustomMonthView() && this.model.timeScale.enable) {
                        tdElements = this.wTR.find(".e-workcells");
                        reqType = "workcells";
                    }
                    else {
                        tdElements = this.wTR.find(".e-monthcells");
                        reqType = "monthcells";
                    }
                    for (var i = 0; i < timeCellsDiv.length; i++) {
                        this._trigger("queryCellInfo", { cell: timeCellsStartTime[i], element: $(timeCellsDiv[i]).parent(), cellType: "timecell", requestType: "timecells" });
                    }
                    for (var i = 0; i < timeCellAMPM.length; i++) {
                        this._trigger("queryCellInfo", { element: $(timeCellAMPM[i]), cellType: "timeampmcell", requestType: "timecells" });
                    }
                    for (var i = 0; i < tdElements.length; i++) {
                        var result = this._getDateTime($(tdElements[i])), event;
                        if (this.currentView() != "month" && this.currentView() != "customview" && this.model.timeScale.enable) {
                            event = {
                                cellIndex: result.cellIndex,
                                startTime: result.startTime,
                                endTime: result.endTime,
                                resources: result.resources
                            };
                        }
                        else {
                            event = {
                                cellIndex: result.cellIndex,
                                currentDate: result.currentDate,
                                resources: result.resources
                            };
                        }
                        this._trigger("queryCellInfo", { cell: event, element: $(tdElements[i]), requestType: reqType });
                    }
                }
                else {
                    var tdElements;
                    tdElements = !ej.isNullOrUndefined(this.$WorkCellDiv) ? this.$WorkCellDiv.find(".e-workcells") : null;
                    if ((this._tempResource.length != 0) && !ej.isNullOrUndefined(this.$WorkCellDiv)) {
                        var resourceHeaderCells = this.$WorkCellDiv.find(".e-resourceheadercells");
                        var resource = this._resourceSort();
                        var resourceHeader = this.wTR.find('.e-horizontresheaderdiv');
                        for (var i = 0; i < resourceHeader.length; i++) {
                            this._trigger("queryCellInfo", { resource: resource[$(resourceHeaderCells[i]).index()], element: $(resourceHeader[i]), cellType: "headerdivcells", requestType: "resourceheadercells" });
                        }
                        for (var i = 0; i < resourceHeaderCells.length; i++) {
                            this._trigger("queryCellInfo", { resource: resource[$($(resourceHeaderCells[i]).parent()).index()], element: $(resourceHeaderCells[i]), cellType: "headercells", requestType: "resourceheadercells" });
                        }
                    }
                    if (!ej.isNullOrUndefined(tdElements)) {
                        for (var i = 0; i < tdElements.length; i++) {
                            if ($(tdElements[i]).hasClass("e-childworkcell") && $(tdElements[i]).hasClass("e-workcells")) {
                                var result = this._getDateTime($(tdElements[i]));
                                var event = {
                                    cellIndex: result.cellIndex,
                                    startTime: result.startTime,
                                    endTime: result.endTime,
                                    resources: result.resources
                                };
                                this._trigger("queryCellInfo", { cell: event, element: $(tdElements[i]), requestType: "workcells" });
                            }
                        }
                    }
                }
            }
        },

        _timeSlotCount: function (userTemplateId, template) {
            var value = 0, columnValue = [], cols2 = [];
            if ((!userTemplateId && !template) || (this.currentView() === "month" || (this._isCustomMonthView()))) {
                var strTime = this._getStartEndTime();
                var lenMinorSlot = this.model.orientation == "vertical" ? this.model.timeScale.minorSlotCount : this.model.timeScale.minorSlotCount - 1;
                for (var j = 0; j < strTime.length; j++) {
                    for (var i = 0; i < lenMinorSlot; i++) {
                        var value = value + (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount);
                        if (value > (this.model.endHour - this.model.startHour) * 60) {
                            columnValue.push(i);
                            if (i == (this.model.timeScale.minorslotcount - 2)) {
                                value = 0; break;
                            }
                        }
                        else
                            columnValue.push(i);
                    }
                    cols2.push(columnValue);
                    value = value + (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount);
                    columnValue = [];
                }
                var columnCount = cols2;
            }
            else {
                for (var i = 0; i < this.model.timeScale.minorSlotCount; i++) {
                    columnValue.push(i);
                }
                var columnCount = columnValue;
            }

            if ((userTemplateId || template) && (this.currentView() !== "month" && !(this._isCustomMonthView()))) {
                var userTemp = $.templates($(this.model.timeScale.minorSlotTemplateId).html());
                var userTemp1 = $.templates($(this.model.timeScale.majorSlotTemplateId).html());
                var timeValue1 = [], j = 0;
                for (var i = this.model.startHour; i < this.model.endHour;) {
                    var timeValue = [];
                    var value = this.model.timeScale.majorSlot + j;
                    var jvalue = j;
                    while (j < value) {
                        var jval = j;
                        j = j * 60 * 1000;
                        if (this._timeMode === "12") {
                            if (jval == jvalue && !ej.isNullOrUndefined(this.model.timeScale.majorSlotTemplateId))
                                timeValue.push(userTemp1.render(object = { date: new Date(new Date(this._dateRender[0]).setHours(i, 0, 0, j)) }).trim());
                            else
                                timeValue.push(userTemp.render(object = { date: new Date(new Date(this._dateRender[0]).setHours(i, 0, 0, j)) }).trim());
                        }
                        else {
                            if (jval == jvalue && !ej.isNullOrUndefined(this.model.timeScale.majorSlotTemplateId))
                                timeValue.push(userTemp1.render(object = { date: new Date(new Date(this._dateRender[0]).setHours(i, 0, 0, j)) }).trim());
                            else
                                timeValue.push(userTemp.render(object = { date: new Date(new Date(this._dateRender[0]).setHours(i, 0, 0, j)) }).trim());
                        }
                        j = (j / 60000) + (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount);
                    }
                    i = (this.model.timeScale.majorSlot > 60) ? i + (this.model.timeScale.majorSlot / 60) : j >= 60 ? i + 1 : i;
                    j = (j >= 60) ? 0 : j;

                    timeValue1.push(timeValue);
                }
                template = true;
            }
            return { columnCount: columnCount, timeValue1: timeValue1, strTime: strTime };
        },
        _renderAgendaContent: function () {
            this.element.find(".e-agendacellstab").remove();
            var dateStart = new Date(new Date(this.currentDate()).setHours(0, 0, 0, 0));
            var row = []; var col = []; this._app = [];
            var startTimeDisp, endTimeDisp, date, time, subject, colorDiv, resName, userAppTemplId, userTempHtml, userDateId, userDateHtml, userTimeId, userTimeHtml, userResourceId, userResourceHtml;
            if (!this.model.group) this.res1 = ["0"];
            var repeatText = this._getLocalizedLabels("Recurrence");
            var count = this.model.agendaViewSettings.daysInAgenda > 0 ? this.model.agendaViewSettings.daysInAgenda - 1 : 0;
            for (var res = 0; res < this.res1.length; res++) {
                var predicate = ej.Predicate(this._appointmentSettings["startTime"], ej.FilterOperators.greaterThanOrEqual, new Date(dateStart));
                predicate = predicate["and"](this._appointmentSettings["startTime"], ej.FilterOperators.lessThanOrEqual, new Date(new Date(new Date(dateStart).setDate(dateStart.getDate() + count)).setHours(23, 59, 59)));
                predicate = !ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && ej.scheduleFeatures.resources ? predicate["and"](this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 1].trim(), ej.FilterOperators.equal, this.res1[res][this._tempResource[this._tempResource.length - 1].resourceSettings["id"]]) : predicate;
                var appList = new ej.DataManager(this._processed).executeLocal(new ej.Query().where(predicate));
                appList = this._appointmentSort(appList);
                this._app = $.merge(this._app, appList);
                if (appList.length > 0) {
                    var resGroup = [];
                    if (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && ej.scheduleFeatures.resources) {
                        var resgroupid = this.res1[res][this._tempResource[this._tempResource.length - 1].resourceSettings["groupId"]];
                        var resLevels = this._resCollection;
                        for (var i = resLevels.length - 1; i > 0; i--) {
                            var resApp = new ej.DataManager(resLevels[i - 1].dataSource).executeLocal(new ej.Query().where(resLevels[i - 1].id, ej.FilterOperators.equal, resgroupid));
                            resGroup.push({ resId: "resLevel_" + i + "_" + resApp[0][resLevels[i - 1].id], text: resApp[0][resLevels[i - 1].text] });
                            resgroupid = resApp[0][resLevels[i - 1].groupId];
                        }
                        resGroup.reverse();
                    }
                    var resChild = !ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && ej.scheduleFeatures.resources ? true : false;
                    var resRowSpan = appList.length;
                    userResourceId = (this.model.resourceHeaderTemplateId) ? true : false;
                    userResourceHtml = userResourceId ? this._getResourceHeadTemplate(this.res1[res]) : "";
                    var day = 0;
                    if (new Date(dateStart) < this.model.minDate)
                        day = Math.floor((new Date(this.model.minDate) - new Date(dateStart)) / (1000 * 60 * 60 * 24));
                    if (new Date(new Date(dateStart).setDate(dateStart.getDate() + count)) > this.model.maxDate)
                        count = count - Math.floor((new Date(new Date(dateStart).setDate(dateStart.getDate() + count)) - new Date(this.model.maxDate)) / (1000 * 60 * 60 * 24));
                    for (var day; day <= count; day++) {
                        var predicate = ej.Predicate(this._appointmentSettings["startTime"], ej.FilterOperators.greaterThanOrEqual, new Date(new Date(dateStart).setDate(dateStart.getDate() + day)));
                        predicate = predicate["and"](this._appointmentSettings["startTime"], ej.FilterOperators.lessThanOrEqual, new Date(new Date(new Date(dateStart).setDate(dateStart.getDate() + day)).setHours(23, 59, 59)));
                        predicate = !ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && ej.scheduleFeatures.resources ? predicate["and"](this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 1].trim(), ej.FilterOperators.equal, this.res1[res][this._tempResource[this._tempResource.length - 1].resourceSettings["id"]]) : predicate;
                        var dailyapplist = new ej.DataManager(appList).executeLocal(new ej.Query().where(predicate));
                        if (dailyapplist.length > 0) {
                            row.push(row.length + 1);
                            var dayRowSpan = dailyapplist.length; var dayChild = true; var dayBorderBottom = false;
                            for (var i = 0; i < dailyapplist.length; i++) {
                                if (i == dailyapplist.length - 1) dayBorderBottom = true;
                                startTimeDisp = this._timeMode == "12" ? ej.format(dailyapplist[i][this._appointmentSettings["startTime"]], this._pattern.t, this.model.locale) : ej.format(dailyapplist[i][this._appointmentSettings["startTime"]], "HH:mm", this.model.locale);
                                endTimeDisp = this._timeMode == "12" ? ej.format(dailyapplist[i][this._appointmentSettings["endTime"]], this._pattern.t, this.model.locale) : ej.format(dailyapplist[i][this._appointmentSettings["endTime"]], "HH:mm", this.model.locale);
                                date = "<strong class='e-agendaday'>" + ej.format(new Date(dailyapplist[i][this._appointmentSettings['startTime']]), 'dd', this.model.locale) + "</strong><span class='e-agendaweek'>" + ej.format(new Date(dailyapplist[i][this._appointmentSettings['startTime']]), 'dddd', this.model.locale) + "</span><span class='e-agendamonth'>" + ej.format(new Date(dailyapplist[i][this._appointmentSettings['startTime']]), 'MMM, yyyy', this.model.locale) + "</span>";
                                time = (!ej.isNullOrUndefined(dailyapplist[i][this._appointmentSettings["allDay"]]) && JSON.parse(dailyapplist[i][this._appointmentSettings["allDay"]])) ? "<div class='e-icon e-circle e-scheduleallday'></div>" + this._getLocalizedLabels("AllDay") : startTimeDisp + " - " + endTimeDisp;
                                subject = (!ej.isNullOrUndefined(dailyapplist[i][this._appointmentSettings["recurrence"]]) && JSON.parse(dailyapplist[i][this._appointmentSettings["recurrence"]])) ? dailyapplist[i][this._appointmentSettings["recurrenceRule"]].toString().indexOf("RECUREDITID") != -1 ? "<span class='e-icon e-schedulerepeatedit' title='" + repeatText + "'/>" + dailyapplist[i][this._appointmentSettings["subject"]] : "<span class='e-icon e-schedulerepeat' title='" + repeatText + "'/>" + dailyapplist[i][this._appointmentSettings["subject"]] : dailyapplist[i][this._appointmentSettings["subject"]];
                                colorDiv = (this.model.categorizeSettings.enable && !ej.isNullOrUndefined(dailyapplist[i][this._appointmentSettings["categorize"]]) && dailyapplist[i][this._appointmentSettings["categorize"]] != "") ? this._getCategorizeColor(dailyapplist[i]) : ((this._tempResource.length != 0) && ej.scheduleFeatures.resources) ? this._getResourceColor(dailyapplist[i]) : { appointData: "", appointCustomcss: "", appointtextcolor: "" };
                                resName = (!ej.isNullOrUndefined(this.model.group) && ej.scheduleFeatures.resources && (this._tempResource.length != 0)) ? this.res1[res][this._tempResource[this._tempResource.length - 1].resourceSettings["text"]] : "";
                                userAppTemplId = (this.model.appointmentTemplateId) ? true : false;
                                userTempHtml = userAppTemplId ? dailyapplist[i][this._appointmentSettings["recurrence"]] ? dailyapplist[i][this._appointmentSettings["recurrenceRule"]].toString().indexOf("RECUREDITID") != -1 ? "<span class='e-icon e-schedulerepeatedit' title='" + repeatText + "'/>" + this._getUserAppointmentTemplate(dailyapplist[i]) : "<span class='e-icon e-schedulerepeat' title='" + repeatText + "'/>" + this._getUserAppointmentTemplate(dailyapplist[i]) : this._getUserAppointmentTemplate(dailyapplist[i]) : "";
                                userDateId = (this.model.agendaViewSettings.dateColumnTemplateId) ? true : false;
                                userDateHtml = userDateId ? this._getUserTemplate(this.model.agendaViewSettings.dateColumnTemplateId, dailyapplist[i]) : "";
                                userTimeId = (this.model.agendaViewSettings.timeColumnTemplateId) ? true : false;
                                userTimeHtml = userTimeId ? this._getUserTemplate(this.model.agendaViewSettings.timeColumnTemplateId, dailyapplist[i]) : "";
                                col.push({ readOnly: this.model.readOnly, edittext: this._getLocalizedLabels("Edit"), deletetext: this._getLocalizedLabels("Delete"), userResourceId: userResourceId, userResourceHtml: userResourceHtml, userDateId: userDateId, userDateHtml: userDateHtml, userTimeId: userTimeId, userTimeHtml: userTimeHtml, userAppTemplId: userAppTemplId, userTemplate: userTempHtml, resGroup: resGroup, resName: resName, resChild: resChild, resRowSpan: resRowSpan, id: dailyapplist[i]["AppTaskId"], uid: dailyapplist[i].Guid, dayRowSpan: dailyapplist.length, dayChild: dayChild, dayBorderBottom: dayBorderBottom, background: colorDiv.appointData, date: date, time: time, event: subject });
                                dayChild = false; resChild = false;
                            }
                        }
                    }
                }
            }
            var workCellhtml = this.agendacellTemp.render({ rows: row, cols: col });
            this.element.find(".e-draggableworkarea").append(workCellhtml);
            if (!ej.isNullOrUndefined(this.model.group) && ej.scheduleFeatures.resources) {
                var resLevels = this.render_Resources;
                for (var i = 0; i < resLevels.length - 1; i++) {
                    for (var j = 0; j < resLevels[i].length; j++) {
                        var cname = "resLevel_" + (i + 1) + "_" + resLevels[i][j][this._resCollection[i].id];
                        this.element.find("." + cname).first().attr('rowspan', this.element.find("." + cname).length);
                        this.element.find("." + cname).slice(1).addClass("e-hide");
                        this.element.find(".e-hide").remove();
                        (this.model.resourceHeaderTemplateId) && (this.element.find("." + cname).children().empty().append(this._getResourceHeadTemplate(resLevels[i][j])));
                    }
                }
            }
            var _scrollDiv = $('div#' + this._id + "_scroller");
            if (ej.isNullOrUndefined(_scrollDiv.data("ejScroller"))) {
                _scrollDiv.ejScroller({
                    enableRTL: this.model.enableRTL, height: this.scHeight - (this.element.find('.e-draggableworkarea').offset().top - this.element.offset().top) - 1, width: parseInt(this.element.width()) - 2, cssClass: this.model.cssClass
                });
                (!this._mediaQuery) && this._nextPrevAppointment(this.model.showAppointmentNavigator);
            }
            _scrollDiv.ejScroller('refresh');
            var border = this.model.enableRTL ? "e-borderright" : "e-borderleft";
            _scrollDiv.ejScroller("isVScroll") ? (this.element.find(".e-emptyscrolltd").addClass(border).show() && this.element.find('.e-draggableworkarea').height(this.element.find('.e-draggableworkarea').height() + 1)) : this.element.find(".e-emptyscrolltd").removeClass(border).hide();
            this.element.find(".e-vscroll").css("left", (this.model.enableRTL) ? 0 : this.element.outerWidth() - (_scrollDiv.ejScroller("isVScroll") ? 19 : 0));
            this.element.find(".e-mobileNavigation").css(this.model.enableRTL ? "right" : "left", this.element.outerWidth() - 36);
            this.element.find(".e-headrealldaytable").parent().width(this.element.find(".e-draggableworkarea").width());
            (this.model.showAppointmentNavigator) && this._nextPrevButton(this._app);
            (!ej.isNullOrUndefined(this.model.queryCellInfo)) && this._renderQueryCellInfo("renderAgendaContent");
        },

        _getUserTemplate: function (id, record) {
            var cloneObj = $.extend(cloneObj, record);
            cloneObj.View = this.currentView();
            return $.templates($(id).html()).render(cloneObj);
        },

        _getColumnCount: function () {
            var weekcells = [];
            var daysCount = (this.currentView() === "month" || this._isCustomMonthView()) ? this._isCustomMonthView() ? this._renderDays <= 7 ? this._renderDays : 7 : 7 : this._getRenderDates().length;
            for (var i = 0; i < daysCount; i++) weekcells.push(i);
            return weekcells;
        },

        _bindAppointmentsData: function (currentAction) {
            if (!ej.isNullOrUndefined(this.model.appointmentSettings) && this.dataSource() != null) {
                if (this.model.enablePersistence) {
                    this.model.appointmentSettings.query = new ej.Query();
                    this._enablePersist = true;
                }
                if (!this.dataSource() instanceof ej.DataManager && this.dataSource().dataSource.offline)
                    this._dateFormat(this.dataSource());
                if (this.dataSource() instanceof ej.DataManager && !this.dataSource().dataSource.offline) {
                    this._initDataSource(currentAction);
                }
                else {
                    this._bindAppointments = (this.dataSource().length > 0) ? true : false;
                    this._angular = this._bindAppointments && (!this._bindapp && !this._setmodelvalue && this._viewchange == true && this._obj.length > 0 && this.dataSource()[0][this._appointmentSettings["id"]] == this._obj[0][this._appointmentSettings["id"]]);
                    this._true = this.model.isDST == true ? true : false;
                    if (ej.isNullOrUndefined(this.model.timeZone) && this.model.isDST == false)
                        this._timeZoneOffset = new Date().getTimezoneOffset() - this._stdTimezoneOffset();
                    else
                        this._timeZoneOffset = 0;
                    this._currentAppointmentData = this.dataSource();
                    $.extend(true, this._obj = [], this.dataSource());
                    !ej.isNullOrUndefined(this.dataSource().dataSource) && this.dataSource().dataSource.json && (this._currentAppointmentData = this.dataSource().dataSource.json);
                    this._dataCount = this._currentAppointmentData.length;
                    this._dataProcessing(this._currentAppointmentData);
                    (this.element.children().length > 0) && this._renderAppointmentAll();
                    if (this._app.length < 1 && this.model.showAppointmentNavigator)
                        this._nextPrevButton(this._app);
                    this.tzone = this.model.timeZone;
                    this._bindapp = false;
                    this._setmodelvalue = false;
                    this._viewchange = false;
                }
            }
        },

        _initDataSource: function (currentAction) {
            var query = this._columnToSelect(this.model.appointmentSettings, currentAction);
            var tempQuery = $.extend(true, [], query._params);
            this._true = this.model.isDST == true ? true : false;
            if (ej.isNullOrUndefined(this.model.timeZone) && this.model.isDST == false)
                this._timeZoneOffset = new Date().getTimezoneOffset() - this._stdTimezoneOffset();
            else
                this._timeZoneOffset = 0;
            query._params = [];
            var value = new Date(new Date(this.currentDate()).setHours(0, 0, 0));
            var temp = new Date(value.getTime() + (-(this._timeZoneCalculate()) * 60000));
            query.addParams("CurrentDate", temp).addParams("CurrentView", this.currentView()).addParams("CurrentAction", currentAction);
            for (var i = 0; i < tempQuery.length; i++) {
                if (tempQuery[i].key != "CurrentDate" && tempQuery[i].key != "CurrentView" && tempQuery[i].key != "CurrentAction") {
                    query.addParams(tempQuery[i].key, tempQuery[i].value);
                }
            }
            var proxy = this;
            var queryPromise = this.dataSource().executeQuery(query);
            queryPromise.done(function (e) {
                proxy._dataCount = e.result.length;
                if (!ej.isNullOrUndefined(e.result.result)) {
                    proxy._dataCount = e.result.count + 1;
                    e.result = e.result.result;
                }
                proxy._bindAppointments = (e.result.length > 0) ? true : false;
                proxy._currentAppointmentData = e.result;
                proxy._overlapList = [];
                proxy._dataProcessing(e.result);
                proxy._renderAppointmentAll();
                if (proxy._app.length < 1 && proxy.model.showAppointmentNavigator)
                    proxy._nextPrevButton(proxy._app);
            });
            if (ej.isNullOrUndefined(this._app) || this._app.length < 1) {
                this._app = [];
                if (this._app.length < 1 && this.model.showAppointmentNavigator)
                    this._nextPrevButton(this._app);
            }
        },

        _bindCategorizeData: function () {
            if (!ej.isNullOrUndefined(this.model.categorizeSettings)) {
                this._categoryInfo = [];
                if (ej.isNullOrUndefined(this.model.categorizeSettings.query) || !(this.model.categorizeSettings.query instanceof ej.Query))
                    this.model.categorizeSettings.query = ej.Query();
                if (this.model.categorizeSettings.dataSource instanceof ej.DataManager)
                    this._initCategorizeData(this.model.categorizeSettings);
                else {
                    this._categoryInfo.push(this.model.categorizeSettings);
                }
            }
        },

        _initCategorizeData: function (fields, i) {
            var query = this._columnToSelect(fields);
            var proxy = this;
            var queryCategoryPromise = fields.dataSource.executeQuery(query);
            queryCategoryPromise.done(function (e) {
                fields.dataSource = e.result;
                proxy._categoryInfo.push(fields);
                proxy._renderCategoryItems(proxy._appointmentAddWindow);
            });
        },

        _bindPriorityData: function () {
            if (!ej.isNullOrUndefined(this.model.prioritySettings)) {
                this._priorityInfo = [];
                if (ej.isNullOrUndefined(this.model.prioritySettings.query) || !(this.model.prioritySettings.query instanceof ej.Query))
                    this.model.prioritySettings.query = ej.Query();
                if (this.model.prioritySettings.dataSource instanceof ej.DataManager)
                    this._initPriorityData(this.model.prioritySettings);
                else {
                    this._priorityInfo.push(this.model.prioritySettings);
                }
            }
        },

        _initPriorityData: function (fields, i) {
            var query = this._columnToSelect(fields);
            var proxy = this;
            var queryPriorityPromise = fields.dataSource.executeQuery(query);
            queryPriorityPromise.done(function (e) {
                fields.dataSource = e.result;
                proxy._priorityInfo.push(fields);
                proxy._renderPriorityItems(proxy._appointmentAddWindow);
            });
        },

        _bindBlockData: function () {
            if (!ej.isNullOrUndefined(this.model.blockoutSettings)) {
                if (ej.isNullOrUndefined(this.model.blockoutSettings.query) || !(this.model.blockoutSettings.query instanceof ej.Query))
                    this.model.blockoutSettings.query = ej.Query();
                if (this.model.blockoutSettings.dataSource instanceof ej.DataManager) {
                    var query = this._columnToSelect(this.model.blockoutSettings);
                    var proxy = this;
                    var queryPromise = this.model.blockoutSettings.dataSource.executeQuery(query);
                    queryPromise.done(function (e) {
                        proxy.model.blockoutSettings.dataSource = e.result;
                        proxy._renderBlockAppointments();
                    });
                }
            }
        },

        _dateFormat: function (appointments) {
            if (appointments.length > 0) {
                if (new Date(appointments[0][this._appointmentSettings["startTime"]]).toString() == "Invalid Date") {
                    for (var i = 0; i < appointments.length; i++) {
                        if (new Date(appointments[i][this._appointmentSettings["startTime"]]).toString() == "Invalid Date" || new Date(appointments[i][this._appointmentSettings["startTime"]]).toString() == "NaN")
                            appointments[i][this._appointmentSettings["startTime"]] = new Date(parseInt(appointments[i][this._appointmentSettings["startTime"]].match(/\d+/).toString()));
                        else
                            appointments[i][this._appointmentSettings["startTime"]] = new Date(appointments[i][this._appointmentSettings["startTime"]]);
                        if (new Date(appointments[i][this._appointmentSettings["endTime"]]).toString() == "Invalid Date")
                            appointments[i][this._appointmentSettings["endTime"]] = new Date(parseInt(appointments[i][this._appointmentSettings["endTime"]].match(/\d+/).toString()));
                        else
                            appointments[i][this._appointmentSettings["endTime"]] = new Date(appointments[i][this._appointmentSettings["endTime"]]);
                    }
                }
            }
        },

        _columnToSelect: function (mapper, currentAction) {
            var column = [], queryManager = ej.Query();
            if (!ej.isNullOrUndefined(mapper.tableName) && !this.dataSource().dataSource.url.match(mapper.tableName + "$")) {
                queryManager = mapper.query;
                queryManager.from(mapper.tableName);
            }
            else
                queryManager = mapper.query;
            return queryManager;
        },

        _getColumns: function (mapper) {
            var column = []
            for (var col in mapper) {
                if (col !== "tableName" && col !== "query" && col !== "dataSource")
                    !ej.isNullOrUndefined(mapper[col]) && column.push(mapper[col]);
            }
            return column;
        },

        _sortAppById: function (appointments) {

            var proxy = this;
            appointments.sort(function (a, b) {
                var x = a["AppTaskId"]; var y = b["AppTaskId"];
                return ((x < y) ? -1 : ((x > y) ? 1 : 0));
            });
            return appointments;
        },
        _stdTimezoneOffset: function () {
            return Math.max(new Date(new Date().getFullYear(), 0, 1).getTimezoneOffset(), new Date(new Date().getFullYear(), 6, 1).getTimezoneOffset());
        },
        _timeZoneCalculate: function (appointment) {
            var utc, timezone, oldtimezone, hour, mins, modelutc, oldhour, oldmins, oldmodelutc, localutc = (new Date().toString().indexOf("Daylight Time") != -1 && this.model.isDST == false) ? -(new Date().getTimezoneOffset()) - this._timeZoneOffset : -(new Date().getTimezoneOffset());
            utc = localutc;
            if (!ej.isNullOrUndefined(this.model.timeZone)) {
                if (this.model.timeZone.indexOf(':') !== -1) {
                    if (ej.isNullOrUndefined(this.tzone)) this.tzone = this.model.timeZone;
                    timezone = this.model.timeZone.split(" ")[this.model.timeZone.split(" ").length - 1].split(":");
                    oldtimezone = this.tzone.split(" ")[this.tzone.split(" ").length - 1].split(":");
                    if (($.isNumeric(parseInt(timezone[0])) && (parseInt(timezone[0])).toString.length <= 2) || timezone[0].indexOf("UTC") !== -1) {
                        hour = this.model.timeZone.indexOf("-") !== -1 ? -parseInt(timezone[0].replace(/\D/g, '')) : parseInt(timezone[0].replace(/\D/g, ''));
                        mins = parseInt(timezone[1]);
                        modelutc = -((hour * 60) + mins);
                        if (this._setmodelvalue == true) {
                            if (this.tzone == this.model.timeZone) utc = -(-localutc + modelutc);
                            else {
                                oldhour = this.tzone.indexOf("-") !== -1 ? -parseInt(oldtimezone[0].replace(/\D/g, '')) : parseInt(oldtimezone[0].replace(/\D/g, ''));
                                oldmins = parseInt(oldtimezone[1]);
                                oldmodelutc = -((oldhour * 60) + oldmins);
                                utc = -(-oldmodelutc + modelutc);
                            }
                        }
                        else utc = -modelutc;
                    }
                    else utc = -localutc;
                }
                else utc = -localutc;
            }
            return utc;
        },
        _timeZoneAppointments: function (appoint, app) {
            if (this.model.appointmentSettings.applyTimeOffset) {
                var tempStartTime, tempEndTime, startUtc, endUtc, difference, startTime, endTime;
                if (!appoint[this._appointmentSettings["allDay"]]) {
                    if (ej.isNullOrUndefined(this._dayLight)) {
                        startUtc = appoint[this._appointmentSettings["startTimeZone"]];
                        endUtc = appoint[this._appointmentSettings["endTimeZone"]];
                        if (ej.isNullOrUndefined(endUtc) && !ej.isNullOrUndefined(startUtc)) appoint[this._appointmentSettings["endTimeZone"]] = endUtc = startUtc;
                        if (!ej.isNullOrUndefined(endUtc) && ej.isNullOrUndefined(startUtc)) appoint[this._appointmentSettings["startTimeZone"]] = startUtc = endUtc;
                        if (!ej.isNullOrUndefined(startUtc) && !ej.isNullOrUndefined(endUtc)) {
                            startUtc = startUtc.indexOf("UTC") != -1 ? parseInt(startUtc.split(" ")[1].split(":")[0]) * 60 + parseInt(startUtc.split(" ")[1].split(":")[1]) : parseInt(startUtc.split(":")[0]) * 60 + parseInt(startUtc.split(":")[1]);
                            endUtc = endUtc.indexOf("UTC") != -1 ? parseInt(endUtc.split(" ")[1].split(":")[0]) * 60 + parseInt(endUtc.split(" ")[1].split(":")[1]) : parseInt(endUtc.split(":")[0]) * 60 + parseInt(endUtc.split(':')[1]);
                        }
                        difference = (ej.isNullOrUndefined(startUtc) && !$.isNumeric(startUtc)) ? this._timeZoneCalculate(appoint) : startUtc - this._timeZoneCalculate(appoint);
                    }
                    else difference = this._timeValue;
                    difference = (app == "") ? -difference : difference;
                    tempStartTime = new Date(appoint[this._appointmentSettings["startTime"]]);
                    tempEndTime = new Date(appoint[this._appointmentSettings["endTime"]]);
                    if (appoint[this._appointmentSettings["allDay"]] && (Math.round((new Date(appoint[this._appointmentSettings["endTime"]]) - new Date(appoint[this._appointmentSettings["startTime"]])) / 3600000) < 24))
                        return appoint;
                    else {
                        appoint[this._appointmentSettings["startTime"]] = new Date(tempStartTime.setMinutes(tempStartTime.getMinutes() + difference));
                        appoint[this._appointmentSettings["endTime"]] = new Date(tempEndTime.setMinutes(tempEndTime.getMinutes() + difference));
                        return appoint;
                    }
                }
                else {
                    appoint[this._appointmentSettings["startTime"]] = new Date(appoint[this._appointmentSettings["startTime"]]);
                    appoint[this._appointmentSettings["endTime"]] = new Date(appoint[this._appointmentSettings["endTime"]]);
                }
                return appoint;
            }
            return appoint;
        },
        _processtimeZone: function (record, app) {
            var tempstarttime = new Date(record[this.model.blockoutSettings["startTime"]]), tempendtime = new Date(record[this.model.blockoutSettings["endTime"]]);
            if (!record[this.model.blockoutSettings["isAllDay"]]) {
                var difference = this._timeZoneCalculate(record);
                record[this.model.blockoutSettings["startTime"]] = new Date(tempstarttime.setMinutes(tempstarttime.getMinutes() + difference));
                record[this.model.blockoutSettings["endTime"]] = new Date(tempendtime.setMinutes(tempendtime.getMinutes() + difference));
            } else {
                record[this.model.blockoutSettings["startTime"]] = new Date(tempstarttime.getFullYear(), tempstarttime.getMonth(), tempstarttime.getDate());
                record[this.model.blockoutSettings["endTime"]] = new Date(tempendtime.getFullYear(), tempendtime.getMonth(), tempendtime.getDate(), 23, 59, 59);
            }
            return record;
        },

        _dataProcessing: function (appointments) {
            this._processed = [];
            this._appMainId = null;
            if (appointments.length > 0) {
                var appId = this._sortAppById(appointments);
                //if (!ej.isNullOrUndefined(appointments[0].AppTaskId)) {
                //    appTaskIds = new ej.DataManager(appointments).executeLocal(new ej.Query().select("AppTaskId"));
                //    maxAppTaskId = Math.max.apply(null, appTaskIds);
                //}
                this._maxId = (ej.isNullOrUndefined(appointments[0]) || ej.isNullOrUndefined(appointments[0].AppTaskId)) ? 1 : appointments[0].AppTaskId;
                for (var app = 0; app < appointments.length; app++) {
                    appointments[app][this._appointmentSettings["startTime"]] = (new Date()).parseISO8601(appointments[app][this._appointmentSettings["startTime"]]);
                    appointments[app][this._appointmentSettings["endTime"]] = (new Date()).parseISO8601(appointments[app][this._appointmentSettings["endTime"]]);
                    if (this._bindAppointments == true && !this._angular && !this._setmodelvalue && this._applyTimeOffset && ej.isNullOrUndefined(this._enablePersist)) {
                        var appoint = this._timeZoneAppointments(appointments[app], "reverse");
                        this._appointmentProcessing(appoint);
                    }
                    else
                        this._appointmentProcessing(appointments[app]);
                }
                this._bindAppointments = false;
                this._setmodelvalue = false;
                this._processed = this._sortAppById(this._processed);
                return this._processed;
            }
        },
        _guidFormatGenerate: function () {
            function guid() {
                return Math.floor((1 + Math.random()) * 0x10000)
                  .toString(16)
                  .substring(1);
            }
            return guid() + guid() + '-' + guid() + '-' + guid() + '-' + guid() + '-' + guid() + guid() + guid();
        },
        _RecurrenceAppointment: function (appointment) {
            var day_start = new Date(appointment[this._appointmentSettings["startTime"]]);
            var timeZone = appointment[this._appointmentSettings["endTime"]].getTimezoneOffset() - appointment[this._appointmentSettings["startTime"]].getTimezoneOffset();
            var duration = ((new Date(appointment[this._appointmentSettings["endTime"]]) - new Date(appointment[this._appointmentSettings["startTime"]])) / 1000);
            var hours = Math.floor((duration - (timeZone / 1000)) / 3600);
            var minutes = Math.floor((duration % 3600) / 60);
            var recurEdit = this._appointmentAddWindow.find(".e-recurrenceeditor").data("ejRecurrenceEditor");
            recurEdit._rRule = {}, _count = 0, this._filt = true, _lastDay = false;
            appointment.AppTaskId = ej.isNullOrUndefined(appointment.AppTaskId) ? this._maxId : appointment.AppTaskId;
            ej.isNullOrUndefined(appointment[this._appointmentSettings["id"]]) && (appointment[this._appointmentSettings["id"]] = appointment.AppTaskId);
            recurEdit.model.startDate = new Date(this.currentDate());
            var collection = recurEdit.recurrenceDateGenerator(appointment[this._appointmentSettings["recurrenceRule"]], day_start, appointment[this._appointmentSettings["recurrenceExDate"]]);
            var i = 0;
            //var minDateRange = this.currentView() == "agenda" ? new Date(new Date(this.currentDate()).setHours(0, 0, 0)) : this._dateRender[0];
            //var maxDateRang = this.currentView() == "agenda" ? new Date(new Date(new Date(this.currentDate()).setDate(minDateRange.getDate() + (this.model.agendaViewSettings.daysInAgenda > 0 ? this.model.agendaViewSettings.daysInAgenda - 1 : 0))).setHours(23, 59, 59)) : new Date(new Date(this._dateRender[this._dateRender.length - 1]).setHours(23, 59, 59));
            //var newArray = collection.filter(function (name) {
            //    return name >= minDateRange && name <= maxDateRang;
            //});
            var newArray = collection;
            while (i < newArray.length) {
                var orgStrTime = new Date(newArray[i]);
                var newAppointment = {}, orgEndTime = appointment[this._appointmentSettings["endTime"]];
                ((recurEdit._rRule.freq == "MONTHLY" || recurEdit._rRule.freq == "YEARLY") && !ej.isNullOrUndefined(recurEdit._rRule.setPositions)) && (orgStrTime = recurEdit._dayOfWeekInMonth(orgStrTime, recurEdit._rRule.weekDays, recurEdit._rRule.setPositions));
                var strTime = new Date(orgStrTime.getFullYear(), orgStrTime.getMonth(), orgStrTime.getDate(), new Date(appointment[this._appointmentSettings["startTime"]]).getHours(), new Date(appointment[this._appointmentSettings["startTime"]]).getMinutes(), 0);
                var endTime = new Date(orgStrTime.getFullYear(), orgStrTime.getMonth(), orgStrTime.getDate(), new Date(appointment[this._appointmentSettings["startTime"]]).getHours() + hours, new Date(appointment[this._appointmentSettings["startTime"]]).getMinutes() + minutes, orgEndTime.getSeconds());
                this._idChecking();
                appointment[this._appointmentSettings["recurrenceId"]] = (appointment[this._appointmentSettings["recurrenceId"]] || appointment[this._appointmentSettings["id"]] || appointment.AppTaskId);
                appointment["ParentId"] = appointment[this._appointmentSettings["recurrenceId"]];
                if (!ej.isNullOrUndefined(recurEdit._rRule.exDate)) {
                    if (recurEdit._rRule.exDate.indexOf(ej.format(new Date(orgStrTime), this._pattern.d, this.model.locale)) == -1) {
                        newAppointment = this._addAppData(appointment, this._maxId, strTime, endTime, appointment.ParentId);
                    }
                }
                else
                    newAppointment = this._addAppData(appointment, this._maxId, strTime, endTime, appointment.ParentId);

                if ((new Date(new Date(appointment[this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(appointment[this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime()) && (((appointment[this._appointmentSettings["endTime"]] - appointment[this._appointmentSettings["startTime"]]) / 3600000) < 24) && (appointment[this._appointmentSettings["allDay"]] !== true)) {
                    newAppointment.Guid = this._guidFormatGenerate();
                    this._multipleDayApp(newAppointment, this._maxId, newAppointment[this._appointmentSettings["startTime"]], endTime);
                }
                else if (Math.round((newAppointment[this._appointmentSettings["endTime"]] - newAppointment[this._appointmentSettings["startTime"]]) / 3600000) > 24) {
                    newAppointment.Guid = this._guidFormatGenerate();
                    this._multipleSplit(newAppointment, this._maxId, newAppointment[this._appointmentSettings["startTime"]], newAppointment[this._appointmentSettings["endTime"]]);
                }
                else {
                    if (!$.isEmptyObject(newAppointment)) {
                        newAppointment.Guid = this._guidFormatGenerate();
                        this._processed.push(newAppointment);
                    }
                }
                i++;
                this._maxId++;
            }
            this._filt = false;
        },

        _recurrenceAppSort: function (apps) {
            var splitProcessed = [];
            for (var a = 0; a < apps.length; a++) {
                var obj = new ej.DataManager(apps).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, apps[a]["Guid"]));
                if (obj.length > 1) {
                    var tempObj = $.extend(true, [], obj);
                    tempObj[0][this._appointmentSettings["endTime"]] = tempObj[tempObj.length - 1][this._appointmentSettings["endTime"]];
                    splitProcessed.push(tempObj[0]);
                    a++;
                }
                else
                    splitProcessed.push(apps[a]);
            }
            return splitProcessed;
        },
        _appointmentProcessing: function (appointment) {
            var recurEdit = this._appointmentAddWindow.find(".e-recurrenceeditor").data("ejRecurrenceEditor");
            this._maxId = !ej.isNullOrUndefined(this._appMainId) ? parseInt(this._appMainId) + 1 : parseInt(this._maxId);
            var day_start = new Date(appointment[this._appointmentSettings["startTime"]]);
            var duration = ((new Date(appointment[this._appointmentSettings["endTime"]]) - new Date(appointment[this._appointmentSettings["startTime"]])) / 1000);
            var hours = Math.floor(duration / 3600);
            var minutes = Math.floor((duration % 3600) / 60);
            recurEdit._rRule = {}, _count = 0, _lastDay = false;
            var newAppointment = {}
            var newAppointment = $.extend(true, {}, appointment);
            (!ej.isNullOrUndefined(appointment[this._appointmentSettings["recurrence"]])) && (!ej.isNullOrUndefined(appointment[this._appointmentSettings["recurrenceRule"]])) && recurEdit.recurrenceRuleSplit(appointment[this._appointmentSettings["recurrenceRule"]], appointment[this._appointmentSettings["recurrenceExDate"]]);
            if (appointment[this._appointmentSettings["recurrence"]] == 1 && ej.isNullOrUndefined(recurEdit._rRule.recurEditId)) {
                this._RecurrenceAppointment(appointment);
            }
            else if ((new Date(new Date(appointment[this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(appointment[this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime()) && (((appointment[this._appointmentSettings["endTime"]] - appointment[this._appointmentSettings["startTime"]]) / 3600000) < 24) && (appointment[this._appointmentSettings["allDay"]] !== true) && ((appointment[this._appointmentSettings["recurrence"]] && !ej.isNullOrUndefined(recurEdit._rRule.recurEditId)) || !appointment[this._appointmentSettings["recurrence"]])) {
                this._appMainId = appointment.AppTaskId = appointment.AppTaskId == null ? this._maxId : appointment.AppTaskId;
                ej.isNullOrUndefined(appointment[this._appointmentSettings["id"]]) && (appointment[this._appointmentSettings["id"]] = appointment.AppTaskId);
                appointment.ParentId = (!ej.isNullOrUndefined(recurEdit._rRule.recurEditId) ? recurEdit._rRule.recurEditId : appointment[this._appointmentSettings["id"]]);
                if (appointment[this._appointmentSettings["recurrence"]]) {
                    appointment["ParentId"] = appointment[this._appointmentSettings["recurrenceId"]] = (appointment[this._appointmentSettings["recurrenceId"]] == null ? appointment["ParentId"] : appointment[this._appointmentSettings["recurrenceId"]]);
                }
                appointment.Guid = ej.isNullOrUndefined(appointment.Guid) ? this._guidFormatGenerate() : appointment.Guid;
                this._maxId = appointment.AppTaskId;
                this._multipleDayApp(appointment, this._maxId, appointment[this._appointmentSettings["startTime"]], appointment[this._appointmentSettings["endTime"]]);
            }
            else if ((((appointment[this._appointmentSettings["endTime"]] - appointment[this._appointmentSettings["startTime"]]) / 3600000) >= 24)) {
                this._filt = true;
                this._appMainId = appointment.AppTaskId = appointment.AppTaskId == null ? this._maxId : appointment.AppTaskId;
                ej.isNullOrUndefined(appointment[this._appointmentSettings["id"]]) && (appointment[this._appointmentSettings["id"]] = appointment.AppTaskId);
                appointment.ParentId = (!ej.isNullOrUndefined(recurEdit._rRule.recurEditId) ? recurEdit._rRule.recurEditId : appointment[this._appointmentSettings["id"]]);
                if (appointment[this._appointmentSettings["recurrence"]]) {
                    appointment["ParentId"] = appointment[this._appointmentSettings["recurrenceId"]] = (appointment[this._appointmentSettings["recurrenceId"]] == null ? appointment["ParentId"] : appointment[this._appointmentSettings["recurrenceId"]]);
                }
                appointment.Guid = ej.isNullOrUndefined(appointment.Guid) ? this._guidFormatGenerate() : appointment.Guid;
                this._maxId = appointment.AppTaskId;
                this._multipleSplit(appointment, this._maxId, appointment[this._appointmentSettings["startTime"]], appointment[this._appointmentSettings["endTime"]]);
                this._filt = false;
            }
            else if ((appointment[this._appointmentSettings["recurrence"]] == 0 || !ej.isNullOrUndefined(recurEdit._rRule.recurEditId))) {
                this._appMainId = appointment.AppTaskId = appointment.AppTaskId == null ? this._maxId : appointment.AppTaskId;
                ej.isNullOrUndefined(appointment[this._appointmentSettings["id"]]) && (appointment[this._appointmentSettings["id"]] = appointment.AppTaskId);
                appointment.ParentId = (!ej.isNullOrUndefined(recurEdit._rRule.recurEditId) ? recurEdit._rRule.recurEditId : appointment[this._appointmentSettings["id"]]);
                if (appointment[this._appointmentSettings["recurrence"]]) {
                    appointment["ParentId"] = appointment[this._appointmentSettings["recurrenceId"]] = (appointment[this._appointmentSettings["recurrenceId"]] == null ? appointment["ParentId"] : appointment[this._appointmentSettings["recurrenceId"]]);
                }
                appointment.Guid = ej.isNullOrUndefined(appointment.Guid) ? this._guidFormatGenerate() : appointment.Guid;
                this._processed.push(appointment);
            }
            else if (((appointment[this._appointmentSettings["recurrence"]] == undefined) || (appointment[this._appointmentSettings["allDay"]] == undefined)) && !appointment[this._appointmentSettings["recurrence"]]) {
                this._appMainId = appointment.AppTaskId = appointment.AppTaskId == null ? this._maxId : appointment.AppTaskId;
                ej.isNullOrUndefined(appointment[this._appointmentSettings["id"]]) && (appointment[this._appointmentSettings["id"]] = appointment.AppTaskId);
                appointment.ParentId = (appointment[this._appointmentSettings["id"]]);
                appointment.Guid = ej.isNullOrUndefined(appointment.Guid) ? this._guidFormatGenerate() : appointment.Guid;
                appointment.RecurrenceId = appointment.recurrenceExDate = null;
                this._processed.push(appointment);
            }
            this._appMainId = (ej.isNullOrUndefined(this._appMainId) || this._appMainId < this._maxId) ? this._maxId : this._appMainId;
        },
        _idChecking: function () {
            for (var i = 0; i < this._currentAppointmentData.length ; i++) {
                var query = new ej.Query().where("AppTaskId", ej.FilterOperators.equal, this._maxId);
                var _editApp = new ej.DataManager(this._currentAppointmentData).executeLocal(query);
                if (_editApp.length == 0) { this._maxId; break; }
                else
                    this._maxId++;
            }
            for (; ;) {
                var query = new ej.Query().where("AppTaskId", ej.FilterOperators.equal, this._maxId);
                var _editApp = new ej.DataManager(this._processed).executeLocal(query);
                if (_editApp.length == 0) { this._maxId; break; }
                else
                    this._maxId++;
            }
            return this._maxId
        },

        _multipleDayApp: function (app, maxId, startTime, endTime) {
            if (endTime.getHours() == 0 && endTime.getMinutes() == 0) endTime = new Date(endTime.getTime() - 1000);
            var dayStart = new Date(startTime);
            if ((this.model.orientation == "vertical") || (this.model.orientation == "horizontal") && (startTime < new Date(this._dateRender[0]) || endTime > new Date(new Date(this._dateRender[this._dateRender.length - 1]).setHours(29, 59, 59)))) {
                var nextDay = new Date(new Date(startTime).getFullYear(), new Date(startTime).getMonth(), new Date(startTime).getDate());
                var dayEnd = new Date(new Date(nextDay).setHours(new Date(nextDay).getHours() + 24));
                dayEnd = new Date(new Date(dayEnd).getTime() - 1000);
            }
            else
                var dayEnd = new Date(endTime);
            while (dayStart >= new Date(startTime) && dayStart <= dayEnd && dayEnd <= new Date(endTime)) {
                var appointment = this._addAppData(app, maxId, dayStart, dayEnd, app.ParentId);
                this._processed.push(appointment);
                dayStart = new Date(new Date(dayEnd).setMinutes(new Date(dayEnd).getMinutes() + 1));
                dayEnd = app[this._appointmentSettings["endTime"]];
                this._maxId = maxId = this._idChecking();
            }
        },

        _multipleSplit: function (app, maxId, startTime, endTime) {
            startTime = new Date(startTime);
            if (this.currentView() == "workweek" && !this._resWorkWeek && $.inArray(new Date(startTime.getFullYear(), startTime.getMonth(), startTime.getDate()).getTime(), this._dateRender) == -1) {
                for (var i = 1; i < this._dateRender.length; i++) {
                    if ($.inArray(new Date(startTime.getFullYear(), startTime.getMonth(), startTime.getDate() + i).getTime(), this._dateRender) >= 0) {
                        var index = $.inArray(new Date(startTime.getFullYear(), startTime.getMonth(), startTime.getDate() + i).getTime(), this._dateRender);
                        startTime = new Date(this._dateRender[index]);
                        break;
                    }
                }
                if (this.currentView() == "workweek" && !this._resWorkWeek && this.model.orientation == "horizontal" && $.inArray(new Date(startTime.getFullYear(), startTime.getMonth(), startTime.getDate()).getTime(), this._dateRender) == -1) {
                    startTime = new Date(new Date(startTime).getFullYear(), new Date(startTime).getMonth(), new Date(startTime).getDate() + (7 - this._dateRender.length));
                }
            }
            this.starttime = ((new Date(this._dateRender[0]) <= startTime) || this._filt == true) ? new Date(new Date(startTime).getFullYear(), new Date(startTime).getMonth(), new Date(startTime).getDate(), new Date(startTime).getHours(), new Date(startTime).getMinutes(), new Date(startTime).getSeconds()) : new Date(this._dateRender[0]);
            var end = new Date(new Date(endTime).getFullYear(), new Date(endTime).getMonth(), new Date(endTime).getDate(), 23, 59, 59);
            var next = 0;
            while (this.starttime <= end) {
                (this.starttime >= end && !(((endTime - startTime) / 3600000) > 24)) ? (this._filt = false) : "";
                var differDate = 0;
                var day_start = this.starttime;
                if (this.currentView() != "agenda") {
                    if ((this.model.orientation == "horizontal" && this.currentView() == "month"))
                        differDate = new Date(day_start.getFullYear(), day_start.getMonth() + 1, 0).getDate() - (day_start.getDate());
                    else if (this.currentView() == "customview" && (this._renderDays <= 7 || this.model.orientation == "horizontal")) {
                        this.starttime = (new Date(new Date(day_start).getFullYear(), new Date(day_start).getMonth(), new Date(day_start).getDate()));
                        if (this._dateRender.indexOf(this.starttime.getTime()) != -1)
                            differDate = (this._dateRender.length - 1) - this._dateRender.indexOf(this.starttime.getTime());
                        else
                            differDate = (this.starttime.getTime() < new Date(this._dateRender[0]).getTime()) ? ((new Date(new Date(this._dateRender[0]).setDate(new Date(this._dateRender[0]).getDate() - 1)).getTime() - new Date(this.starttime).setHours(0, 0, 0, 0)) / 3600000) / 24 : (this.starttime.getTime() > new Date(this._dateRender[this._dateRender.length - 1]).setHours(23, 59, 59)) ? this._dateRender.length - 1 : 0;
                    }
                    else if (this.currentView() !== "day") {
                        if (!this.model.showNextPrevMonth && this.currentView() == "month" && new Date(new Date(this.currentDate()).getFullYear(), new Date(this.currentDate()).getMonth(), 1).getTime() != new Date(this.starttime.getFullYear(), this.starttime.getMonth(), 1).getTime())
                            differDate = new Date(day_start.getFullYear(), day_start.getMonth() + 1, 0).getDate() - (day_start.getDate());
                        else {
                            if (this.currentView() == "workweek" && !this._resWorkWeek) {
                                var curDate = new Date(this.starttime);
                                var fromDate = new Date(curDate.setDate(curDate.getDate() - (curDate.getDay() - this._firstdayofweek)));
                                var daysCount = (this._firstdayofweek == 0) ? this.model.workWeek.length : 6;
                                var toDate = new Date(fromDate.getTime() + (60 * 60 * 24 * 1000 * daysCount));
                                differDate = Math.abs(Math.ceil((toDate.getTime() - this.starttime.getTime()) / (60 * 60 * 1000 * 24)));
                                differDate = (differDate > 6) ? 6 : differDate;
                            }
                            else {
                                var index = this._dateRender.indexOf(new Date(day_start).setHours(0, 0, 0));
                                index = index < 0 ? 0 : index;
                                differDate = (this.currentView() == "month" || this._isCustomMonthView()) ? 6 - (day_start.getDay() - this._firstdayofweek) : Math.abs((this._dateRender.length - 1) - (day_start.getDay() - this._firstdayofweek));
                            }
                        }
                        if (this._firstdayofweek > day_start.getDay())
                            differDate = (6 - day_start.getDay()) - (7 - this._firstdayofweek);
                    }
                }
                var nextDay = new Date(new Date(this.starttime).getFullYear(), new Date(this.starttime).getMonth(), new Date(this.starttime).getDate() + differDate);
                var day_end = (new Date(nextDay).getDate() == new Date(end).getDate() && this.currentView() !== "month") ? new Date(new Date(nextDay).setHours(endTime.getHours(), endTime.getMinutes(), endTime.getSeconds())) : new Date(new Date(nextDay).setHours(23, 59, 59));
                if ((day_end >= new Date(endTime)) && this.currentView !== "day")
                    day_end = app[this._appointmentSettings["endTime"]];
                if (!this.model.showNextPrevMonth && this.currentView() == "month" && new Date(this.starttime.getFullYear(), this.starttime.getMonth(), 1).getTime() != new Date(day_end.getFullYear(), day_end.getMonth(), 1).getTime())
                    day_end = new Date(this.starttime.getFullYear(), this.starttime.getMonth() + 1, 0, day_end.getHours(), day_end.getMinutes(), day_end.getSeconds());
                appointment = this._addAppData(app, maxId, day_start, day_end, app["ParentId"]);
                this._processed.push(appointment);
                this._maxId = maxId = this._idChecking();
                next = (this.currentView() == "workweek" && this._firstdayofweek == 0) ? (7 - this.model.workWeek.length) + 1 : 1;
                this.starttime = new Date(new Date(day_end).getFullYear(), new Date(day_end).getMonth(), new Date(day_end).getDate() + next);
                var lastDate = this.currentView() == "agenda" ? new Date(new Date(new Date(this.currentDate()).setDate(new Date(this.currentDate()).getDate() + (this.model.agendaViewSettings.daysInAgenda > 0 ? this.model.agendaViewSettings.daysInAgenda - 1 : 0))).setHours(23, 59, 59)) : new Date(this._dateRender[this._dateRender.length - 1]);
                if (lastDate < this.starttime) {
                    if (!this._filt)
                        break;
                }
            }
        },

        _deleteOcurrence: function (appId, date) {
            var recurEdit = this._appointmentAddWindow.find(".e-recurrenceeditor").data("ejRecurrenceEditor");
            var query = new ej.Query().where(this._appointmentSettings["id"], ej.FilterOperators.equal, appId);
            var _editApp = new ej.DataManager(this._currentAppointmentData).executeLocal(query);
            if ((this._currentAction == "delete" || this._currentAction == "editOccurrence") && _editApp[0][this._appointmentSettings["endTime"]].getDay() > _editApp[0][this._appointmentSettings["startTime"]].getDay()) {
                var objDate = new ej.DataManager(this._processed).executeLocal(new ej.Query().where(this._appointmentSettings["startTime"], ej.FilterOperators.equal, date));
                objDate = objDate.length == 0 ? this._objDate : objDate;
                objDate = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("AppTaskId", ej.FilterOperators.equal, objDate[0]["AppTaskId"]));
            }
            if (!ej.isNullOrUndefined(_editApp) && !ej.isNullOrUndefined(_editApp[0][this._appointmentSettings["recurrenceRule"]])) {
                var _rRule = _editApp[0][this._appointmentSettings["recurrenceRule"]];
                recurEdit.recurrenceRuleSplit(_rRule, _editApp[0][this._appointmentSettings["recurrenceExDate"]]);
                if (ej.isNullOrUndefined(recurEdit._rRule.exDate)) {
                    if ((this._currentAction == "delete" || this._currentAction == "editOccurrence") && _editApp[0][this._appointmentSettings["endTime"]].getDay() > _editApp[0][this._appointmentSettings["startTime"]].getDay()) {
                        if (objDate[0][this._appointmentSettings["startTime"]].getDay() == objDate[0][this._appointmentSettings["endTime"]].getDay()) {
                            date = objDate[0][this._appointmentSettings["startTime"]];
                            _editApp[0][this._appointmentSettings["recurrenceRule"]] = _rRule + ";EXDATE=" + ej.format(date, this._pattern.d, this.model.locale);
                            _editApp[0][this._appointmentSettings["recurrenceExDate"]] = !ej.isNullOrUndefined(_editApp[0][this._appointmentSettings["recurrenceExDate"]]) ? _editApp[0][this._appointmentSettings["recurrenceExDate"]] + "," + ej.format(date, this._pattern.d, this.model.locale).toString() : ej.format(date, this._pattern.d, this.model.locale).toString();
                        }
                        else {
                            _editApp[0][this._appointmentSettings["recurrenceRule"]] = _rRule + ";EXDATE=" + ej.format(date, this._pattern.d, this.model.locale);
                            _editApp[0][this._appointmentSettings["recurrenceExDate"]] = !ej.isNullOrUndefined(_editApp[0][this._appointmentSettings["recurrenceExDate"]]) ? _editApp[0][this._appointmentSettings["recurrenceExDate"]] + "," + ej.format(date, this._pattern.d, this.model.locale).toString() : ej.format(date, this._pattern.d, this.model.locale).toString();
                        }
                    }
                    else {
                        _editApp[0][this._appointmentSettings["recurrenceRule"]] = _rRule + ";EXDATE=" + ej.format(date, this._pattern.d, this.model.locale);
                        _editApp[0][this._appointmentSettings["recurrenceExDate"]] = !ej.isNullOrUndefined(_editApp[0][this._appointmentSettings["recurrenceExDate"]]) ? _editApp[0][this._appointmentSettings["recurrenceExDate"]] + "," + ej.format(date, this._pattern.d, this.model.locale).toString() : ej.format(date, this._pattern.d, this.model.locale).toString();
                    }
                }
                else {
                    var _rules = _rRule.split(';');
                    recurRule = "";
                    for (var i = 0; i < _rules.length; i++) {
                        if (recurRule != "")
                            recurRule += ";";
                        var keyValuePair = _rules[i].replace(/ /g, '').split('=');
                        if (keyValuePair[0] == "EXDATE") {
                            if ((this._currentAction == "delete" || this._currentAction == "editOccurrence") && _editApp[0][this._appointmentSettings["endTime"]].getDay() > _editApp[0][this._appointmentSettings["startTime"]].getDay()) {
                                if (objDate[0][this._appointmentSettings["startTime"]].getDay() == objDate[0][this._appointmentSettings["endTime"]].getDay()) {
                                    date = objDate[0][this._appointmentSettings["startTime"]];
                                    _rules[i] = _rules[i] + "," + ej.format(date, this._pattern.d, this.model.locale);
                                }
                                else
                                    _rules[i] = _rules[i] + "," + ej.format(date, this._pattern.d, this.model.locale);
                            }
                            else
                                _rules[i] = _rules[i] + "," + ej.format(date, this._pattern.d, this.model.locale);
                        }
                        recurRule += _rules[i];
                    }
                    _editApp[0][this._appointmentSettings["recurrenceRule"]] = recurRule;
                    _editApp[0][this._appointmentSettings["recurrenceExDate"]] = !ej.isNullOrUndefined(_editApp[0][this._appointmentSettings["recurrenceExDate"]]) ? _editApp[0][this._appointmentSettings["recurrenceExDate"]] + "," + ej.format(date, this._pattern.d, this.model.locale).toString() : ej.format(date, this._pattern.d, this.model.locale).toString();
                }
                return _editApp;
            }
        },

        _getWeekIndex: function (curDate) {
            var index = 0;
            var firstDate = new Date(curDate.getFullYear(), curDate.getMonth(), 1);
            var dayIndex = curDate.getDay();
            if (dayIndex != firstDate.getDay())
                do {
                    firstDate = new Date(firstDate.setDate(firstDate.getDate() + 1));
                } while (dayIndex != firstDate.getDay())
            while (firstDate.getDate() != curDate.getDate()) {
                firstDate = new Date(firstDate.setDate(firstDate.getDate() + 7));
                index++;
            }
            return index;
        },

        _addAppData: function (app, id, startTime, endTime, parentId) {
            var data = {};
            for (var item in this._appointmentSettings) {
                if (item != "dataSource" && item != "query" && item != "tableName" && item != "resourceFields")
                    data[this._appointmentSettings[item]] = app[this._appointmentSettings[item]];
                if (item == "resourceFields") {
                    for (var val in !ej.isNullOrUndefined(this._appointmentSettings.resourceFields) && this._appointmentSettings.resourceFields.split(','))
                        data[this._appointmentSettings.resourceFields.split(',')[val].trim()] = app[this._appointmentSettings.resourceFields.split(',')[val].trim()];
                }
            }
            (!ej.isNullOrUndefined(id)) && (data.AppTaskId = id);
            (!ej.isNullOrUndefined(startTime)) && (data[this._appointmentSettings["startTime"]] = startTime);
            (!ej.isNullOrUndefined(endTime)) && (data[this._appointmentSettings["endTime"]] = endTime);
            (!ej.isNullOrUndefined(parentId)) && (data["ParentId"] = parentId);
            var appdata = $.extend({}, app, data);
            return appdata;
        },
        _renderAppointments: function () {
            var dateCount = $.extend(true, [], this._dateRender);
            this._overflowFlag = false;
            this._tempapp = []; this._app = []; this._filterData = []; this._renderedApp = [], this._renderedAllDay = [];
            var level = 1; this.level = 0;
            !this.model.showOverflowButton && (this.initialCellHeight = this.model.cellHeight != "20px" ? parseInt(this.model.cellHeight) : parseInt(this.element.find(".e-draggableworkarea").height() / this.element.find(".e-draggableworkarea tr").length));
            this.cellwidth = this.element.find(".e-workcells").width();
            this.cellheight = this.element.find(".e-workcells").outerHeight();
            if (this.model.orientation == "vertical" && this.model.showAllDayRow) {
                if (!this._mediaQuery)
                    this.element.find(".e-alldaycells,.e-leftindent,.e-emptyalldaytd").css('height', "27px");
                else
                    this.element.find(".e-alldaycells,.e-leftindent,.e-emptyalldaytd").attr('style', "height:40px !important");
                this.element.find(".e-alldaycells").first().css(this.model.enableRTL ? 'border-right' : 'border-left', "none");
            }
            this._horiHeaderCollection = this._horiGroupCollection();
            this.leftPosition = 0;
            this._filtered = []; this._variable = [];
            if (!this.model.group || (this._tempResource.length != 0 && this._tempResource[0].resourceSettings.dataSource.length == 0)) this.res1 = ["0"];
            this.resIndex = 0;
            for (var res = 0; res < this.res1.length; res++) {
                var day = 0, diff, count = dateCount.length;
                if (new Date(dateCount[0]) < this.model.minDate)
                    day = Math.floor((new Date(this.model.minDate) - new Date(dateCount[0])) / (1000 * 60 * 60 * 24));
                if (new Date(dateCount[dateCount.length - 1]) > this.model.maxDate) {
                    diff = Math.floor((new Date(dateCount[dateCount.length - 1]) - new Date(this.model.maxDate)) / (1000 * 60 * 60 * 24));
                    count = dateCount.length - diff;
                }
                if (this._resWorkWeek) {
                    count = 0; day = 0; var temp = 0;
                    for (var a = 0; a < res + 1; a++) {
                        if (!ej.isNullOrUndefined(this.res1[a][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]])) {
                            count += this.res1[a][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]].length;
                            if (a == res) temp += this.res1[a][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]].length;
                        }
                        else {
                            count += this.model.workWeek.length;
                            if (a == res) temp += this.model.workWeek.length;
                        }

                        if (a == res) {
                            day = count - temp;
                            break;
                        }
                    }
                }
                for (day; day < count; day++) {
                    this._getDayAppointments(day, res);
                }
            }
            (this._overflowFlag || this._allDayDrag) && this._reRenderScroller();
            this._overflowFlag = this._allDayDrag = false;
            //this.model.orientation == "vertical" && this.model.showAllDayRow && this._renderAllDayAppointments();            
        },

        _renderUpDownIcon: function () {
            if (this.element.find(".e-upicon, .e-downicon").length == 0) {
                var upIcon = downIcon = upIconHtml = downIconHtml = "";
                var bottomVal = (this.element.find(".e-hscroll").length == 0) ? "0px" : this.element.find(".e-hscroll").outerHeight() + "px";
                for (a = 0; a < this.dateRender.length; a++) {
                    upIcon = upIcon + "<td class='upicon_" + a + "' style='width:100%;height:100%;'><span class='e-icon e-arrow-sans-up e-appup'></span></td>";
                    downIcon = downIcon + "<td class='downicon_" + a + "' style='width:100%;height:100%;'><span class='e-icon e-arrow-sans-down e-appdown'></span></td>";
                }
                upIconHtml = "<tr class='e-upicon' style='pointer-events:none;top:0px;'>" + upIcon + "</tr>";
                downIconHtml = "<tr class='e-downicon' style='pointer-events:none;bottom:" + bottomVal + ";'>" + downIcon + "</tr>";
                $(upIconHtml).insertBefore($(this.element.find(".e-draggableworkarea").parent()));
                $(downIconHtml).insertAfter($(this.element.find(".e-draggableworkarea").parent()));
                if (this.model.enableRTL) this.element.find(".e-appup, .e-appdown").addClass("e-rtl");
                this.element.find(".e-upicon, .e-downicon").width(this.element.find(".e-workcellstab").width());
                this.element.find(".e-appup, .e-appdown").css("pointer-events", "visible");
                this.element.find(".e-upicon, .e-downicon").children().width(Math.floor(this.element.find(".e-workcellstab").width() / this.element.find(".e-upicon").children().length));
                (this.model.enableRTL) ? this.element.find(".e-upicon, .e-downicon").children().css("float", "right") : this.element.find(".e-upicon, .e-downicon").children().css("float", "left");
                this.element.find(".e-upicon, .e-downicon").children().css("visibility", "hidden");
            }
        },

        _renderUpDownIconPosition: function () {
            this.element.find(".e-upicon, .e-downicon").children().css("visibility", "hidden");
            if (this.element.find(".e-vscroll").length > 0) {
                var scrollMax = !ej.isNullOrUndefined($("div#" + this._id + "_scroller").data("ejScroller")._scrollYdata) ? $("div#" + this._id + "_scroller").data("ejScroller")._scrollYdata.scrollable : this.element.height();
                var curValue = $("div#" + this._id + "_scroller").data("ejScroller").scrollTop();
                var upValue = (curValue > scrollMax) ? scrollMax : curValue;
                var downValue = upValue + this.element.find(".e-draggableworkarea").height();
                var upIndex = parseInt(upValue / this.element.find(".e-workcells").outerHeight()) + 1;
                var downIndex = parseInt(downValue / this.element.find(".e-workcells").outerHeight());
                var upTrgt = this.element.find(".e-upicon");
                var downTrgt = this.element.find(".e-downicon");
                var upTime = ((this.model.startHour * 60) + upIndex * (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) * (60 * 1000);
                var time = (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount) * 60 * 1000;
                var downTime = (((this.model.startHour * 60) + downIndex * (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) * (60 * 1000)) + time;
                var appointments1 = this._appointmentCount();
                var proxy = this;
                appointments = appointments1.filter(function (app) { return ((app[proxy._appointmentSettings["endTime"]] - app[proxy._appointmentSettings["startTime"]]) / (1000 * 3600)) < 24; });
                for (a = 0; a < this._dateRender.length; a++) {
                    var endDateTime = (this.model.endHour < 24) ? new Date(new Date(this._dateRender[a]).setHours(this.model.endHour, 0, 0)) : new Date(new Date(this._dateRender[a]).setHours(23, 59, 59));
                    var predicate = ej.Predicate(this._appointmentSettings["startTime"], ej.FilterOperators.greaterThanOrEqual, new Date(new Date(this._dateRender[a]).setHours(this.model.startHour, 0, 0)))["and"](this._appointmentSettings["startTime"], ej.FilterOperators.lessThanOrEqual, new Date(endDateTime));
                    var dayApps = new ej.DataManager(appointments).executeLocal(new ej.Query().where(predicate));
                    if (dayApps.length != 0) {
                        var upDate = new Date(new Date(this._dateRender[a]).setMilliseconds(upTime));
                        var upApps = new ej.DataManager(dayApps).executeLocal(new ej.Query().where(this._appointmentSettings["endTime"], ej.FilterOperators.lessThan, new Date(upDate)));
                        upApps = this._appointmentSort(upApps).reverse();
                        if (!ej.isNullOrUndefined(upTrgt) && upApps.length != 0) {
                            if (this._grouping.length == 0) { $(upTrgt.children()[a]).css("visibility", "visible"); }
                            else {
                                for (b = 0; b < this.res1.length; b++) {
                                    var tempRes = new ej.DataManager(upApps).executeLocal(new ej.Query().where(this._appointmentSettings["resourceFields"].split(",")[this._appointmentSettings["resourceFields"].split(",").length - 1], ej.FilterOperators.equal, this.res1[b].id));
                                    if (tempRes.length != 0) { $(upTrgt.children()[a + b * this._dateRender.length]).css("visibility", "visible"); }
                                }
                            }
                        }
                        var downApps = new ej.DataManager(dayApps).executeLocal(new ej.Query().where(this._appointmentSettings["startTime"], ej.FilterOperators.greaterThan, new Date(new Date(this._dateRender[a]).setMilliseconds(downTime))));
                        downApps = this._appointmentSort(downApps);
                        if (!ej.isNullOrUndefined(downTrgt) && downApps.length != 0) {
                            if (this._grouping.length == 0) { $(downTrgt.children()[a]).css("visibility", "visible"); }
                            else {
                                for (c = 0; c < this.res1.length; c++) {
                                    var tempRes1 = new ej.DataManager(downApps).executeLocal(new ej.Query().where(this._appointmentSettings["resourceFields"].split(",")[this._appointmentSettings["resourceFields"].split(",").length - 1], ej.FilterOperators.equal, this.res1[c].id));
                                    if (tempRes1.length != 0) { $(downTrgt.children()[a + c * this._dateRender.length]).css("visibility", "visible"); }
                                }
                            }
                        }
                    }
                }
            }
        },

        _renderAppPosition: function (e) {
            var choice = $(e.target).hasClass("e-appup") ? "e-appup" : "e-appdown";
            var index = $(e.target).parent().index();
            var appointments = this._appointmentCount();
            switch (choice) {
                case "e-appup":
                    var upValue = $("div#" + this._id + "_scroller").data("ejScroller").scrollTop();
                    var upIndex = parseInt(upValue / this.element.find(".e-workcells").outerHeight()) + 1;
                    var upTrgt = this.element.find(".e-draggableworkarea").find("tr")[upIndex];
                    var time = ((this.model.startHour * 60) + upIndex * (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) * (60 * 1000);
                    var trgtDate = new Date(new Date(this.dateRender[index]).setMilliseconds(time));
                    var predicate = ej.Predicate(this._appointmentSettings["startTime"], ej.FilterOperators.greaterThanOrEqual, new Date(this.dateRender[index]))["and"](this._appointmentSettings["startTime"], ej.FilterOperators.lessThanOrEqual, new Date(trgtDate));
                    var upApps = new ej.DataManager(appointments).executeLocal(new ej.Query().where(predicate));
                    if (upApps.length != 0) {
                        var upTime = Math.abs(upApps[0][this._appointmentSettings["startTime"]] - trgtDate);
                        var appRowIndex = parseInt((time - upTime) / ((this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount) * (60 * 1000)));
                        var scrollTo = upValue - ((upIndex - appRowIndex) * this.element.find(".e-workcells").height());
                        $('div#' + this._id + "_scroller").ejScroller({ scrollTop: scrollTo });
                        this.element.find('.e-scrolltimecells').css('top', -(this.element.find('.e-draggableworkarea').scrollTop()) + 'px');
                    }
                    break;
                case "e-appdown":
                    var downValue = $("div#" + this._id + "_scroller").data("ejScroller").scrollTop() + $(this.element.find(".e-vscroll")[0]).height();
                    var downIndex = parseInt(downValue / this.element.find(".e-workcells").height());
                    var downTrgt = this.element.find(".e-draggableworkarea").find("tr")[downIndex];
                    var time = ((this.model.startHour * 60) + downIndex * (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) * (60 * 1000);
                    var trgtDate = new Date(new Date(this.dateRender[index]).setMilliseconds(time));
                    var predicate = ej.Predicate(this._appointmentSettings["startTime"], ej.FilterOperators.greaterThanOrEqual, new Date(trgtDate))["and"](this._appointmentSettings["startTime"], ej.FilterOperators.lessThanOrEqual, new Date(new Date(this.dateRender[index]).setHours(23, 59, 59)));
                    var downApps = new ej.DataManager(appointments).executeLocal(new ej.Query().where(predicate));
                    if (downApps.length != 0) {
                        var downTime = trgtDate.getTime() - downApps[0][this._appointmentSettings["endTime"]].getTime();
                        var appRowIndex = parseInt((time - downTime) / ((this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount) * (60 * 1000)));
                        var scrollTo = $("div#" + this._id + "_scroller").data("ejScroller").scrollTop() + ((appRowIndex - downIndex) * this.element.find(".e-workcells").height()) + this.element.find("#Appointment_" + downApps[0]["AppTaskId"]).height();
                        $('div#' + this._id + "_scroller").ejScroller({ scrollTop: scrollTo });
                        this.element.find('.e-scrolltimecells').css('top', -(this.element.find('.e-draggableworkarea').scrollTop()) + 'px');
                    }
                    break;
            }
            this._renderUpDownIconPosition();
            !ej.isNullOrUndefined(this.element.data("ejTooltip")) && this.element.ejTooltip('hide');
        },

        _findAllDayApp: function (apps) {
            if (apps[this._appointmentSettings["allDay"]] != true) {
                var tempCurrent = new ej.DataManager(this._currentAppointmentData).executeLocal(new ej.Query().where("ParentId", ej.FilterOperators.equal, apps.ParentId));
                var Value = (!ej.isNullOrUndefined(tempCurrent[0])) ? (((tempCurrent[0][this._appointmentSettings["endTime"]] - tempCurrent[0][this._appointmentSettings["startTime"]]) / 3600000) >= 24) ? true : false : false;
                return Value;
            }
        },

        _getDayAppointments: function (day, res) {
            this._appList = [];
            var dateCount = this._dateRender, appointmentsList = this._processed;
            var endDateTime = (this.model.endHour < 24) ? new Date(new Date(dateCount[day]).setHours(this.model.endHour, 0, 0)) : new Date(new Date(dateCount[day]).setHours(23, 59, 59));
            var predicate2 = ej.Predicate(this._appointmentSettings["endTime"], ej.FilterOperators.greaterThanOrEqual, new Date(dateCount[day])).and(this._appointmentSettings["startTime"], ej.FilterOperators.lessThanOrEqual, new Date(endDateTime));
            var predicate1 = ej.Predicate(this._appointmentSettings["startTime"], ej.FilterOperators.greaterThanOrEqual, new Date(dateCount[day])).and(this._appointmentSettings["startTime"], ej.FilterOperators.lessThanOrEqual, new Date(endDateTime));
            var predicate = predicate2["or"](predicate1);
            predicate = !ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && ej.scheduleFeatures.resources ? predicate["and"](this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 1].trim(), ej.FilterOperators.equal, this.res1[res][this._tempResource[this._tempResource.length - 1].resourceSettings["id"]]) : predicate;
            appointmentsList = new ej.DataManager(appointmentsList).executeLocal(new ej.Query().where(predicate));
            var renderedAlready = ej.Predicate(this._appointmentSettings["startTime"], ej.FilterOperators.greaterThanOrEqual, new Date(new Date(dateCount[day - 1]).setHours(24, 0, 0))).or(this._appointmentSettings["startTime"], ej.FilterOperators.greaterThanOrEqual, new Date(dateCount[day]));
            appointmentsList = new ej.DataManager(appointmentsList).executeLocal(new ej.Query().where(renderedAlready));
            this._appList = this._alldaySort(appointmentsList);
            appointmentsList = this._appointmentSort(appointmentsList);
            this._app = $.merge(this._app, appointmentsList);
            if (this.model.orientation == "vertical") {
                for (var app = 0; app < appointmentsList.length; app++) {
                    var isBigApp = (((appointmentsList[app][this._appointmentSettings["endTime"]] - appointmentsList[app][this._appointmentSettings["startTime"]]) / 3600000) >= 24);
                    var allDayCheck = appointmentsList[app][this._appointmentSettings["allDay"]];
                    if (((new Date(new Date(dateCount[day]).setHours(0, 0, 0, 0)).getTime() == (new Date(new Date(appointmentsList[app][this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime())) && allDayCheck) || isBigApp) {
                        this._setAllDayPos(appointmentsList[app], day, res);
                        this._filtered.push(appointmentsList[app]);
                    }
                    else if ((new Date(new Date(appointmentsList[app][this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() <= new Date(new Date(dateCount[day]).setHours(0, 0, 0, 0)).getTime()) && (new Date(new Date(appointmentsList[app][this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime() >= new Date(new Date(dateCount[day]).setHours(0, 0, 0, 0)).getTime()) && (new Date(new Date(appointmentsList[app][this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() == new Date(new Date(appointmentsList[app][this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime()) && (((ej.isNullOrUndefined(allDayCheck) || allDayCheck == "") ? false : allDayCheck === true ? true : allDayCheck.toLowerCase() === 'false' ? false : allDayCheck) === false) && (new Date(new Date(appointmentsList[app][this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() <= new Date(new Date(appointmentsList[app][this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime())) {
                        var query = new ej.Query().where("Guid", ej.FilterOperators.equal, appointmentsList[app]["Guid"]);
                        var templist = new ej.DataManager(this._processed).executeLocal(query);
                        if (!allDayCheck) {
                            var Value = this._findAllDayApp(appointmentsList[app]);
                        }
                        if (Value || templist[0][this._appointmentSettings["allDay"]] && Math.round((new Date(templist[0][this._appointmentSettings["endTime"]]) - new Date(templist[0][this._appointmentSettings["startTime"]])) / 3600000) >= 24) {
                            this._setAllDayPos(appointmentsList[app], day, res);
                            this._filtered.push(appointmentsList[app]);
                        }
                        else {
                            this._renderApp(appointmentsList[app], day, res);
                            this._filtered.push(appointmentsList[app]);
                        }
                    }
                }
            }
            else if (this.model.orientation == "horizontal" && ej.scheduleFeatures.horizontal)
                this._getHorizontalDayAppointments(appointmentsList, dateCount, day, res);
        },

        _startUtc: function (e) {
            (!ej.isNullOrUndefined(this.startutcValue) && ej.isNullOrUndefined(this.tempValue)) ? this._utcValue(e, "startUtc") : e.model.value == "" ? "" : ((e.model.value == this._appointmentAddWindow.find("#" + this._id + "endTimeZone").ejDropDownList('model.value') && this._appointmentAddWindow.find("#" + this._id + "startTimeZone").attr('aria-expanded') == "true")) ? this._appointmentAddWindow.find("#" + this._id + "endTimeZone").ejDropDownList("option", { text: e.text, value: e.value }) : "";
        },
        _endUtc: function (e) {
            (this._appointmentAddWindow.find("#" + this._id + "endTimeZone").attr('aria-expanded') == "true") ? this._utcValue(e, "endUtc") : "";
        },
        _utcValue: function (temp, getValue) {
            ej.preferredCulture(this.model.locale);
            getValue == "endUtc" ? this._appointmentAddWindow.find('.endutc').val(temp.text) : "";
            var utcValue = new Date(ej.format(this._appointmentAddWindow.find("#" + this._id + "startdate").val(), this._datepattern(), this.model.locale) + " " + ej.format(this._appointmentAddWindow.find("#" + this._id + "starttime").ejTimePicker("model.value"), this.model.locale));
            var utcendValue = new Date(ej.format(this._appointmentAddWindow.find("#" + this._id + "enddate").val(), this._datepattern(), this.model.locale) + " " + ej.format(this._appointmentAddWindow.find("#" + this._id + "endtime").ejTimePicker("model.value"), this.model.locale));
            var startDateutc = new Date(utcValue);
            var EndDateutc = new Date(utcendValue);
            var utcEnd = getValue == "Appoint" ? this.endTimeAppoint : getValue == "endUtc" ? temp.value : this._appointmentAddWindow.find("#" + this._id + "endTimeZone").ejDropDownList("model.value");
            var utcStart = getValue == "Appoint" ? this.startTimeAppoint : getValue == "startUtc" ? temp.value : this._appointmentAddWindow.find("#" + this._id + "startTimeZone").ejDropDownList("model.value");
            utcStart = (utcStart == "") ? this._timezoneStringValue() : utcStart;
            utcEnd = (utcEnd == "") ? this._timezoneStringValue() : utcEnd;
            utcEnd = utcEnd.indexOf("UTC") != -1 ? parseInt(utcEnd.split(" ")[1].split(":")[0]) * 60 + parseInt(utcEnd.split(" ")[1].split(":")[1]) : parseInt(utcEnd.split(":")[0]) * 60 + parseInt(utcEnd.split(":")[1]);
            utcStart = utcStart.indexOf("UTC") != -1 ? parseInt(utcStart.split(" ")[1].split(":")[0]) * 60 + parseInt(utcStart.split(" ")[1].split(":")[1]) : parseInt(utcStart.split(":")[0]) * 60 + parseInt(utcStart.split(':')[1]);
            var startendUtc = utcEnd - utcStart;
            utcValue = new Date(utcValue.setMinutes(utcValue.getMinutes() + startendUtc));
            if (getValue == "Appoint") {
                var dateNew = new Date(temp[this._appointmentSettings["startTime"]]);
                var endNew = new Date(temp[this._appointmentSettings["endTime"]]);
                var timeZoneValue = ej.isNullOrUndefined(this.model.timeZone) ? -new Date().getTimezoneOffset() + this._timeZoneOffset : this.model.timeZone.indexOf('UTC') != -1 ? ((parseInt(this.model.timeZone.split(" ")[1].split(":")[0]) * 60) + (parseInt(this.model.timeZone.split(" ")[1].split(":")[1]))) : ((parseInt(this.model.timeZone.split(":")[0]) * 60) + (parseInt(this.model.timeZone.split(":")[1])));
                var timeZoneStart = (utcStart == timeZoneValue) ? 0 : timeZoneValue - utcStart;
                timeZoneStart = new Date(dateNew.setMinutes(dateNew.getMinutes() - timeZoneStart));
                var value2 = this._timeMode == "12" ? ej.format(new Date(timeZoneStart), this._pattern.t, this.model.locale) : ej.format(new Date(timeZoneStart), "HH:mm", this.model.locale);
                this._appointmentAddWindow.find("#" + this._id + "startdate").ejDatePicker({ value: ej.format(new Date(timeZoneStart), this._datepattern(), this.model.locale) });
                var timeZoneEnd = utcEnd - timeZoneValue;
                this._appointmentAddWindow.find('#' + this._id + "starttime").ejTimePicker({ value: value2 });
            }
            utcendValue = (getValue == "endUtc" || getValue == "Appoint") ? new Date(startDateutc.setMinutes(startDateutc.getMinutes() + startendUtc)) : utcValue;
            utcendValue = getValue == "Appoint" ? new Date(endNew.setMinutes(endNew.getMinutes() + timeZoneEnd)) : utcendValue;
            var different = this._timeMode == "12" ? ej.format(new Date(utcValue), this._pattern.t, this.model.locale) : ej.format(new Date(utcValue), "HH:mm", this.model.locale);
            if (getValue == "Appoint") {
                value = this._timeMode == "12" ? ej.format(new Date(endNew), this._pattern.t, this.model.locale) : ej.format(new Date(endNew), "HH:mm", this.model.locale);
            }
            else {
                var endTimeValue = new Date(utcendValue.setMinutes(utcendValue.getMinutes() + 30));
                var value = this._timeMode == "12" ? ej.format(new Date(endTimeValue), this._pattern.t, this.model.locale) : ej.format(new Date(endTimeValue), "HH:mm", this.model.locale);
            }
            this._appointmentAddWindow.find("#" + this._id + "enddate").ejDatePicker({ value: ej.format(new Date(utcendValue), this._datepattern(), this.model.locale) });
            this._appointmentAddWindow.find('#' + this._id + "endtime").ejTimePicker({ value: value });
            this.startutcValue = 1;
        },

        _rowHandlesOver: function (e) {
            this.model.enableAppointmentResize && $(e.target).addClass("e-rowcursor");
        },

        _colHandlesOver: function (e) {
            this.model.enableAppointmentResize && $(e.target).addClass("e-columncursor");
        },

        _getDateCount: function (res) {
            if (this._resWorkWeek) {
                var index, resDates, dateCount = [];
                if (!ej.isNullOrUndefined(this.res1[res][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]]))
                    resDates = this.res1[res][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]];
                else resDates = this.model.workWeek;
                resDates = this._resourceDaysReorder(resDates);
                for (var a = 0; a < resDates.length; a++) {
                    index = this._dayFullNames.indexOf(resDates[a].capitalizeFirstString());
                    if (index == -1) {
                        index = this._getDayNameIndex(resDates[a]);
                    }
                    dateCount.push(this._renderDates[index]);
                }
            }
            else
                var dateCount = this._dateRender;
            return dateCount;
        },

        _renderApp: function (record, day, res) {
            var cellHeight = this.cellheight;
            var startHour = parseInt(this.model.startHour) < parseInt(this.model.endHour) ? parseInt(this.model.startHour) : 0;
            var endHour = parseInt(this.model.startHour) < parseInt(this.model.endHour) ? parseInt(this.model.endHour) : 24;
            var dateCount = this._getDateCount(res);
            var rStartTime = new Date(record[this._appointmentSettings["startTime"]]);
            var rEndTime = new Date(record[this._appointmentSettings["endTime"]]);
            if ((new Date(rStartTime).getHours()) < startHour)
                rStartTime = new Date(new Date(rStartTime).setHours(startHour, rStartTime.getMinutes(), rStartTime.getSeconds()));
            if (this.model.orientation == "vertical") {
                var appWidth, appHeight;
                var Index = parseInt((startTime * 60) / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) * (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount);
                if (rStartTime <= rEndTime && (new Date(dateCount[0]).getTime() <= rStartTime.getTime() && new Date(new Date(dateCount[dateCount.length - 1]).setHours(23, 59, 59)) >= rStartTime.getTime())) {
                    var startTime = ((new Date(rStartTime).getHours()) < startHour) ? (new Date(rStartTime).getHours() + (-new Date(rStartTime).getHours()) + (-new Date(rStartTime).getMinutes())) : (new Date(rStartTime).getHours() + (-startHour));
                    var endTime = ((new Date(rEndTime).getHours()) > endHour) ? (new Date(rEndTime).getHours() + (-new Date(rEndTime).getHours() + (endHour - startHour)) + (-new Date(rEndTime).getMinutes())) : (new Date(rEndTime).getHours() + (-startHour));
                    endTime = (new Date(rEndTime).getHours() == endHour) ? (new Date(endTime).getMinutes() + (-new Date(rEndTime).getMinutes())) : endTime;
                    if (endHour <= rEndTime.getHours()) {
                        var endDate = new Date(rEndTime.setHours(endHour, 00, 00));
                        appHeight = (parseFloat(((new Date(endDate).getHours() * 60) + (new Date(endDate).getMinutes())) - ((new Date(rStartTime).getHours() * 60) + (new Date(rStartTime).getMinutes()))) * ((cellHeight) * this.model.timeScale.minorSlotCount) / this.model.timeScale.majorSlot) - 2;
                    }
                    else {
                        appHeight = ((parseFloat(new Date(new Date(rEndTime).getTime()) - new Date(new Date(rStartTime).getTime()))) / (60 * 1000) * (cellHeight * this.model.timeScale.minorSlotCount) / (this.model.timeScale.majorSlot)) - 2;
                        if (record[this._appointmentSettings["endTime"]].getTimezoneOffset() - record[this._appointmentSettings["startTime"]].getTimezoneOffset() != 0)
                            appHeight = appHeight - (cellHeight * this.model.timeScale.minorSlotCount);
                    }
                    var topPosition = ((parseFloat((((new Date(rStartTime).getHours() * 60)) + new Date(rStartTime).getMinutes() + (new Date(rStartTime).getSeconds() / 60))) - parseInt((startTime * 60) / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) * (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) - (this.model.startHour * 60)) * cellHeight * (this.model.timeScale.minorSlotCount / this.model.timeScale.majorSlot);
                    if (this.model.startHour <= new Date(rStartTime).getHours()) {
                        var resValue = !ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && ej.scheduleFeatures.resources ? this.res1[res][this._tempResource[this._tempResource.length - 1].resourceSettings["id"]] : null;
                        var overlapList = this._overlapApp(record["AppTaskId"], record[this._appointmentSettings["startTime"]], record[this._appointmentSettings["endTime"]], resValue);
                        var predicate = ej.Predicate(this._appointmentSettings["endTime"], ej.FilterOperators.greaterThan, record[this._appointmentSettings["startTime"]]).and(this._appointmentSettings["startTime"], ej.FilterOperators.lessThan, record[this._appointmentSettings["endTime"]]);
                        predicate = !ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && ej.scheduleFeatures.resources ? predicate["and"](this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 1].trim(), ej.FilterOperators.equal, this.res1[res][this._tempResource[this._tempResource.length - 1].resourceSettings["id"]]) : predicate;
                        var appointmentsList = new ej.DataManager(overlapList).executeLocal(new ej.Query().where(predicate));
                        var proxy = this;
                        var index = -1;
                        if (appointmentsList.length > 0) {
                            var appLevelsInDay = $.map(appointmentsList, function (value, Index) { return [value.Index]; });
                            index = this._smallestMissingNumber(appLevelsInDay);
                        }
                        index = index == -1 ? 0 : index;
                        record.Index = index;
                        overlapList.push(record);
                        if (overlapList.length != 1)
                            ej.isNullOrUndefined(this._variable[index]) ? this._variable.push([record]) : this._variable[index].push(record);
                        else {
                            this._variable = [];
                            this._variable.push([record]);
                        }

                        appWidth = ((((90 - (this._variable.length)) / (this._variable.length)))) + "%";
                        this.leftPosition = '0%';
                        for (var i = 0; i < this._variable.length; i++) {
                            for (var j = 0; j < this._variable[i].length; j++) {
                                var apps = this.element.find('[guid=' + this._variable[i][j]["Guid"] + ']');
                                if (!ej.isNullOrUndefined(apps[0]) && this._variable[i][j]["Guid"] != record["Guid"]) {
                                    if (parseFloat(appWidth) <= parseFloat(apps[0].style.width)) {
                                        //apps[0].style.left = ((parseFloat(appWidth)) * parseInt(parseFloat(apps[0].style.left) / parseFloat(apps[0].style.width))) + '%';
                                        this.model.enableRTL ? apps[0].style.right = ((parseFloat(appWidth) + 1) * i) + '%' : apps[0].style.left = ((parseFloat(appWidth) + 1) * i) + '%';
                                        apps[0].style.width = ((parseFloat(appWidth))) + '%';
                                    }
                                    else {
                                        var apps1 = this.element.find('[guid=' + this._variable[ej.isNullOrUndefined(this._variable[i - 1]) ? i : i - 1][0]["Guid"] + ']');
                                        apps[0].style.width = apps1[0].style.width;
                                        //apps[0].style.left = ((parseFloat(apps[0].style.width)) * parseInt(parseFloat(apps[0].style.left) / parseFloat(apps[0].style.width))) + '%';
                                        this.model.enableRTL ? apps[0].style.right = ((parseFloat(apps[0].style.width) + 1) * i) + '%' : apps[0].style.left = ((parseFloat(apps[0].style.width) + 1) * i) + '%';
                                    }
                                }
                                else {
                                    appWidth = ej.isNullOrUndefined(this._variable[i - 1]) ? ((((90 - (this._variable.length)) / (this._variable.length)))) : !ej.isNullOrUndefined(this.element.find('[guid=' + this._variable[i - 1][0]["Guid"] + ']')[0]) && parseFloat(this.element.find('[guid=' + this._variable[i - 1][0]["Guid"] + ']')[0].style.width);
                                    this.leftPosition = ((appWidth + 1) * index) + '%';
                                }
                            }
                        }
                        appWidth = parseFloat(appWidth) + "%";
                        this._renderedApp.push(record);
                        var colorAppointment = this._appointmentColor(record);
                        var userAppTemplId = (this.model.appointmentTemplateId) ? true : false;
                        var userTempHtml = this._getUserAppointmentTemplate(record);
                        var startTimeDisp = this._timeMode == "12" ? ej.format(record[this._appointmentSettings["startTime"]], this._pattern.t, this.model.locale) : ej.format(record[this._appointmentSettings["startTime"]], "HH:mm", this.model.locale);
                        var endTimeDisp = this._timeMode == "12" ? ej.format(record[this._appointmentSettings["endTime"]], this._pattern.t, this.model.locale) : ej.format(record[this._appointmentSettings["endTime"]], "HH:mm", this.model.locale);
                        if (!ej.isNullOrUndefined(record[this._appointmentSettings["recurrenceRule"]]))
                            var recEditIcon = record[this._appointmentSettings["recurrenceRule"]].toString().indexOf("RECUREDITID") != -1;
                        var indicationIcon = this._indicationApp(record);
                        var timeCellhtml = $(this.appTemplate.render({ id: record["AppTaskId"], appResize: this.model.enableAppointmentResize, currentview: this.currentView(), appHeight: appHeight, rtl: this.model.enableRTL, subject: record[this._appointmentSettings["subject"]], startTime: startTimeDisp, endTime: endTimeDisp, left: this.leftPosition, top: topPosition, appWidth: appWidth, userAppTemplId: userAppTemplId, userTemplate: userTempHtml, appClass: "e-appointment", appointData: colorAppointment.appointColor.appointData, appointCustomcss: colorAppointment.appointColor.appointCustomcss, appointtextcolor: colorAppointment.appointColor.appointtextcolor, value: colorAppointment.value, multiDiv: colorAppointment.multiDiv, orientation: this.model.orientation, priority: this.model.prioritySettings.enable ? record[this._appointmentSettings["priority"]] : '', enablePriority: this.model.prioritySettings["template"], priorityTemplate: this.model.prioritySettings["template"] ? this._priorityTemplate(record) : record[this._appointmentSettings['priority']], uid: record.Guid, recurrence: record[this._appointmentSettings["recurrence"]], recurrenceEdit: recEditIcon, topInd: indicationIcon.leftIndication, bottomInd: indicationIcon.rightIndication, resId: (!ej.isNullOrUndefined(this._appointmentSettings["resourceFields"])) ? record[this._appointmentSettings["resourceFields"].split(",")[this._appointmentSettings["resourceFields"].split(",").length - 1]] : "" }));
                        (!ej.isNullOrUndefined(this.model.queryCellInfo)) && this._renderQueryCellInfo("appointment", record, timeCellhtml);
                        var index = this._resWorkWeek ? ((startTime * this.model.timeScale.minorSlotCount) * this.element.find(".e-headercells").length) + day : parseInt((startTime * 60) / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) * dateCount.length * this.res1.length + day + (dateCount.length * res);
                        var celltd = $(this.element.find("td.e-workcells")[index]);
                        celltd.find("div.e-appointwrapper").length > 0 ? celltd.find("div.e-appointwrapper").append(timeCellhtml) : celltd.prepend($("<div class='e-appointwrapper'></div>").append(timeCellhtml));
                    }
                }
            }
            else if (this.model.orientation == "horizontal" && ej.scheduleFeatures.horizontal)
                this._renderHorizontalApp(rStartTime, rEndTime, record, day, cellHeight, this.model.timeScale.minorSlotCount, startHour, endHour);
        },

        _priorityTemplate: function (record) {
            return this.model.prioritySettings.template.replace("{", "").replace("$", "").replace("}", "").replace(this.model.prioritySettings.template.indexOf("value") != -1 ? this.model.prioritySettings.value : this.model.prioritySettings.text, record[this._appointmentSettings["priority"]]);
        },

        _getUserAppointmentTemplate: function (record) {
            var userTemp = $.templates($(this.model.appointmentTemplateId).html());
            var cloneObj = $.extend(cloneObj, record);
            cloneObj.View = this.currentView();
            var userTempHtml = userTemp.render(cloneObj);
            return userTempHtml;
        },

        _getUserTimeCellsTemplate: function () {
            var userTemp = $.templates($(this.model.timeScale.minorSlotTemplateId).html());
            var timelist, startendTimes = [];
            for (var i = this.model.startHour; i < this.model.endHour;) {
                var j = 0;
                while (j < 60) {
                    j = j * 60 * 1000;
                    timelist = userTemp.render(object = { date: new Date(new Date(this._dateRender[0]).setHours(i, 0, 0, j)) });
                    startendTimes.push({ time: timelist.trim(), id: i + "_" + j });
                    j = (j / (60 * 1000)) + this.model.timeScale.majorSlot;
                }
                i = (this.model.timeScale.majorSlot > 60) ? i + (this.model.timeScale.majorSlot / 60) : i + 1;
            }
            return startendTimes;
        },

        _getUserAllDayCellsTemplate: function () {
            var dateRender = [], minutes = 0, date, userTemp, userHtml;
            userTemp = $.templates($(this.model.allDayCellsTemplateId).html());
            for (a = 0; a < this.res1.length; a++) {
                for (b = 0; b < this._dateRender.length; b++) {
                    date = new Date(new Date(this._dateRender[b]).setHours(this.model.startHour, minutes, 0));
                    userHtml = userTemp.render(object = { date: date, view: this.currentView(), resource: this.res1[a], timescale: this.model.timeScale.enable });
                    dateRender.push(userHtml.trim());
                }
            }
            return dateRender;
        },

        _getUserDateheaderTemplate: function () {
            var colCount = [], userTemp, userDate, curday, headerCellClass, temp;
            userTemp = $.templates($(this.model.dateHeaderTemplateId).html());
            for (i = 0; i < this._dateRender.length; i++) {
                userDate = userTemp.render(object = { date: new Date(this._dateRender[i]) });
                curday = (this.currentView() === "month" || this.currentView() === "day" || (this._isCustomMonthView())) ? (this._tempResource.length == 0 && ej.isNullOrUndefined(this.model.group)) ? this._dayFullNames[new Date(this._dateRender[i]).getDay()] : this._dayShortNames[new Date(this._dateRender[i]).getDay()] : this._dayShortNames[new Date(this._dateRender[i]).getDay()];
                headerCellClass = (new Date(new Date(this._dateRender[i]).setHours(0, 0, 0, 0)).getTime() === new Date(new Date().setHours(0, 0, 0, 0)).getTime()) ? "e-headerToday" : "";
                temp = (this.currentView() === "month" || (this._isCustomMonthView())) ? { currentDay: curday, currentDateClass: "", cellToday: headerCellClass } : { currentDay: userDate, currentDateClass: new Date(this._dateRender[i]).getDate() === new Date(this.currentDate()).getDate() ? "e-activeview" : "", cellToday: headerCellClass };
                colCount.push(temp);
                this._value.push(i);
            }
            return colCount;
        },

        _getUserWorkCellsTemplate: function () {
            var date, dateRender = [], dateRender1 = [], userTemp, userHtml, minutes = 0, tdCount = this.model.timeScale.minorSlotCount;
            userTemp = $.templates($(this.model.workCellsTemplateId).html());
            this._isCustomMonthView();
            if (this.model.orientation == "vertical") {
                if (this.currentView() != "month" && !this._isCustomMonthView()) {
                    for (a = 0; a < ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot)) ; a++) {
                        dateRender = [];
                        for (b = 0; b < this.res1.length; b++) {
                            for (c = 0; c < this._dateRender.length; c++) {
                                date = new Date(new Date(this._dateRender[c]).setHours(this.model.startHour, minutes, 0));
                                userHtml = userTemp.render(object = { date: date, view: this.currentView(), resource: this.res1[b], timescale: this.model.timeScale.enable });
                                dateRender.push(userHtml.trim());
                            }
                        }
                        minutes = minutes + (this.model.timeScale.majorSlot / tdCount);
                        dateRender1.push(dateRender);
                    }
                }
                else {
                    var i = 0;
                    for (a = 0; a < this._dateRender.length / 7; a++) {
                        dateRender = [];
                        for (b = 0; b < this.res1.length; b++) {
                            i = a * 7;
                            for (c = 0; c < 7; c++) {
                                date = new Date(new Date(this._dateRender[i]).setHours(this.model.startHour, minutes, 0));
                                userHtml = userTemp.render(object = { date: date, view: this.currentView(), resource: this.res1[b], timescale: this.model.timeScale.enable });
                                dateRender.push(userHtml.trim());
                                i++;
                            }
                        }
                        dateRender1.push(dateRender);
                    }
                }
            }
            else {
                var userHtml1, timeRender = [], tempRender = [], time = [], rCollection = this._tempResource.length == 0 ? this.res1 : this._resourceSort();
                if (this.model.timeScale.enable && this.currentView() != "month" && !this._isCustomMonthView()) {
                    for (a = 0; a < rCollection.length; a++) {
                        dateRender = []; tempRender = []; time = [];
                        for (b = 0; b < this._dateRender.length; b++) {
                            minutes = 0;
                            for (c = 0; c < ((this.model.endHour - this.model.startHour) * (60 / this.model.timeScale.majorSlot)) ; c++) {
                                for (d = 0; d < tdCount; d++) {
                                    date = new Date(new Date(this._dateRender[b]).setHours(this.model.startHour, minutes, 0));
                                    if (d == 0) {
                                        userHtml = userTemp.render(object = { date: date, view: this.currentView(), resource: rCollection[a], timescale: this.model.timeScale.enable });
                                        dateRender.push(userHtml.trim());
                                    }
                                    else {
                                        userHtml1 = userTemp.render(object = { date: date, view: this.currentView(), resource: rCollection[a], timescale: this.model.timeScale.enable });
                                        timeRender.push(userHtml1.trim());
                                        if (timeRender.length == tdCount - 1) {
                                            time.push(timeRender);
                                            timeRender = [];
                                        }
                                    }
                                    minutes = minutes + (this.model.timeScale.majorSlot / tdCount);
                                }
                            }
                        }
                        var temp = $.extend(true, [], dateRender);
                        var temp1 = $.extend(true, [], time);
                        tempRender.push(temp, temp1);
                        dateRender1.push(tempRender);
                    }
                }
                else {
                    var monthDates = (!this.model.timeScale.enable && this.currentView() != "month" || (this.currentView() == "customview" && this._oneWeek)) ? this._dateRender : this._horizontalMonthDates();
                    for (a = 0; a < rCollection.length; a++) {
                        dateRender = [];
                        for (b = 0; b < monthDates.length; b++) {
                            date = new Date(new Date(monthDates[b]).setHours(this.model.startHour, minutes, 0));
                            userHtml = userTemp.render(object = { date: date, view: this.currentView(), resource: rCollection[a], timescale: this.model.timeScale.enable });
                            dateRender.push(userHtml.trim());
                        }
                        dateRender1.push(dateRender);
                    }
                }
            }
            return dateRender1;
        },

        _overlapApp: function (id, appStartTime, appEndTime, resValue) {
            this.overlapList = []; app = []; this.appointmentsList = [];
            this._appList = this._appointmentSort(this._renderedApp);
            if (this.model.orientation == "vertical") {

                var predicate = ej.Predicate(this._appointmentSettings["endTime"], ej.FilterOperators.greaterThan, new Date(appStartTime)).and(this._appointmentSettings["startTime"], ej.FilterOperators.lessThan, new Date(appEndTime));
                predicate = !ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && ej.scheduleFeatures.resources ? predicate["and"](this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 1].trim(), ej.FilterOperators.equal, resValue) : predicate;
                this.appointmentsList = new ej.DataManager(this._appList).executeLocal(new ej.Query().where(predicate));

                for (var i = 0; i < this.appointmentsList.length; i++) {
                    var predicate1 = ej.Predicate(this._appointmentSettings["endTime"], ej.FilterOperators.greaterThanOrEqual, new Date(this.appointmentsList[i][this._appointmentSettings["startTime"]])).and(this._appointmentSettings["startTime"], ej.FilterOperators.lessThanOrEqual, new Date(this.appointmentsList[i][this._appointmentSettings["endTime"]]));
                    predicate1 = !ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && ej.scheduleFeatures.resources ? predicate["and"](this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 1].trim(), ej.FilterOperators.equal, resValue) : predicate1;
                    var appList = new ej.DataManager(this._appList).executeLocal(new ej.Query().where(predicate1));
                    var collection = $(appList).not(this.appointmentsList);
                    if (collection.length != 0) app = $.merge(app, collection);
                }
                this.overlapList = $.merge(this.appointmentsList, app);
            }
            else if (this.model.orientation == "horizontal" && ej.scheduleFeatures.horizontal) {
                for (var i = 0; i < this._appList.length; i++) {
                    if (ej.scheduleFeatures.resources && (this._tempResource.length != 0) && !ej.isNullOrUndefined(this.model.group)) {
                        if ((new Date(this._appList[i][this._appointmentSettings["endTime"]]) > new Date(appStartTime)) && (new Date(this._appList[i][this._appointmentSettings["startTime"]]) <= new Date(appEndTime))
                            && (this._appList[i][this._tempResource[this._tempResource.length - 1]["field"]] == resValue)
                            && (new Date(new Date(this._appList[i][this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() === new Date(new Date(appStartTime).setHours(0, 0, 0, 0)).getTime())) {
                            this.overlapList.push(this._appList[i]);
                        }
                    }
                    else {
                        if ((new Date(this._appList[i][this._appointmentSettings["endTime"]]) > new Date(appStartTime)) && (new Date(this._appList[i][this._appointmentSettings["startTime"]]) <= new Date(appEndTime))
                            && (new Date(new Date(this._appList[i][this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() === new Date(new Date(appStartTime).setHours(0, 0, 0, 0)).getTime())) {
                            this.overlapList.push(this._appList[i]);
                        }
                    }
                }
            }
            return this.overlapList;
        },

        _getOverlapCount: function (record, day, dateRender, resValue) {
            if (this._renderedAllDay.length == 0) {
                record.Index = 0;
                var index = 0;
            }
            else {
                var appLevelsInDay = [];
                var appointments = this._renderedAllDay;
                var predicate2 = ej.Predicate(this._appointmentSettings["endTime"], ej.FilterOperators.greaterThanOrEqual, new Date(dateRender[day])).and(this._appointmentSettings["startTime"], ej.FilterOperators.lessThanOrEqual, new Date(new Date(dateRender[day]).setHours(23, 59, 59)));
                var predicate1 = ej.Predicate(this._appointmentSettings["startTime"], ej.FilterOperators.greaterThanOrEqual, new Date(dateRender[day])).and(this._appointmentSettings["startTime"], ej.FilterOperators.lessThanOrEqual, new Date(new Date(dateRender[day]).setHours(23, 59, 59)));
                var predicate = predicate2["or"](predicate1);
                appointments = new ej.DataManager(appointments).executeLocal(new ej.Query().where(predicate));
                appointments = this._appointmentSort(appointments);
                var filterData = [];
                if (this.model.orientation == "vertical") {
                    for (var i = 0; i < appointments.length; i++) {
                        var isBigApp = (((appointments[i][this._appointmentSettings["endTime"]] - appointments[i][this._appointmentSettings["startTime"]]) / 3600000) >= 24);
                        var allDayCheck = appointments[i][this._appointmentSettings["allDay"]];
                        if (((((new Date(new Date(dateRender[day]).setHours(0, 0, 0, 0)).getTime() == (new Date(new Date(appointments[i][this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime())) &&
                                  allDayCheck) || isBigApp) && (ej.scheduleFeatures.resources && !ej.isNullOrUndefined(this.model.group) ? (appointments[i][this._tempResource[this._tempResource.length - 1]["field"]] == resValue) : true))) {
                            filterData.push(appointments[i]);
                        }
                    }
                }
                else if (this.model.orientation == "horizontal" && ej.scheduleFeatures.horizontal)
                    filterData = this._getHorizontalOverlapCount(appointments, dateRender, day, record, resValue);
                filterData = this._sortAppById(filterData);
                filterData = this._appointmentSort(filterData);
                var index = -1;
                index = this._findResourceIndex(filterData, "AppTaskId", record["AppTaskId"]);
                var appLevelsInDay = $.map(filterData, function (value, Index) {
                    return [value.Index];
                });
                index = this._smallestMissingNumber(appLevelsInDay);
                record.Index = index;
                index = index == -1 ? 0 : index;
            }
            return index;
        },
        _smallestMissingNumber: function (array) {
            if (array.length == 0)
                return 0;
            var large = Math.max.apply(Math, array);
            for (var i = 0; i < large; i++) {
                if (array.indexOf(i) == -1) {
                    return i;
                }
            }
            return large + 1;
        },
        _setAllDayPos: function (record, day, res) {
            this.overlapList = [];
            var level = (ej.scheduleFeatures.resources && !ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) ? this._getOverlapCount(record, day, this._dateRender, record[this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 1].trim()]) : this._getOverlapCount(record, day, this._dateRender, null);
            var start = record[this._appointmentSettings["startTime"]];
            var end = record[this._appointmentSettings["endTime"]];
            if (new Date(start) <= new Date(end)) {
                var dateRender = this._dateRender, appWidth, left = 0, top = 16, appHeight = 19;
                if (this.level <= level) {
                    var cellHeight = (level + 1) * (appHeight) + 27;
                    if (!this._mediaQuery)
                        this.element.find(".e-alldaycells,.e-leftindent,.e-emptyalldaytd").css('height', cellHeight + "px");
                    else {
                        this.element.find(".e-alldaycells,.e-leftindent,.e-emptyalldaytd").attr('style', "height:" + ((level == 0) ? 40 : cellHeight) + "px !important");
                        this.element.find(".e-alldaycells").first().css(this.model.enableRTL ? 'border-right' : 'border-left', "none");
                    }
                }
                this._overflowFlag = true;
                if (this.model.showAppointmentNavigator && this.model.orientation == "vertical" && this.element.find(".e-vscroll").length > 0 && this.currentView() != "month" && (!this._isCustomMonthView()) && (!this._mediaQuery)) {
                    this._renderUpDownIcon();
                    this.element.find(".e-upicon, .e-downicon").width(this.element.find(".e-workcellstab").width());
                    this.element.find(".e-appup, .e-appdown").css("pointer-events", "visible");
                    this.element.find(".e-upicon, .e-downicon").children().width(Math.floor(this.element.find(".e-workcellstab").width() / this.element.find(".e-upicon").children().length));
                    this._renderUpDownIconPosition();
                }
                if (this._resWorkWeek) {
                    var index, resDates, dateCount = [];
                    if (!ej.isNullOrUndefined(this.res1[res][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]]))
                        resDates = this.res1[res][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]];
                    else
                        resDates = this.model.workWeek;
                    for (var a = 0; a < resDates.length; a++) {
                        index = this._dayFullNames.indexOf(resDates[a].capitalizeFirstString());
                        if (index == -1) {
                            index = this._getDayNameIndex(resDates[a]);
                        }
                        dateCount.push(this._renderDates[index]);
                    }
                    dateRender = dateCount;
                }
                var r_start = new Date(dateRender[0]);
                var r_end = new Date(dateRender[dateRender.length - 1]);
                r_end.setHours(23, 59, 59);
                end = new Date(end) > new Date(r_end) ? r_end : end;
                if (this.currentView() == "workweek" && $.inArray(new Date(end.getFullYear(), end.getMonth(), end.getDate()).getTime(), this._dateRender) == -1) {
                    for (var i = 1; i < this._dateRender.length; i++) {
                        if ($.inArray(new Date(end.getFullYear(), end.getMonth(), end.getDate() - i).getTime(), this._dateRender) > 0) {
                            var index = $.inArray(new Date(end.getFullYear(), end.getMonth(), end.getDate() - i).getTime(), this._dateRender);
                            end = new Date(new Date(this._dateRender[index]).setHours(record[this._appointmentSettings["endTime"]].getHours(), record[this._appointmentSettings["endTime"]].getMinutes(), record[this._appointmentSettings["endTime"]].getSeconds()));
                            break;
                        }
                    }
                }
                this._renderedAllDay.push(record);
                var diffInDays, noOfDays = Math.ceil((new Date(start) - new Date(r_start)) / (1000 * 3600) / 24);
                if (this._resWorkWeek || this.currentView() == "workweek")
                    diffInDays = $.inArray(new Date(end.getFullYear(), end.getMonth(), end.getDate()).getTime(), dateRender) - ($.inArray(new Date(start.getFullYear(), start.getMonth(), start.getDate()).getTime(), dateRender)) + 1;
                else if (this.currentView() == "week" || this.currentView() == "day" || this.currentView() == "customview" && parseFloat((end - start) / 3600000) <= 24)
                    diffInDays = (end.getHours() == 0 && end.getMinutes() == 0) ? Math.ceil(((new Date(end) - new Date(start)) / (1000 * 3600)) / 24) : Math.ceil(((new Date(end).setHours(23, 59, 59) - new Date(start).setHours(0, 0, 0)) / (1000 * 3600)) / 24);
                else
                    diffInDays = $.inArray(new Date(end.getFullYear(), end.getMonth(), end.getDate()).getTime(), this._dateRender) - ($.inArray(new Date(start.getFullYear(), start.getMonth(), start.getDate()).getTime(), this._dateRender)) + 1;

                if (diffInDays <= 0) diffInDays = 1;
                var cellWidth = this.element.find(".e-alldaycells").width();
                var daysCount = this.currentView() === "week" ? 7 : this.currentView() === "workweek" ? this.model.workWeek.length : (this.currentView() == "customview" && this._renderDays <= 7) ? this._renderDays : 1;
                var alldayTr = (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) ? this._grouping.length : 0;
                var start_time = (new Date(new Date(start).getFullYear(), new Date(start).getMonth(), new Date(start).getDate()));
                var tdIndex = this.currentView() === "day" ? 0 : this.currentView() === "workweek" && this._firstdayofweek == 0 && this.model.workWeek[0] == "Monday" && this.model.workWeek[4] == "Friday" ? new Date(start).getDay() - 1 : this._firstdayofweek || this.model.workWeek.length > 0 || (this.currentView() == "customview" && (this._renderDays <= 7 || this.model.orientation == "horizontal")) ? this._dateRender.indexOf(start_time.getTime()) : new Date(start).getDay();
                if (this._resWorkWeek)
                    left = (this.model.enableRTL) ? this.element.find(".e-headrealldaytable").width() - this.element.find(".e-alldaycells")[day].offsetLeft - this.element.find(".e-alldaycells").width() : this.element.find(".e-alldaycells")[day].offsetLeft;
                else if (!ej.isNullOrUndefined(this.element.find(".e-alldaycells")[tdIndex + (res * daysCount)]))
                    left = (this.model.enableRTL) ? this.element.find(".e-headrealldaytable").width() - this.element.find(".e-alldaycells")[tdIndex + (res * daysCount)].offsetLeft - this.element.find(".e-alldaycells").width() : this.element.find(".e-alldaycells")[tdIndex + (res * daysCount)].offsetLeft;
                appWidth = ((diffInDays * cellWidth) + diffInDays) - 2;
                top = (level * top) + (3 * (level + 1)) + this.element.find(".e-headercells").height() + 1 + ((alldayTr != 0) ? (alldayTr * this.element.find(".e-headerbar").first().height()) : alldayTr);

                var colorAppointment = this._appointmentColor(record);
                var userAppTemplId = (this.model.appointmentTemplateId) ? true : false;
                var userTempHtml = userAppTemplId && this._getUserAppointmentTemplate(record);
                var startTimeDisp = this._timeMode == "12" ? ej.format(record[this._appointmentSettings["startTime"]], this._pattern.t, this.model.locale) : ej.format(record[this._appointmentSettings["startTime"]], "HH:mm", this.model.locale);
                var endTimeDisp = this._timeMode == "12" ? ej.format(record[this._appointmentSettings["endTime"]], this._pattern.t, this.model.locale) : ej.format(record[this._appointmentSettings["endTime"]], "HH:mm", this.model.locale);
                if (record[this._appointmentSettings["recurrence"]]) var recEditIcon = record[this._appointmentSettings["recurrenceRule"]].toString().indexOf("RECUREDITID") != -1;
                var indicationIcon = this._indicationApp(record);
                var alldayCellhtml = $(this.appTemplate.render({ id: record["AppTaskId"], appResize: this.model.enableAppointmentResize, currentview: this.currentView(), top: top, appHeight: appHeight, rtl: this.model.enableRTL, subject: record[this._appointmentSettings["subject"]], startTime: startTimeDisp, endTime: endTimeDisp, appWidth: appWidth + "px", allday: true, left: left + "px", userAppTemplId: userAppTemplId, userTemplate: userTempHtml, appClass: "e-alldayappointment", appointData: colorAppointment.appointColor.appointData, appointCustomcss: colorAppointment.appointColor.appointCustomcss, appointtextcolor: colorAppointment.appointColor.appointtextcolor, value: colorAppointment.value, multiDiv: colorAppointment.multiDiv, orientation: this.model.orientation, priority: this.model.prioritySettings.enable ? record[this._appointmentSettings["priority"]] : '', enablePriority: this.model.prioritySettings["template"], priorityTemplate: this.model.prioritySettings["template"] ? this._priorityTemplate(record) : record[this._appointmentSettings['priority']], uid: record.Guid, recurrence: record[this._appointmentSettings["recurrence"]], recurrenceEdit: recEditIcon, leftInd: indicationIcon.leftIndication, rightInd: indicationIcon.rightIndication, resId: (!ej.isNullOrUndefined(this._appointmentSettings["resourceFields"])) ? record[this._appointmentSettings["resourceFields"].split(",")[this._appointmentSettings["resourceFields"].split(",").length - 1]] : "" }));
                (!ej.isNullOrUndefined(this.model.queryCellInfo)) && this._renderQueryCellInfo("appointment", record, alldayCellhtml);
                this.element.find(".e-headrealldaytable").append(alldayCellhtml);
            }
            this._alldayLevel = false;
            this.level = this.level < level ? level : this.level;
            if (record[this._appointmentSettings["recurrence"]] != 1) {
                var templist = new ej.DataManager(this._currentAppointmentData).executeLocal(new ej.Query().where(this._appointmentSettings["id"], ej.FilterOperators.equal, record.ParentId));
                if ((new Date(record[this._appointmentSettings["endTime"]])) < (templist[0][this._appointmentSettings["endTime"]]))
                    if (this.model.enableRTL)
                        this.element.find('[guid=' + record["Guid"] + ']').children('.e-lefthandle').remove();
                    else this.element.find('[guid=' + record["Guid"] + ']').children(".e-righthandle").remove();
                if ((new Date(record[this._appointmentSettings["startTime"]])) > (templist[0][this._appointmentSettings["startTime"]]))
                    if (this.model.enableRTL)
                        this.element.find('[guid=' + record["Guid"] + ']').children(".e-righthandle").remove();
                    else this.element.find('[guid=' + record["Guid"] + ']').children('.e-lefthandle').remove();
            }
            if (!ej.isNullOrUndefined(indicationIcon)) {
                if (indicationIcon.leftIndication)
                    this.model.enableRTL ? this.element.find('[guid=' + record.Guid + ']').find(".e-schedulemouseclose").css("margin-left", "11px") : this.element.find('[guid=' + record.Guid + ']').find(".e-apptime,.e-apptext").css("margin-left", "13px");
                if (indicationIcon.rightIndication)
                    this.model.enableRTL ? this.element.find('[guid=' + record.Guid + ']').find(".e-apptime,.e-apptext").css("margin-right", "13px") : this.element.find('[guid=' + record.Guid + ']').find(".e-schedulemouseclose").css("margin-right", "11px");
            }
        },
        _indicationApp: function (record) {
            var indication = new ej.DataManager(this._currentAppointmentData).executeLocal(new ej.Query().where(this._appointmentSettings["id"], ej.FilterOperators.equal, record["ParentId"]))[0];
            if (indication[this._appointmentSettings["endTime"]].getHours() == 0 && indication[this._appointmentSettings["endTime"]].getMinutes() == 0) {
                indication = $.extend(true, [], indication);
                indication[this._appointmentSettings["endTime"]] = new Date(indication[this._appointmentSettings["endTime"]].getTime() - 1000);
            }
            var rightIndication, leftIndication, startCheck, endCheck, dateRender;
            dateRender = this.currentView() == "day" ? [new Date(this._dateRender[0]).getTime()] : this._dateRender;
            var splitapp = (this.currentView() == "month" && (new Date(new Date(indication[this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(indication[this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime()) && (((indication[this._appointmentSettings["endTime"]] - indication[this._appointmentSettings["startTime"]]) / 3600000) < 24));
            startCheck = $.inArray(new Date(new Date(record[this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime(), dateRender);
            endCheck = $.inArray(new Date(new Date(record[this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime(), dateRender);
            if (!record[this._appointmentSettings["recurrence"]]) {
                if (((new Date(indication[this._appointmentSettings["startTime"]]) < record[this._appointmentSettings["startTime"]]) || startCheck == -1) && !splitapp)
                    this.model.enableRTL ? rightIndication = true : leftIndication = true;
                if (((new Date(indication[this._appointmentSettings["endTime"]]) > record[this._appointmentSettings["endTime"]]) || endCheck == -1) && !splitapp)
                    this.model.enableRTL ? leftIndication = true : rightIndication = true;
            }
            else {
                var recurIndication = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, record["Guid"]));
                if (recurIndication.length > 1) {
                    var recur = this._sortAppById(recurIndication);
                    if (((recur[0][this._appointmentSettings["startTime"]] < record[this._appointmentSettings["startTime"]]) || startCheck == -1) && !splitapp)
                        this.model.enableRTL ? rightIndication = true : leftIndication = true;
                    if (((recur[recur.length - 1][this._appointmentSettings["endTime"]] > record[this._appointmentSettings["endTime"]]) || endCheck == -1) && !splitapp)
                        this.model.enableRTL ? leftIndication = true : rightIndication = true;
                }
            }
            return { leftIndication: leftIndication, rightIndication: rightIndication };
        },
        _reRenderScroller: function () {
            var dialogObj = this._appointmentAddWindow.data("ejDialog");
            dialogObj.option("enableAnimation", false);
            dialogObj.close();
            var _scrollDiv = this.element.find('div#' + this._id + '_scroller');
            var scrollerObj = _scrollDiv.data("ejScroller");
            var scrollWidth = (this.model.orientation === "vertical") ? parseInt(this.element.width()) - (this._mediaQuery && (this.currentView() == "month" || this._isCustomMonthView()) ? 1 : (this.element.find('.e-scrolltimecells').length > 0 ? this.element.find('.e-scrolltimecells').parent().outerWidth() : 0)) : (this.model.orientation == "horizontal") && (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) ? parseInt(this.element.width()) - parseInt(this.element.find(".e-resourceheadertable").width()) : parseInt(this.element.width());
            scrollerObj.model.width = parseInt(scrollWidth) - 2;
            scrollerObj.model.height = this.scHeight - 1 - (this.wTR.find('.e-draggableworkarea').offset().top - this.element.offset().top);
            scrollerObj.refresh();
            if (this.model.cellWidth != "") {
                var cols = this.currentView() == "workweek" ? this.model.workWeek.length : this.currentView() == "day" ? 1 : (this.currentView() === "customview" && this._renderDays <= 7) ? this._dateRender.length : 7;
                var col = (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) ? (this.res1.length * cols) : cols;
                if (this.model.orientation == "horizontal") col = col + this.element.find(".e-workcellstab").find("tr:first").children().length;
                var timeScaleWidth = this.wTR.find(".e-scrolltimecells").length > 0 ? this.wTR.find(".e-scrolltimecells").width() : 0;
                this.wTR.find(".e-draggableworkarea").width((this.element.width() > ((parseInt(this.model.cellWidth) + 1) * col) + timeScaleWidth + (_scrollDiv.ejScroller("isVScroll") ? 18 : 0)) ? ((parseInt(this.model.cellWidth) + 1) * col) - 1 : scrollWidth - 2 - (_scrollDiv.ejScroller("isVScroll") ? 18 : 0));
                this.aTR.find(".e-headeralldaydiv").width(this.wTR.find(".e-draggableworkarea").width());
            }
            if (this.model.orientation == "vertical" && (!_scrollDiv.ejScroller("isVScroll")) && this.currentView() != "month" && !this._isCustomMonthView() && this.model.timeScale.enable)
                this.element.find(".e-workcells").height(scrollerObj.model.height / (this.element.find('div.e-draggableworkarea tr').length));
            if (this.model.orientation == "vertical" && this._mediaQuery && this.res1.length > 1)
                this.element.find(".e-draggableworkarea").width(this.element.find(".e-draggableworkarea").width() * this.res1.length);
            this.aTR.find(".e-headeralldaydiv").width(this.wTR.find(".e-draggableworkarea").width());
            this.wTR.find(".e-scrolltimecells").css("top", -(this.wTR.find(".e-draggableworkarea").scrollTop()) + "px");
            (this._mediaQuery) && this._appointmentAddWindow.ejDialog("close");
            dialogObj.option("enableAnimation", true);
            if (this.model.orientation == "horizontal" && _scrollDiv.ejScroller("isVScroll")) {
                this._renderHoriVerticalScroll();
            }
            this._showScrollTd();
        },
        _appointmentSort: function (appointments) {
            var proxy = this;
            if (this.currentView() == "agenda") {
                appointments.sort(function (a, b) {
                    var d1 = a[proxy._appointmentSettings["startTime"]];
                    var d2 = b[proxy._appointmentSettings["startTime"]];
                    var d3 = a[proxy._appointmentSettings["endTime"]];
                    var d4 = b[proxy._appointmentSettings["endTime"]];
                    return d1.getTime() - d2.getTime() || d3.getTime() - d4.getTime();
                });
            }
            else if (this.currentView() != "day") {
                appointments.sort(function (a, b) {
                    var d1 = a[proxy._appointmentSettings["endTime"]] - a[proxy._appointmentSettings["startTime"]];
                    var d2 = b[proxy._appointmentSettings["endTime"]] - b[proxy._appointmentSettings["startTime"]];
                    var date1 = new Date(a[proxy._appointmentSettings["startTime"]]);
                    var date2 = new Date(b[proxy._appointmentSettings["startTime"]]);
                    var date3 = new Date(a[proxy._appointmentSettings["endTime"]]);
                    var date4 = new Date(b[proxy._appointmentSettings["endTime"]]);
                    var d3 = a[proxy._appointmentSettings["startTime"]];
                    var d4 = b[proxy._appointmentSettings["startTime"]];
                    if (date1 == date2 && date3 == date4)
                        return d3 - d4 || a.Guid.localeCompare(b.Guid);
                    else if (date1 - date2 == 0)
                        return d2 - d1 || d3 - d4 || a.Guid.localeCompare(b.Guid);
                    else
                        return d3 - d4 || a.Guid.localeCompare(b.Guid);
                });
            }
            else {
                appointments.sort(function (a, b) {
                    var d3 = a[proxy._appointmentSettings["startTime"]];
                    var d4 = b[proxy._appointmentSettings["startTime"]];
                    var d1 = a[proxy._appointmentSettings["endTime"]] - a[proxy._appointmentSettings["startTime"]];
                    var d2 = b[proxy._appointmentSettings["endTime"]] - b[proxy._appointmentSettings["startTime"]];
                    return d3 - d4 || d2 - d1 || a.Guid.localeCompare(b.Guid);
                });
            }
            return appointments;
        },
        _alldaySort: function (appointments) {
            var value = [];
            for (var i = 0; i < appointments.length; i++) {
                if (((new Date(appointments[i][this._appointmentSettings["endTime"]]) - new Date(appointments[i][this._appointmentSettings["startTime"]])) / 3600000) < 24 && !appointments[i][this._appointmentSettings["allDay"]])
                    value.push(appointments[i]);
            }
            return value;
        },
        _appointmentRecurrenceSort: function (appointments) {
            var proxy = this;
            appointments.sort(function (a, b) {
                var d1 = a[proxy._appointmentSettings["startTime"]];
                var d2 = b[proxy._appointmentSettings["startTime"]];
                return d1 - d2;
            });
            return appointments;
        },

        _renderMonthAppointment: function () {
            this.filterData = []; var filtered = []; this._app = []; this._renderedApp = [];
            !this.model.showOverflowButton && (this.initialCellHeight = this.model.cellHeight != "20px" ? parseInt(this.model.cellHeight) : parseInt(this.element.find(".e-draggableworkarea").height() / this.element.find(".e-draggableworkarea tr").length));
            var renderDate = (this.model.orientation == "vertical") ? (this.currentView() == "month" && !this.model.showNextPrevMonth ? this.monthDays : this._dateRender) : this.monthDays;
            var appointments = this._processed;
            appointments = this._sortAppById(appointments);
            appointments = this._appointmentSort(appointments);
            var predicate = ej.Predicate(this._appointmentSettings["startTime"], ej.FilterOperators.greaterThanOrEqual, new Date(renderDate[0]));
            predicate = predicate["and"](this._appointmentSettings["startTime"], ej.FilterOperators.lessThanOrEqual, new Date(new Date(renderDate[renderDate.length - 1]).setHours(23, 59, 59)));
            this._appointmentsList = new ej.DataManager(appointments).executeLocal(new ej.Query().where(predicate));
            appointments = this._appointmentsList;
            renderDate = (this.model.orientation == "vertical") ? this._dateRender : this.monthDays;
            if (!this.model.group || (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length == 0) this.res1 = ["0"];
            for (var res = 0; res < this.res1.length; res++) {
                var day = 0, diff, count = renderDate.length;
                if (new Date(renderDate[0]) < this.model.minDate)
                    day = Math.floor((new Date(this.model.minDate) - new Date(renderDate[0])) / (1000 * 60 * 60 * 24));
                if (new Date(renderDate[renderDate.length - 1]) > this.model.maxDate) {
                    diff = Math.floor((new Date(renderDate[renderDate.length - 1]) - new Date(this.model.maxDate)) / (1000 * 60 * 60 * 24));
                    count = renderDate.length - diff;
                }
                for (day; day < count ; day++) {
                    var predicate12 = ej.Predicate(this._appointmentSettings["startTime"], ej.FilterOperators.greaterThanOrEqual, new Date(renderDate[day]));
                    predicate12 = predicate12["and"](this._appointmentSettings["startTime"], ej.FilterOperators.lessThanOrEqual, new Date(new Date(renderDate[day]).setHours(23, 59, 59)));
                    predicate12 = !ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && ej.scheduleFeatures.resources ? predicate["and"](this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 1].trim(), ej.FilterOperators.equal, this.res1[res][this._tempResource[this._tempResource.length - 1].resourceSettings["id"]]) : predicate;
                    appointments = new ej.DataManager(this._appointmentsList).executeLocal(new ej.Query().where(predicate12));
                    var renderedAlready = ej.Predicate(this._appointmentSettings["startTime"], ej.FilterOperators.greaterThanOrEqual, new Date(renderDate[day]));
                    appointments = new ej.DataManager(appointments).executeLocal(new ej.Query().where(renderedAlready));
                    appointments = this._appointmentSort(appointments);
                    this._app = $.merge(this._app, appointments);
                    for (var app = 0; app < appointments.length; app++) {
                        if (this.model.orientation == "horizontal" && !ej.isNullOrUndefined(this.model.group) && this._grouping.length > 1)
                            var resAvail = new ej.DataManager(this._tempResource[this._tempResource.length - 1].resourceSettings.dataSource).executeLocal(new ej.Query().where(this._tempResource[this._tempResource.length - 1].resourceSettings.groupId, ej.FilterOperators.equal, appointments[app][this._appointmentSettings["resourceFields"].split(",")[this._appointmentSettings["resourceFields"].split(",").length - 2]]));
                        else var resAvail = this.res1;
                        if (resAvail.length != 0) {
                            if ((new Date(new Date(renderDate[day]).setHours(0, 0, 0, 0)).getTime() == new Date(new Date(appointments[app][this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime()) &&
                                (new Date(new Date(renderDate[day]).setHours(0, 0, 0, 0)).getTime() <= new Date(new Date(appointments[app][this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime()) &&
                                (new Date(new Date(appointments[app][this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() <= new Date(new Date(appointments[app][this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime())) {
                                this._renderAppointmentMonth(appointments[app], day, res);
                                filtered.push(appointments[app]);
                            }
                        }
                    }
                }
            }
            if (this.model.showAppointmentNavigator)
                this._nextPrevButton(filtered);
        },

        _wireResizeEvents: function () {
            if (this.model.enableAppointmentResize && !this.model.readOnly) {
                this.element.find("div.e-lefthandle,div.e-righthandle,div.e-tophandle,div.e-bottomhandle").on("mousedown", $.proxy(this._appointmentResizeStart, this));
                this._on(this.element.find("div.e-lefthandle,div.e-righthandle"), "mouseover", $.proxy(this._colHandlesOver, this));
                this._on(this.element.find("div.e-tophandle,div.e-bottomhandle"), "mouseover", $.proxy(this._rowHandlesOver, this));
            }
        },

        _unWireResizeEvents: function () {
            if (this.model.enableAppointmentResize) {
                this.element.find("div.e-lefthandle,div.e-righthandle,div.e-tophandle,div.e-bottomhandle").off("mousedown", $.proxy(this._appointmentResizeStart, this));
                this._off(this.element.find("div.e-lefthandle,div.e-righthandle"), "mouseover", $.proxy(this._colHandlesOver, this));
                this._off(this.element.find("div.e-tophandle,div.e-bottomhandle"), "mouseover", $.proxy(this._rowHandlesOver, this));
            }
        },

        _recuCollectionIndex: function (recurColl, _appList) {
            var index, model = this._appointmentSettings;
            for (var i = 0; i < recurColl.length; i++) {
                if (recurColl[i]["Guid"] == _appList["Guid"]) {
                    if (recurColl[i]["AppTaskId"] == _appList["AppTaskId"]) {
                        index = i;
                        break;
                    }
                }
            }
            return index;
        },

        _getIndex: function (day, record, dateRender, appointments, resValue) {
            if (this._renderedApp.length == 0) {
                record.Index = 0;
                var index = 0;
            }
            else {
                var appLevelsInDay = [];
                var proxy = this;
                appointments = this._sortAppById(appointments);
                appointments = this._appointmentSort(appointments);
                var len = dateRender.length;
                var data = [];
                for (var app = 0; app < appointments.length; app++) {
                    if (((ej.scheduleFeatures.resources && !ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0) ? (appointments[app][this._tempResource[this._tempResource.length - 1]["field"]] == resValue) : true) &&
                            (new Date(new Date(appointments[app][this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() <= new Date(new Date(dateRender[day]).setHours(0, 0, 0, 0)).getTime()) &&
                            (new Date(new Date(appointments[app][this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime() >= new Date(new Date(dateRender[day]).setHours(0, 0, 0, 0)).getTime()) &&
                            (new Date(new Date(appointments[app][this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() <= new Date(new Date(appointments[app][this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime())) {
                        data.push(appointments[app]);
                    }
                }
                this.overlapList = data;
                data = this._sortAppById(data);
                data = this._appointmentSort(data);
                var index = -1;
                if (data.length > 0) {

                    index = this._findResourceIndex(data, "AppTaskId", record["AppTaskId"]);
                    var appLevelsInDay = $.map(data, function (value, Index) {
                        return [value.Index];
                    });
                    index = this._smallestMissingNumber(appLevelsInDay);
                }
                index = index == -1 ? 0 : index;
                record.Index = index;

            }
            return index;
        },
        _recurrenceLocal: function () {
            var recurLocale = ej.RecurrenceEditor.Locale[this.model.locale] = $.extend(true, {}, ej.RecurrenceEditor.Locale["en-US"]);
            var proxy = this;
            $.each(recurLocale, function (key, value) {
                ej.RecurrenceEditor.Locale[proxy.model.locale][key] = proxy._getLocalizedLabels(key);
            });
            //ej.RecurrenceEditor.Locale[this.model.locale] = $.extend(true, {}, recurLocale);
        },
        _renderAppointmentMonth: function (record, day, res) {
            var renderDate = (this.model.orientation == "vertical") ? this._dateRender : this.monthDays;
            var renderCells = (this.model.orientation == "vertical") ? "td.e-monthcells" : "td.e-workcells";
            var appointments = this._renderedApp;
            var overlapCount = (ej.scheduleFeatures.resources && !ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0) ? this._getIndex(day, record, renderDate, appointments, record[this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 1].trim()]) : this._getIndex(day, record, renderDate, appointments, null);
            var startTime = new Date(record[this._appointmentSettings["startTime"]]);
            var endTime = new Date(record[this._appointmentSettings["endTime"]]);
            var appWidth, topPosition = 0;
            this.leftPosition = 0;
            this.CellWidth = this.model.orientation == "vertical" ? this.element.find(".e-monthcells").width() : this.element.find(".e-workcells").width();
            this.CellHeight = this.model.orientation == "vertical" ? this.element.find(".e-monthcells").height() : this.element.find(".e-workcells").height();
            var start = new Date(startTime);
            var end = new Date(endTime);
            var r_end = new Date(new Date(renderDate[renderDate.length - 1]).setHours(23, 59, 59));
            end = end > r_end ? r_end : end;
            this._renderedApp.push(record);
            var maxDays = this._firstdayofweek == 0 ? 7 - (new Date(start).getDay()) : 7 - (new Date(start).getDay()) + this._firstdayofweek;
            if (!this.model.timeScale.enable && this._oneWeek)
                maxDays = 7 - renderDate.indexOf(start.getTime());
            var diffInDays = (start.getHours() == 0 && end.getHours() == 0) ? Math.ceil(((new Date(end) - new Date(start)) / (1000 * 3600)) / 24) : Math.ceil(((new Date(end).setHours(23, 59, 59) - new Date(start).setHours(0, 0, 0)) / (1000 * 3600)) / 24);
            if (end.getTimezoneOffset() - start.getTimezoneOffset() != 0) diffInDays -= 1;
            if (startTime <= endTime) {
                if (this.model.orientation == "vertical") {
                    diffInDays = diffInDays >= maxDays ? maxDays : diffInDays;
                    var rowPosition = Math.ceil((day + 1) / 7);
                    appWidth = (diffInDays * this.CellWidth) - ((this.CellWidth * 5) / 100);
                }
                else {
                    appWidth = !this.model.timeScale.enable || this.currentView() == "month" || this._isCustomMonthView() ? (this.model.cellWidth != "") ? ((diffInDays * this.CellWidth) + diffInDays) : (diffInDays * this.CellWidth) : (this.CellWidth * diffInDays) - parseInt((this.CellWidth * 10) / 100);
                }
                var resIndex = ((this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && !ej.isNullOrUndefined(this.model.group) && ej.scheduleFeatures.resources) ? this._findResourceIndex(this.res1, this._tempResource[this._tempResource.length - 1].resourceSettings.id, record[this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 1].trim()]) : 0;
                if ((this._tempResource.length != 0) && !ej.isNullOrUndefined(this.model.group) && ej.scheduleFeatures.resources)
                    var cellId = this.model.orientation == "vertical" ? this.currentView() == "day" ? resIndex + 1 : this.currentView() == "workweek" || this._isCustomMonthView() && this._oneWeek ? (resIndex * (this._dateRender.length)) + (day + 1) : this.currentView() == "workweek" ? (resIndex * (this._dateRender.length) + (new Date(startTime).getDay() + 1)) + ((rowPosition - 1) * (this.res1.length * this._dateRender.length)) : this._firstdayofweek == 0 ? (resIndex * (7) + (new Date(startTime).getDay() + 1)) + ((rowPosition - 1) * (this.res1.length * 7)) : (this.model.orientation == "vertical" && this._firstdayofweek != 0) ? ((resIndex * (7) + (new Date(startTime).getDay() + 1)) + ((rowPosition - 1) * (this.res1.length * 7)) - this._firstdayofweek) : day + 1 : day + 1;
                else
                    var cellId = this.model.orientation == "vertical" && this._isCustomMonthView() && !this._oneWeek ? (resIndex * (7) + (new Date(startTime).getDay() + 1)) + ((rowPosition - 1) * (this.res1.length * 7)) : day + 1;
                if (this.model.orientation == "vertical" && this._firstdayofweek != 0 && new Date(startTime).getDay() < this._firstdayofweek)
                    var cellId = (resIndex * (7) + (new Date(startTime).getDay() + 1)) + ((rowPosition - 1) * (this.res1.length * 7)) - this._firstdayofweek + 7;
                if (this.model.orientation == "horizontal" && this.model.cellWidth == "" && diffInDays > 1 && !this.model.enableRTL) {
                    var startLeft = $(this.element.find(".e-workcellstab tr:first").find("td.e-workcells")[cellId - 1]).offset().left;
                    var endElement = $(this.element.find(".e-workcellstab tr:first").find("td.e-workcells")[cellId - 2 + diffInDays]);
                    var endLeft = endElement.offset().left + endElement.width();
                    appWidth = endLeft - startLeft;
                }
                var tempAppWidth = appWidth - 1;
                var userAppTemplId = (this.model.appointmentTemplateId) ? true : false;
                var userTempHtml = this._getUserAppointmentTemplate(record);
                var monthHeader = (this.element.find('.e-monthheader').length != 0) ? this.element.find('.e-monthheader').height() : 0;
                var appHeight = (!this.model.appointmentTemplateId) ? 19 : ($(userTempHtml).css('height') == "100%" ? (!this.model.showOverflowButton ? this.initialCellHeight : (this.CellHeight - monthHeader - 15)) : $(userTempHtml).css('height') == "0px" ? this.element.find(".e-monthappointment").height() : $(userTempHtml).height());
                appWidth = (!this.model.appointmentTemplateId) ? appWidth : ($(userTempHtml).css('width') == "100%" || $(userTempHtml).css('width') == "0px" ? appWidth : $(userTempHtml).width());
                topPosition = (overlapCount * appHeight);
                this.leftPosition = 0;
                if ((this._tempResource.length != 0)) {
                    var newResCollection = this._resCollection;
                    var newResCollection1 = this._horiGroupCollection();
                }
                if (this.model.orientation == "vertical")
                    var groupIndex = (!ej.isNullOrUndefined(this.model.group) && this._grouping.length > 1) ? this._findResourceIndex(newResCollection[0].dataSource, newResCollection[0].id, record[this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 2].trim()]) + 1 : 0;
                else
                    var groupIndex = (!ej.isNullOrUndefined(this.model.group) && this._grouping.length > 1) ? this._findResourceIndex(newResCollection1, this._tempResource[this._tempResource.length - 2].resourceSettings["id"], record[this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 2].trim()]) + 1 : 0;
                var resValue = (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0) ? this._findResourceIndex(this.res1, this._tempResource[this._tempResource.length - 1].resourceSettings.id, record[this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 1].trim()]) + 1 : 1;
                var colorAppointment = this._appointmentColor(record);
                var monthCal = this.element.find(".e-monthappointment").length != 0 ? this.element.find(".e-monthappointment").outerWidth(true) - this.element.find(".e-monthappointment").width() : 0;
                var colCount = parseInt(this.CellWidth / (this.CellWidth <= appWidth ? this.CellWidth : (appWidth + monthCal)));
                var rowCount = parseInt((this.CellHeight - monthHeader - 10) / (this.element.find(".e-monthappointment").length > 0 ? this.element.find(".e-monthappointment").outerHeight(true) : appHeight));
                if (this.model.orientation == "horizontal") {
                    this.CellHeight = $(this.element.find(".e-workcellstab tr")[resValue + groupIndex - 1]).find(".e-workcells").height();
                }
                else
                    this.CellHeight = $(this.element.find("td.e-monthcells")[cellId - 1]).closest("tr").find(".e-monthcells").outerHeight();
                var indicationIcon = this._indicationApp(record);
                var startTimeDisp = this._timeMode == "12" ? ej.format(record[this._appointmentSettings["startTime"]], this._pattern.t, this.model.locale) : ej.format(record[this._appointmentSettings["startTime"]], "HH:mm", this.model.locale);
                var endTimeDisp = this._timeMode == "12" ? ej.format(record[this._appointmentSettings["endTime"]], this._pattern.t, this.model.locale) : ej.format(record[this._appointmentSettings["endTime"]], "HH:mm", this.model.locale);
                if (this.model.showOverflowButton && userAppTemplId && $(userTempHtml).css('height') != "0px" && this.model.orientation != "horizontal" ? ((overlapCount + 1) <= (colCount * rowCount)) : (this.CellHeight > monthHeader + ((overlapCount + 1) * appHeight) + 10)) {
                    if (appWidth < tempAppWidth)
                        userAppTemplId && $(this.element.find(".e-appointwrapper")[cellId - 1]).attr('style', "height:" + (parseInt(overlapCount / colCount) + 1) * appHeight + "px !important;width:" + this.CellWidth + "px !important;position:absolute !important;");
                    if (topPosition > 1) topPosition = (overlapCount * appHeight);
                    if (this.leftPosition > 1) this.leftPosition -= 1;
                    if (!ej.isNullOrUndefined(record[this._appointmentSettings["recurrenceRule"]]))
                        var recEditIcon = record[this._appointmentSettings["recurrenceRule"]].toString().indexOf("RECUREDITID") != -1;
                    var timeCellhtml = $(this.appTemplate.render({ id: record["AppTaskId"], appResize: this.model.enableAppointmentResize, currentview: this.currentView(), appHeight: appHeight, rtl: this.model.enableRTL, subject: record[this._appointmentSettings["subject"]], startTime: startTimeDisp, endTime: endTimeDisp, left: this.leftPosition + "px", top: topPosition, appWidth: appWidth + "px", userAppTemplId: userAppTemplId, userTemplate: userTempHtml, appClass: "e-monthappointment", appointData: colorAppointment.appointColor.appointData, appointCustomcss: colorAppointment.appointColor.appointCustomcss, appointtextcolor: colorAppointment.appointColor.appointtextcolor, value: colorAppointment.value, multiDiv: colorAppointment.multiDiv, priority: this.model.prioritySettings.enable ? record[this._appointmentSettings["priority"]] : '', enablePriority: this.model.prioritySettings["template"], priorityTemplate: this.model.prioritySettings["template"] ? this._priorityTemplate(record) : record[this._appointmentSettings['priority']], uid: record.Guid, recurrence: record[this._appointmentSettings["recurrence"]], recurrenceEdit: recEditIcon, leftInd: indicationIcon.leftIndication, rightInd: indicationIcon.rightIndication, resId: (!ej.isNullOrUndefined(this._appointmentSettings["resourceFields"])) ? record[this._appointmentSettings["resourceFields"].split(",")[this._appointmentSettings["resourceFields"].split(",").length - 1]] : "" }));
                    (!ej.isNullOrUndefined(this.model.queryCellInfo)) && this._renderQueryCellInfo("appointment", record, timeCellhtml);
                    if (this.model.orientation == "vertical") {
                        var celltd = $(this.element.find("td.e-monthcells")[cellId - 1]);
                        celltd.find("div.e-appointwrapper").length > 0 ? celltd.find("div.e-appointwrapper").append(timeCellhtml) : celltd.find(".e-monthheader").after($("<div class='e-appointwrapper'></div>").append(timeCellhtml));
                    }
                    else if (this.model.orientation == "horizontal" && ej.scheduleFeatures.horizontal) {
                        var celltd = $($(this.element.find(".e-workcellstab tr")[resValue + groupIndex - 1]).find("td.e-workcells")[cellId - 1]);
                        celltd.find("div.e-appointwrapper").length > 0 ? celltd.find("div.e-appointwrapper").append(timeCellhtml) : celltd.prepend($("<div class='e-appointwrapper'></div>").append(timeCellhtml));
                        if (!ej.isNullOrUndefined(this.model.group) && this._grouping.length > 1)
                            this._renderAppointmentCategory(newResCollection1, groupIndex, cellId - 1, record, appWidth, this.leftPosition);
                    }
                    timeCellhtml = "";
                }
                else {
                    if ($("#" + this._id + "_" + ej.format(new Date(record[this._appointmentSettings["startTime"]]), "MM_dd_yyyy", this.model.locale) + "_" + (resValue + groupIndex - 1) + "_" + (cellId - 1)).length != 0) {
                        $("#" + this._id + "_" + ej.format(new Date(record[this._appointmentSettings["startTime"]]), "MM_dd_yyyy", this.model.locale) + "_" + (resValue + groupIndex - 1) + "_" + (cellId - 1)).remove();
                    }
                    if (this.model.showOverflowButton) {
                        var count = cellId - 1;
                        var DateString = new Date(record[this._appointmentSettings["startTime"]]).getTime();
                        var endDay = Math.round(((record[this._appointmentSettings["endTime"]] - record[this._appointmentSettings["startTime"]]) / 3600000) / 24);
                        var i = count;
                        var appCount = overlapCount + 1;
                        do {
                            var celltd = this.model.orientation == "vertical" ? $(this.element.find("td.e-monthcells")[i]) : $($(this.element.find(".e-workcellstab tr")[resValue + groupIndex - 1]).find("td.e-workcells")[i]);
                            var overflowhtml = '<div id="' + this._id + "_" + ej.format(new Date(record[this._appointmentSettings["startTime"]]), "MM_dd_yyyy", this.model.locale) + "_" + (resValue + groupIndex - 1) + "_" + (i) + '" class="e-icon e-arrowhead-down e-appsoverflow" cellinfo="' + renderDate[day] + '" appcount="' + appCount + '"></div>';
                            celltd.find("div.e-appointwrapper").length > 0 ? celltd.find("div.e-appointwrapper").append(overflowhtml) : celltd.find(".e-monthheader").after($("<div class='e-appointwrapper'></div>").append(overflowhtml));
                            DateString = DateString + (60 * 60 * 24 * 1000);
                            i++;
                        }
                        while (i < endDay + count);
                        if (this.model.orientation == "horizontal" && !ej.isNullOrUndefined(this.model.group) && this._grouping.length > 1)
                            this._renderAppointmentCategory(newResCollection1, groupIndex, cellId - 1, record, appWidth, this.leftPosition);
                    }
                    else {
                        if (this.model.orientation == "vertical") {
                            if (!ej.isNullOrUndefined(record[this._appointmentSettings["recurrenceRule"]]))
                                var recEditIcon = record[this._appointmentSettings["recurrenceRule"]].toString().indexOf("RECUREDITID") != -1;
                            topPosition = (overlapCount * appHeight);
                            var timecellindex = $(this.element.find("td.e-monthcells")[cellId - 1]).closest("tr").index();
                            var timeCellhtml = this.appTemplate.render({ id: record["AppTaskId"], appResize: this.model.enableAppointmentResize, currentview: this.currentView(), appHeight: appHeight, rtl: this.model.enableRTL, subject: record[this._appointmentSettings["subject"]], startTime: startTimeDisp, endTime: endTimeDisp, left: this.leftPosition + "px", top: topPosition, appWidth: appWidth + "px", userAppTemplId: userAppTemplId, userTemplate: userTempHtml, appClass: "e-monthappointment", appointData: colorAppointment.appointColor.appointData, appointCustomcss: colorAppointment.appointColor.appointCustomcss, appointtextcolor: colorAppointment.appointColor.appointtextcolor, value: colorAppointment.value, multiDiv: colorAppointment.multiDiv, uid: record.Guid, recurrence: record[this._appointmentSettings["recurrence"]], recurrenceEdit: recEditIcon, resId: (!ej.isNullOrUndefined(this._appointmentSettings["resourceFields"])) ? record[this._appointmentSettings["resourceFields"].split(",")[this._appointmentSettings["resourceFields"].split(",").length - 1]] : "" });
                            var cellHeight = this.element.find("td.e-monthcells").eq(cellId - 1).parent().children().outerHeight();
                            this.CellHeight = (cellHeight > ((appHeight * (overlapCount + 1)) + monthHeader)) ? cellHeight : (cellHeight + (appHeight - 1));
                            $(this.element.find("td.e-monthcells")[cellId - 1]).closest("tr").find(".e-monthcells").css('height', this.CellHeight+ "px");
                            $(this.element.find(".e-timecells")[timecellindex]).css('height', this.CellHeight + "px");
                            var celltd = $(this.element.find("td.e-monthcells")[cellId - 1]);
                            celltd.find("div.e-appointwrapper").length > 0 ? celltd.find("div.e-appointwrapper").append(timeCellhtml) : celltd.find(".e-monthheader").after($("<div class='e-appointwrapper'></div>").append(timeCellhtml));
                            this._reRenderScroller();
                        }
                        else {
                            topPosition = (overlapCount * appHeight);
                            if ((this.CellHeight - 10) < (appHeight * (overlapCount + 1))) {
                                $(this.element.find(".e-workcellstab tr")[resValue + groupIndex - 1]).find(".e-workcells").css('height', this.CellHeight + appHeight + "px");
                                $(this.element.find(".e-resourceheadertable tr")[resValue + groupIndex - 1]).find(".e-childnode").css('height', this.CellHeight + appHeight + "px");
                            }
                            if (!ej.isNullOrUndefined(record[this._appointmentSettings["recurrenceRule"]]))
                                var recEditIcon = record[this._appointmentSettings["recurrenceRule"]].toString().indexOf("RECUREDITID") != -1;
                            var timeCellhtml = this.appTemplate.render({ id: record["AppTaskId"], appResize: this.model.enableAppointmentResize, currentview: this.currentView(), appHeight: appHeight, rtl: this.model.enableRTL, subject: record[this._appointmentSettings["subject"]], startTime: startTimeDisp, endTime: endTimeDisp, left: this.leftPosition + "px", top: topPosition, appWidth: appWidth + "px", userAppTemplId: userAppTemplId, userTemplate: userTempHtml, appClass: "e-monthappointment", appointData: colorAppointment.appointColor.appointData, appointCustomcss: colorAppointment.appointColor.appointCustomcss, appointtextcolor: colorAppointment.appointColor.appointtextcolor, value: colorAppointment.value, multiDiv: colorAppointment.multiDiv, uid: record.Guid, recurrence: record[this._appointmentSettings["recurrence"]], recurrenceEdit: recEditIcon, leftInd: indicationIcon.leftIndication, rightInd: indicationIcon.rightIndication, resId: (!ej.isNullOrUndefined(this._appointmentSettings["resourceFields"])) ? record[this._appointmentSettings["resourceFields"].split(",")[this._appointmentSettings["resourceFields"].split(",").length - 1]] : "" });
                            this._reRenderScroller();
                            var celltd = $($(this.element.find(".e-workcellstab tr")[resValue + groupIndex - 1]).find("td.e-workcells")[cellId - 1]);
                            celltd.find("div.e-appointwrapper").length > 0 ? celltd.find("div.e-appointwrapper").append(timeCellhtml) : celltd.prepend($("<div class='e-appointwrapper'></div>").append(timeCellhtml));
                            if (!ej.isNullOrUndefined(this.model.group) && this._grouping.length > 1)
                                this._renderAppointmentCategory(newResCollection1, groupIndex, cellId - 1, record, appWidth, this.leftPosition);
                        }
                    }
                    topPosition = this.CellHeight - (monthHeader + (this.element.find('.e-appsoverflow').height()) - 2);
                    this.element.find(".e-icon.e-appsoverflow").css(this.model.enableRTL ? "right" : "left", (this.CellWidth + this.leftPosition - 25) + "px").css("top", topPosition + "px");
                }
            }
            if (!record[this._appointmentSettings["recurrence"]]) {
                var templist = new ej.DataManager(this._currentAppointmentData).executeLocal(new ej.Query().where(this._appointmentSettings["id"], ej.FilterOperators.equal, record.ParentId));
                var tempMultiApp = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, record.Guid));
                if ((new Date(record[this._appointmentSettings["endTime"]])) < (templist[0][this._appointmentSettings["endTime"]])) {
                    if (this.model.enableRTL)
                        $(this.element.find(renderCells)[cellId - 1]).find('[guid=' + templist[0]["Guid"] + ']').children(".e-lefthandle").remove();
                    else $(this.element.find(renderCells)[cellId - 1]).find('[guid=' + templist[0]["Guid"] + ']').children(".e-righthandle").remove();
                }
                if ((new Date(record[this._appointmentSettings["startTime"]])) > (templist[0][this._appointmentSettings["startTime"]])) {
                    if (this.model.enableRTL)
                        $(this.element.find(renderCells)[cellId - 1]).find('[guid=' + record["Guid"] + ']').children(".e-righthandle").remove();
                    else $(this.element.find(renderCells)[cellId - 1]).find('[guid=' + record["Guid"] + ']').children(".e-lefthandle").remove();
                }
            }
            if (!ej.isNullOrUndefined(tempMultiApp) && tempMultiApp > 1) {
                $(this.element.find(renderCells)[cellId - 1]).find('[guid=' + record["Guid"] + ']').children(".e-lefthandle").remove();
                $(this.element.find(renderCells)[cellId - 1]).find('[guid=' + record["Guid"] + ']').children(".e-righthandle").remove();
            }
            if (!ej.isNullOrUndefined(indicationIcon)) {
                if (indicationIcon.leftIndication)
                    this.model.enableRTL ? this.element.find('[guid=' + record.Guid + ']').find(".e-schedulemouseclose").css("margin-left", "11px") : this.element.find('[guid=' + record.Guid + ']').find(".e-apptime,.e-apptext").css("margin-left", "13px");
                if (indicationIcon.rightIndication)
                    this.model.enableRTL ? this.element.find('[guid=' + record.Guid + ']').find(".e-apptime,.e-apptext").css("margin-right", "13px") : this.element.find('[guid=' + record.Guid + ']').find(".e-schedulemouseclose").css("margin-right", "11px");
            }

        },

        _quickWindowClose: function () {
            this._quickAppointWindow.find(".e-error").remove();
            this._quickAppointWindow.ejDialog("close");
            this._scrollerPosition();
            this._processFocus();
        },

        _appointmentWindow: function (e) {
            this.model.showQuickWindow && this._quickAppointWindow.ejDialog("close");
            var startTime, endTime, _target = !ej.isNullOrUndefined(e.target) ? $(e.target) : $(e);
            if (this.currentView() != "agenda" && !_target.hasClass("e-detailedapp") && (!ej.isNullOrUndefined(this.model.workCellsTemplateId) || !ej.isNullOrUndefined(this.model.allDayCellsTemplateId)))
                _target = !ej.isNullOrUndefined($(e.target).closest(".e-appointment,.e-monthappointment")) ? $(e.target).closest(".e-appointment,.e-monthappointment") : _target.closest(".e-workcells, .e-alldaycells, .e-monthcells");
            if (_target.hasClass("e-blocktimeappointment") || _target.closest(".e-blocktimeappointment").length > 0)
                return false;
            if (_target.hasClass("e-appup") || _target.hasClass("e-appdown")) return false;
            var customFlag = (_target.hasClass("e-workcells") || _target.hasClass("e-alldaycells") || _target.hasClass("e-monthcells") || this._cellClick || _target.hasClass("e-detailedapp")) && !_target.hasClass("e-resourceheadercells") && !_target.hasClass("e-schedulemouseclose") && !_target.hasClass("e-appointinnertext") && !_target.hasClass("e-apptext") && !_target.hasClass("e-apptime");
            var eventFlag = (this.model.appointmentWindowOpen != null || this.model.cellDoubleClick != null) || (!ej.isNullOrUndefined(this.model.serverEvents) && ((this.model.serverEvents.indexOf("appointmentWindowOpen") != -1) || (this.model.serverEvents.indexOf("cellDoubleClick") != -1)));
            var event = { startTime: new Date(this.cur_StartTime), endTime: this.cur_EndTime, target: e, resources: (eventFlag && customFlag && (this._tempResource.length != 0)) ? this._getResourceValue(_target) : null };
            if ((_target.hasClass("e-workcells") || _target.hasClass("e-alldaycells") || _target.hasClass("e-monthcells") || this._cellClick || _target.hasClass("e-detailedapp")) && !_target.hasClass("e-resourceheadercells") && !_target.hasClass("e-schedulemouseclose") && !_target.hasClass("e-appointinnertext") && !_target.hasClass("e-apptext") && !_target.hasClass("e-apptime")) {
                if (this._trigger("cellDoubleClick", event) || _target.hasClass("e-categorybar"))
                    return false;
                this._currentAction = ej.Schedule.Actions.Add;
                this._appointmentAddWindow.find(".e-recurEditor").css("display", "none");
                this._appointmentAddWindow.find(".e-appwindow").css("display", "block");
                var index = this._cellIndex;
                var renderDate = (this.model.orientation == "horizontal" && this.currentView() == "month") ? this.monthDays : this.model.orientation == "vertical" ? this.dateRender : this._dateRender;
                var curDate = new Date(renderDate[index]);
                if ((this.model.minDate > curDate || this.model.maxDate < curDate)) { return false; }

                startTime = new Date(this.cur_StartTime);
                endTime = new Date(this.cur_EndTime);
                if (!ej.isNullOrUndefined(this.model.appointmentWindowOpen) || (!ej.isNullOrUndefined(this.model.serverEvents) && (this.model.serverEvents.indexOf("appointmentWindowOpen") != -1)))
                    if (this._trigger("appointmentWindowOpen", event))
                        return false;
                this._appointmentAddWindow.find("#" + this._id + "subject").val(this.model.showQuickWindow ? this._quickAppointWindow.find(".subject").val() : "");
                this._appointmentAddWindow.find("#" + this._id + "location").val(this.model.showQuickWindow ? this._quickAppointWindow.find(".location").val() : "");
                this._appointmentAddWindow.find("#" + this._id + "startdate").ejDatePicker("option", { value: ej.format(new Date(startTime), this._datepattern(), this.model.locale) });
                this._appointmentAddWindow.find("#" + this._id + "enddate").ejDatePicker("option", { value: ej.format(new Date(endTime), this._datepattern(), this.model.locale) });
                this._appointmentAddWindow.find("#" + this._id + "starttime").ejTimePicker("option", "value", ej.format(new Date(startTime), this._pattern.t, this.model.locale));
                this._appointmentAddWindow.find("#" + this._id + "endtime").ejTimePicker("option", "value", ej.format(new Date(endTime), this._pattern.t, this.model.locale));
                this._appointmentAddWindow.find("#" + this._id + "priority").ejDropDownList("option", "value", this.model.prioritySettings.dataSource[0][this.model.prioritySettings["value"]]);
                ($(e.currentTarget).hasClass("e-alldaycells") || this.currentView() == "month" || (this._isCustomMonthView())) && this._appointmentAddWindow.find(".allday").ejCheckBox({ checked: true });
                this._timeZoneCollection(null);
                this._tempStart = this._appointmentAddWindow.find("#" + this._id + "starttime").ejTimePicker("option", "value");
                this._tempEnd = this._appointmentAddWindow.find("#" + this._id + "endtime").ejTimePicker("option", "value");
                this._alldayCheck();
                if (ej.scheduleFeatures.resources && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0)
                    this._renderResourceData(_target, this._cellIndex);
                if (!this.model.readOnly) {
                    this._appointmentAddWindow.find(".e-appsave ,#" + this._id + "donerecur").ejButton("enable", true);
                    (this._mediaQuery) && this._appointmentAddWindow.find(".e-btndelete").css("display", "none");
                    this._appointmentAddWindow.ejDialog("open");
                }
                (!this._mediaQuery) && this._appointmentAddWindow.find(".subject").focus();
                this._cellClick = false;
            }
            else {
                if (!_target.hasClass("e-resourceheadercells") && !_target.hasClass("e-schedulemouseclose")) {
                    if (_target.hasClass("e-monthheader") || _target.hasClass("e-appsoverflow")) return false;
                    var target = (this._editKey) ? $(e) : _target.hasClass("e-appointment") || _target.hasClass("e-monthappointment") || _target.hasClass("e-alldayappointment") || _target.hasClass("e-agendaappointment") ? _target : _target.parents('.e-monthappointment,.e-appointment,.e-alldayappointment,.e-agendaappointment');
                    this.currentView() == "agenda" && (target = target.hasClass("e-agendaappointment") ? target : this.element.find(".e-selectedCell").parent().find(".e-agendaappointment"));
                    if (target.length > 0 && !ej.isNullOrUndefined(target[0].id)) {
                        this._currentAction = ej.Schedule.Actions.Save;
                        this._appUid = target.attr('guid');
                        var templist = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid));
                        if (templist[0][this._appointmentSettings["recurrence"]] == 1) {
                            this._parentId = templist[0]["ParentId"];
                            this._recurEditWindow.ejDialog("open");
                            this._recurEditWindow.focus();
                            this._deleteBeforeOpen();
                        }
                        else
                            this._showAppointmentDetails(this._appUid, true);
                        this.model.showQuickWindow && this._quickAppDetailsWindow.ejDialog("close");
                    }
                    this._editKey = false;
                }
            }
        },

        _editRecurrence: function (args) {
            this._appointmentAddWindow.find(".e-appwindow").toggle();
            (this._mediaQuery) && this._appointmentAddWindow.parent().parent().find(".e-dialog-icon").css("display", "none");
            this._appointmentAddWindow.find(".e-recurEditor").css("margin-left", 700).toggle().animate({ "margin-left": 10 }, 300);

        },

        _showAppointmentDetails: function (appId, editOcurrence) {
            var recurEdit = this._appointmentAddWindow.find(".e-recurrenceeditor").data("ejRecurrenceEditor");
            this._appUid = ej.isNullOrUndefined(this._appUid) ? appId : this._appUid;
            this._currentAction = (ej.isNullOrUndefined(this._currentAction) || this._currentAction == "") ? ej.Schedule.Actions.Save : this._currentAction;
            var query = editOcurrence == true ? new ej.Query().where("Guid", ej.FilterOperators.equal, appId) : new ej.Query().where(this._appointmentSettings["id"], ej.FilterOperators.equal, appId);
            var list = editOcurrence == true ? this._processed : this._currentAppointmentData;
            var templist = this._sortAppById(new ej.DataManager(list).executeLocal(query));
            var data = { appointment: templist[0], edit: editOcurrence };
            if (this._trigger("appointmentWindowOpen", data))
                return false;
            templist[0][this._appointmentSettings["endTime"]] = templist[templist.length - 1][this._appointmentSettings["endTime"]];
            this._appointmentAddWindow.find('.subject').val(templist[0][this._appointmentSettings["subject"]]);
            this._appointmentAddWindow.find('.location').val(templist[0][this._appointmentSettings["location"]]);
            this._appointmentAddWindow.find('.id').val(templist[0]["AppTaskId"]);
            this._appointmentAddWindow.find('.e-description').val(templist[0][this._appointmentSettings["description"]] ? templist[0][this._appointmentSettings["description"]] : "");
            var temp = templist[0];
            this._appointmentAddWindow.find("#" + this._id + "startdate").ejDatePicker("option", "value", ej.format(temp[this._appointmentSettings["startTime"]], this._datepattern(), this.model.locale));
            this._appointmentAddWindow.find("#" + this._id + "enddate").ejDatePicker("option", "value", ej.format(temp[this._appointmentSettings["endTime"]], this._datepattern(), this.model.locale));
            this._appointmentAddWindow.find("#" + this._id + "starttime").ejTimePicker("option", "value", ej.format(temp[this._appointmentSettings["startTime"]], this._pattern.t, this.model.locale));
            this._appointmentAddWindow.find("#" + this._id + "endtime").ejTimePicker("option", "value", ej.format(temp[this._appointmentSettings["endTime"]], this._pattern.t, this.model.locale));
            if (this.model.prioritySettings.enable) {
                if (!ej.isNullOrUndefined(temp[this._appointmentSettings["priority"]])) {
                    this._appointmentAddWindow.find("#" + this._id + "priority").ejDropDownList("option", { value: templist[0][this._appointmentSettings["priority"]] });
                }
                else {
                    this._appointmentAddWindow.find("#" + this._id + "priority").ejDropDownList("option", { value: this.model.prioritySettings.dataSource[0][this.model.prioritySettings.value] });
                }
            }
            this._timeZoneCollection(temp);
            this._tempStart = this._appointmentAddWindow.find("#" + this._id + "starttime").ejTimePicker("option", "value");
            this._tempEnd = this._appointmentAddWindow.find("#" + this._id + "endtime").ejTimePicker("option", "value");

            templist[0][this._appointmentSettings["allDay"]] == 1 && (this._appointmentAddWindow.find(".allday ").ejCheckBox({ checked: true }));
            if (templist[0][this._appointmentSettings["recurrence"]] == 1) {
                recurEdit._recRule = templist[0][this._appointmentSettings["recurrenceRule"]];
                if (editOcurrence == true) {
                    (!ej.isNullOrUndefined(templist[0][this._appointmentSettings["recurrenceRule"]]) && templist[0][this._appointmentSettings["recurrenceRule"]].toString().indexOf("RECUREDITID") != -1) && (this._currentAction = ej.Schedule.Actions.Save);
                    this._appointmentAddWindow.find(".recurrence").ejCheckBox({ checked: true, enabled: false });
                    this._appointmentAddWindow.find(".e-repeatlbl").addClass('e-disable');
                    this._appointmentAddWindow.find("." + this._id + "summary").css("display", "none");
                    this._appointmentAddWindow.find(".e-recurFinalRule").html("");
                }
                else {
                    recurEdit.recurrenceRuleSplit(templist[0][this._appointmentSettings["recurrenceRule"]], temp[this._appointmentSettings["recurrenceExDate"]]);
                    this._appointmentAddWindow.find(".recurstartdate").ejDatePicker({ value: ej.format(temp[this._appointmentSettings["startTime"]], this._datepattern(), this.model.locale) });
                    this._appointmentAddWindow.find("." + this._id + "summary").css("display", "table-row");
                    this._appointmentAddWindow.find(".e-recurFinalRule").html(recurEdit.showRecurrenceSummary(appId));
                    this._appointmentAddWindow.find(".recurrence").ejCheckBox({ checked: true });
                    this._appointmentAddWindow.find(".e-recuredit").css("display", "inline");
                }
            }
            if (this.model.categorizeSettings.enable && !ej.isNullOrUndefined(temp[this._appointmentSettings["categorize"]])) {
                this._showCategorizeDetails(temp);
            }
            if ((this._tempResource.length != 0) && ej.scheduleFeatures.resources)
                this._showMultipleResourceDetails(temp);
            this._alldayCheck();
            var enableDisable = (this.model.readOnly) ? "disable" : "enable";
            this._appointmentAddWindow.find(".e-appsave,#" + this._id + "donerecur").ejButton(enableDisable, true);
            (this._mediaQuery) && this._appointmentAddWindow.find(".e-btndelete").css("display", "block");
            this._appointmentAddWindow.ejDialog("open");
            (!this._mediaQuery) && this._appointmentAddWindow.find(".subject").focus();
        },

        _recurDateChange: function (args) {
            this._appointmentAddWindow.find("#" + this._id + "startdate").ejDatePicker("option", "value", args);
            if (this._appointmentAddWindow.find("#" + this._id + "enddate").ejDatePicker("option", "value") < this._appointmentAddWindow.find("#" + this._id + "startdate").ejDatePicker("option", "value"))
                this._appointmentAddWindow.find("#" + this._id + "enddate").ejDatePicker("option", "value", args);
            else if (args != this._appointmentAddWindow.find("#" + this._id + "enddate").ejDatePicker("option", "value"))
                this._appointmentAddWindow.find("#" + this._id + "enddate").ejDatePicker("option", "value", args);
        },

        _cancel: function () {
            this._appointmentAddWindow.ejDialog("close");
        },

        _timeChange: function (e) {
            var obj = this._appointmentAddWindow.find("#" + this._id + "starttime").data("ejTimePicker");
            if (ej.isNullOrUndefined(e.value)) {
                obj.option("value", new Date(this.cur_StartTime));
                return;
            }
            if (obj.showDropdown && obj._id == this._id + "starttime") {
                if (this._appointmentAddWindow.find('.startutc').val() != this._appointmentAddWindow.find('.endutc').val()) {
                    this._utcValue("", "starttime");
                }
                else {
                    var end = this._timeFormat(this._appointmentAddWindow.find('#' + this._id + 'endtime').ejTimePicker("option", "value")).split(":");
                    var endTime = new Date(new Date("1/1/2000").setHours(parseInt(end[0], 10), parseInt(end[1], 10)));
                    var start = this._timeFormat(this._appointmentAddWindow.find('#' + this._id + 'starttime').ejTimePicker("option", "value")).split(":");
                    var startTime = new Date(new Date("1/1/2000").setHours(parseInt(start[0], 10), parseInt(start[1], 10)));
                    var prev = this._timeFormat(e.prevTime).split(":");
                    var prevtime = new Date(new Date("1/1/2000").setHours(parseInt(prev[0], 10), parseInt(prev[1], 10)));
                    var updatetime = new Date(new Date(startTime).setHours(startTime.getHours() + endTime.getHours() - prevtime.getHours(), startTime.getMinutes() + endTime.getMinutes() - prevtime.getMinutes()));
                    this._appointmentAddWindow.find('#' + this._id + 'endtime').ejTimePicker("option", "value", updatetime);
                }
                this._startSlotChange = true;
            }
        },
        _setQuickValidation: function () {
            if (ej.isNullOrUndefined(this._quickAppointWindow)) return false;
            var form = this._id + "_AddForm";
            this._initValidator(form);
            if (!ej.isNullOrUndefined(this.model.appointmentSettings["subject"]) && !ej.isNullOrUndefined(this.model.appointmentSettings["subject"]["validationRules"])) {
                var name = this.model.appointmentSettings["subject"].field, rules = this.model.appointmentSettings["subject"]["validationRules"];
                ele = this._quickAppointWindow.find('.subject');
                !ele.attr("name") && ele.attr("name", name);
                ele.rules("add", rules);
                var validator = $("#" + this._id + "_AddForm").validate();
                if (!ej.isNullOrUndefined(rules["required"])) {
                    ej.isNullOrUndefined(validator.settings.messages[name]) ? (validator.settings.messages[name] = {}) : "";
                    validator.settings.messages[name]["required"] = (!ej.isNullOrUndefined(rules["messages"] && rules["messages"]["required"])) ? rules["messages"]["required"] : name + " is required.";
                }
            }
        },
        _setValidation: function () {
            var form = this._id + "_AddEditForm";
            this._initValidator(form);
            var proxy = this;
            $.each(this.model.appointmentSettings, function (key, value) {
                if (!ej.isNullOrUndefined(proxy.model.appointmentSettings[key]) && !ej.isNullOrUndefined(proxy.model.appointmentSettings[key]["validationRules"])) {
                    proxy._setValidationToField(key, proxy.model.appointmentSettings[key].field, proxy.model.appointmentSettings[key].validationRules);
                }
            });
        },
        _initValidator: function (form) {
            $("#" + form).validate({
                onfocusout: false,
                ignore: ".e-hide",
                errorClass: 'e-field-validation-error',
                errorElement: 'div',
                wrapper: "div",
                errorPlacement: function (error, element) {
                    var $td = element.closest("td"), $container = $(error).addClass("e-error"), $tail = ej.buildTag("div.e-errortail e-toparrow"), $container;
                    $td.find(".e-error").remove();
                    (element.parent().hasClass("e-in-wrap")) ? $container.insertAfter(element.closest(".e-widget")) : $container.insertAfter(element);
                    $container.prepend($tail)
                    var offsettop = (element[0]['type'] == 'checkbox' || element[0]['type'] == 'hidden') ? element.parent().offset().top + element.parent().height() : element.offset().top + element.height();
                    $container.offset({ top: offsettop });
                    $container.fadeIn("slow");
                }
            });
        },
        _setValidationToField: function (field, name, rules) {
            if (field == "startTime")
                ele = this._appointmentAddWindow.find("#" + this._id + "startdate,#" + this._id + "starttime");
            else if (field == "endTime")
                ele = this._appointmentAddWindow.find("#" + this._id + "enddate,#" + this._id + "endtime");
            else if (field == "resourceFields")
                ele = $("#" + this._id + "AppointmentAddEditWindow").find("[id^=" + this._id + "_ownerfield_" + "][type!=hidden]").find(".e-autocomplete");
            else
                ele = $("#" + this._id + "AppointmentAddEditWindow").find("[name=" + name + "][type!=hidden]");
            if (ele.length < 1) ele = $("#" + this._id + field);
            for (var i = 0; i < ele.length; i++) {
                if ($(ele[i]).hasClass("e-autocomplete")) {
                    var obj = $(ele[i]).data("ejAutocomplete");
                    ele[i] = obj.model.multiSelectMode == "visualmode" ? obj._hiddenInput : obj.element;
                }
                $(ele[i]).rules("add", rules);
                var validator = $("#" + this._id + "_AddEditForm").validate();
                if (!ej.isNullOrUndefined(rules["required"])) {
                    ej.isNullOrUndefined(validator.settings.messages[name]) ? (validator.settings.messages[name] = {}) : "";
                    validator.settings.messages[name]["required"] = (!ej.isNullOrUndefined(rules["messages"] && rules["messages"]["required"])) ? rules["messages"]["required"] : name + " is required.";
                }
            }
        },
        _endTimeChange: function (e) {
            var obj = this._appointmentAddWindow.find("#" + this._id + "endtime").data("ejTimePicker");
            if (ej.isNullOrUndefined(e.value)) {
                obj.option("value", new Date(this.cur_EndTime));
                return;
            }
            if (obj.showDropdown && obj._id == this._id + "endtime") {
                this._endSlotChange = true;
            }
        },

        _renderControls: function (e) {
            var control = this._appointmentAddWindow;
            control.find('.allday').ejCheckBox({ enableRTL: this.model.enableRTL, cssClass: this.model.cssClass, change: $.proxy(this._alldayCheck, this) });
            control.find('.startenddate').ejDatePicker({ buttonText: this._getLocalizedLabels("Today"), startDay: this._firstdayofweek, enableRTL: this.model.enableRTL, width: '100%', value: this.currentDate(), locale: this.model.locale, dateFormat: this.model.dateFormat, cssClass: this.model.cssClass, minDate: this.model.minDate, maxDate: this.model.maxDate });
            control.find("#" + this._id + "starttime").ejTimePicker({ enableRTL: this.model.enableRTL, width: "100%", value: this.currentDate(), locale: this.model.locale, change: $.proxy(this._timeChange, this), cssClass: this.model.cssClass, interval: 30, timeFormat: (this._timeMode == "12") ? this._pattern.t : "HH:mm" });
            control.find("#" + this._id + "endtime").ejTimePicker({ enableRTL: this.model.enableRTL, width: "100%", value: this.currentDate(), locale: this.model.locale, change: $.proxy(this._endTimeChange, this), cssClass: this.model.cssClass, interval: 30, timeFormat: (this._timeMode == "12") ? this._pattern.t : "HH:mm" });
            control.find("#" + this._id + "startTimeZone").ejDropDownList({ enableRTL: this.model.enableRTL, dataSource: this.model.timeZoneCollection.dataSource, fields: { text: this.model.timeZoneCollection["text"], id: this.model.timeZoneCollection["id"], value: this.model.timeZoneCollection["value"] }, width: "100%", select: $.proxy(this._startUtc, this), cssClass: this.model.cssClass });
            control.find("#" + this._id + "endTimeZone").ejDropDownList({ enableRTL: this.model.enableRTL, dataSource: this.model.timeZoneCollection.dataSource, fields: { text: this.model.timeZoneCollection["text"], id: this.model.timeZoneCollection["id"], value: this.model.timeZoneCollection["value"] }, width: "100%", select: $.proxy(this._endUtc, this), cssClass: this.model.cssClass });
            if (this.model.prioritySettings.enable && !(this.model.prioritySettings.dataSource instanceof ej.DataManager))
                this._renderPriorityItems(control);
            if ((this._tempResource.length != 0) && ej.scheduleFeatures.resources)
                this._renderAppWindowResources(control);
            if (this.model.categorizeSettings.enable && !(this.model.categorizeSettings.dataSource instanceof ej.DataManager))
                this._renderCategoryItems(control);
            control.find('.recurrence').ejCheckBox({ enableRTL: this.model.enableRTL, change: $.proxy(this._repeat, this), cssClass: this.model.cssClass });
            control.find('.e-btndone').ejButton({ enableRTL: this.model.enableRTL, showRoundedCorner: true, width: (this._mediaQuery) ? "100%" : "100px", click: $.proxy(this._saveAppointment, this), cssClass: this.model.cssClass });
            control.find('.cancel').ejButton({ enableRTL: this.model.enableRTL, showRoundedCorner: true, width: (this._mediaQuery) ? "100%" : "100px", click: $.proxy(this._cancel, this), cssClass: this.model.cssClass });
            (this._mediaQuery) && control.find('.e-btndelete').ejButton({ enableRTL: this.model.enableRTL, showRoundedCorner: true, width: "100%", click: $.proxy(this._mobileAppDelete, this), cssClass: this.model.cssClass });
        },

        _mobileAppDelete: function () {
            if ((this._mediaQuery) && !(ej.isNullOrUndefined(this._editOnlyClicked)) && !(this._editOnlyClicked) && this._appointmentAddWindow.find(".recurrence").ejCheckBox("option", "checked")) {
                this._deleteApp(this._appUid);
            }
            else
                this._deleteAppoint();
            this._appointmentAddWindow.ejDialog("close");
        },

        _renderPriorityItems: function (control) {
            if (!ej.isNullOrUndefined(control)) {
                control.find('.priority').ejDropDownList({
                    enableRTL: this.model.enableRTL,
                    template: ej.isNullOrUndefined(this.model.prioritySettings["template"]) ? "<div class='e-" + "${" + this.model.prioritySettings["value"] + "}'></div><div>${" + this.model.prioritySettings["text"] + "}</div>" : this.model.prioritySettings["template"] + "${" + this.model.prioritySettings["text"] + "}",
                    dataSource: this.model.prioritySettings.dataSource, fields: { text: this.model.prioritySettings["text"], value: this.model.prioritySettings["value"] },
                    width: "100%",
                    cssClass: this.model.cssClass
                });
            }
        },

        _renderCategoryItems: function (control) {
            if (!ej.isNullOrUndefined(control)) {
                control.find('.e-categorizevalue').ejAutocomplete({
                    enableRTL: this.model.enableRTL,
                    showPopupButton: true,
                    width: "100%", cssClass: this.model.cssClass,
                    multiSelectMode: this.model.categorizeSettings.allowMultiple ? "visualmode" : "none",
                    focusOut: $.proxy(this._categorizeValidate, this),
                    dataSource: this.model.categorizeSettings.dataSource, fields: { text: this.model.categorizeSettings["text"], value: this.model.categorizeSettings["color"], key: this.model.categorizeSettings["id"], fontColor: this.model.categorizeSettings["fontColor"] },
                    template: this._categorizeTemplate,
                    emptyResultText: this._getLocalizedLabels("EmptyResultText")
                });
            }
        },
        _categorizeValidate: function (args) {
            if ($.isFunction($.validator) && !$("#" + this._id + "_AddEditForm").validate().form())
                return false;
        },
        _appointmentColor: function (record) {
            var appointColor = (this.model.categorizeSettings.enable && !ej.isNullOrUndefined(record[this._appointmentSettings["categorize"]]) && record[this._appointmentSettings["categorize"]] != "") ? this._getCategorizeColor(record) : ((this._tempResource.length != 0) && ej.scheduleFeatures.resources) ? this._getResourceColor(record) : { appointData: "", appointCustomcss: "", appointtextcolor: "" };

            if (this.model.categorizeSettings.enable && this.model.categorizeSettings.allowMultiple && !ej.isNullOrUndefined(record[this._appointmentSettings["categorize"]])) {
                var categorizeItems = record[this._appointmentSettings["categorize"]].split(",");
                var categorizeItemsLength = categorizeItems.length;
                var value = (categorizeItemsLength > 1) ? true : false;
                var multiDiv = this._categorizeMultipleDiv(record, categorizeItems, categorizeItemsLength);
            }
            if (!ej.isNullOrUndefined(multiDiv) && appointColor.appointData.length > 0 && this.model.categorizeSettings.allowMultiple)
                return { appointColor: appointColor, value: value, multiDiv: multiDiv };
            else if (appointColor.appointData.length > 0 && !this.model.categorizeSettings.allowMultiple || (this._tempResource.length != 0) && ej.scheduleFeatures.resources)
                return { appointColor: appointColor };
            else {
                appointData = "", appointCustomcss = "", appointtextcolor = "", value = "";
                return { appointColor: appointColor, value: value, multiDiv: multiDiv };
            }
        },

        _categorizeMultipleDiv: function (record, categorizeItems, categorizeItemsLength) {
            var renderData = [];
            for (i = 0; i <= categorizeItemsLength - 1; i++) {
                if (i != categorizeItemsLength - 1) {
                    var dataSet = this.model.categorizeSettings;
                    var categorizeDataIndex = this._findResourceIndex(dataSet.dataSource, this.model.categorizeSettings["id"], categorizeItems[i]);
                    (ej.isNullOrUndefined(categorizeDataIndex)) && (categorizeDataIndex = this._findResourceIndex(dataSet.dataSource, this.model.categorizeSettings["id"], parseInt(categorizeItems[i])));
                    if (ej.isNullOrUndefined(categorizeDataIndex)) {
                        record[this._appointmentSettings["categorize"]] = "";
                        return null;
                    }
                    else
                        renderData.push({ text: dataSet.dataSource[categorizeDataIndex][dataSet.text], value: dataSet.dataSource[categorizeDataIndex][dataSet.color], key: dataSet.dataSource[categorizeDataIndex][dataSet.id], fontColor: dataSet.dataSource[categorizeDataIndex][dataSet.fontColor] })
                }
            }
            var template = this._categorizeMultipleTemplate.render({ renderData: renderData });
            return template;
        },

        _getResCategorySaveData: function (categorizeVal, autoVal, obj, maxId, parId, starttime, endtime) {
            var args = [], newAppointment, data, prevdata, tempSource = [];
            newAppointment = this._addAppData(obj, maxId, new Date(obj[this._appointmentSettings["startTime"]]), new Date(obj[this._appointmentSettings["endTime"]]), parId);
            if (categorizeVal.length > 0 && !ej.isNullOrUndefined(categorizeVal[0][0])) {
                var categorizeItemsLength = categorizeVal[categorizeVal.length - 1].length - 1; var idValue = "";
                for (var i = 0; i <= categorizeItemsLength; i++) {
                    var getId = categorizeVal[categorizeVal.length - 1][i][this.model.categorizeSettings["id"]];
                    idValue = (i != categorizeItemsLength) ? idValue + getId.toString() + "," : idValue + getId.toString();
                }
                newAppointment[this._appointmentSettings["categorize"]] = idValue;
            }
            if (autoVal.length > 0) {
                var categorizeVar = newAppointment[this._appointmentSettings["categorize"]];
                var resources = this._appointmentSettings.resourceFields.toString().split(',');
                if (this._grouping.length != 0) {
                    if (resources.length != this._grouping.length) {
                        for (var i = 0; i < this._grouping.length; i++) {
                            tempSource.push(resources[i]);
                        }
                        resources = tempSource;
                    }
                }
                var newResCollection = this._getResourceCollection();
                if (autoVal[autoVal.length - 1].length > 0) {
                    for (var j = 0; j < autoVal[autoVal.length - 1].length; j++) {
                        newAppointment = this._addAppData(obj, maxId, new Date(obj[this._appointmentSettings["startTime"]]), new Date(obj[this._appointmentSettings["endTime"]]), parId);
                        if (categorizeVal.length > 0)
                        newAppointment[this._appointmentSettings["categorize"]] = categorizeVar;

                        if (autoVal[autoVal.length - 1].length > 1) {
                            obj.Guid = this._guidFormatGenerate();
                            maxId++;
                            var templist = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("AppTaskId", ej.FilterOperators.equal, maxId));
                            maxId = (templist.length == 0) ? maxId : this._sortAppById(this._processed)[this._processed.length - 1]["AppTaskId"] + 1;
                            obj[this._appointmentSettings["id"]] = parId = maxId;
                            if (this._currentAction == ej.Schedule.Actions.EditSeries) obj[this._appointmentSettings["recurrenceId"]] = maxId;
                        }
                        newAppointment[resources[resources.length - 1].trim()] = autoVal[resources.length - 1][j][newResCollection[newResCollection.length - 1]["id"]];

                        var id = autoVal[resources.length - 1][j][newResCollection[newResCollection.length - 1]["id"]];
                        for (var i = resources.length - 1; i > 0; i--) {
                            data = this.render_Resources[i] instanceof ej.DataManager ? this.render_Resources[i] : ej.DataManager(this.render_Resources[i]);
                            query = new ej.Query().where(newResCollection[i].id, ej.FilterOperators.equal, id);
                            appointId = data.executeLocal(query);
                            prevdata = this.render_Resources[i - 1] instanceof ej.DataManager ? this.render_Resources[i - 1] : ej.DataManager(this.render_Resources[i - 1]);
                            query1 = new ej.Query().where(newResCollection[i - 1].id, ej.FilterOperators.equal, appointId[0][newResCollection[i].groupId]);
                            appointGroupId = prevdata.executeLocal(query1);
                            id = appointGroupId[0][newResCollection[i - 1].id];
                            newAppointment[resources[i - 1]] = id;
                        }
                        if (this._currentAction == ej.Schedule.Actions.EditOccurrence) newAppointment[this._appointmentSettings["id"]] = newAppointment.AppTaskId;
                        args.push(newAppointment);
                    }
                }
                else {
                    var resources = this._appointmentSettings.resourceFields.toString().split(',');
                    newAppointment = this._addAppData(obj, maxId, new Date(obj[this._appointmentSettings["startTime"]]), new Date(obj[this._appointmentSettings["endTime"]]), parId);
                    if (categorizeVal.length > 0)
                    newAppointment[this._appointmentSettings["categorize"]] = categorizeVar;
                    if (resources.length > 1) {
                        for (i = 0; i < resources.length; i++) {
                            newAppointment[resources[i].trim()] = this._tempResource[i].resourceSettings.dataSource[0].id
                        }
                    }
                    else
                        newAppointment[resources[resources.length - 1].trim()] = this._tempResource[0].resourceSettings.dataSource[0].id;
                    if (this._currentAction == ej.Schedule.Actions.EditOccurrence) newAppointment[this._appointmentSettings["id"]] = newAppointment.AppTaskId;
                    args.push(newAppointment);
                }
            }

            if (autoVal.length == 0 && categorizeVal.length > 0) {
                if (this._currentAction == ej.Schedule.Actions.EditOccurrence) newAppointment[this._appointmentSettings["id"]] = newAppointment.AppTaskId;
                args.push(newAppointment);
            }
            return args;
        },

        _timeZoneCollection: function (temp) {
            if (!ej.isNullOrUndefined(temp)) {
                this.startTimeAppoint = temp[this._appointmentSettings["startTimeZone"]];
                this.endTimeAppoint = temp[this._appointmentSettings["endTimeZone"]];
            }
            this.startutcValue = this.tempValue = null;
            if (!ej.isNullOrUndefined(temp) && this.endTimeAppoint) {
                this._utcValue(temp, "Appoint");
                this.tempValue = 1;
            }
            var rawTimezone = (this.model.timeZone == null) ? this._timezoneStringValue() : this.model.timeZone;
            var value1 = temp !== null ? ej.isNullOrUndefined(this.startTimeAppoint) ? rawTimezone : this.startTimeAppoint : rawTimezone;
            var addUTC = (value1.indexOf("UTC") != 0) ? "UTC " + value1 : value1;
            var zeroValue = (addUTC.split(" ")[1].split(":")[0].length != 3) ? ((addUTC.split(" ")[1].split(":")[0][0] == "+") ? "+0" + addUTC.split(" ")[1].split(":")[0].split("+")[1] + ":" + addUTC.split(" ")[1].split(":")[1] : "-0" + addUTC.split(" ")[1].split(":")[0].split("-")[1] + ":" + addUTC.split(" ")[1].split(":")[1]) : addUTC;
            var timeZoneValue = (zeroValue.indexOf("UTC") != 0) ? "UTC " + zeroValue : zeroValue;
            var value = !ej.isNullOrUndefined(this._findResourceIndex(this.model.timeZoneCollection.dataSource, this.model.timeZoneCollection["value"], timeZoneValue)) ? this._findResourceIndex(this.model.timeZoneCollection.dataSource, this.model.timeZoneCollection["value"], timeZoneValue) : "add";
            if (!ej.isNullOrUndefined(temp) && !ej.isNullOrUndefined(this.startTimeAppoint) && !ej.isNullOrUndefined(this.endTimeAppoint)) {
                this._appointmentAddWindow.find("#" + this._id + "startTimeZone").ejDropDownList("option", { value: (!ej.isNullOrUndefined(temp) && this.startTimeAppoint) ? this.startTimeAppoint : this.model.timeZoneCollection.dataSource[value][this.model.timeZoneCollection["value"]] });
                this._appointmentAddWindow.find("#" + this._id + "endTimeZone").ejDropDownList("option", { value: (!ej.isNullOrUndefined(temp) && this.endTimeAppoint) ? this.endTimeAppoint : this.model.timeZoneCollection.dataSource[value][this.model.timeZoneCollection["value"]] });
            }
            if (value !== "add") {
                this._appointmentAddWindow.find("#" + this._id + "startTimeZone").ejDropDownList("option", { text: this.model.timeZoneCollection.dataSource[value][this.model.timeZoneCollection["text"]], value: this.model.timeZoneCollection.dataSource[value][this.model.timeZoneCollection["value"]] });
                this._appointmentAddWindow.find("#" + this._id + "endTimeZone").ejDropDownList("option", { text: this.model.timeZoneCollection.dataSource[value][this.model.timeZoneCollection["text"]], value: this.model.timeZoneCollection.dataSource[value][this.model.timeZoneCollection["value"]] });
            }
            if (value == "add") {
                var addDataSoure = {};
                addDataSoure[this.model.timeZoneCollection["text"]] = timeZoneValue;
                addDataSoure[this.model.timeZoneCollection["id"]] = (this.model.timeZoneCollection.dataSource.length + 1).toString();
                addDataSoure[this.model.timeZoneCollection["value"]] = timeZoneValue;
                this.model.timeZoneCollection.dataSource.push(addDataSoure);
                this._appointmentAddWindow.find("#" + this._id + "startTimeZone").ejDropDownList({ dataSource: this.model.timeZoneCollection.dataSource });
                this._appointmentAddWindow.find("#" + this._id + "endTimeZone").ejDropDownList({ dataSource: this.model.timeZoneCollection.dataSource });
                temp != null ? this._timeZoneCollection(temp) : this._timeZoneCollection(null);
            }
            this.tempValue = null;
        },

        _timezoneStringValue: function () {
            var sign = (-new Date().getTimezoneOffset()) + (this._timeZoneOffset);
            var value = sign < 0 ? "-" : "+";
            var offset = Math.abs(sign);
            var hours = ((Math.floor(offset / 60)) < 10) ? '0' + (Math.floor(offset / 60)) : (Math.floor(offset / 60));
            var minutes = ((offset % 60) < 10) ? '0' + (offset % 60) : (offset % 60);
            return value + hours + ":" + minutes;
        },

        _showCategorizeDetails: function (temp) {
            var categorizeItems = temp[this._appointmentSettings["categorize"]].split(",");
            var key;
            for (i = 0; i < categorizeItems.length; i++) {
                key = $.type(categorizeItems[i]) == 'string' ? categorizeItems[i] : parseInt(categorizeItems[i]);
                this._appointmentAddWindow.find('.e-categorizevalue').data("ejAutocomplete").selectValueByKey(key);
            }
        },

        _renderCategorizeTemplate: function () {
            var Text = this.model.enableRTL ? 'margin-right:30px;margin-top:-18px' : 'float:left';
            var Color = this.model.enableRTL ? 'float:none' : 'float:left';
            if (!ej.isNullOrUndefined(this.model.categorizeSettings)) {
                this._categorizeTemplate = "<div class='e-categorizeTemplate' style='height:15px;margin-right:5px;margin-top:3px;" + Color + ";width:15px;background-color: ${" + this.model.categorizeSettings["color"] + "}'></div><div style= " + Text + ">${" + this.model.categorizeSettings["text"] + "}</div>";
            }
        },

        _getCategorizeColor: function (record) {
            var categorizeDataIndex = null, appointData = "", appointCustomcss = "", appointtextcolor = "";
            var categorizeItems = record[this._appointmentSettings["categorize"]].split(",");
            var categorizeItemsLength = categorizeItems.length - 1;
            var dataSet = this.model.categorizeSettings;
            categorizeDataIndex = this._findResourceIndex(dataSet.dataSource, this.model.categorizeSettings["id"], categorizeItems[categorizeItemsLength]);
            (ej.isNullOrUndefined(categorizeDataIndex)) && (categorizeDataIndex = this._findResourceIndex(dataSet.dataSource, this.model.categorizeSettings["id"], parseInt(categorizeItems[categorizeItemsLength])));
            if (ej.isNullOrUndefined(categorizeDataIndex)) {
                record[this._appointmentSettings["categorize"]] = "";
                return { appointData: appointData, appointCustomcss: appointCustomcss, appointtextcolor: appointtextcolor };
            }
            else {
                appointData = !ej.isNullOrUndefined(dataSet.dataSource[categorizeDataIndex][dataSet.color]) ? dataSet.dataSource[categorizeDataIndex][dataSet.color] : appointData;
                appointtextcolor = !ej.isNullOrUndefined(dataSet.dataSource[categorizeDataIndex][dataSet.fontColor]) ? dataSet.dataSource[categorizeDataIndex][dataSet.fontColor] : appointtextcolor;
            }
            return { appointData: appointData, appointCustomcss: appointCustomcss, appointtextcolor: appointtextcolor }
        },

        _currentDateFormat: function (option) {
            var minDate, maxDate;
            if (!ej.isNullOrUndefined(option) && ($.type(this.currentDate()) != "date" || $.type(this.model.minDate) != "date" || $.type(this.model.maxDate) != "date")) {
                var date = ej.parseDate(this.currentDate(), this.model.dateFormat);
                minDate = ej.parseDate(this.model.minDate, this.model.dateFormat);
                maxDate = ej.parseDate(this.model.maxDate, this.model.dateFormat);
                this.currentDate((!ej.isNullOrUndefined(date)) ? date : ((new Date(this.currentDate()).toString() == "Invalid Date" || new Date(this.currentDate()).toString() == "NaN") ? this._dateConvert(this.currentDate()) : new Date(this.currentDate())));
                this.model.minDate = (!ej.isNullOrUndefined(minDate)) ? minDate : ((new Date(this.model.minDate).toString() == "Invalid Date" || new Date(this.model.minDate).toString() == "NaN") ? this._dateConvert(this.model.minDate) : new Date(this.model.minDate));
                this.model.maxDate = (!ej.isNullOrUndefined(maxDate)) ? maxDate : ((new Date(this.model.maxDate).toString() == "Invalid Date" || new Date(this.model.maxDate).toString() == "NaN") ? this._dateConvert(this.model.maxDate) : new Date(this.model.maxDate));
            }
            else if (option == "MM/dd/yyyy" && ($.type(this.currentDate()) != "date" || $.type(this.model.minDate) != "date" || $.type(this.model.maxDate) != "date")) {
                var curntDate = ej.parseDate(this.currentDate());
                minDate = ej.parseDate(this.model.minDate);
                maxDate = ej.parseDate(this.model.maxDate);
                (!ej.isNullOrUndefined(curntDate)) ? this.currentDate(curntDate) : this.currentDate(new Date());
                this.model.minDate = (!ej.isNullOrUndefined(minDate)) ? minDate : this.model.minDate;
                this.model.maxDate = (!ej.isNullOrUndefined(maxDate)) ? maxDate : this.model.maxDate;
            }
        },

        _datepattern: function () {
            return (this.model.dateFormat != "" && !ej.isNullOrUndefined(this.model.dateFormat)) ? this.model.dateFormat : this._pattern.d;
        },

        _businessHourScroller: function () {
            if (this.currentView() == "agenda") return false;
            var highScrol = 0;
            if (this.model.orientation == "vertical" && this.model.timeScale.enable && this.currentView() != "month" && !this._isCustomMonthView()) {
                highScrol = (this.element.find('.e-businesshighlightworkcells').length != 0 && this.model.workHours.highlight) ? this.element.find('.e-businesshighlightworkcells').first().parent().index() * this.element.find('.e-workcells').height() : 0;
                $('div#' + this._id + "_scroller").ejScroller({ scrollTop: highScrol });
                this.element.find('.e-scrolltimecells').css('top', -(this.element.find('.e-draggableworkarea').scrollTop()) + 'px');
            }
            else if (this.model.orientation == "horizontal" && this.model.timeScale.enable) {
                if (this.element.find('.e-businesshighlightworkcells').length != 0 && this.model.workHours.highlight && this.currentView() != "month") {
                    highScrol = this.element.find('.e-businesshighlightworkcells')[0].offsetLeft;
                    if (this.currentView() === "week" || this.currentView() === "workweek" || (this.currentView() === "customview" && this._renderDays <= 7)) {
                        var currentDateIndex = this.element.find('.e-activeview.e-horizontalheaderdiv').parent().index();
                        if (!ej.isNullOrUndefined(currentDateIndex) && currentDateIndex >= 0) {
                            this.currentView() == "customview" ? this.currentDate(new Date(this._dateRender[0])) : this.currentDate(new Date(this._dateRender[currentDateIndex]));
                            highScrol = this.element.find(".e-workcells")[currentDateIndex * ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot))].offsetLeft;
                            if ([0, 6].indexOf(new Date(this._dateRender[currentDateIndex]).getDay()) == -1 && this.currentView() != "customview") {
                                if (this.model.enableRTL)
                                    highScrol -= (this.model.workHours.start * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot) * this.element.find(".e-workcells").width());
                                else
                                    highScrol += (this.model.workHours.start * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot) * this.element.find(".e-workcells").width()) - this.element.find(".e-workcells").width();
                            }
                        }
                    }
                }
                else
                    highScrol = (this.element.find('.e-activeview.e-horizontalheaderdiv').parent().index() != -1) ? this.element.find(".e-workcells")[(this.element.find('.e-activeview.e-horizontalheaderdiv').parent().index()) * ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount)].offsetLeft : 0;
                var leftValue = (this.model.enableRTL) ? this.element.find(".e-workcells")[0].offsetLeft - highScrol : highScrol;
                this.element.find('div#' + this._id + "_scroller").ejScroller({ scrollLeft: leftValue });
            }
        },

        _minToHour: function (mins) {
            return { "h": parseInt(mins / 60), "m": mins % 60 };
        },

        _onclose: function (args) {
            this._appointmentAddWindow.find(".e-error").remove();
            this._appointmentAddWindow.find(".e-recurEditor").hide();
            this._appointmentAddWindow.find(".e-appwindow").css("margin-left", 700).show().animate({ "margin-left": 10 }, 300);
            this._clearFields();
            this._processFocus();
        },

        _printAppointment: function (appointment) {
            var $element = ej.buildTag("div"), templist;
            if (typeof appointment === 'object')
                templist = appointment;
            else {
                var query = new ej.Query().where("Guid", ej.FilterOperators.equal, appointment);
                list = new ej.DataManager(this._processed).executeLocal(query);
                if (list.length > 1) {
                    var applist = $.extend(true, [], list);
                    applist[0][this._appointmentSettings["endTime"]] = applist[applist.length - 1][this._appointmentSettings["endTime"]];
                    templist = applist[0];
                } else templist = list[0];
            }
            var appointmentTable = "<table align='center' style='margin-top:50px;margin-left:50;'>";
            var proxy = this;
            var exclude = ["Guid", "ParentId", "RecurrenceId", "RecurrenceExDate", "AppTaskId"];
            $.each(templist, function (i, val) {
                if ((exclude.indexOf(i) == -1) && !ej.isNullOrUndefined(val) && !ej.isNullOrUndefined(i) && i != "null") {
                    if (i == proxy._appointmentSettings.startTime || i == proxy._appointmentSettings.endTime)
                        val = val;
                    appointmentTable += "<tr style='height:30px'><td style='width:300px'><b>" + i + ":</b></td><td  style='width:600px'>" + val + "</td></tr>";
                }
            });
            appointmentTable += "</table>";
            var ownerTextName = "";
            if ((this._tempResource.length != 0)) {
                if (!ej.isNullOrUndefined(templist[this._tempResource[this._tempResource.length - 1].field])) {
                    var s = proxy._appointmentSettings.resourceFields.split(',');
                    $.each(this._tempResource[this._tempResource.length - 1].resourceSettings.dataSource, function (i, val) {
                        if (val.id == templist[s[s.length - 1].trim()])
                            ownerTextName = val.text;
                    });
                }
            }
            ownerTextName = (ownerTextName == "") ? "Unknown" : ownerTextName;
            var appointmentWindowData = "<font size='20' style='margin-top:50px;margin-left:50;font-family:Times New Roman'><b>" + ownerTextName + "</b></font></br><hr style='margin-left:50' size='10'>"
            var printElement = appointmentWindowData + appointmentTable;
            $element.append(printElement);
            ej.print($element);
            return false;
        },

        _recurrenceValidate: function (rule, recurId, sTime, eTime) {
            var recurEdit = this._appointmentAddWindow.find(".e-recurrenceeditor").data("ejRecurrenceEditor");
            (!ej.isNullOrUndefined(rule)) && recurEdit.recurrenceRuleSplit(rule, recurId);
            var appEnd, appStart;
            if (!ej.isNullOrUndefined(eTime))
                appEnd = eTime;
            else {
                var end = this._timeFormat(this._appointmentAddWindow.find("#" + this._id + "endtime").ejTimePicker("option", "value")).split(':');
                appEnd = new Date(this._appointmentAddWindow.find("#" + this._id + "enddate").ejDatePicker("option", "value").setHours(parseInt(end[0], 10), parseInt(end[1], 10)));
            }
            if (!ej.isNullOrUndefined(sTime))
                appStart = sTime;
            else {
                var start = this._timeFormat(this._appointmentAddWindow.find("#" + this._id + "starttime").ejTimePicker("option", "value")).split(':');
                appStart = new Date(this._appointmentAddWindow.find("#" + this._id + "startdate").ejDatePicker("option", "value").setHours(parseInt(start[0], 10), parseInt(start[1], 10)));
            }
            var day_start = !ej.isNullOrUndefined(sTime) ? sTime : this._appointmentAddWindow.find(".recurstartdate").ejDatePicker("option", "value");
            var _interval = recurEdit._rRule.interval;
            if (!ej.isNullOrUndefined(recurEdit._rRule.until)) {
                recurEndDate = new Date(recurEdit._rRule.until);
                recurEndDate.setDate(recurEndDate.getDate() + 1);
            } else if (!ej.isNullOrUndefined(recurEdit._rRule.count))
                switch (recurEdit._rRule.freq) {
                    case "DAILY":
                        recurEndDate = new Date(new Date(day_start).setDate(day_start.getDate() + recurEdit._rRule.count * (_interval)));
                        break;
                    case "WEEKLY":
                        var byDay = recurEdit._rRule.weekDays.split(",");
                        var dayCount = day_start.getDate() + (((recurEdit._rRule.count / byDay.length) * 7)) * (_interval);
                        recurEndDate = new Date(new Date(day_start).setDate(Math.round(dayCount) < dayCount ? dayCount + 1 : dayCount));
                        break;
                    case "MONTHLY":
                        recurEndDate = new Date(new Date(day_start).setMonth(day_start.getMonth() + recurEdit._rRule.count * (_interval)));
                        break;
                    case "YEARLY":
                        recurEndDate = new Date(new Date(day_start).setFullYear(day_start.getFullYear() + recurEdit._rRule.count * (_interval)));
                        break;
                }
            else {
                recurEndDate = new Date(new Date(this.currentDate()).setDate(day_start.getDate() + 42 * (_interval)));
            }
            if (((recurEndDate - day_start) / (1000 * 3600) / 24) < ((recurEdit._rRule.freq == "DAILY") ? 2 : (recurEdit._rRule.freq == "WEEKLY") ? 7 : 1)) {
                return true;
            } else {
                switch (recurEdit._rRule.freq) {
                    case "DAILY":
                        var count = recurEdit._rRule.interval;
                        if ((appEnd - appStart) / (1000 * 3600) > parseInt(count) * 24)
                            return false;
                        else
                            return true;
                        break;
                    case "WEEKLY":
                        if (rule.split(";")[1].split("=")[0] == "INTERVAL") {
                            var types = recurEdit._rRule.weekDays.split(",");
                            var obj = { "SU": 0, "MO": 1, "TU": 2, "WE": 3, "TH": 4, "FR": 5, "SA": 6 };
                            var temp = [], tempDiff = [];
                            for (var i = 0; i < types.length * (parseInt(recurEdit._rRule.interval) + 1) ; i++) {
                                temp[i] = (types.length > i) ? obj[types[i]] : temp[i - types.length] + (7 * parseInt(recurEdit._rRule.interval));
                            }
                            var tempvalue = temp.sort(function (a, b) { return a - b });
                            for (var i = 1; i < tempvalue.length; i++) {
                                tempDiff.push(tempvalue[i] - tempvalue[i - 1]);
                            }
                            if ((appEnd - appStart) / (1000 * 3600) > Math.min.apply(Math, tempDiff) * 24) {
                                return false;
                            } else
                                return true;
                        } else {
                            if ((appEnd - appStart) / (1000 * 3600) > 24)
                                return false;
                            else
                                return true;
                        }
                        break;
                    case "MONTHLY":
                        if (appEnd.getTime() > new Date(appStart).setMonth(appStart.getMonth() + parseInt(recurEdit._rRule.interval)))
                            return false;
                        else
                            return true;
                        break;
                    case "YEARLY":
                        if (appEnd.getTime() > new Date(appStart).setFullYear(appStart.getFullYear() + parseInt(recurEdit._rRule.interval)))
                            return false;
                        else
                            return true;
                        break;
                }
            }
            return true;
        },

        _saveAppointment: function () {
            var recurEdit = this._appointmentAddWindow.find(".e-recurrenceeditor").data("ejRecurrenceEditor");
            if (this._currentAction != "") {
                if (ej.isNullOrUndefined(this._appointmentAddWindow.find("#" + this._id + "startdate").ejDatePicker("option", "value")) || ej.isNullOrUndefined(this._appointmentAddWindow.find("#" + this._id + "enddate").ejDatePicker("option", "value")))
                    return false;
                start = this._timeFormat(this._appointmentAddWindow.find("#" + this._id + "starttime").ejTimePicker("option", "value")).split(":");
                end = this._timeFormat(this._appointmentAddWindow.find("#" + this._id + "endtime").ejTimePicker("option", "value")).split(":");
                startTime = new Date(this._appointmentAddWindow.find("#" + this._id + "startdate").ejDatePicker("option", "value").setHours(parseInt(start[0], 10), parseInt(start[1], 10)));
                endTime = new Date(this._appointmentAddWindow.find("#" + this._id + "enddate").ejDatePicker("option", "value").setHours(parseInt(end[0], 10), parseInt(end[1], 10)));
                if (startTime > endTime) {
                    this._alertWindow.find(".e-alerttext").html(this._getLocalizedLabels("StartEndError"));
                    this._alertWindow.ejDialog("open");
                    return false;
                }
            }
            if (this._appointmentAddWindow.find("#" + this._id + "recurrence").ejCheckBox("option", "checked") && recurEdit._recRule != "" && !ej.isNullOrUndefined(recurEdit._recRule) && this.model.enableRecurrenceValidation && this._currentAction == "add") {
                if (!this._recurrenceValidate(recurEdit._recRule)) {
                    this._alertCreateError();
                    return false;
                }
            }
            var appointments = this._sortAppById(this._processed), maxId, query, query1, appointId, appointGroupId, _editApp;
            if (this._cellClick && this.model.showQuickWindow) {
                if ($.isFunction($.validator) && !$("#" + this._id + "_AddForm").validate().form())
                    return false;
                var argsValue, obj = {};
                maxId = !ej.isNullOrUndefined(this._appMainId) ? this._appMainId + 1 : 1;
                if (this.model.enableLoadOnDemand) maxId = this._dataCount;
                obj[this._appointmentSettings["id"]] = obj["AppTaskId"] = obj["ParentId"] = maxId;
                obj[this._appointmentSettings["subject"]] = this._quickAppointWindow.find('.subject').val();
                obj[this._appointmentSettings["startTime"]] = new Date(this.cur_StartTime);
                obj[this._appointmentSettings["endTime"]] = new Date(this.cur_EndTime);
                if (this.currentView() === "month" || (new Date(this.cur_StartTime).getHours() == 0 && new Date(this.cur_EndTime).getHours() == 23 && new Date(this.cur_EndTime).getMinutes() == 59) || (this._isCustomMonthView()))
                    obj[this._appointmentSettings["allDay"]] = true;
                else
                    obj[this._appointmentSettings["allDay"]] = false;
                if (this.model.appointmentSettings.applyTimeOffset && !obj[this._appointmentSettings["allDay"]]) {
                    obj[this._appointmentSettings["startTimeZone"]] = this.model.timeZone == null ? ("UTC " + this._timezoneStringValue()) : this.model.timeZone;
                    obj[this._appointmentSettings["endTimeZone"]] = this.model.timeZone == null ? ("UTC " + this._timezoneStringValue()) : this.model.timeZone;
                }
                obj[this._appointmentSettings["recurrence"]] = false;
                if ((!ej.isNullOrUndefined(this.model.group) || (this._tempResource.length != 0) && ej.scheduleFeatures.resources) && ((this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0))
                    obj = this._getResourceFields(obj);
                ("null" in obj) && delete obj[null];
                var avail = this._checkAvailability(obj);
                var args = { appointment: obj };
                if (this._trigger("actionBegin", { data: args.appointment, requestType: "appointmentSave" }) || avail.length > 0) {
                    this._showBlockAlert && avail.length > 0 && this._alertBlockError();
                    this._quickAppointWindow.ejDialog("close");
                    return false;
                }
                if (this._trigger("beforeAppointmentCreate", args)) {
                    this._quickAppointWindow.ejDialog("close");
                    return false;
                }
                this._currentAction == ej.Schedule.Actions.Add;
                args.appointment.Guid = this._guidFormatGenerate();
                $.extend(true, argsValue = {}, args.appointment);
                var temp = this._timeZoneAppointments(argsValue, "");
                promise = this._dataManager.insert(temp, this.model.appointmentSettings.query._fromTable);
                new ej.DataManager(this._currentAppointmentData).update("AppTaskId", args.appointment);
                var proxy = this;
                if ($.isFunction(promise.promise) && this.dataSource() instanceof ej.DataManager) {
                    promise.done(function (e) {
                        proxy._processUrlBinding(e);
                        proxy._trigger("appointmentCreated", { appointment: args.appointment, requestType: "appointmentSaved" });
                        proxy._trigger("actionComplete", { data: args.appointment, requestType: "appointmentSave" });
                    });
                    promise.fail(function (e) {
                    });
                }
                else {
                    this._processed.push(args.appointment);
                    this._renderSingleApp();
                    this._appMainId = this._sortAppById(this._processed)[this._processed.length - 1]["AppTaskId"];
                    this._trigger("appointmentCreated", { appointment: args.appointment, requestType: "appointmentSaved" });
                    this._trigger("actionComplete", { data: args.appointment, requestType: "appointmentSave" });
                }
                this._cellClick = false;
                this._quickAppointWindow.ejDialog("close");
                this._scrollerPosition();
            }
            else {
                if ($.isFunction($.validator) && !$("#" + this._id + "_AddEditForm").validate().form())
                    return false;
                var formelement;
                obj = {};
                temp = {};
                var tempApp = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid));
                maxId = (this._currentAction == ej.Schedule.Actions.Add || this._currentAction == ej.Schedule.Actions.EditOccurrence) ? (this.model.enableLoadOnDemand ? this._dataCount + 1 : (!ej.isNullOrUndefined(this._appMainId) ? this._appMainId + 1 : parseInt(this._appId))) : tempApp[0]["AppTaskId"];
                formelement = $("#" + this._id + "AppointmentAddEditWindow").find("#" + this._id + "_AddEditForm").get(0); var autoVal = []; var categorizeVal = [];
                for (var index = 0; index < formelement.length; index++) {
                    var columnName = formelement[index].name, $element = $(formelement[index]);
                    if (columnName != undefined) {
                        var value = formelement[index].value;
                        if ((columnName != "" && obj[columnName] == null)) {
                            if (columnName == this._appointmentSettings["id"])
                                value = (value == "") ? parseInt(maxId) : parseInt(value);
                            if ($(formelement[index]).hasClass("e-datepicker"))
                                value = $element.ejDatePicker("option", "value");
                            else if ($(formelement[index]).hasClass("e-timepicker"))
                                value = $element.ejTimePicker("option", "value");
                            else if ($element.data("ejDropDownList"))
                                value = $element.ejDropDownList("model.value");
                            else if ($element.data("ejAutocomplete")) {
                                if ($(formelement[index])[0].id == this._id + "categorize")
                                    categorizeVal.push($element.data("ejAutocomplete").getSelectedItems());
                                else if ($(formelement[index])[0].id.indexOf(this._id + "_ownerfield_") == 0)
                                    autoVal.push($element.data("ejAutocomplete").getSelectedItems());
                            }
                            if (columnName != "StartDate" && columnName != "EndDate" && columnName != "StartTime" && columnName != "EndTime") {
                                if (formelement[index].type != "checkbox")
                                    obj[columnName] = value;
                                else
                                    obj[columnName] = $(formelement[index]).is(':checked');
                            }
                            else {
                                temp[columnName] = columnName == "StartDate" || columnName == "EndDate" ? new Date(value) : value;
                            }
                        }
                        else {
                            if ($element.data("ejAutocomplete")) {
                                if ($(formelement[index])[0].id == this._id + "categorize")
                                    categorizeVal.push($element.data("ejAutocomplete").getSelectedItems());
                                else if ($(formelement[index])[0].id.indexOf(this._id + "_ownerfield_") == 0)
                                    autoVal.push($element.data("ejAutocomplete").getSelectedItems());
                            }
                        }
                    }
                }
                if (!this.model.showTimeZoneFields) {
                    obj[this._appointmentSettings["startTimeZone"]] = this.model.timeZone == null ? ("UTC " + this._timezoneStringValue()) : this.model.timeZone;
                    obj[this._appointmentSettings["endTimeZone"]] = this.model.timeZone == null ? ("UTC " + this._timezoneStringValue()) : this.model.timeZone;
                }
                if (this.model.categorizeSettings.enable == true && this.model.categorizeSettings.allowMultiple != true) {
                    var dataSet = this.model.categorizeSettings;
                    categorizeDataIndex = this._findResourceIndex(dataSet.dataSource, this.model.categorizeSettings["text"], obj[this._appointmentSettings["categorize"]]);
                    categorizeVal[0].push(this.model.categorizeSettings.dataSource[categorizeDataIndex]);
                    categorizeVal[0].shift();
                }
                ("null" in obj) && delete obj[null];

                var starttime = this._timeFormat((this._startSlotChange || ej.isNullOrUndefined(this.cur_StartTime)) ? temp.StartTime : new Date(this.cur_StartTime).toTimeString()).split(":");
                var endtime = this._timeFormat((this._endSlotChange || ej.isNullOrUndefined(this.cur_EndTime)) ? temp.EndTime : new Date(this.cur_EndTime).toTimeString()).split(":");

                obj[this._appointmentSettings["startTime"]] = new Date(temp.StartDate.setHours(parseInt(starttime[0], 10), parseInt(starttime[1], 10)));
                obj[this._appointmentSettings["endTime"]] = new Date(temp.EndDate.setHours(parseInt(endtime[0], 10), parseInt(endtime[1], 10)));
                (obj[this._appointmentSettings["recurrence"]]) && (obj[this._appointmentSettings["recurrenceRule"]] = recurEdit._recRule);
                this._publicMethodSave = true;
                var value = this._timeZoneSavingAppoint(obj, temp);
                obj = value.obj;
                var currentAction = this._currentAction == "save" ? "edit" : this._currentAction;
                var query = new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid);
                var _editApps = new ej.DataManager(this._processed).executeLocal(query);
                if (obj[this._appointmentSettings["recurrenceRule"]] != "" && !ej.isNullOrUndefined(obj[this._appointmentSettings["recurrenceRule"]]) && this.model.enableRecurrenceValidation && (this._currentAction == "editSeries" || this._currentAction == "editOccurrence" || this._currentAction == "save")) {
                    if (this._currentAction == "editOccurrence") {
                        var _appList = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid))[0];
                        var Parid = _appList[this._appointmentSettings["recurrenceId"]] == null ? _appList["ParentId"] : _appList[this._appointmentSettings["recurrenceId"]];
                        var MapValue = _appList[this._appointmentSettings["recurrenceId"]] == null ? "ParentId" : this._appointmentSettings["recurrenceId"];
                        var recurColl = new ej.DataManager(this._processed).executeLocal(new ej.Query().where(MapValue, ej.FilterOperators.equal, Parid));
                        var twoDayApps = (((obj[this._appointmentSettings["endTime"]] - obj[this._appointmentSettings["startTime"]]) / 3600000) < 24 && obj[this._appointmentSettings["endTime"]].getDate() != obj[this._appointmentSettings["startTime"]].getDate());
                        if (twoDayApps) { recurColl = this._recurrenceAppSort(recurColl); }
                        var recurColl = this._appointmentRecurrenceSort(recurColl);
                        var index = this._recuCollectionIndex(recurColl, _appList);
                        var model = this._appointmentSettings;
                        if (((index == 0) ? (!ej.isNullOrUndefined(recurColl[index + 1]) ? !(new Date(new Date(recurColl[index + 1][model["startTime"]]).setHours(0, 0, 0, 0)).getTime() > new Date(new Date(obj[model["endTime"]]).setHours(0, 0, 0, 0)).getTime()) : false) : (index == recurColl.length - 1) ? !(new Date(new Date(recurColl[index - 1][model["endTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(obj[model["startTime"]]).setHours(0, 0, 0, 0)).getTime()) : !((new Date(new Date(recurColl[index - 1][model["endTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(obj[model["startTime"]]).setHours(0, 0, 0, 0)).getTime()) && (new Date(new Date(recurColl[index + 1][model["startTime"]]).setHours(0, 0, 0, 0)).getTime() > new Date(new Date(obj[model["endTime"]]).setHours(0, 0, 0, 0)).getTime())))) {
                            this._alertCreateError();
                            return false;
                        }
                    }
                    else {
                        if (!this._recurrenceValidate(obj[this._appointmentSettings["recurrenceRule"]], _editApps[0][this._appointmentSettings["recurrenceExDate"]])) {
                            this._alertCreateError();
                            return false;
                        }
                    }
                }
                if (this._currentAction == ej.Schedule.Actions.EditOccurrence) {
                    this._objDate = _editApps;
                    var MapValue = this._objDate[0][this._appointmentSettings["recurrenceId"]] == null ? "ParentId" : this._appointmentSettings["recurrenceId"];
                    var _editApp = this._deleteOcurrence(this._objDate[0][MapValue], new Date(_editApps[0][this._appointmentSettings["startTime"]]));
                    obj[this._appointmentSettings["recurrence"]] = 1;
                    obj[this._appointmentSettings["recurrenceRule"]] = _editApp[0][this._appointmentSettings["recurrenceRule"]] + ";RECUREDITID=" + _editApp[0]["ParentId"];
                    obj[this._appointmentSettings["recurrenceId"]] = _editApp[0][this._appointmentSettings["recurrenceId"]];
                    obj["Guid"] = this._appUid;
                    obj[this._appointmentSettings["recurrenceExDate"]] = _editApp[0][this._appointmentSettings["recurrenceExDate"]];
                }
                else if (this._currentAction == ej.Schedule.Actions.EditSeries) {
                    var Parid = _editApps[0][this._appointmentSettings["recurrenceId"]] == null ? _editApps[0]["ParentId"] : _editApps[0][this._appointmentSettings["recurrenceId"]];
                    var _editApp = new ej.DataManager(this._currentAppointmentData).executeLocal(new ej.Query().where(this._appointmentSettings["id"], ej.FilterOperators.equal, Parid));
                    obj["AppTaskId"] = _editApp[0]["AppTaskId"];
                    obj[this._appointmentSettings["id"]] = _editApp[0][this._appointmentSettings["id"]];
                    obj["Guid"] = this._appUid;
                    maxId = _editApp[0]["AppTaskId"];
                    obj[this._appointmentSettings["recurrenceId"]] = _editApp[0][this._appointmentSettings["recurrenceId"]];
                    obj[this._appointmentSettings["recurrenceExDate"]] = null;
                    obj[this._appointmentSettings["recurrenceRule"]] = (ej.isNullOrUndefined(recurEdit._recRule) || recurEdit._recRule == "") ? _editApp[0][this._appointmentSettings["recurrenceRule"]] : recurEdit._recRule;
                }
                if (this._currentAction != ej.Schedule.Actions.Add) {
                    obj["Guid"] = _editApps[0]["Guid"];
                    obj["AppTaskId"] = _editApps[0]["AppTaskId"];
                    obj[this._appointmentSettings["id"]] = (this._currentAction != ej.Schedule.Actions.EditSeries) ? _editApps[0][this._appointmentSettings["id"]] : obj[this._appointmentSettings["id"]];
                    var editedApp = $.extend(editedApp, obj);
					if (this._trigger("actionBegin", { data: obj, requestType: "appointmentEdit", currentAction: currentAction })) {
                        this._appointmentAddWindow.ejDialog("close");
                        return false;
                    }
                }
                else {
                    obj.Guid = ej.isNullOrUndefined(obj.Guid) ? this._guidFormatGenerate() : obj.Guid;
                    if (this._trigger("actionBegin", { data: obj, requestType: "appointmentSave" })) {
                        this._appointmentAddWindow.ejDialog("close");
                        return false;
                    }
                }
                var args = [], newAppointment;
                (this._startTimezone != this._endTimezone) ? obj[this._appointmentSettings["endTime"]] = value.cloneEnddiffer : "";
                parId = this._currentAction == ej.Schedule.Actions.Add ? maxId : _editApps[0]["ParentId"];
                if (!ej.isNullOrUndefined(this.model.categorizeSettings) && categorizeVal.length > 0 && !ej.isNullOrUndefined(categorizeVal[0][0]) || (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && ej.scheduleFeatures.resources)
                    args = this._getResCategorySaveData(categorizeVal, autoVal, obj, maxId, parId, starttime, endtime);
                else {
                    newAppointment = this._addAppData(obj, maxId, new Date(obj[this._appointmentSettings["startTime"]]), new Date(obj[this._appointmentSettings["endTime"]]), parId);
                    if (this._currentAction == ej.Schedule.Actions.EditOccurrence) newAppointment[this._appointmentSettings["id"]] = newAppointment.AppTaskId;
                    args.push(newAppointment);
                }
                if (this._currentAction == ej.Schedule.Actions.Add) {
                    if (this._trigger("beforeAppointmentCreate", { appointment: args, currentAction: currentAction })) {
                        this._appointmentAddWindow.ejDialog("close");
                        return false;
                    }
                }
				if (this._currentAction != ej.Schedule.Actions.Add) {
                    if(this._currentAction !=ej.Schedule.Actions.EditOccurrence){
                var _newApp = new ej.DataManager(args).executeLocal(new ej.Query().where(this._appointmentSettings["id"], ej.FilterOperators.notEqual, editedApp[this._appointmentSettings["id"]]));
                var _editedApp = new ej.DataManager(args).executeLocal(new ej.Query().where(this._appointmentSettings["id"], ej.FilterOperators.equal, editedApp[this._appointmentSettings["id"]]));
            }
            else{
                for(var i=0;i<args.length;i++){
                    var _editedApp = new ej.DataManager(args).executeLocal(new ej.Query().where("ParentId", ej.FilterOperators.equal, editedApp[this._appointmentSettings["id"]]));
                    var _newApp = new ej.DataManager(args).executeLocal(new ej.Query().where("ParentId", ej.FilterOperators.notEqual, editedApp[this._appointmentSettings["id"]]));
                }
            }
            _batch = ({ added: _newApp, changed: _editedApp});
            if (this._trigger("beforeAppointmentChange", { appointment: _batch, currentAction: currentAction })) {
                this._appointmentAddWindow.ejDialog("close");
                return false;
            }
        }
                var avail = this._checkAvailability(args[0]);
                if (args[this._appointmentSettings["startTime"]] > args[this._appointmentSettings["endTime"]] || avail.length > 0) {
                    this._showBlockAlert && this._alertBlockError();
                    return false;
                }
                if (this._currentAction == ej.Schedule.Actions.Add || this._currentAction == ej.Schedule.Actions.EditOccurrence) {
                    var proxy = this, promise, temp = [];
                    for (var a = 0; a < args.length; a++) {
                        var startTimezone1 = args[a][this._appointmentSettings["startTimeZone"]];
                        (startTimezone1 != this.model.timeZone) ? temp.push(this._timeZoneAppointments(args[a], "")) : temp.push(args[a]);
                        new ej.DataManager(this._currentAppointmentData).update("AppTaskId", args[a]);
                    }
                    var _editApp = [];
                    if (this._currentAction == ej.Schedule.Actions.EditOccurrence) {
                        var _App = new ej.DataManager(this._currentAppointmentData).executeLocal(new ej.Query().where(this._appointmentSettings["id"], ej.FilterOperators.equal, this._parentId));
                        new ej.DataManager(this._currentAppointmentData).update("AppTaskId", _App[0]);
                        _editApp.push(this._timeZoneAppointments(_App[0], ""));
                    }
                    else
                        _editApp = [];
                    if (this.dataSource() instanceof ej.DataManager)
                        promise = this._dataManager.saveChanges({ added: temp, changed: _editApp, deleted: [] }, this._appointmentSettings["id"], this.model.appointmentSettings.query._fromTable);
                    else
                        promise = this._dataManager.saveChanges({ added: temp, changed: _editApp, deleted: [] }, "AppTaskId");
                    var updateTempNew = [];
                    for (var c = 0; c < temp.length; c++) {
                        updateTempNew = (startTimezone1 != this.model.timeZone) ? this._timeZoneAppointments(temp[c], "reverse") : temp[c];
                        new ej.DataManager(this._currentAppointmentData).update("AppTaskId", updateTempNew);
                    }
                    var updateTempNew2 = [];
                    for (var c = 0; c < _editApp.length; c++) {
                        updateTempNew2 = (startTimezone1 != this.model.timeZone) ? this._timeZoneAppointments(_editApp[c], "reverse") : _editApp[c];
                        new ej.DataManager(this._currentAppointmentData).update("AppTaskId", updateTempNew2);
                    }
                    if ($.isFunction(promise.promise) && this.dataSource() instanceof ej.DataManager) {
                        promise.done(function (e) {
                            proxy._processUrlBinding(e);
                            proxy._trigger("appointmentCreated", { appointment: args[0], requestType: "appointmentSaved" });
                            proxy._trigger("actionComplete", { data: args, requestType: "appointmentSave" });
                        });
                        promise.fail(function (e) {
                        });
                    }
                    else {
                        this._dataProcessing(this._currentAppointmentData);
                        this._renderAppointmentAll();
                        this._trigger("appointmentCreated", { appointment: args[0], requestType: "appointmentSaved" });
                        this._trigger("actionComplete", { data: args, requestType: "appointmentSave" });
                    }
                }
                else if (this._currentAction == ej.Schedule.Actions.Save || this._currentAction == ej.Schedule.Actions.EditSeries) {
                    var newApp = [], editedApp = [], deleted = [];
                    for (var i = 0; i < args.length; i++) {
                        var GId = this._currentAction == ej.Schedule.Actions.Save ? args[i]["Guid"] : args[i][this._appointmentSettings["recurrenceId"]];
                        var idName = this._currentAction == ej.Schedule.Actions.Save ? "Guid" : this._appointmentSettings["recurrenceId"];
                        _editApp = new ej.DataManager(this._currentAppointmentData).executeLocal(new ej.Query().where(idName, ej.FilterOperators.equal, GId));
                        (!ej.isNullOrUndefined(_editApp) && _editApp.length > 0) ? editedApp.push(args[i]) : newApp.push(args[i]);
                    }
                    if (this._currentAction == ej.Schedule.Actions.EditSeries) {
                        var query, dele;
                        for (var i = 0; i < editedApp.length; i++) {
                            query = ej.Query().where(ej.Predicate(this._appointmentSettings["recurrenceRule"], ej.FilterOperators.contains, "RECUREDITID=" + args[i][this._appointmentSettings["recurrenceId"]], true));
                            dele = new ej.DataManager(this._currentAppointmentData).executeLocal(query);
                            deleted = deleted.concat(dele);
                            this._appointmentAddWindow.find('.recurbutton').click();
                            editedApp[i][this._appointmentSettings["recurrenceRule"]] = recurEdit._recRule;
                            editedApp[i][this._appointmentSettings["recurrenceExDate"]] = null;
                        }
                    }
                    var proxy = this, promise, newTemp = [], editTemp = [];
                    for (var a = 0; a < newApp.length; a++)
                        newTemp.push(this._timeZoneAppointments(newApp[a], ""));
                    for (var b = 0; b < editedApp.length; b++)
                        editTemp.push(this._timeZoneAppointments(editedApp[b], ""));

                    if (this.dataSource() instanceof ej.DataManager)
                        var promise = this._dataManager.saveChanges({ added: newTemp, changed: editTemp, deleted: deleted }, this._appointmentSettings["id"], this.model.appointmentSettings.query._fromTable);
                    else
                        var promise = this._dataManager.saveChanges({ added: newTemp, changed: editTemp, deleted: deleted }, "AppTaskId");

                    for (var c = 0; c < newTemp.length; c++)
                        new ej.DataManager(this._currentAppointmentData).update("AppTaskId", this._timeZoneAppointments(newTemp[c], "reverse"));
                    for (var d = 0; d < editTemp.length; d++)
                        new ej.DataManager(this._currentAppointmentData).update("AppTaskId", this._timeZoneAppointments(editTemp[d], "reverse"));

                    if (editedApp.length > 0) {
                        var proxy = this;
                        if ($.isFunction(promise.promise) && this.dataSource() instanceof ej.DataManager) {
                            promise.done(function (e) {
                                proxy._processUrlBinding(e);
                                proxy._trigger("appointmentChanged", { appointment: editedApp[0], requestType: "appointmentChanged", currentAction: currentAction });
                                proxy._trigger("actionComplete", { data: editedApp, requestType: "appointmentEdit", currentAction: currentAction });
                            });
                            promise.fail(function (e) {
                            });
                        }
                        else {
                            this._dataProcessing(this._currentAppointmentData);
                            this._renderAppointmentAll();
                            this._trigger("appointmentChanged", { appointment: editedApp[0], requestType: "appointmentChanged", currentAction: currentAction });
                            this._trigger("actionComplete", { data: editedApp, requestType: "appointmentEdit", currentAction: currentAction });
                        }
                    }
                }
                this._clearFields();
                this._appointmentAddWindow.ejDialog("close");
            }
            if (this.element.find('div.e-draggableworkarea tr').find('td').hasClass("e-selectedCell"))
                this._processFocus();
            if (this.model.orientation == "horizontal" && this.currentView() != "agenda" && (this.element.find(".e-draggableworkarea").offset().top > this.element.find(".e-workcellstab").offset().top)) {
                var restop = this.element.find(".e-draggableworkarea").offset().top - this.element.find(".e-workcellstab").offset().top;
                this.element.find(".e-horires").css("top", -restop + "px");
            }
            this._recRule = "";
        },

        _alertCreateError: function () {
            $("#" + this._id + "alertWindow").ejDialog("instance").option("title", this._getLocalizedLabels("RecurrenceAlert"));
            this._alertWindow.find(".e-alerttext").html(this._getLocalizedLabels("CreateError"));
            this._alertWindow.find(".e-alertOk").html(this._getLocalizedLabels("Ok"));
            this._alertWindow.ejDialog("open");
        },

        _timeZoneSavingAppoint: function (obj, temp) {
            if (this.model.appointmentSettings.applyTimeOffset) {
                this._startTimezone = obj[this._appointmentSettings["startTimeZone"]];
                this._endTimezone = obj[this._appointmentSettings["endTimeZone"]];
                if (!ej.isNullOrUndefined(this._startTimezone) && this._startTimezone != "") {
                    var utc = this._startTimezone.indexOf("UTC") != -1 ? this._startTimezone.split(" ")[1].split(":") : this._startTimezone.split(":");
                    var hour = parseInt(utc[0]);
                    var minutes = parseInt(utc[1]);
                    var calcualtevalue = (hour * 60) + minutes;
                    if (this.model.timeZone == null) {
                        var localtime = new Date().getTimezoneOffset() - this._timeZoneOffset;
                        var local = this._minToHour(localtime + calcualtevalue);
                    }
                    else {
                        var timezone = this.model.timeZone.indexOf("UTC") != -1 ? this.model.timeZone.split(" ")[1].split(":") : this.model.timeZone.split(":");
                        var local = this._minToHour(calcualtevalue);
                        local.h = local.h - (parseInt(timezone[0]));
                        local.m = local.m - (parseInt(timezone[1]));
                    }
                    new Date(obj[this._appointmentSettings["startTime"]].setHours(obj[this._appointmentSettings["startTime"]].getHours() - local.h, obj[this._appointmentSettings["startTime"]].getMinutes() - local.m));
                    if (this._startTimezone != this._endTimezone && this._publicMethodSave) {
                        this.startutcValue = null;
                        this.tempValue = null;
                        var utc1 = this._endTimezone.indexOf("UTC") != -1 ? this._endTimezone.split(" ")[1].split(":") : this._endTimezone.split(":");
                        var hour1 = parseInt(utc1[0]);
                        var minutes1 = parseInt(utc1[1]);
                        var calculateend = (hour1 * 60) + minutes1;
                        var newcalcualtevalue = calcualtevalue - calculateend;
                        var tempStart = new Date(temp.StartDate);
                        var CloneStart = new Date(obj[this._appointmentSettings["startTime"]]);
                        var cloneEnd = new Date(temp.EndDate);
                        duration = new Date(cloneEnd.setMinutes(cloneEnd.getMinutes() + newcalcualtevalue));
                        duration = new Date(duration.setMinutes(duration.getMinutes() - ((local.h * 60) + local.m)));
                        var cloneEnddiffer = duration;
                    }
                    else
                        new Date(obj[this._appointmentSettings["endTime"]].setHours(obj[this._appointmentSettings["endTime"]].getHours() - (local.h), obj[this._appointmentSettings["endTime"]].getMinutes() - local.m));
                }
                return { obj: obj, cloneEnddiffer: cloneEnddiffer };
            }
            return { obj: obj, cloneEnddiffer: cloneEnddiffer };
        },

        _renderAllDayAppointments: function () {
            var appHeight = 16;
            var appWidth = this.cellwidth - 20;
            var level = 1; this.level = 0;
            var renderDate = this._dateRender; this._renderedAllDay = [];
            allDayCount = [];
            this.element.find(".e-alldayappointment").remove();
            var appoints = this._appointmentSort(this._processed);
            if (!this.model.group) this.res1 = ["0"];
            if (this._resWorkWeek) {
                var count = 0, resDay = 0;
                for (var res = 0; res < this.res1.length; res++) {
                    if (!ej.isNullOrUndefined(this.res1[res][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]]))
                        count += this.res1[res][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]].length;
                    else
                        count += this.model.workWeek.length;
                    for (resDay; resDay < count; resDay++) {
                        for (var i = 0; i < appoints.length; i++) {
                            this._getMultipleResourceAlldayApp(renderDate, resDay, res, i);
                            !ej.isNullOrUndefined(this.allDayCount[0]) ? allDayCount.push(this.allDayCount[0]) : "";
                            this._app = this._filtered;
                        }
                    }
                }
            }
            else {
                for (var res = 0; res < this.res1.length; res++) {
                    for (var day = 0; day < renderDate.length; day++) {
                        for (var i = 0; i < appoints.length; i++) {
                            if ((this._tempResource.length != 0) && !ej.isNullOrUndefined(this.model.group) && ej.scheduleFeatures.resources) {
                                this._getMultipleResourceAlldayApp(renderDate, day, res, i);
                                !ej.isNullOrUndefined(this.allDayCount[0]) ? allDayCount.push(this.allDayCount[0]) : "";
                            }
                            else {
                                var isMultipleDay = this._findAllDayApp(appoints[i]);
                                if ((ej.format(new Date(renderDate[day]), this._pattern.d, this.model.locale) == ej.format(new Date(appoints[i][this._appointmentSettings["startTime"]]), this._pattern.d, this.model.locale)) && (appoints[i][this._appointmentSettings["allDay"]] === true || isMultipleDay)) {
                                    this._setAllDayPos(appoints[i], day, res);
                                    this._filtered.push(appoints[i]);
                                    allDayCount.push(i);
                                }
                            }
                            this._app = this._filtered;
                        }
                    }
                }
            }
            this.allDayLevel = allDayCount.length;
            if (allDayCount.length == 0 && this.level == 0) {
                if (!this._mediaQuery)
                    this.element.find(".e-alldaycells,.e-leftindent,.e-emptyalldaytd").css('height', "27px");
                else
                    this.element.find(".e-alldaycells,.e-leftindent,.e-emptyalldaytd").attr('style', "height:40px !important");
                this.element.find(".e-alldaycells").first().css(this.model.enableRTL ? 'border-right' : 'border-left', "none");
            }
            this._reRenderScroller();
        },

        _renderSingleApp: function () {
            this.element.find(".e-prevapp,.e-nextapp").css("display", "none");
            this._dataProcessing(this._currentAppointmentData);
            this._renderAppointmentAll();
        },

        _timeFormat: function (time) {
            var hours = Number(time.match(/^(\d+)/)[1]);
            var minutes = Number(time.match(/:(\d+)/)[1]);
            if (!ej.isNullOrUndefined(time.split(" ")[1])) {
                var AMPM = time.match(/\s(.*)$/)[1];
                if (!ej.isNullOrUndefined(this._culture.calendar.AM) && !ej.isNullOrUndefined(this._culture.calendar.PM)) {
                    if (AMPM == this._culture.calendar.PM[0] && hours < 12) hours = hours + 12;
                    if (AMPM == this._culture.calendar.AM[0] && hours == 12) hours = hours - 12;
                }
            }
            var sHours = hours.toString();
            var sMinutes = minutes.toString();
            if (hours < 10) sHours = "0" + sHours;
            if (minutes < 10) sMinutes = "0" + sMinutes;
            return sHours + ":" + sMinutes;
        },

        _processEscapeKey: function () {
            (!ej.isNullOrUndefined(this._quickAppointWindow)) && this._quickAppointWindow.find(".e-error").remove();
            this._processFocus();
            this.element.find("#" + this._id + "_navigator").ejDatePicker("hide");
        },

        _processFocus: function () {
            var selectApp = this.element.find("div.e-selectedAppointment");
            if (selectApp.length != 0)
                selectApp.focus();
            if (this.element.find("td.e-selectedCell").hasClass("e-workcells")) {
                var oRowCell = this.element.find('div.e-draggableworkarea tr');
                var rowcount = oRowCell.length - 1;
                var omincolIndex, omaxcolIndex, rowInx, maxrowInx, checkcolindex;
                var curr_View = this.currentView();
                var proxy = this;
                this.element.find('td.e-selectedCell').each(function (index, tdItem) {
                    var targetId = $(tdItem).index();
                    if (targetId != null && !isNaN(targetId)) {
                        if (omincolIndex == null) {
                            omincolIndex = targetId;
                            rowInx = $(tdItem).parent()[0].rowIndex;
                        }
                        else if (omincolIndex < targetId) {
                            omincolIndex = omincolIndex;
                        }
                        else {
                            if (omincolIndex != targetId) {
                                omincolIndex = targetId;
                                rowInx = $(tdItem).parent()[0].rowIndex;
                            }
                        }
                        if (omaxcolIndex == null) {
                            omaxcolIndex = targetId;
                            if (curr_View != "month") {
                                checkcolindex = parseInt(omaxcolIndex);
                                for (var i = 0; i <= rowcount; i++) {
                                    if ($(oRowCell[i].cells[checkcolindex]).hasClass("e-selectedCell")) {
                                        maxrowInx = i;

                                    }
                                }
                            }
                        }
                        else if (omaxcolIndex > targetId) {
                            omaxcolIndex = omaxcolIndex;
                        }
                        else {
                            if (omaxcolIndex != targetId) {
                                omaxcolIndex = targetId;
                                if (curr_View != "month") {
                                    checkcolindex = parseInt(omaxcolIndex);
                                    for (var i = 0; i <= rowcount; i++) {
                                        if ($(oRowCell[i].cells[checkcolindex]).hasClass("e-selectedCell")) {
                                            maxrowInx = i;

                                        }
                                    }
                                }
                            }
                        }
                    }
                });
                if (curr_View != "month") {
                    $(oRowCell[maxrowInx].cells[omaxcolIndex]).attr("tabIndex", 0).focus();
                }
                else {
                    var tdsel = oRowCell.find('td.e-selectedCell');
                    var tdlen = parseInt(tdsel.length) - 1;
                    $(tdsel[tdlen]).attr("tabIndex", 0).focus();
                }
            }
            else {
                this.element.focus();
                this.element.find("td.e-selectedCell").attr("tabIndex", 0).focus();
                this._appointmentAddWindow.ejDialog("isOpened") && this._appointmentAddWindow.find(".subject").focus();
            }
        },

        _clearFields: function () {
            this._appointmentAddWindow.find('.subject').val("");
            this._appointmentAddWindow.find('.id').val("");
            this._appointmentAddWindow.find('.e-description').val("").css("height", "");
            this._appointmentAddWindow.find("#" + this._id + "startdate").ejDatePicker("option", "value", new Date());
            this._appointmentAddWindow.find("#" + this._id + "enddate").ejDatePicker("option", "value", new Date());
            this._appointmentAddWindow.find('.startendtime').ejTimePicker({ enabled: true });
            this._appointmentAddWindow.find("#" + this._id + "starttime").ejTimePicker("option", "value", ej.format(new Date(), this._pattern.t, this.model.locale));
            this._appointmentAddWindow.find("#" + this._id + "endtime").ejTimePicker("option", "value", ej.format(new Date(), this._pattern.t, this.model.locale));
            this._appointmentAddWindow.find(".recurrence,.weekdays").ejCheckBox({ checked: false, enabled: true });
            this._appointmentAddWindow.find(".e-repeatlbl").removeClass('e-disable');
            this._appointmentAddWindow.find(".allday").ejCheckBox({ checked: false });
            this._appointmentAddWindow.find(".startutc,.endutc").ejDropDownList("clearText");
            this._appointmentAddWindow.find("." + this._id + "summary").css("display", "none");
            this._appointmentAddWindow.find(".e-recurFinalRule").html("");
            this._appointmentAddWindow.find(".e-recuredit").hide();
            this._appointmentAddWindow.find(".e-categorizevalue").ejAutocomplete("clearText");
        },

        _getNumericModel: function () {
            return numericModel = {
                width: "100px",
                minValue: 1,
                value: 1,
                cssClass: this.model.cssClass,
                enableRTL: this.model.enableRTL,
                localize: this.model.locale
            };
        },

        _deleteApp: function (id) {
            var level = this.level;
            var args, deleted, currentAction;
            var currentAction = this._actionType == ej.Schedule.Actions.DeleteSeries ? ej.Schedule.Actions.DeleteSeries : ej.Schedule.Actions.Delete;
            if (this._trigger("actionBegin", { id: id, requestType: "appointmentDelete", currentAction: currentAction }))
                return false;
            var removeItem = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, id));
            if (removeItem.length == 0) return false;
            args = { appointment: removeItem[0] };
            if (this._trigger("beforeAppointmentRemove", { appointment: removeItem[0], currentAction: currentAction }))
                return false;
            var parentObj = this._getAppointmentByParentId(id);
            if (removeItem[0][this._appointmentSettings["recurrence"]]) {
                var Parid = removeItem[0][this._appointmentSettings["recurrenceId"]] == null ? removeItem[0]["ParentId"] : removeItem[0][this._appointmentSettings["recurrenceId"]];
                var MapValue = removeItem[0][this._appointmentSettings["recurrenceId"]] == null ? "ParentId" : this._appointmentSettings["recurrenceId"];
                var query = new ej.Query().where(MapValue, ej.FilterOperators.equal, Parid);
                deleted = ej.DataManager(this._currentAppointmentData).executeLocal(query);
                if (this.dataSource() instanceof ej.DataManager)
                    var promise = this._dataManager.saveChanges({ added: [], changed: [], deleted: deleted }, this._appointmentSettings["id"], this.model.appointmentSettings.query._fromTable);
                else
                    var promise = this._dataManager.saveChanges({ added: [], changed: [], deleted: deleted }, "AppTaskId");
            }
            else {
                if (this.dataSource() instanceof ej.DataManager)
                    var promise = this._dataManager.remove("Id", parentObj[this._appointmentSettings["id"]], this.model.appointmentSettings.query._fromTable);
                else
                    var promise = this._dataManager.remove("AppTaskId", parentObj["AppTaskId"]);

            }
            this._refreshCellsHeight();
            var proxy = this;
            if (!ej.isNullOrUndefined(promise)) {
                if ($.isFunction(promise.promise)) {
                    promise.done(function (e) {
                        proxy._processUrlBinding(e);
                        proxy._trigger("appointmentRemoved", { appointment: parentObj, requestType: "appointmentDeleted", currentAction: currentAction });
                        proxy._trigger("actionComplete", { data: parentObj, requestType: "appointmentDelete", currentAction: currentAction });
                    });
                    promise.fail(function (e) {
                    });
                }
                else {
                    var isBigApp = ((new Date(new Date(parentObj[this._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(parentObj[this._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime()) && (((parentObj[this._appointmentSettings["endTime"]] - parentObj[this._appointmentSettings["startTime"]]) / 3600000) < 24) && (parentObj[this._appointmentSettings["allDay"]] !== true) && parentObj[this._appointmentSettings["recurrence"]] != 1);
                    if (this.currentView() != "agenda") {
                        if (this._currentAppointmentData.length > 0)
                            if (this.model.timeScale.enable) {
                                if ((parentObj[this._appointmentSettings["recurrence"]]) || isBigApp || (((new Date(parentObj[this._appointmentSettings["endTime"]]) - new Date(parentObj[this._appointmentSettings["startTime"]])) / 3600000) > 24)) {
                                    this._dataProcessing(this._currentAppointmentData);
                                    this._renderAppointmentAll();
                                }
                                else {
                                    new ej.DataManager(this._processed).remove("Guid", id);
                                    this.element.find('[guid=' + id + ']').remove();
                                    this.element.find("div[id=categorybar_" + id + "]").remove();
                                    (this.model.orientation == "vertical" && this.currentView() != "month" && !(this._isCustomMonthView()) && removeItem[0][this._appointmentSettings["allDay"]] == 1 ? this._reRenderAllDayAppointments() : this._renderAppointmentAll());
                                    level = this.allDayLevel;
                                }
                            }
                            else 
                                ((parentObj[this._appointmentSettings["recurrence"]]) || isBigApp || (((new Date(parentObj[this._appointmentSettings["endTime"]]) - new Date(parentObj[this._appointmentSettings["startTime"]])) / 3600000) > 24)) ? this._dataProcessing(this._currentAppointmentData) && this._renderAppointmentAll() : new ej.DataManager(this._processed).remove("Guid", id) && this._renderAppointmentAll();
                        else {
                            var parentQuery = new ej.Query().where("ParentId", ej.FilterOperators.equal, parentObj.ParentId);
                            var templist = new ej.DataManager(this._processed).executeLocal(parentQuery);
                            for (i = 0; i < templist.length; i++) {
                                this.element.find('[guid=' + templist[i]["Guid"] + ']').remove();
                                this.element.find("div[id=categorybar_" + templist[i]["Guid"] + "]").remove();
                                new ej.DataManager(this._processed).remove("Guid", templist[i]["Guid"]);
                            }
                        }
                    }
                    else {
                        new ej.DataManager(this._processed).remove("Guid", id);
                        var deleteApp = new ej.DataManager(this._processed).executeLocal(new ej.Query().where(ej.Predicate("ParentId", ej.FilterOperators.equal, removeItem[0].ParentId)));
                        new ej.DataManager(this._processed).saveChanges({ added: [], changed: [], deleted: deleteApp }, "Guid");
                        this._renderAgendaContent();
                    }
                    this._trigger("appointmentRemoved", { appointment: parentObj, requestType: "appointmentDeleted", currentAction: currentAction });
                    this._trigger("actionComplete", { data: parentObj, requestType: "appointmentDelete", currentAction: currentAction });
                    if (this.model.timeScale.enable && ((((args.appointment[this._appointmentSettings["endTime"]] - args.appointment[this._appointmentSettings["startTime"]]) / 3600000) > 24) || args.appointment[this._appointmentSettings["allDay"]]) && this.currentView() != "month" && !(this._isCustomMonthView()) && this.currentView() != "agenda" && (level == 0)) {
                        if (!this._mediaQuery)
                            this.element.find(".e-alldaycells,.e-leftindent,.e-emptyalldaytd").css('height', "27px");
                        else
                            this.element.find(".e-alldaycells,.e-leftindent,.e-emptyalldaytd").attr('style', "height:40px !important");
                        this.element.find(".e-alldaycells").first().css(this.model.enableRTL ? 'border-right' : 'border-left', "none");
                        this._reRenderScroller();
                    }
                }
            }
            var appCount = this._appointmentCount();
            if (appCount.length < 1) {
                if (this.model.showAppointmentNavigator)
                    this._nextPrevButton(appCount);
            }
            if (!this.model.showOverflowButton && this.model.orientation == "horizontal" && this.currentView() != "agenda") {
                var restop = this.element.find(".e-draggableworkarea").offset().top - this.element.find(".e-workcellstab").offset().top;
                this.element.find(".e-horires").css("top", -restop + "px");
            }
            this._appUid = null;
            this._actionType = "";
        },

        _appointmentCount: function () {
            var renderDate = this._dateRender;
            var appointments = this._processed;
            appointments = this._sortAppById(appointments);
            appointments = this._appointmentSort(appointments);
            var startDate = this.currentView() == "agenda" ? new Date(new Date(this.currentDate()).setHours(0, 0, 0)) : new Date(renderDate[0]);
            var endDate = this.currentView() == "agenda" ? new Date(new Date(new Date(this.currentDate()).setDate(startDate.getDate() + (this.model.agendaViewSettings.daysInAgenda > 0 ? this.model.agendaViewSettings.daysInAgenda - 1 : 0))).setHours(23, 59, 59)) : new Date(new Date(renderDate[renderDate.length - 1]).setHours(23, 59, 59));
            var predicate = ej.Predicate(this._appointmentSettings["startTime"], ej.FilterOperators.greaterThanOrEqual, startDate);
            predicate = predicate["and"](this._appointmentSettings["startTime"], ej.FilterOperators.lessThanOrEqual, endDate);
            var newAppList = new ej.DataManager(appointments).executeLocal(new ej.Query().where(predicate));
            return newAppList;
        },

        _reRenderAllDayAppointments: function () {
            this._alldayLevel = (this.level == 1) ? true : false;
            (this.model.showAllDayRow) && this.element.find("div.e-alldayappointment").remove() && this._renderAllDayAppointments();
            this._unWireResizeEvents();
            this._wireResizeEvents();
            this._dragdropAppointments();
        },

        _appointmentResizeStart: function (e) {
            this._tooltipEvents("disable");
            if (this.model.enableAppointmentResize) {
                this._appointdata = $(e.target).parent();
                var appUid = $(e.target).parent().attr("guid");
                var app = this._sortAppById(new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, appUid)));
                var data = { element: $(e.target).parent(), appointment: app[0] };
                if (this._trigger("actionBegin", { data: data, requestType: "appointmentResize" }))
                    return false;
                if (this._trigger("resizeStart", data))
                    return false;
                e.preventDefault();
                this.model.showQuickWindow && this._quickAppointWindow.ejDialog("close") && this._quickAppDetailsWindow.ejDialog("close");
                this.resizeStart = true;
                if ($(e.target).hasClass("e-lefthandle") || $(e.target).hasClass("e-righthandle")) {
                    this.resize = e.pageX;
                    this.appoint_width = $(e.target).parent().width();
                    this.appoint_left = parseInt($(e.target).parent()[0].style.left);
                    this._appointleft = parseInt($($(e.target).parent()[0]).offset().left);
                    this._appointright = parseInt($($(e.target).parent()[0]).css('right'));
                    if (this.model.orientation == "horizontal" && this.model.enableRTL)
                        $(e.target).hasClass("e-lefthandle") ? this._rightResizing = true : this._leftResizing = true;
                    else $(e.target).hasClass("e-lefthandle") ? this._leftResizing = true : this._rightResizing = true;
                }
                else if ($(e.target).hasClass("e-tophandle") || $(e.target).hasClass("e-bottomhandle")) {
                    this.resize = e.pageY;
                    this.appoint_height = $(e.target).parent().height();
                    this.appoint_top = parseInt($(e.target).parent()[0].style.top);
                    $(e.target).hasClass("e-tophandle") ? this._topResizing = true : this._bottomResizing = true;
                }
                this._curElmt = $(e.target).parent();
                this.element.find(".e-workcells").removeClass("e-selectedCell,e-mousehover");
                $(document).on(ej.eventType.mouseMove, $.proxy(this._appointmentResizing, this));
                $(document).on(ej.eventType.mouseUp, $.proxy(this._appointmentResizeStop, this));
                if ($(e.target).hasClass("e-rowcursor") || $(e.target).hasClass("e-columncursor"))
                    return false;
            }
        },

        _appointmentResizing: function (e) {
            var target = $(e.target);
            var data = { element: target.parent() };
            !ej.isNullOrUndefined(this.element.data("ejTooltip")) && this.element.ejTooltip('hide');
            var appointDiv = $(e.target).hasClass("e-appointment") || $(e.target).hasClass("e-monthappointment") || $(e.target).hasClass("e-alldayappointment") ? $(e.target) : $(e.target).parents(".e-appointment,.e-alldayappointment,.e-monthappointment");
            if ($(".e-scheduleAppGlassy").length == 0) {
                appointDiv.find('.e-schedulemouseclose').addClass('e-schedulemouseclosetemp').removeClass('e-schedulemouseclose e-icon');
                appointDiv.clone().prop('id', 'cloneElement').appendTo(appointDiv.parent());
                appointDiv.addClass("e-draggableAppointment e-scheduleAppGlassy").removeClass("e-schedulemouseclose").appendTo(appointDiv.parent());
                if (this._topResizing || this._bottomResizing) {
                    (!this.model.enableRTL) ? appointDiv.css("left", "0") : appointDiv.css("right", "0");
                    appointDiv.css("width", "98%");
                }
                else if (this._rightResizing || this._leftResizing) {
                    if (this.model.orientation != "horizontal") {
                        if (this.currentView() === "month" || this._isCustomMonthView()) {
                            this._appointmentResizeHeight(appointDiv, -(this.element.find(".e-monthheader").height()), "e-monthcells");
                        }
                        else {
                            if (!this.model.timeScale.enable) {
                                appointDiv.css("height", this.element.find(".e-monthcells").height() - 2);
                            }
                            else {
                                appointDiv.css("top", (this.element.find(".e-headerarearow").height() - this.element.find(".e-alldaycells").height() - 2));
                                appointDiv.css("height", this.element.find(".e-alldaycells").height() - 2);
                            }
                        }
                    }
                    else {
                        this._appointmentResizeHeight(appointDiv, 0, "e-workcells");
                    }
                }
            }
            appointDiv = $(e.target).hasClass("e-appointment") || $(e.target).hasClass("e-monthappointment") || $(e.target).hasClass("e-workcells") || $(e.target).hasClass("e-monthcells") || $(e.target).hasClass("e-alldayappointment") || $(e.target).hasClass("e-alldaycells") ? $(e.target) : $(e.target).parents(".e-appointment,.e-alldayappointment,.e-monthappointment");
            var cellHeight = this.element.find(".e-workcells").height();
            var appointcellCount = ($(appointDiv[0]).height() / cellHeight);
            if (this._topResizing) {
                if (appointcellCount > 0 && !$(e.target).hasClass("e-alldaycells") && !$(e.target).hasClass("e-apptext")) {
                    this._curElmt.height(this.appoint_height + this.resize - e.pageY + 3);
                    this._curElmt.css("top", this.appoint_top - (this.resize - e.pageY) - 3);
                }
            }
            else if (this._bottomResizing) {
                this._curElmt.height(this.appoint_height + (e.pageY - this.resize) + 2);
            }
            else if (this._rightResizing) {
                if (this.model.orientation == "horizontal" && this.model.enableRTL) {
                    this._curElmt.width(this.appoint_width + this.resize - e.pageX + 3);
                    this._curElmt.css("left", this.appoint_left - (this.resize - e.pageX) - 3);
                }
                else {
                    this._curElmt.width(this.appoint_width + (e.pageX - this.resize) + 2);
                    this._curElmt.css("right", this._appointright - (e.pageX - this.resize) - 2);
                }
            }
            else if (this._leftResizing) {
                if (this.model.orientation == "horizontal" && this.model.enableRTL) {
                    this._curElmt.width(this.appoint_width + (e.pageX - this.resize) + 2);
                    this._curElmt.css("right", this._appointright - (e.pageX - this.resize) - 2);
                }
                else {
                    this._curElmt.width(this.appoint_width + this.resize - e.pageX + 3);
                    this._curElmt.css("left", this.appoint_left - (this.resize - e.pageX) - 3);
                }
            }
            (this._curElmt.hasClass("e-appointment")) && this._appointmentCurrentTimeUpdate();
            this._trigger("resize", data);
        },

        _appointmentResizeHeight: function (appointDiv, topHeight, classname) {
            if (appointDiv.length > 0) {
                var target = (this.model.showOverflowButton) ? this.element.find("." + classname) : appointDiv.closest("td");
                appointDiv.css("top", topHeight).css("height", $(target).height() - 2);
            }
        },
        _appointmentCurrentTimeUpdate: function () {
            var appointment = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("AppTaskId", ej.FilterOperators.equal, parseInt(this._curElmt.attr("id").split("_")[1])))[0];
            var newStartTime = new Date(appointment[this._appointmentSettings["startTime"]]), newEndTime = new Date(appointment[this._appointmentSettings["endTime"]]);
            var cellHeight = this.element.find(".e-workcells").outerHeight();
            var timesoltduration = parseInt(this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount);
            if (this.currentView() !== "month" && !(this._isCustomMonthView())) {
                var dragArea = this.element.find(".e-draggableworkarea");
                var appTop = $(this._curElmt[0]).offset().top;
                var resizeMax = dragArea.height() + dragArea.scrollTop();
                var resizeElmntHeight = $(this._curElmt[0]).outerHeight();
                var topPos = appTop - dragArea.offset().top + dragArea.scrollTop();
                var resizeMaxTop = (topPos - (cellHeight / this.model.timeScale.minorSlotCount)) < resizeMax ? topPos : resizeMax - resizeElmntHeight;
            }
            if (this._topResizing) {
                var newTopTime = resizeMaxTop * this.model.timeScale.majorSlot / ((this.model.timeScale.minorSlotCount) * (cellHeight));
                newStartTime.setHours(parseInt(this.model.startHour) + parseInt(newTopTime / 60));
                newStartTime.setMinutes(parseInt(newTopTime % 60));
                (timesoltduration >= 10) ? newStartTime.setMinutes(Math.round(newStartTime.getMinutes() / 10.0) * 10) : newStartTime.setMinutes((newStartTime.getMinutes() / 10.0) * 10);
            }
            else if (this._bottomResizing) {
                var newcellCount = ($(this._curElmt[0]).outerHeight() / cellHeight);
                var newTopTime = (resizeMaxTop + (newcellCount * cellHeight)) * this.model.timeScale.majorSlot / ((this.model.timeScale.minorSlotCount) * (cellHeight));
                newEndTime.setHours(parseInt(this.model.startHour) + parseInt(newTopTime / 60));
                newEndTime.setMinutes(newTopTime % 60);
                (timesoltduration >= 10) ? newEndTime.setMinutes((Math.round(newEndTime.getMinutes() / 10.0) * 10)) : newEndTime.setMinutes(((newEndTime.getMinutes() / 10.0) * 10));
            }
            else if (this._rightResizing) {
                var diffWidth = (this.model.endHour - this.model.startHour === 24) ? this._curElmt.width() - this.appoint_width : this._curElmt.width();
                var diffMinutes = (diffWidth * 60) / ((this.element.find(".e-workcells").width() * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot)) + 1);

                if (this.model.endHour - this.model.startHour === 24) {
                    newEndTime.setHours(new Date(newEndTime).getHours() + parseInt(diffMinutes / 60));
                    newEndTime.setMinutes(new Date(newEndTime).getMinutes() + parseInt(diffMinutes % 60));
                }
                else {
                    newEndTime.setHours(new Date(newStartTime).getHours() + (parseInt(this._curElmt.width() / this.element.find(".e-workcells").width()) / (this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot))));
                    newEndTime.setMinutes(new Date(newStartTime).getMinutes() + parseInt(diffMinutes % 60));
                }
                (timesoltduration >= 10) ? newEndTime.setMinutes(Math.round(newEndTime.getMinutes() / 10.0) * 10) : newEndTime.setMinutes((newEndTime.getMinutes() / 10.0) * 10);
                if (newEndTime > new Date(new Date(this._dateRender[this._dateRender.length - 1]).setHours(23, 59, 59)))
                    newEndTime = new Date(new Date(this._dateRender[this._dateRender.length - 1]).setHours(23, 59, 59));
                if (this.model.endHour - this.model.startHour != 24) {
                    var indexCell = parseInt((this._curElmt.offset().left + (dragArea.scrollLeft() - dragArea.offset().left) + this._curElmt.width()) / this.element.find(".e-workcells").width()) - 1;
                    var hourValue = parseInt(indexCell / ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot)));
                    var newStart = new Date(newStartTime);
                    var variable = (new Date(newEndTime).getHours() >= (this.model.endHour)) ? (this._dateRender[hourValue] - new Date(new Date(new Date(newStartTime).setHours(0, 0, 0, 0))).getTime()) / (24 * 1000 * 60 * 60) : 0;
                    var missDate = this.currentView() == "workweek" ? ((variable - 1) * (this.model.endHour - this.model.startHour)) : 0;
                    var minStartTime = (new Date(newEndTime).getHours() >= (this.model.endHour)) ? new Date(new Date(newStart).setHours(new Date(newStartTime).getHours() + missDate + (parseInt($(this._curElmt).width() / this.element.find(".e-workcells").width()) / (this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot))) + (variable * ((24 - this.model.endHour) + this.model.startHour)))) : newEndTime;
                    if (new Date(newEndTime).getHours() >= (this.model.endHour)) minStartTime.setMinutes(new Date(newStartTime).getMinutes() + parseInt(diffMinutes % 60));
                    if (new Date(new Date(minStartTime).setHours(0, 0, 0, 0)).getTime() != new Date(this._dateRender[hourValue]).getTime())
                        minStartTime = new Date(this._dateRender[hourValue]).setHours(new Date(minStartTime).getHours(), new Date(minStartTime).getMinutes(), new Date(minStartTime).getSeconds(), new Date(minStartTime).getMilliseconds());
                    newEndTime = new Date(minStartTime);
                }
            }
            else if (this._leftResizing) {
                if ($(this.element.find('.e-workcells.e-childworkcell')[0]).offset().left < $(this._curElmt).offset().left)
                    var diffLeft = this._curElmt.offset().left - this._appointleft;
                else
                    var diffLeft = $(this.element.find('.e-workcells.e-childworkcell')[0]).offset().left - this._appointleft;
                if (this.model.enableRTL) {
                    var diff = this._curElmt.width() - this.appoint_width;
                    diffLeft = -diff;
                }
                var diffMinutes = (diffLeft * 60) / ((this.element.find(".e-workcells").width() * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot)) + 1);
                newStartTime.setHours(parseInt(new Date(newStartTime).getHours()) + parseInt(diffMinutes / 60));
                newStartTime.setMinutes(new Date(newStartTime).getMinutes() + parseInt(diffMinutes % 60));
                (timesoltduration >= 10) ? newStartTime.setMinutes(Math.round(newStartTime.getMinutes() / 10.0) * 10) : newStartTime.setMinutes((newStartTime.getMinutes() / 10.0) * 10);
                if (newStartTime < new Date(this._dateRender[0]))
                    newStartTime = new Date(this._dateRender[0]);
                //if (this.model.endHour - this.model.startHour !== 24) {
                //    var drag = (dragArea.scrollLeft() == 0) ? dragArea.offset().left : dragArea.scrollLeft() - dragArea.offset().left;
                //    var offsetLeft = (((this._curElmt.offset().left + drag)) / this.element.find(".e-workcells").width()) - 1;
                //    var cellIndex = parseInt(parseInt(offsetLeft) / ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot)));
                //    var maxNewStartTime = new Date(this._dateRender[cellIndex]);
                //    var indTime = (offsetLeft % ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot)));
                //    var hrsTime = ((this.model.startHour) + (indTime / (this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot)))) - 0.2;
                //    maxNewStartTime.setHours(hrsTime);
                //    maxNewStartTime.setMinutes((hrsTime * 60) % 60);
                //    newStartTime = new Date(maxNewStartTime);
                //}
            }
            if (this.model.enableRTL) {
                this._curElmt.find(".e-apptext").html(ej.format(new Date(newStartTime), (this._timeMode == "12") ? this._pattern.t : "HH:mm", this.model.locale)).css("font-size", "12px").css("white-space", "normal");
                this._curElmt.find(".e-apptime").html(ej.format(new Date(newEndTime), (this._timeMode == "12") ? this._pattern.t : "HH:mm", this.model.locale)).css("font-size", "12px").css("white-space", "normal").css("float", "left").css("margin-top", (this._curElmt.height() - (this._curElmt.find(".e-apptime").height() + this._curElmt.find(".e-apptext").height())) + "px");
            }
            else {
                this._curElmt.find(".e-apptext").html(ej.format(new Date(newStartTime), (this._timeMode == "12") ? this._pattern.t : "HH:mm", this.model.locale)).css("font-size", "12px").css("white-space", "normal");
                this._curElmt.find(".e-apptime").html(ej.format(new Date(newEndTime), (this._timeMode == "12") ? this._pattern.t : "HH:mm", this.model.locale)).css("font-size", "12px").css("white-space", "normal").css("float", "right").css("margin-top", (this._curElmt.height() - (this._curElmt.find(".e-apptime").height() + this._curElmt.find(".e-apptext").height())) + "px");
            }
            this._resizeNewStartTime = newStartTime;
            this._resizeNewEndTime = newEndTime;
        },

        _leftRightResize: function (document, appointDiv, index, noOfDays, Start, End) {
            var StartTime = this._leftResizing ? Start : End;
            var EndTime = this._leftResizing ? End : Start;

            if (this._resWorkWeek) {
                var eleOffset = appointDiv.offset();
                this.element.find(".e-appointment,.e-monthappointment").css("pointer-events", "none");
                var element = this._leftResizing ? document.elementFromPoint((eleOffset.left - $(document).scrollLeft()), (eleOffset.top - $(document).scrollTop())) : document.elementFromPoint((eleOffset.left + appointDiv.width() - $(document).scrollLeft()), (eleOffset.top - $(document).scrollTop()));
                var target = $.grep(element, function (value) { if ($(value).closest("td").hasClass("e-alldaycells")) { return value; } });
                var trgtIndex = $(target[0]).index();
                this.element.find(".e-appointment,.e-monthappointment").css("pointer-events", "visible");
            }
            else var trgtIndex = this._leftResizing ? index * noOfDays : (index == this.res1.length - 1) ? ((index + 1) * noOfDays - 1) : (index + 1) * noOfDays;

            if (!this.model.enableRTL) {
                if (this._rightResizing) {
                    var diffLeft = appointDiv[0].offsetLeft + $(appointDiv[0]).width();
                    if (!this._resWorkWeek) var diffDays = Math.floor(diffLeft / (this.element.find(".e-alldaycells").width())) - (index * noOfDays);
                    var cellsLeft = (index == this.res1.length - 1) ? $(this.element.find(".e-alldaycells")[trgtIndex]).offset().left + this.element.find(".e-alldaycells").width() : $(this.element.find(".e-alldaycells")[trgtIndex]).offset().left;
                }
                else {
                    var diffLeft = $(this.element.find(".e-alldaycells")[trgtIndex]).offset().left;
                    var cellsLeft = $(appointDiv[0]).offset().left;
                }
                if (cellsLeft >= diffLeft) {
                    newStartTime = new Date(this._dateRender[0]);
                    if (!this._resWorkWeek && this._leftResizing) {
                        var diffLeft = $(appointDiv[0]).offset().left - $(this.element.find(".e-alldaycells")[index * noOfDays]).offset().left;
                        var diffDays = Math.round(diffLeft / (this.element.find(".e-alldaycells").width() + 1));
                    }
                    if (this.model.workWeek.length > 0) {
                        if (this._resWorkWeek) {
                            newStartTime = new Date(this._dateRender[trgtIndex]);
                            newStartTime.setHours(new Date(StartTime).getHours(), new Date(StartTime).getMinutes(), new Date(StartTime).getSeconds());
                        }
                        else {
                            newStartTime = new Date(this._dateRender[0]);
                            newStartTime.setDate(new Date(this._dateRender[diffDays]).getDate());
                            newStartTime.setMonth(new Date(this._dateRender[diffDays]).getMonth());
                            newStartTime.setHours(new Date(StartTime).getHours(), new Date(StartTime).getMinutes(), new Date(StartTime).getSeconds());
                        }
                    }
                    else {
                        newStartTime = new Date(this._dateRender[0]);
                        newStartTime.setDate(new Date(newStartTime).getDate() + ((diffDays >= noOfDays) ? diffDays - 1 : diffDays));
                        newStartTime.setHours(new Date(StartTime).getHours(), new Date(StartTime).getMinutes(), new Date(StartTime).getSeconds());
                    }
                }
                else {
                    (this._rightResizing) ? this._rightResizing = false : this._leftResizing = false;
                    (!this.model.enableRTL) ? newStartTime = Start : newEndTime = End;
                }
            }
            else {
                if (this._resWorkWeek) {
                    var resDates = $.extend(true, [], this._dateRender);
                    resDates.reverse();
                    var eleOffset = appointDiv.offset();
                    this.element.find(".e-appointment,.e-monthappointment").css("pointer-events", "none");
                    var element = this._rightResizing ? document.elementFromPoint((eleOffset.left - $(document).scrollLeft()), (eleOffset.top - $(document).scrollTop())) : document.elementFromPoint((eleOffset.left + appointDiv.width() - $(document).scrollLeft()), (eleOffset.top - $(document).scrollTop()));
                    var target = $.grep(element, function (value) { if ($(value).closest("td").hasClass("e-alldaycells")) { return value; } });
                    var trgtIndex = (this.element.find(".e-alldaycells").length - 1) - $(target[0]).index();
                    this.element.find(".e-appointment,.e-monthappointment").css("pointer-events", "visible");
                    newEndTime = new Date(resDates[trgtIndex]);
                    newEndTime.setHours(new Date(EndTime).getHours(), new Date(EndTime).getMinutes(), new Date(EndTime).getSeconds());
                }
                else {
                    var diffWidth = $(appointDiv[0]).width() - this.appoint_width;
                    var diffDays = Math.round($(appointDiv[0]).width() / this.element.find(".e-alldaycells").width()) - 1;
                    newEndTime = this._rightResizing ? new Date(End) : new Date(StartTime);
                    this._rightResizing ? newEndTime.setDate(new Date(newEndTime).getDate() - diffDays) : newEndTime.setDate(new Date(newEndTime).getDate() + diffDays);
                    newEndTime.setHours(new Date(EndTime).getHours(), new Date(EndTime).getMinutes(), new Date(EndTime).getSeconds());
                    if (newEndTime > new Date(new Date(this._dateRender[this._dateRender.length - 1]).setHours(new Date(EndTime).getHours(), new Date(EndTime).getMinutes(), new Date(EndTime).getSeconds()))) {
                        newEndTime = new Date(new Date(this._dateRender[this._dateRender.length - 1]).setHours(new Date(EndTime).getHours(), new Date(EndTime).getMinutes(), new Date(EndTime).getSeconds()));
                    }
                    else if (newEndTime < new Date(new Date(this._dateRender[this._dateRender.length - 1]).setHours(new Date(EndTime).getHours(), new Date(EndTime).getMinutes(), new Date(EndTime).getSeconds()))) {
                        newEndTime = new Date(new Date(this._dateRender[0]).setHours(new Date(EndTime).getHours(), new Date(EndTime).getMinutes(), new Date(EndTime).getSeconds()));
                    }
                }
            }
            return (!this.model.enableRTL) ? newStartTime : newEndTime;
        },
        _appointmentResizeStop: function (e) {
            this._tooltipEvents("enable");
            try {
                var dragArea = this.element.find(".e-draggableworkarea");
                this.resizeStart = false;
                $(document).off(ej.eventType.mouseMove, $.proxy(this._appointmentResizing, this));
                $(document).off(ej.eventType.mouseUp, $.proxy(this._appointmentResizeStop, this));
                var model = this._appointmentSettings;
                var workcell = this.element.find(".e-workcellstab");
                var scheduleHeight = workcell.find("tr").length * this.element.find(".e-workcells").height();
                var appointDiv = $(e.target).hasClass("e-appointment") || $(e.target).hasClass("e-monthappointment") || $(e.target).hasClass("e-alldayappointment") ? $(e.target) : $(e.target).parents(".e-appointment,.e-alldayappointment,.e-monthappointment");
                (appointDiv.length == 0) && (appointDiv = this._appointdata);
                if (appointDiv.attr("guid") != this._appointdata.attr('guid')) { appointDiv = this._appointdata; }
                this._appUid = appointDiv.attr('guid');
                var tempApp = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid));
                var twoDayApps = tempApp.length > 1 ? true : false;
                var appoint = ((tempApp[0][model["recurrence"]] && tempApp[0][model["recurrenceRule"]].toString().indexOf("RECUREDITID") == -1)) ? this._getAppointmentByParentId(this._appUid) : (tempApp[0][model["recurrence"]] ? tempApp[0] : this._getAppointmentByParentId(this._appUid));
                var noOfDays = this.currentView() === "week" || this.currentView() === "month" || this._isCustomMonthView() ? 7 : this.currentView() === "workweek" && this.model.workWeek.length > 0 ? this.model.workWeek.length : 1;
                noOfDays = (this.currentView() == "customview" && this._renderDays <= 7) ? this._renderDays : noOfDays;
                if (this._resWorkWeek) {
                    var resDates;
                    var resObj = new ej.DataManager(this.res1).executeLocal(new ej.Query().where(this._tempResource[this._tempResource.length - 1].resourceSettings["id"], ej.FilterOperators.equal, tempApp[0][this._appointmentSettings.resourceFields.split(",")[this._appointmentSettings.resourceFields.split(",").length - 1]]));
                    if (!ej.isNullOrUndefined(resObj[0][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]]))
                        resDates = resObj[0][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]];
                    else
                        resDates = this.model.workWeek;
                    noOfDays = resDates.length;
                }
                if (appoint != null || appoint !== undefined) {
                    var bigApps = appoint[this._appointmentSettings["startTime"]].getDate() < new Date(appoint[this._appointmentSettings["endTime"]]).getDate() ? true : false;
                    var newStartTime = new Date(appoint[this._appointmentSettings["startTime"]]);
                    var newEndTime = new Date(appoint[this._appointmentSettings["endTime"]]);
                    if (twoDayApps && tempApp[0][model["recurrence"]]) {
                        var splitObj = this._sortAppById(new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, tempApp[0].Guid)));
                        newStartTime = new Date(splitObj[0][this._appointmentSettings["startTime"]]);
                        newEndTime = new Date(splitObj[1][this._appointmentSettings["endTime"]]);
                    }
                    else if (tempApp[0][model["recurrence"]]) {
                        newStartTime = new Date(tempApp[0][this._appointmentSettings["startTime"]]);
                        newEndTime = new Date(tempApp[0][this._appointmentSettings["endTime"]]);
                    }
                    this.element.find('[guid=' + tempApp[0]["Guid"] + ']').removeClass("e-selectedAppointment");
                    var StartTime = appoint[this._appointmentSettings["startTime"]];
                    var EndTime = appoint[this._appointmentSettings["endTime"]];
                    var resizeElmntHeight = $(appointDiv[0]).outerHeight();

                    var cellHeight = this.element.find(".e-workcells").outerHeight();
                    if (this.currentView() !== "month" && !(this._isCustomMonthView())) {
                        var appTop = $(appointDiv[0]).offset().top;
                        var resizeMax = dragArea.height() + dragArea.scrollTop();
                        var topPos = appTop - dragArea.offset().top + dragArea.scrollTop();
                        var resizeMaxTop = (topPos - (cellHeight / this.model.timeScale.minorSlotCount)) < resizeMax ? topPos : resizeMax - resizeElmntHeight;
                    }
                    resizeMaxTop = ej.isNullOrUndefined(resizeMaxTop) ? 0 : resizeMaxTop;
                    var cellCount = ($(appointDiv[0]).outerHeight() / cellHeight);
                    var cellDiff = (resizeMaxTop + (cellCount * cellHeight)) * this.model.timeScale.majorSlot / ((this.model.timeScale.minorSlotCount) * (cellHeight)) / 30;
                    var difHeight = resizeElmntHeight - parseInt(cellDiff);
                    var apptotheight = resizeMaxTop + difHeight;
                    if (this._topResizing) {
                        var splitTopResize = this._topResizing;
                        if (resizeMaxTop > 0) {
                            newStartTime = this._resizeNewStartTime;
                        }
                        else {
                            newStartTime.setHours(0, 0, 0);
                        }
                        this._topResizing = false;
                    }
                    else if (this._bottomResizing) {
                        var splitBottomResize = this._bottomResizing;
                        if (resizeMaxTop >= 0 && apptotheight < scheduleHeight) {
                            newEndTime = this._resizeNewEndTime;
                        }
                        else {
                            newEndTime.setHours(23, 59, 59);
                        }
                        this._bottomResizing = false;
                    }
                    else if (this._leftResizing) {
                        if (this.model.orientation == "vertical") {
                            var index = (!this.model.group) ? 0 : this._findResourceIndex(this.res1, this._tempResource[this._tempResource.length - 1].resourceSettings["id"], appoint[this._appointmentSettings.resourceFields.split(',')[this._tempResource.length - 1].trim()]);
                            if (this.currentView() !== "month" && !(this._isCustomMonthView()) && this.model.timeScale.enable) {
                                !this.model.enableRTL ? newStartTime = this._leftRightResize(document, appointDiv, index, noOfDays, StartTime, EndTime) : newEndTime = this._leftRightResize(document, appointDiv, index, noOfDays, StartTime, EndTime);
                            }
                            else {
                                var cellsLeft = !this.model.enableRTL ? ($(this.element.find(".e-monthcells")[index * noOfDays]).offset().left) : $(this.element.find(".e-monthcells")[(index + 1) * noOfDays - 1]).offset().left;
                                if ($(appointDiv[0]).offset().left > cellsLeft) {
                                    if (!this.model.enableRTL) {
                                        this._resize = true;
                                        newStartTime = new Date(this._firstweekdate(new Date(tempApp[0][model["startTime"]])));
                                        this._resize = false;
                                        var diffDays = Math.round(($(appointDiv[0]).offset().left - $(this.element.find(".e-monthcells")[index * noOfDays]).offset().left) / this.element.find(".e-monthcells").width());
                                        newStartTime.setDate(newStartTime.getDate() + diffDays);
                                        newStartTime.setHours(new Date(StartTime).getHours(), new Date(StartTime).getMinutes());
                                    }
                                    else {
                                        var diffDays = Math.round(($(appointDiv[0]).width() - this.appoint_width) / (this.element.find(".e-monthcells").width()));
                                        newEndTime.setDate(new Date(newEndTime).getDate() + diffDays);
                                        newEndTime.setHours(new Date(EndTime).getHours(), new Date(EndTime).getMinutes());
                                    }
                                }
                            }
                        }
                        else {
                            if ($(this.element.find('.e-workcells.e-childworkcell')[0]).offset().left < $(appointDiv[0]).offset().left)
                                var diffLeft = $(appointDiv[0]).offset().left - this._appointleft;
                            else
                                var diffLeft = $(this.element.find('.e-workcells.e-childworkcell')[0]).offset().left - this._appointleft;
                            if (this.model.enableRTL) {
                                var diff = $(appointDiv[0]).width() - this.appoint_width;
                                diffLeft = -diff;
                            }
                            if (this.currentView() == "month" || (this._isCustomMonthView()) || !this.model.timeScale.enable) {
                                var diffDays = Math.round(diffLeft / (this.element.find(".e-workcells").width() + 1));
                                newStartTime.setDate(new Date(newStartTime).getDate() + diffDays);
                            }
                            else {
                                newStartTime = this._resizeNewStartTime;
                            }
                        }
                        this._leftResizing = false;
                    }
                    else if (this._rightResizing) {
                        if (this.model.orientation == "vertical") {
                            var index = (!this.model.group) ? 0 : this._findResourceIndex(this.res1, this._tempResource[this._tempResource.length - 1].resourceSettings["id"], appoint[this._appointmentSettings.resourceFields.split(',')[this._tempResource.length - 1].trim()]);
                            if (this.currentView() !== "month" && !(this._isCustomMonthView()) && this.model.timeScale.enable) {
                                (!this.model.enableRTL) ? newEndTime = this._leftRightResize(document, appointDiv, index, noOfDays, StartTime, EndTime) : newStartTime = this._leftRightResize(document, appointDiv, index, noOfDays, StartTime, EndTime);
                            }
                            else {
                                var cellwidth = this.element.find(".e-monthcells").width();
                                var cellsLeft = this.model.enableRTL ? ($(this.element.find(".e-monthcells")[(index) * noOfDays]).offset().left + cellwidth) : (index == this.res1.length - 1) ? $(this.element.find(".e-monthcells")[(index + 1) * noOfDays - 1]).offset().left + cellwidth : $(this.element.find(".e-monthcells")[(index + 1) * noOfDays]).offset().left;
                                if (cellsLeft >= ($(appointDiv[0]).offset().left + $(appointDiv[0]).width())) {
                                    var diffDays = Math.round(($(appointDiv[0]).width() - this.appoint_width) / cellwidth);
                                    if (!this.model.enableRTL) {
                                        newEndTime.setDate(new Date(newEndTime).getDate() + diffDays);
                                        newEndTime.setHours(new Date(EndTime).getHours(), new Date(EndTime).getMinutes());
                                    }
                                    else {
                                        newStartTime.setDate(new Date(newStartTime).getDate() - diffDays);
                                        newStartTime.setHours(new Date(StartTime).getHours(), new Date(StartTime).getMinutes());
                                    }
                                }
                            }
                        }
                        else {
                            var diffWidth = (this.model.endHour - this.model.startHour === 24) ? $(appointDiv[0]).width() - this.appoint_width : $(appointDiv[0]).width();
                            if (this.currentView() == "month" || (this._isCustomMonthView()) || !this.model.timeScale.enable) {
                                var diffWidth = $(appointDiv[0]).width() - this.appoint_width;
                                var diffDays = Math.round(diffWidth / (this.element.find(".e-workcells").width() + 1));
                                newEndTime.setDate(new Date(newEndTime).getDate() + diffDays);
                            }
                            else {
                                newEndTime = this._resizeNewEndTime;
                            }
                        }
                        this._rightResizing = false;
                    }
                    if ((newStartTime >= newEndTime) || $(appointDiv[0]).width() == 0) {
                        newStartTime = tempApp[0][model["startTime"]];
                        newEndTime = tempApp[0][model["endTime"]];
                    }
                    if (newStartTime.getTime() == tempApp[0][model["startTime"]].getTime() && newEndTime.getTime() == tempApp[0][model["endTime"]].getTime()) {
                        if (this.element.find("#cloneElement").length > 0) {
                            var height = (this.element.find(".e-monthappointment").length > 1) ? this.element.find("#cloneElement").outerHeight() : this.element.find("#cloneElement").height();
                            if (this.model.enableRTL)
                                this._curElmt.removeClass("e-draggableAppointment e-scheduleAppGlassy").css({ 'width': this.element.find("#cloneElement").width(), 'height': height, 'top': this.element.find("#cloneElement").css('top'), 'right': this.element.find("#cloneElement").css('right') });
                            else
                                this._curElmt.removeClass("e-draggableAppointment e-scheduleAppGlassy").css({ 'width': this.element.find("#cloneElement").width(), 'height': height, 'top': this.element.find("#cloneElement").css('top'), 'left': this.element.find("#cloneElement").css('left') });
                            this._curElmt.find(".e-apptext").replaceWith(this.element.find("#cloneElement").find(".e-apptext")).prop("style", false);
                            this._curElmt.find(".e-apptime").html(this.element.find("#cloneElement").find(".e-apptime").text()).prop("style", false);
                            this._curElmt.css("width", this.element.find("#cloneElement")[0].style.width);
                            if (this._curElmt.hasClass("e-alldayappointment")) this._curElmt.height(19);
                            this.element.find("#cloneElement").remove();
                            $(appointDiv[0]).find('.e-schedulemouseclosetemp').addClass('e-schedulemouseclose e-icon').removeClass('e-schedulemouseclosetemp');
                        }
                        return false;
                    }
                    (this.element.find("#cloneElement").length > 0) && this.element.find('#cloneElement').remove();
                    var reverse = true;
                    this._refreshCellsHeight();
                    var currentMonth = new Date(new Date(this.currentDate()).getFullYear(), new Date(this.currentDate()).getMonth(), 1);
                    var maxdate = new Date(new Date(this.model.maxDate).getTime()).setHours(23, 59, 59);
                    var otherMonth = (!this.model.showNextPrevMonth && this.model.orientation == "vertical" && this.currentView() == "month") ? currentMonth.getTime() != new Date(newStartTime.getFullYear(), newStartTime.getMonth(), 1).getTime() || currentMonth.getTime() != new Date(newEndTime.getFullYear(), newEndTime.getMonth(), 1).getTime() : false;
                    if (!otherMonth && (newEndTime >= new Date(this.model.minDate)) && (newEndTime <= maxdate)) {
                        if (appoint[model["recurrence"]] == 1 && appoint[model["recurrenceRule"]].toString().indexOf("RECUREDITID") == -1) {
                            var _newAddList = {};
                            var _appList = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid))[0];
                            var Parid = _appList[this._appointmentSettings["recurrenceId"]] == null ? _appList["ParentId"] : _appList[this._appointmentSettings["recurrenceId"]];
                            var MapValue = _appList[this._appointmentSettings["recurrenceId"]] == null ? "ParentId" : this._appointmentSettings["recurrenceId"];
                            var recurColl = new ej.DataManager(this._processed).executeLocal(new ej.Query().where(MapValue, ej.FilterOperators.equal, Parid));
                            if (twoDayApps) { recurColl = this._recurrenceAppSort(recurColl); }
                            var recurColl = this._appointmentRecurrenceSort(recurColl);
                            $.extend(_newAddList, tempApp[0]);
                            var index;
                            (this.model.enableRecurrenceValidation && _newAddList[model["recurrence"]]) && (index = this._recuCollectionIndex(recurColl, _appList));
                            if (this.model.enableRecurrenceValidation && _newAddList[model["recurrence"]] && ((index == 0) ? (!ej.isNullOrUndefined(recurColl[index + 1]) ? !(new Date(new Date(recurColl[index + 1][model["startTime"]]).setHours(0, 0, 0, 0)).getTime() > new Date(new Date(newEndTime).setHours(0, 0, 0, 0)).getTime()) : false) : (index == recurColl.length - 1) ? !(new Date(new Date(recurColl[index - 1][model["endTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(newStartTime).setHours(0, 0, 0, 0)).getTime()) : !((new Date(new Date(recurColl[index - 1][model["endTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(newStartTime).setHours(0, 0, 0, 0)).getTime()) && (new Date(new Date(recurColl[index + 1][model["startTime"]]).setHours(0, 0, 0, 0)).getTime() > new Date(new Date(newEndTime).setHours(0, 0, 0, 0)).getTime())))) {
                                _newAddList[model["startTime"]] = _appList[model["startTime"]];
                                _newAddList[model["endTime"]] = _appList[model["endTime"]];
                                this._alertDragResizeError();
                                reverse = true;
                            }
                            else {
                                prvStartTime = _newAddList[model["startTime"]];
                                prvEndTime = _newAddList[model["endTime"]];
                                _newAddList[model["startTime"]] = new Date(newStartTime);
                                _newAddList[model["endTime"]] = new Date(newEndTime);
                                var avail = this._checkAvailability(_newAddList);
                                if (this._trigger("resizeStop", { appointment: _newAddList, target: e }) || avail.length > 0) {
                                    this._showBlockAlert && (avail.length > 0) && this._alertBlockError();
                                    _newAddList[model["startTime"]] = new Date(prvStartTime);
                                    _newAddList[model["endTime"]] = new Date(prvEndTime);
                                    reverse = true;
                                }
                                else {
                                    var maxId = this.model.enableLoadOnDemand ? this._dataCount : this._appMainId + 1;
                                    var Parid = _newAddList[model["recurrenceId"]] == null ? _newAddList["ParentId"] : _newAddList[model["recurrenceId"]];
                                    this._deleteOcurrence(Parid, new Date(_appList[model["startTime"]]));
                                    _newAddList[model["recurrenceRule"]] = tempApp[0][model["recurrenceRule"]] + ";RECUREDITID=" + _newAddList["ParentId"];
                                    _newAddList[model["id"]] = _newAddList["AppTaskId"] = maxId;
                                    reverse = false;
                                }
                            }
                            var args = { data: _newAddList };
                            var temp = [], _editApp = [];
                            temp.push(this._timeZoneAppointments(args.data, ""));
                            var parid = _newAddList[this._appointmentSettings["recurrenceId"]] == null ? _newAddList["ParentId"] : _newAddList[this._appointmentSettings["recurrenceId"]];
                            var _App = new ej.DataManager(this._currentAppointmentData).executeLocal(new ej.Query().where(this._appointmentSettings["id"], ej.FilterOperators.equal, parid));
                            _editApp.push(this._timeZoneAppointments(_App[0], ""));
                            var promise;
                            if (this.dataSource() instanceof ej.DataManager)
                                (!reverse) && (promise = this._dataManager.saveChanges({ added: temp, changed: _editApp, deleted: [] }, this._appointmentSettings["id"], this.model.appointmentSettings.query._fromTable));
                            else
                                (!reverse) && (promise = this._dataManager.saveChanges({ added: temp, changed: _editApp, deleted: [] }, "AppTaskId"));
                            var updateTempNew = [];
                            for (var c = 0; c < temp.length; c++) {
                                updateTempNew = this._timeZoneAppointments(temp[c], "reverse");
                                new ej.DataManager(this._currentAppointmentData).update("AppTaskId", updateTempNew);
                            }
                            var updateTempNew1 = [];
                            for (var c = 0; c < _editApp.length; c++) {
                                updateTempNew1 = this._timeZoneAppointments(_editApp[c], "reverse");
                                new ej.DataManager(this._currentAppointmentData).update("AppTaskId", updateTempNew1);
                            }
                            var proxy = this;
                            if (!ej.isNullOrUndefined(promise) && $.isFunction(promise.promise) && this.dataSource() instanceof ej.DataManager) {
                                promise.done(function (e) {
                                    proxy._processUrlBinding(e);
                                    proxy._trigger("actionComplete", { data: _newAddList, requestType: "appointmentResize" });
                                });
                                promise.fail(function (e) {
                                    proxy._renderAppointmentAll();
                                });
                            }
                            else {
                                (!reverse) && this._dataProcessing(this._currentAppointmentData);
                                this._renderAppointmentAll();
                                this._trigger("actionComplete", { data: _newAddList, requestType: "appointmentResize" });
                            }
                        }
                        else {
                            if (twoDayApps)
                                var _updateList = {}, object = new ej.DataManager(this._currentAppointmentData).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, appoint.Guid));
                            else {
                                var _updateList = {}, object = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, appoint.Guid));
                            }
                            var recurColl = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("ParentId", ej.FilterOperators.equal, object[0].ParentId));
                            if (twoDayApps) { recurColl = this._recurrenceAppSort(recurColl); }
                            var recurColl = this._appointmentRecurrenceSort(recurColl);
                            $.extend(_updateList, object);
                            var index;
                            (this.model.enableRecurrenceValidation && _updateList[0][model["recurrence"]]) && (index = this._recuCollectionIndex(recurColl, object[0]));
                            if (this.model.enableRecurrenceValidation && _updateList[0][model["recurrence"]] && ((index == 0) ? (!ej.isNullOrUndefined(recurColl[index + 1]) ? !(new Date(new Date(recurColl[index + 1][model["startTime"]]).setHours(0, 0, 0, 0)).getTime() > new Date(new Date(newEndTime).setHours(0, 0, 0, 0)).getTime()) : false) : (index == recurColl.length - 1) ? !(new Date(new Date(recurColl[index - 1][model["endTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(newStartTime).setHours(0, 0, 0, 0)).getTime()) : !((new Date(new Date(recurColl[index - 1][model["endTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(newStartTime).setHours(0, 0, 0, 0)).getTime()) && (new Date(new Date(recurColl[index + 1][model["startTime"]]).setHours(0, 0, 0, 0)).getTime() > new Date(new Date(newEndTime).setHours(0, 0, 0, 0)).getTime())))) {
                                _updateList[0][model["startTime"]] = object[0][model["startTime"]];
                                _updateList[0][model["endTime"]] = object[0][model["endTime"]];
                                this._alertDragResizeError();
                                reverse = true;
                            }
                            else {
                                prevStartTime = _updateList[0][model["startTime"]];
                                prevEndTime = _updateList[0][model["endTime"]];
                                _updateList[0][model["startTime"]] = newStartTime;
                                _updateList[0][model["endTime"]] = newEndTime;
                                var avail = this._checkAvailability(_updateList[0]);
                                if (this._trigger("resizeStop", { appointment: _updateList[0], target: e }) || avail.length > 0) {
                                    this._showBlockAlert && (avail.length > 0) && this._alertBlockError();
                                    _updateList[0][model["startTime"]] = prevStartTime;
                                    _updateList[0][model["endTime"]] = prevEndTime;
                                    reverse = true;
                                }
                                else {
                                    reverse = false;
                                }
                            }
                            var temp = this._timeZoneAppointments(_updateList[0], "");
                            var promise;
                            if (this.dataSource() instanceof ej.DataManager)
                                (!reverse) && (promise = this._dataManager.update(this._appointmentSettings["id"], temp, this.model.appointmentSettings.query._fromTable));
                            else
                                (!reverse) && (promise = this._dataManager.update("AppTaskId", temp));
                            var updateTemp = this._timeZoneAppointments(temp, "reverse");
                            new ej.DataManager(this._currentAppointmentData).update("AppTaskId", updateTemp);
                            var proxy = this;
                            if (!ej.isNullOrUndefined(promise) && promise && $.isFunction(promise.promise) && this.dataSource() instanceof ej.DataManager) {
                                promise.done(function (e) {
                                    proxy._processUrlBinding(e);
                                    proxy._trigger("actionComplete", { data: _updateList, requestType: "appointmentResize" });
                                });
                                promise.fail(function (e) {
                                    proxy._renderAppointmentAll();
                                });
                            }
                            else {
                                if (twoDayApps) {
                                    var deleteApp = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, _updateList[0]["Guid"]));
                                    new ej.DataManager(this._processed).saveChanges({ added: [], changed: [], deleted: deleteApp }, "Guid");
                                    this._appointmentProcessing(_updateList[0]);
                                }
                                else
                                    new ej.DataManager(this._processed).update("Guid", _updateList[0]);
                                this._renderAppointmentAll();
                                this._trigger("actionComplete", { data: _updateList, requestType: "appointmentResize" });
                                this._appMainId = this._sortAppById(this._processed)[this._processed.length - 1]["AppTaskId"];
                            }
                        }
                    } else
                        this._renderAppointmentAll();
                }
                this.element.find("div.e-tophandle,div.e-bottomhandle").removeClass("e-rowcursor");
                this.element.find("div.e-lefthandle,div.e-righthandle").removeClass("e-columncursor");
            } catch (e) {

            }
        },
        _dragdropAppointments: function () {
            if (this.model.readOnly)
                return false;
            this._topResizing = false;
            this._bottomResizing = false;
            this._leftResizing = false;
            this._rightResizing = false;
            var appointdiv;
            if (this.model.allowDragAndDrop) {
                var proxy = this;
                var $dragableElements = this.element.find(".e-appointment");
                $dragableElements.ejDraggable({
                    handle: ".e-appointment",
                    dragArea: (proxy.model.appointmentDragArea == "") ? proxy.element.find("div.e-draggableworkarea", (".e-headrealldaytable tr")[(!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) ? this._grouping.length + 1 : 1]) : $(proxy.model.appointmentDragArea),
                    cursorAt: (proxy.model.appointmentDragArea == "") ? { top: 0, left: 0 } : { top: -40, left: -40 },
                    dragStart: function (args) {
                        proxy._dragStart(args);
                    },
                    drag: function (args) {
                        proxy._dragOver(args);
                    },
                    dragStop: function (args) {
                        proxy._dragStop(args);
                    },
                    helper: function (event, ui) {
                        appointdiv = $(event.sender.target).hasClass("e-appointment") ? $(event.sender.target) : $(event.sender.target).parents(".e-appointment");
                        return proxy._appointElement(appointdiv, proxy);
                    }

                });
                var $dragableElements = this.element.find(".e-alldayappointment");
                $dragableElements.ejDraggable({
                    handle: ".e-alldayappointment",
                    dragArea: (proxy.model.appointmentDragArea == "") ? proxy.element : $(proxy.model.appointmentDragArea),// proxy.element.find((".e-headrealldaytable tr")[(!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length!=0)) ? this._grouping.length + 1 : 1],"div.e-draggableworkarea"),
                    cursorAt: { top: 17, left: 0 },
                    dragStart: function (args) {
                        proxy._dragStart(args);
                    },
                    drag: function (args) {
                        proxy._dragOver(args);
                    },
                    dragStop: function (args) {
                        proxy._dragStop(args);
                    },
                    helper: function (event, ui) {
                        appointdiv = $(event.sender.target).hasClass("e-alldayappointment") ? $(event.sender.target) : $(event.sender.target).parents(".e-alldayappointment");
                        return proxy._appointElement(appointdiv, proxy);
                    }

                });
                var $dragableElements = this.element.find(".e-monthappointment");
                $dragableElements.ejDraggable({
                    handle: ".e-monthappointment",
                    dragArea: (proxy.model.appointmentDragArea == "") ? proxy.element.find("div.e-draggableworkarea") : $(proxy.model.appointmentDragArea),
                    cursorAt: (proxy.model.appointmentDragArea == "") ? { top: 0, left: 0 } : { top: -20, left: 10 },
                    dragStart: function (args) {
                        proxy._dragStart(args);
                    },
                    drag: function (args) {
                        proxy._dragOver(args);
                    },
                    dragStop: function (args) {
                        proxy._dragStop(args);
                    },
                    helper: function (event, ui) {
                        appointdiv = $(event.sender.target).hasClass("e-monthappointment") ? $(event.sender.target) : $(event.sender.target).parents(".e-monthappointment");
                        return proxy._appointElement(appointdiv, proxy);
                    }

                });
            }
        },
        _appointElement: function (appointdiv, proxy) {
            var _cloneWidth = (proxy.model.orientation == "vertical" && appointdiv.hasClass("e-appointment")) ? appointdiv.closest('td').width() * 0.85 : appointdiv.width();
            appointdiv.find('.e-schedulemouseclose').removeClass('e-schedulemouseclose e-icon');
            appointdiv.find('.e-tophandle').removeClass('e-tophandle e-appointresizer-top e-icon e-nsexpand');
            appointdiv.find('.e-bottomhandle').removeClass('e-bottomhandle e-appointresizer-bottom e-icon e-nsexpand');
            appointdiv.find('.e-lefthandle').removeClass('e-lefthandle e-appointresizer-left e-icon e-ewexpand');
            appointdiv.find('.e-righthandle').removeClass('e-righthandle e-appointresizer-right e-icon e-ewexpand');
            appointdiv.clone().prop('id', 'cloneElement').appendTo(appointdiv.parent());
            appointdiv.css('cursor', 'move');
            return (proxy.model.appointmentDragArea == "") ? appointdiv.addClass("e-draggableAppointment e-scheduleAppGlassy").removeClass("e-schedulemouseclose e-tophandle e-bottomhandle").css("width", _cloneWidth + "px").appendTo(proxy.element) : appointdiv.addClass("e-draggableAppointment e-scheduleAppGlassy").removeClass("e-schedulemouseclose e-tophandle e-bottomhandle").css("width", _cloneWidth + "px").appendTo($(document.body));
        },
        _dragStart: function (args) {
            this._tooltipEvents("disable");
            if ($(args.element[0]).hasClass("e-appointment") || $(args.element[0]).hasClass("e-monthappointment") || $(args.element[0]).hasClass("e-alldayappointment")) {
                var target = args.element;
                var model = this._appointmentSettings, appoint;
                this._appUid = $(args.element[0]).attr("guid");
                var tempApp = this._sortAppById(new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid)));
                if (tempApp.length > 1) {
                    var templist = $.extend(true, [], tempApp);
                    templist[0][model["endTime"]] = templist[templist.length - 1][model["endTime"]];
                    appoint = templist[0];
                } else appoint = tempApp[0];
                var data = { target: target, appointment: appoint };
                if (this._trigger("actionBegin", { data: data, requestType: "appointmentDrag" })) {
                    args.cancel = true;
                    ($(document.body).find(".e-scheduleAppGlassy").length > 0) && $(document.body).find(".e-scheduleAppGlassy").remove();
                    this._renderAppointmentAll();
                    return false;
                }
                if (this._trigger("dragStart", data)) {
                    args.cancel = true;
                    ($(document.body).find(".e-scheduleAppGlassy").length > 0) && $(document.body).find(".e-scheduleAppGlassy").remove();
                    this._renderAppointmentAll();
                    return false;
                }
            }
            else
                args.cancel = true;
            this.model.showQuickWindow && (this._quickAppointWindow.ejDialog("close") && this._quickAppDetailsWindow.ejDialog("close"));
        },

        _dragOver: function (args) {
            var $target = $(args.element);
            var data = { target: $target };
            !ej.isNullOrUndefined(this.element.data("ejTooltip")) && this.element.ejTooltip('hide');
            this.element.find(".e-workcells").removeClass("e-selectedCell").removeClass("e-mousehover");
            ((this.currentView() != "month" && !this._isCustomMonthView()) && ($(args.element[0]).hasClass("e-appointment") || args.target.className.indexOf('e-workcells') > -1)) && this._dragAppointmentCurrentTime(args);
            this._trigger("drag", data);
            if (this.model.orientation == "horizontal" && this._tempResource.length != 0 && this._grouping.length != 0) {
                args.element.css("pointer-events", "none");
                if (this.model.group.resources.length > 1) {
                    var tempTrgt = document.elementFromPoint(args.element.offset().left, args.element.offset().top);
                    var trgtIndex = $(tempTrgt).closest(".e-workcells").parent().index();
                    var trgtElement = $(this.element.find(".e-resourceheadertable tr")[trgtIndex]).children();
                    if (trgtElement.hasClass("e-parentnode")) {
                        if ($(trgtElement.children()[0]).hasClass("e-resourceexpand")) {
                            $(trgtElement.children()[0]).removeClass("e-resourceexpand").addClass("e-resourcecollapse");
                            var grpIndex = $(trgtElement.children()[0]).attr("id").split("_")[0];
                            var resColl = new ej.DataManager(this.res1).executeLocal(new ej.Query().where(this._tempResource[this._tempResource.length - 1].resourceSettings["groupId"], ej.FilterOperators.equal, grpIndex));
                            for (var a = 0; a < resColl.length; a++) {
                                var newIndex = trgtIndex + a + 1;
                                if ($(this.element.find(".e-resourceheadertable tr")[newIndex]).is(":hidden")) {
                                    $(this.element.find(".e-resourceheadertable tr")[newIndex]).toggle();
                                    $(this.element.find(".e-workcellstab tr")[newIndex]).toggle();
                                }
                            }
                            this.element.find(".e-horires").height(this.element.find(".e-draggableworkarea").height());
                            this._horizontalRender();
                            if (this.model.cellHeight != "20px") this._reRenderScroller();
                            this._horizontalResIcon();
                        }
                    }
                }
                args.element.css("pointer-events", "");
            }
        },

        _dragStop: function (args) {
            this._tooltipEvents("enable");
            this.model.showQuickWindow && (this._quickAppDetailsWindow.ejDialog("close"));
            var proxy = this; var model = this._appointmentSettings; var dragArea = this.element.find(".e-draggableworkarea");
            this._appUid = args.element.attr("guid");
            var tempApp = this._sortAppById(new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid)));
            if (tempApp.length > 1 && !tempApp[0][model["recurrence"]]) {
                var twoDayApps = true;
                var appoint = new ej.DataManager(this._currentAppointmentData).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid))[0];
            }
            else {
                var twoDayApps = (tempApp.length > 1) ? true : false;
                var templist = $.extend(true, [], tempApp);
                templist[0][model["endTime"]] = templist[templist.length - 1][model["endTime"]];
                var appoint = (tempApp[0][model["recurrence"]] && (tempApp[0][model["recurrenceRule"]].toString().indexOf("RECUREDITID") == -1)) ? this._getAppointmentByParentId(this._appUid) : (tempApp[0][model["recurrence"]] ? (tempApp.length > 1) ? templist[0] : tempApp[0] : this._getAppointmentByParentId(this._appUid));
            }
            if ((ej.isNullOrUndefined(this._dragNewStartTime) || ej.isNullOrUndefined(this._dragNewEndTime)) && tempApp.length != 0) {
                this._dragNewStartTime = new Date(tempApp[0][this._appointmentSettings["startTime"]]);
                this._dragNewEndTime = new Date(tempApp[tempApp.length - 1][this._appointmentSettings["endTime"]]);
            }
            var apps = $.extend(true, {}, appoint);
            var splitDrag = ((Math.ceil((apps[model["endTime"]] - apps[model["startTime"]]) / 3600000) < 24) && (apps[model["endTime"]].getDay() != apps[model["startTime"]].getDay())) ? true : false;
            if (this.model.orientation == "vertical") {
                if ($(args.element[0]).hasClass("e-appointment")) {
                    var newStartTime, newEndTime, cellstrtime, cellendtime;
                    newStartTime = cellstrtime = this._dragNewStartTime;
                    newEndTime = cellendtime = this._dragNewEndTime;
                    if (args.target.className.indexOf('e-alldaycells') > -1 || Math.ceil((this._dragNewEndTime.getTime() - this._dragNewStartTime.getTime()) / (60 * 60 * 1000)) >= 24) {
                        var allday = true;
                        cellstrtime = new Date(cellstrtime.setHours(0, 0, 0, 0));
                        cellendtime = new Date(cellendtime.setHours(23, 59, 59, 59));
                    }
                    var cellIndex = Math.round(($(args.element[0]).offset().left + dragArea.scrollLeft() - dragArea.offset().left) / this.element.find(".e-workcells").width());
                }
                else if ($(args.element[0]).hasClass("e-alldayappointment")) {
                    if (args.target.className.indexOf('e-workcells') > -1) {
                        var cellIndex = args.target.cellIndex;
                        cellstrtime = this._dragNewStartTime;
                        cellendtime = this._dragNewEndTime;
                        var allday = false;
                        this._allDayDrag = true;
                    }
                    else {
                        newStartTime = appoint[model["startTime"]];
                        newEndTime = appoint[model["endTime"]];
                        if ((tempApp[0][model["recurrence"]] && tempApp[0][model["recurrenceRule"]].toString().indexOf("RECUREDITID") == -1)) {
                            newStartTime = tempApp[0][model["startTime"]];
                            newEndTime = tempApp[0][model["endTime"]];
                        }
                        var diffLeft = $(args.element[0]).offset().left + dragArea.scrollLeft() - this.element.find(".e-alldaycells").offset().left - 1;
                        diffLeft = (this.model.enableRTL) ? Math.abs(diffLeft) : diffLeft;
                        var cellIndex = Math.round(diffLeft / (this.element.find(".e-alldaycells").width() + 1));
                        var count = Math.round($(args.element[0]).width() / (this.element.find(".e-alldaycells").width() + 1));
                        var overall = Math.ceil((newEndTime - newStartTime) / (1000 * 60 * 60 * 24));
                        var endInd = Math.round($(args.element[0]).width() / (this.element.find(".e-alldaycells").width() + 1));
                        var cols = this.currentView() === "week" ? 7 : this.currentView() === "workweek" ? this.model.workWeek.length : this.currentView() == "customview" ? this._renderDays : 1;
                        newStartTime = new Date(this._dateRender[cellIndex]);
                        newEndTime = new Date(this._dateRender[cellIndex]);
                        newEndTime.setHours(appoint[model["endTime"]].getHours(), appoint[model["endTime"]].getMinutes(), appoint[model["endTime"]].getSeconds());
                        if (cellIndex < 0) {
                            if (newStartTime <= new Date(this._dateRender[0])) {
                                cellstrtime = new Date(newStartTime);
                                cellstrtime.setDate(cellstrtime.getDate() + cellIndex);
                                cellstrtime.setHours(new Date(appoint[model["startTime"]]).getHours(), new Date(appoint[model["startTime"]]).getMinutes());
                                cellstrtime = new Date(cellstrtime);
                            }
                            else {
                                var startdate = new Date(this._dateRender[0]);
                                startdate.setDate(startdate.getDate() + cellIndex);
                                startdate.setHours(new Date(appoint[model["startTime"]]).getHours(), new Date(appoint[model["startTime"]]).getMinutes());
                                cellstrtime = new Date(startdate);
                            }
                        }
                        else {
                            if (newStartTime < new Date(this._dateRender[0])) {
                                var Index = (cellIndex > cols - 1) ? (cellIndex % cols) : cellIndex;
                                (this._resWorkWeek) ? newStartTime = new Date(new Date(this._dateRender[cellIndex])) : newStartTime.setDate(new Date(appoint[proxy._appointmentSettings["startTime"]]).getDate() + Index);
                                newStartTime.setHours(new Date(appoint[model["startTime"]]).getHours(), new Date(appoint[model["startTime"]]).getMinutes());
                                cellstrtime = new Date(newStartTime);
                            }
                            else {
                                var Index = (cellIndex > cols - 1) ? (cellIndex % cols) : cellIndex;
                                cellstrtime = new Date(new Date(this._dateRender[Index]));
                                cellstrtime.setHours(new Date(appoint[model["startTime"]]).getHours(), new Date(appoint[model["startTime"]]).getMinutes());
                            }
                        }
                        var starttime = new Date(cellstrtime);
                        var diff = new Date(appoint[model["endTime"]]).getTime() - new Date(appoint[model["startTime"]]).getTime();
                        cellendtime = new Date(new Date(starttime).setMilliseconds(diff));
                    }
                }
                else if ($(args.element[0]).hasClass("e-monthappointment")) {
                    var oldStartTime = appoint[model["startTime"]];
                    var oldEndTime = appoint[model["endTime"]];
                    if ((tempApp[0][model["recurrence"]] && tempApp[0][model["recurrenceRule"]].toString().indexOf("RECUREDITID") == -1)) {
                        oldStartTime = tempApp[0][model["startTime"]];
                        oldEndTime = tempApp[tempApp.length - 1][model["endTime"]];
                    }
                    newStartTime = new Date(new Date(this.model.currentDate).getFullYear(), new Date(this.model.currentDate).getMonth(), 1);
                    var daysInPrevMonth = newStartTime.getDay();
                    newStartTime.setDate(newStartTime.getDate() - daysInPrevMonth);
                    if (this.currentView() == "month" || (this.currentView() == "customview" && !this._oneWeek)) {
                        var cellIndex = parseInt(($(args.element[0]).offset().left + dragArea.scrollLeft() - dragArea.offset().left) / this.element.find(".e-monthcells").width());
                        cellIndex = (this.model.enableRTL) ? 7 - cellIndex - 1 : cellIndex;
                    }
                    else {
                        var noOfCols = !ej.isNullOrUndefined(this.model.group) ? this._dateRender.length * this.res1.length : this._dateRender.length;
                        var cellIndex = parseInt(($(args.element[0]).offset().left - dragArea.offset().left) / (Math.round(dragArea.width() / noOfCols)));
                    }
                    if (splitDrag && (parseInt(args.element.attr("id").split("_")[1]) == tempApp[tempApp.length - 1]["AppTaskId"])) cellIndex -= 1;
                    var newTopDate = parseInt(($(args.element[0]).offset().top + dragArea.scrollTop() - dragArea.offset().top) / (this.element.find(".e-monthcells").outerHeight()));
                    if (!this.model.showOverflowButton) newTopDate = this._findRowIndex(args);
                    var dateCount = this.currentView() == "month" || this._isCustomMonthView() && !this._oneWeek ? 7 : this._dateRender.length;
                    var index = (this.model.enableRTL) ? (newTopDate * dateCount) + (cellIndex - (Math.floor(cellIndex / dateCount) * dateCount)) - (oldEndTime.getDay() - oldStartTime.getDay()) : (newTopDate * dateCount) + (cellIndex - (Math.floor(cellIndex / dateCount) * dateCount));
                    newStartTime = new Date(new Date(this._dateRender[index]).setHours(oldStartTime.getHours(), oldStartTime.getMinutes(), oldStartTime.getSeconds()));
                    if (Math.ceil((appoint[model["endTime"]] - appoint[model["startTime"]]) / 3600000) > 24) {
                        var trgtApp = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("AppTaskId", ej.FilterOperators.equal, parseInt(args.element.attr('id').split("_")[1])));
                        var multiDif = new Date(trgtApp[0][model["startTime"]]) - new Date(tempApp[0][model["startTime"]]);
                        cellstrtime = new Date(newStartTime - multiDif);
                        var diffTime = (newStartTime.getTime() - new Date(oldStartTime).getTime()) - new Date(multiDif).getTime();
                    }
                    else {
                        cellstrtime = new Date(newStartTime);
                        var diffTime = newStartTime.getTime() - new Date(oldStartTime).getTime();
                    }
                    newEndTime = new Date(new Date(oldEndTime).getTime() + diffTime);
                    cellendtime = new Date(newEndTime);
                }
            }
            else if (this.model.orientation == "horizontal" && ej.scheduleFeatures.horizontal) {
                var diffTimeLeft;
                var cellstrtime = this._dragNewStartTime;
                var cellendtime = this._dragNewEndTime;
                var newStartTime = this._dragNewStartTime;
                var newEndTime = this._dragNewEndTime;
                if (this.model.enableRTL) {
                    var colIndex = (document.elementFromPoint($(args.element[0]).offset().left, $(args.element[0]).offset().top - 1)).cellIndex;
                    colIndex -= Math.round(($(args.element[0]).width() / 30) - 1);
                }
                else
                    var colIndex = Math.round(($(args.element[0]).offset().left + dragArea.scrollLeft() - dragArea.offset().left) / this.element.find(".e-workcells").width());
                var rowIndex = parseInt(($(args.element[0]).offset().top + dragArea.scrollTop() - dragArea.offset().top) / (this.element.find(".e-workcells").outerHeight()));
                if (!this.model.showOverflowButton) rowIndex = this._findRowIndex(args);
                if (this.element.find('.e-resourceheadertable .e-resourceexpand').length > 0)
                    rowIndex += $(this.element.find('.e-resourceheadertable').find('tr').filter(function () { return $(this).css('display') !== 'none'; })[rowIndex]).prevUntil("table.e-resourceheadertable").filter(function () { return $(this).css('display') == 'none'; }).length;
                var target = $(this.element.find(".e-workcellstab tr")[rowIndex]).find("td")[colIndex];
                if (!$(target).hasClass("e-resourceheadercells") && !ej.isNullOrUndefined(target)) {
                    this._cellIndex = (this.model.enableRTL) ? this.element.find(".e-workcells").length - (Math.round($(args.element[0]).offset().left / this.element.find(".e-workcells").width())) : Math.round(($(args.element[0]).offset().left + dragArea.scrollLeft() - dragArea.offset().left) / this.element.find(".e-workcells").width());
                    var cellIndex = rowIndex;
                    if ($(args.element[0]).hasClass("e-monthappointment")) {
                        var oldStartTime = new Date(appoint[model["startTime"]]);
                        var oldEndTime = new Date(appoint[model["endTime"]]);
                        if ((tempApp[0][model["recurrence"]] && tempApp[0][model["recurrenceRule"]].toString().indexOf("RECUREDITID") == -1)) {
                            oldStartTime = tempApp[0][model["startTime"]];
                            oldEndTime = tempApp[0][model["endTime"]];
                        }
                        else if ((tempApp[0][model["recurrence"]] && tempApp[0][model["recurrenceRule"]].toString().indexOf("RECUREDITID") > 0)) {
                            appoint = tempApp[0];
                            oldStartTime = tempApp[0][model["startTime"]];
                            oldEndTime = tempApp[0][model["endTime"]];
                        }
                        newStartTime = new Date(this.monthDays[this._cellIndex]);
                        newStartTime.setHours(oldStartTime.getHours(), oldStartTime.getMinutes(), oldStartTime.getSeconds());
                        cellstrtime = new Date(newStartTime);
                        var diffTime = newStartTime.getTime() - new Date(oldStartTime).getTime();
                        newEndTime = new Date(new Date(oldEndTime).getTime() + diffTime);
                        cellendtime = new Date(newEndTime);
                    }
                }
            }
            var maxdate = new Date(new Date(this.model.maxDate).getTime()).setHours(23, 59, 59);
            var otherMonth = (!this.model.showNextPrevMonth && this.model.orientation == "vertical" && this.currentView() == "month") ? new Date(new Date(this.currentDate()).getFullYear(), new Date(this.currentDate()).getMonth(), 1).getTime() != new Date(cellstrtime.getFullYear(), cellstrtime.getMonth(), 1).getTime() : false;
            if (!otherMonth && (cellendtime >= new Date(this.model.minDate)) && (cellendtime <= maxdate)) {
                this._refreshCellsHeight();
                var reverse = true;
                if (appoint[model["recurrence"]] == 1 && appoint[model["recurrenceRule"]].indexOf("RECUREDITID") == -1) {
                    var query = new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid);
                    var _appList = this._sortAppById(new ej.DataManager(this._processed).executeLocal(query));
                    if (twoDayApps) var appListDetails = $.extend(true, [], _appList);
                    if (_appList.length > 1) {
                        var tempList = $.extend(true, [], _appList);
                        tempList[0][model["endTime"]] = tempList[tempList.length - 1][model["endTime"]];
                    }
                    _appList = (_appList.length > 1) ? tempList[0] : _appList[0];
                    var Parid = _appList[model["recurrenceId"]] == null ? _appList["ParentId"] : _appList[model["recurrenceId"]];
                    var MapValue = _appList[model["recurrenceId"]] == null ? "ParentId" : model["recurrenceId"];
                    var recurColl = new ej.DataManager(this._processed).executeLocal(new ej.Query().where(MapValue, ej.FilterOperators.equal, Parid));
                    if (twoDayApps) { recurColl = this._recurrenceAppSort(recurColl); }
                    var recurColl = this._appointmentRecurrenceSort(recurColl);
                    var _newAddList = {}, index;
                    $.extend(_newAddList, tempApp[0]);
                    (this.model.enableRecurrenceValidation && _newAddList[model["recurrence"]]) && (index = this._recuCollectionIndex(recurColl, _appList));
                    if (this.model.enableRecurrenceValidation && _newAddList[model["recurrence"]] && ((index == 0) ? (!ej.isNullOrUndefined(recurColl[index + 1]) ? !(new Date(new Date(recurColl[index + 1][model["startTime"]]).setHours(0, 0, 0, 0)).getTime() > new Date(new Date(newEndTime).setHours(0, 0, 0, 0)).getTime()) : false) : (index == recurColl.length - 1) ? !(new Date(new Date(recurColl[index - 1][model["endTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(newStartTime).setHours(0, 0, 0, 0)).getTime()) : !((new Date(new Date(recurColl[index - 1][model["endTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(newStartTime).setHours(0, 0, 0, 0)).getTime()) && (new Date(new Date(recurColl[index + 1][model["startTime"]]).setHours(0, 0, 0, 0)).getTime() > new Date(new Date(newEndTime).setHours(0, 0, 0, 0)).getTime())))) {
                        _newAddList[model["startTime"]] = _appList[model["startTime"]];
                        _newAddList[model["endTime"]] = _appList[model["endTime"]];
                        this._alertDragResizeError();
                        reverse = true;
                    }
                    else {
                        var _prevObj = $.extend(true, [], _appList);
                        _newAddList[model["startTime"]] = cellstrtime;
                        _newAddList[model["endTime"]] = cellendtime;
                        if (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && ej.scheduleFeatures.resources)
                            _newAddList = this._getDragDropResourceData(this, cellIndex, _newAddList);
                        if (!ej.isNullOrUndefined(allday)) _newAddList[model["allDay"]] = allday;
                        var avail = this._checkAvailability(_newAddList);
                        if (this._trigger("dragStop", { appointment: _newAddList, event: args }) || avail.length > 0) {
                            this._showBlockAlert && (avail.length > 0) && this._alertBlockError();
                            _newAddList = $.extend(true, [], _prevObj);
                            reverse = true;
                        }
                        else {
                            reverse = false;
                            this._processed = this._sortAppById(this._processed);
                            var maxId = this.model.enableLoadOnDemand ? this._dataCount : this._appMainId + 1;
                            this._appMainId = maxId;
                            var Parid = appoint[model["recurrenceId"]] == null ? appoint["ParentId"] : appoint[model["recurrenceId"]];
                            this._deleteOcurrence(Parid, _appList[model["startTime"]]);
                            _newAddList[model["recurrenceRule"]] = appoint[model["recurrenceRule"]] + ";RECUREDITID=" + _newAddList["ParentId"];
                            _newAddList[model["recurrenceExDate"]] = appoint[model["recurrenceExDate"]];
                            _newAddList[model["id"]] = _newAddList["AppTaskId"] = maxId;
                        }
                    }
                    var argsAdd = { data: _newAddList };
                    var temp = []; var _editApp = [];
                    temp.push(this._timeZoneAppointments(argsAdd.data, ""));
                    var Parid = _newAddList[model["recurrenceId"]] == null ? appoint["ParentId"] : _newAddList[model["recurrenceId"]];
                    var _App = new ej.DataManager(this._currentAppointmentData).executeLocal(new ej.Query().where(this._appointmentSettings["id"], ej.FilterOperators.equal, Parid));
                    _editApp.push(this._timeZoneAppointments(_App[0], ""));
                    var promise;
                    if (this.dataSource() instanceof ej.DataManager)
                        (!reverse) && (promise = this._dataManager.saveChanges({ added: temp, changed: _editApp, deleted: [] }, model["id"], this.model.appointmentSettings.query._fromTable));
                    else 
                        (!reverse) && (promise = this._dataManager.saveChanges({ added: temp, changed: _editApp, deleted: [] }, "AppTaskId"));
                    for (var c = 0; c < temp.length; c++) {
                        new ej.DataManager(this._currentAppointmentData).update("AppTaskId", this._timeZoneAppointments(temp[c], "reverse"));
                    }
                    for (var c = 0; c < _editApp.length; c++)
                        new ej.DataManager(this._currentAppointmentData).update("AppTaskId", this._timeZoneAppointments(_editApp[c], "reverse"));
                    if (!ej.isNullOrUndefined(promise) && $.isFunction(promise.promise) && this.dataSource() instanceof ej.DataManager) {
                        promise.done(function (e) {
                            proxy._processUrlBinding(e);
                            proxy._trigger("actionComplete", { appointment: _newAddList, requestType: "appointmentDrag" });
                        });
                        promise.fail(function (e) {
                            proxy._renderAppointmentAll();
                        });
                    }
                    else {
                        (!reverse) && this._dataProcessing(this._currentAppointmentData);
                        this._renderAppointmentAll();
                        this._trigger("actionComplete", { appointment: _newAddList, requestType: "appointmentDrag" });
                    }
                }
                else {
                    var _prevObj = {};
                    if (twoDayApps)
                        var object = new ej.DataManager(this._currentAppointmentData).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, tempApp[0]["Guid"]));
                    else
                        var object = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, tempApp[0]["Guid"]));
                    var _prevObj = $.extend(true, [], object[0]);
                    var prvcellstrtime = object[0][model["startTime"]];
                    var prvcellendtime = object[0][model["endTime"]];
                    var recurColl = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("ParentId", ej.FilterOperators.equal, object[0].ParentId));
                    if (twoDayApps) { recurColl = this._recurrenceAppSort(recurColl); }
                    var recurColl = this._appointmentRecurrenceSort(recurColl);
                    var index;
                    object[0][model["startTime"]] = cellstrtime;
                    object[0][model["endTime"]] = cellendtime;
                    (this.model.enableRecurrenceValidation) && (index = this._recuCollectionIndex(recurColl, object[0]));
                    if (this.model.enableRecurrenceValidation && object[0][model["recurrence"]] && ((index == 0) ? (!ej.isNullOrUndefined(recurColl[index + 1]) ? !(new Date(new Date(recurColl[index + 1][model["startTime"]]).setHours(0, 0, 0, 0)).getTime() > new Date(new Date(newEndTime).setHours(0, 0, 0, 0)).getTime()) : false) : (index == recurColl.length - 1) ? !(new Date(new Date(recurColl[index - 1][model["endTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(newStartTime).setHours(0, 0, 0, 0)).getTime()) : !((new Date(new Date(recurColl[index - 1][model["endTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(newStartTime).setHours(0, 0, 0, 0)).getTime()) && (new Date(new Date(recurColl[index + 1][model["startTime"]]).setHours(0, 0, 0, 0)).getTime() > new Date(new Date(newEndTime).setHours(0, 0, 0, 0)).getTime())))) {
                        object[0][model["startTime"]] = prvcellstrtime;
                        object[0][model["endTime"]] = prvcellendtime;
                        this._alertDragResizeError();
                        reverse = true;
                    }
                    else {
                        if (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0) && this._tempResource[0].resourceSettings.dataSource.length != 0 && ej.scheduleFeatures.resources)
                            object[0] = this._getDragDropResourceData(this, cellIndex, object[0]);
                        if (!ej.isNullOrUndefined(allday)) object[0][model["allDay"]] = allday;
                        var avail = this._checkAvailability(object[0]);
                        if (this._trigger("dragStop", { appointment: object[0], event: args }) || avail.length > 0) {
                            this._showBlockAlert && (avail.length > 0) && this._alertBlockError();
                            object[0] = $.extend(true, [], _prevObj);
                            reverse = true;
                        }
                        else {
                            reverse = false;
                        }
                    }
                    if (this.model.appointmentDragArea != "") {
                        var appoint = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid));
                        if (appoint.length == 0) return false;
                    }
                    var temp = this._timeZoneAppointments(object[0], "");
                    var promise;
                    if (this.dataSource() instanceof ej.DataManager)
                        (!reverse) && (promise = this._dataManager.update(model["id"], temp, this.model.appointmentSettings.query._fromTable));
                    else 
                        (!reverse) && (promise = this._dataManager.update("AppTaskId", temp));
                    var updateTemp = this._timeZoneAppointments(temp, "reverse");
                    if (twoDayApps)
                        new ej.DataManager(this._currentAppointmentData).update("Guid", updateTemp);
                    else
                        new ej.DataManager(this._currentAppointmentData).update("AppTaskId", updateTemp);

                    if (!ej.isNullOrUndefined(promise) && promise && $.isFunction(promise.promise) && this.dataSource() instanceof ej.DataManager) {
                        promise.done(function (e) {
                            proxy._processUrlBinding(e);
                            proxy._trigger("actionComplete", { appointment: object[0], requestType: "appointmentDrag" });
                        });
                        promise.fail(function (e) {
                            proxy._renderAppointmentAll();
                        });
                    }
                    else {
                        var isBigApp = (new Date(new Date(object[0][model["startTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(object[0][model["endTime"]]).setHours(0, 0, 0, 0)).getTime());
                        if (isBigApp || twoDayApps) {
                            var deleteApp = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, object[0]["Guid"]));
                            new ej.DataManager(this._processed).saveChanges({ added: [], changed: [], deleted: deleteApp }, "Guid");
                            this._appointmentProcessing(object[0]);
                        } else
                            new ej.DataManager(this._processed).update("AppTaskId", object[0]);
                        this._renderAppointmentAll();
                        this._trigger("actionComplete", { appointment: object[0], requestType: "appointmentDrag" });
                        this._appMainId = this._sortAppById(this._processed)[this._processed.length - 1]["AppTaskId"];
                    }
                }
            } else {
                this._renderAppointmentAll();
                this._trigger("dragStop", { appointment: tempApp[0], event: args });
            }
            ($(document.body).find(".e-scheduleAppGlassy").length > 0) && $(document.body).find(".e-scheduleAppGlassy").remove();
            (this.element.find('#cloneElement').length > 0) && this.element.find('#cloneElement').remove();
        },

        _findRowIndex: function (args) {
            var eleOffset = $(args.element[0]).offset();
            this.element.find(".e-appointment,.e-monthappointment").css("pointer-events", "none");
            var element = $(document.elementFromPoint((eleOffset.left - $(document).scrollLeft()), (eleOffset.top - $(document).scrollTop() - 1)));
            var rowIndex = $(element).closest("td").parent().index();
            this.element.find(".e-appointment,.e-monthappointment").css("pointer-events", "visible");
            return rowIndex;
        },

        _alertDragResizeError: function () {
            $("#" + this._id + "alertWindow").ejDialog("instance").option("title", this._getLocalizedLabels("RecurrenceAlert"));
            this._alertWindow.find(".e-alerttext").html(this._getLocalizedLabels("DragResizeError"));
            this._alertWindow.find(".e-alertOk").html(this._getLocalizedLabels("Ok"));
            this._alertWindow.ejDialog("open");
        },

        _processUrlBinding: function (e) {
            if (this.model.enableLoadOnDemand || (this.dataSource() instanceof ej.DataManager && this.dataSource().adaptor instanceof ej.ODataAdaptor))
                this._initDataSource("refresh");
            else {
                var value = (ej.isNullOrUndefined(e.record)) ? e : e.record;
                this._currentAppointmentData.length = 0;
                this._dateFormat(value);
                this._bindAppointments = true;
                this._currentAppointmentData = $.merge(this._currentAppointmentData, value);
                this._dataProcessing(value);
                this._renderAppointmentAll();
            }
        },

        _refreshCellsHeight: function () {
            if (this.currentView() == "agenda") return false;
            if (this.model.orientation == "horizontal" && !this.model.showOverflowButton) {
                this._horizontalRender();
                this._reRenderScroller();
            }
            if (this.model.orientation == "vertical" && !this.model.showOverflowButton && this.currentView() == "month") {
                this._monthCellsRender();
                this._reRenderScroller();
            }
        },

        _dragAppointmentCurrentTime: function (args) {
            var tempApp = this._sortAppById(new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, args.element.attr("guid"))));
            var dragArea = this.element.find(".e-draggableworkarea");
            var timesoltduration = parseInt(this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount);
            var proxy = this;
            var model = proxy._appointmentSettings;
            if (!tempApp[0][model["recurrence"]]) {
                var appoint = new ej.DataManager(this._currentAppointmentData).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid))[0];
            }
            else {
                var templist = $.extend(true, [], tempApp);
                templist[0][model["endTime"]] = templist[templist.length - 1][model["endTime"]];
                var appoint = (tempApp[0][model["recurrence"]] && (tempApp[0][model["recurrenceRule"]].toString().indexOf("RECUREDITID") == 1)) ? this._getAppointmentByParentId(this._appUid) : (tempApp[0][model["recurrence"]] ? templist[0] : this._getAppointmentByParentId(this._appUid));
            }
            if (this.model.orientation == "vertical" && ($(args.element[0]).hasClass("e-appointment") || args.target.className.indexOf('e-workcells') > -1)) {
                var dragMax = dragArea.height() + dragArea.scrollTop();
                var dragElmntHeight = args.element[0].offsetHeight;
                var cellHeight = this.element.find(".e-workcells").outerHeight();
                var topPos = $(args.element[0]).offset().top - dragArea.offset().top + dragArea.scrollTop();
                var dragMaxTop = (topPos - (cellHeight / (60 / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)))) < dragMax ? topPos : dragMax - dragElmntHeight;
                var newStartTime, newEndTime, cellstrtime, cellendtime;
                if ($(args.element[0]).hasClass("e-alldayappointment")) {
                    var cellIndex = args.target.cellIndex;
                    newStartTime = new Date(this.dateRender[cellIndex]);
                    var newTopTime = (dragMaxTop > 0) ? dragMaxTop * 60 / ((60 / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) * cellHeight) : 1 * 60 / ((60 / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) * cellHeight);
                    newStartTime.setHours(parseInt(this.model.startHour) + Math.round(newTopTime / 60));
                    newStartTime.setMinutes(parseInt(newTopTime % 60));
                    newStartTime = (new Date(newStartTime).getMinutes() >= 30) ? new Date(new Date(newStartTime).setHours(new Date(newStartTime).getHours() - 1)) : new Date(newStartTime);
                    newStartTime.setMinutes(Math.round(newStartTime.getMinutes() / 10.0) * 10);
                    cellstrtime = new Date(newStartTime);
                    newEndTime = new Date(newStartTime).setMinutes(newStartTime.getMinutes() + (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount));
                    cellendtime = new Date(newEndTime);
                }
                else {
                    if ((dragMaxTop > 0 || !this.model.showAllDayRow) && (args.target.className.indexOf('e-alldaycells') != 1)) {
                        var newTopTime = Math.round((dragMaxTop > 0) ? dragMaxTop * 60 / ((60 / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) * cellHeight) : 1 * 60 / ((60 / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) * cellHeight));
                        var twoDayApps = (new Date(new Date(appoint[proxy._appointmentSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(appoint[proxy._appointmentSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime()) ? true : false;
                        if (proxy.currentView() !== "month" && !(proxy._isCustomMonthView())) {
                            var firstDayOfWeek = new Date(proxy._firstweekdate(proxy.currentDate()));
                            if (proxy.currentView() === "workweek" || (proxy.currentView() == "customview" && proxy._renderDays == 5)) {
                                var _day = new Date(firstDayOfWeek).getDay();
                                var _dayAdd = _day == 0 ? 1 : 0;
                                firstDayOfWeek.setDate(firstDayOfWeek.getDate() + _dayAdd);
                            }
                            newStartTime = firstDayOfWeek;
                            var noOfCols = proxy.currentView() === "week" ? 7 : proxy.currentView() === "workweek" ? this.model.workWeek.length : proxy.currentView() == "customview" ? proxy._renderDays : 1;
                            noOfCols = !ej.isNullOrUndefined(proxy.model.group) ? noOfCols * proxy.res1.length : noOfCols;
                            var cellIndex = Math.round(($(args.element[0]).offset().left + dragArea.scrollLeft() - dragArea.offset().left) / this.element.find(".e-workcells").width());
                            newStartTime = (this.model.enableRTL) ? new Date(this.dateRender[noOfCols - cellIndex - 1]) : new Date(this.dateRender[cellIndex]);
                            newEndTime = newStartTime;
                        }
                        else {
                            newStartTime = appoint[model["startTime"]];
                            newEndTime = new Date(newStartTime);
                        }
                        if (twoDayApps) {
                            newStartTime = this._getNewStartTime(newTopTime, newStartTime);
                            cellstrtime = new Date(newStartTime);
                        }
                        else {
                            var min = (newTopTime % 60).toFixed(1);
                            var sec = min.toString().split(".");
                            var milliSec = !ej.isNullOrUndefined(sec[1]) ? ((sec[1] * 60) / 60) : 0;
                            newStartTime.setHours(parseInt(this.model.startHour) + Math.round(newTopTime / 60), parseInt(min.toString().split('.')[0]), milliSec, 0);
                            newStartTime = (new Date(newStartTime).getMinutes() >= 30) ? new Date(new Date(newStartTime).setHours(new Date(newStartTime).getHours() - 1)) : new Date(newStartTime);
                            (timesoltduration >= 10) ? newStartTime.setMinutes(Math.round(newStartTime.getMinutes() / 10.0) * 10) : newStartTime.setMinutes((newStartTime.getMinutes() / 10.0) * 10);
                            cellstrtime = new Date(newStartTime);
                        }
                        var diff = new Date(appoint[model["endTime"]]).getTime() - new Date(appoint[model["startTime"]]).getTime();
                        cellendtime = new Date(new Date(newStartTime).setMilliseconds(diff));
                    }
                    else {
                        var noOfCols = this.currentView() === "week" ? 7 : this.currentView() === "workweek" ? this.model.workWeek.length : this.currentView() == "customview" ? this._renderDays : 1;
                        noOfCols = !ej.isNullOrUndefined(this.model.group) ? noOfCols * this.res1.length : noOfCols;
                        var cellIndex = Math.round(($(args.element[0]).offset().left + dragArea.scrollLeft() - dragArea.offset().left) / this.element.find(".e-workcells").width());
                        newStartTime = (this.model.enableRTL) ? new Date(this.dateRender[noOfCols - cellIndex - 1]) : new Date(this.dateRender[cellIndex]);
                        cellstrtime = new Date(newStartTime.setHours(0, 0, 0));
                        cellendtime = new Date(newStartTime.setHours(23, 59, 59));
                    }
                }
            }
            else if ((this.model.orientation == "horizontal" && $(args.element[0]).hasClass("e-appointment"))) {
                var diffTimeLeft;
                var cellstrtime = new Date(appoint[proxy._appointmentSettings["startTime"]]);
                var cellendtime = new Date(appoint[proxy._appointmentSettings["endTime"]]);
                if (this.model.enableRTL) {
                    var colIndex = (document.elementFromPoint($(args.element[0]).offset().left, $(args.element[0]).offset().top - 1)).cellIndex;
                    colIndex -= Math.round(($(args.element[0]).width() / 30) - 1);
                }
                else
                    var colIndex = Math.round(($(args.element[0]).offset().left + dragArea.scrollLeft() - dragArea.offset().left) / this.element.find(".e-workcells").width());
                var rowIndex = parseInt(($(args.element[0]).offset().top + dragArea.scrollTop() - dragArea.offset().top) / (this.element.find(".e-workcells").outerHeight()));
                if (!this.model.showOverflowButton) rowIndex = this._findRowIndex(args);
                if (this.element.find('.e-resourceheadertable .e-resourceexpand').length > 0)
                    rowIndex += $(this.element.find('.e-resourceheadertable').find('tr').filter(function () { return $(this).css('display') !== 'none'; })[rowIndex]).prevUntil("table.e-resourceheadertable").filter(function () { return $(this).css('display') == 'none'; }).length;
                var target = $(this.element.find(".e-workcellstab tr")[rowIndex]).find("td")[colIndex];
                if (!$(target).hasClass("e-resourceheadercells") && !ej.isNullOrUndefined(target)) {
                    var newStartTime = new Date(this._dateRender[0]);
                    diffTimeLeft = this.model.enableRTL ? (colIndex * 30) : (($(args.element[0]).offset().left + dragArea.scrollLeft() - dragArea.offset().left) * (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) / $(this.element.find(".e-workcells")[1]).outerWidth();
                    var minStartTime = ((this.model.startHour) + ((colIndex * (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) / 60));
                    var minVal = parseInt(((colIndex) / ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot))));
                    minStartTime = (minStartTime >= (this.model.endHour)) ? (Math.round(diffTimeLeft / 60) + (minVal * ((24 - this.model.endHour) + this.model.startHour))) : Math.round(diffTimeLeft / 60);
                    newStartTime.setHours(parseInt(proxy.model.startHour) + minStartTime);
                    newStartTime.setMinutes(parseInt(diffTimeLeft % 60));
                    newStartTime = (new Date(newStartTime).getMinutes() >= 30) ? new Date(new Date(newStartTime).setHours(new Date(newStartTime).getHours() - 1)) : new Date(newStartTime);
                    (timesoltduration >= 10) ? newStartTime.setMinutes(Math.round(newStartTime.getMinutes() / 10.0) * 10) : newStartTime.setMinutes((newStartTime.getMinutes() / 10.0) * 10); cellstrtime = new Date(newStartTime);
                    var startTime = appoint[proxy._appointmentSettings["startTime"]];
                    var endTime = appoint[proxy._appointmentSettings["endTime"]];
                    var duration = (endTime - startTime) / 1000;
                    var hours = Math.floor(duration / 3600);
                    var hourValue = parseInt(args.element.width() / this.element.find(".e-workcells").width()) / this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot);
                    if (this.currentView() == "workweek" && this.model.workWeek != 5)
                        if (new Date(appoint["StartTime"]).getDay() != new Date(appoint["EndTime"]).getDay()) {
                            var differ = new Date(appoint["EndTime"]).getDay() - new Date(appoint["StartTime"]).getDay();
                            var hours = hours - ((differ - 1) * (this.model.endHour - this.model.startHour));
                        }
                    var minutes = Math.round(Math.floor((duration % 3600) / 60) / 10.0) * 10;
                    newEndTime = proxy._getNewEndTime(newStartTime, hourValue, minutes);
                    if (new Date(appoint["StartTime"]).getDay() == new Date(appoint["EndTime"]).getDay() && this.currentView() == "workweek" && this.model.workWeek.length != 5) {
                        totalhrs = newStartTime.getHours() + hours;
                        if (totalhrs > 24) {
                            var index = $.inArray(new Date(newStartTime.getFullYear(), newStartTime.getMonth(), newStartTime.getDate()).getTime(), this._dateRender) + 1;
                            newEndTime.setDate(new Date(this._dateRender[index]).getDate());
                        }
                    }
                    var some = parseInt(colIndex) + (parseInt($(args.element[0]).width() / this.element.find(".e-workcells").width())) - 1;
                    some = parseInt(some / ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot)));
                    var variable = (new Date(newEndTime).getHours() >= (this.model.endHour)) ? parseInt(parseInt((new Date(newEndTime) - new Date(new Date(new Date(newStartTime).setHours(0, 0, 0, 0)).setHours(this.model.endHour))) / (1000 * 60 * 60)) / (this.model.endHour - this.model.startHour)) : 0;
                    var newStart = new Date(newStartTime);
                    var missDate = this.currentView() == "workweek" ? ((variable - 1) * (this.model.endHour - this.model.startHour)) : 0;
                    minStartTime = (new Date(newEndTime).getHours() >= (this.model.endHour)) ? new Date(new Date(newStart).setHours(new Date(newStartTime).getHours() + missDate + (parseInt($(args.element[0]).width() / this.element.find(".e-workcells").width()) / (this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot))) + (variable * ((24 - this.model.endHour) + this.model.startHour)))) : newEndTime;
                    if (new Date(newEndTime).getHours() >= (this.model.endHour)) minStartTime.setMinutes(new Date(newStartTime).getMinutes() + Math.round(parseInt(diffTimeLeft % 60) / 10.0) * 10);
                    if (this.model.endHour - this.model.startHour !== 24) {
                        if (new Date(new Date(minStartTime).setHours(0, 0, 0, 0)).getTime() != new Date(this._dateRender[some]).getTime())
                            minStartTime = new Date(this._dateRender[some]).setHours(new Date(minStartTime).getHours(), new Date(minStartTime).getMinutes(), new Date(minStartTime).getSeconds(), new Date(minStartTime).getMilliseconds());
                    }
                    cellendtime = new Date(minStartTime);
                    this._cellIndex = (this.model.enableRTL) ? this.element.find(".e-workcells").length - (Math.round($(args.element[0]).offset().left / this.element.find(".e-workcells").width())) : Math.round(($(args.element[0]).offset().left + dragArea.scrollLeft() - dragArea.offset().left) / this.element.find(".e-workcells").width());
                }
            }
            args.element.find(".e-apptime").html(ej.format(cellstrtime, (this._timeMode == "12") ? this._pattern.t : "HH:mm", this.model.locale) + " - " + ej.format(cellendtime, (this._timeMode == "12") ? this._pattern.t : "HH:mm", this.model.locale)).insertBefore(args.element.find(".e-apptext")).css("font-size", "12px").css("white-space", "normal");
            this._dragNewStartTime = cellstrtime;
            this._dragNewEndTime = cellendtime;
        },
        _unWireDragDrop: function () {
            var dragableElements = this.element.find("div.e-appointment,div.e-alldayappointment,div.e-monthappointment");
            dragableElements.ejDraggable("destroy");
        },

        _getAppointmentByParentId: function (appId) {
            var tempApp, appoint, appList = this._currentAppointmentData;
            var tempApp = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, appId));
            var appoint = new ej.DataManager(appList).executeLocal(new ej.Query().where(this._appointmentSettings["id"], ej.FilterOperators.equal, tempApp[0]["ParentId"]));
            return !$.isEmptyObject(appoint) ? appoint[0] : appoint;
        },

        _renderAppointmentAll: function () {
            if (this.element.children().length == 0)
                return false;
            if (this.currentView() == "agenda")
                this._renderAgendaContent();
            else {
                ej.preferredCulture(this.model.locale);
                this.element.find("div.e-appointwrapper,.e-alldayappointment").remove();
                if (!ej.isNullOrUndefined(this.model.group) && this._grouping.length > 1 && this.model.orientation == "horizontal")
                    this.resHeaderHeight = this.element.find(".e-resourceheadercells").height();
                if (this.currentView() != "month" && (!this._isCustomMonthView()) && this.model.timeScale.enable) {
                    this._renderAppointments();
                    if (this.model.showAppointmentNavigator) {
                        if (this.model.orientation == "vertical" && this.element.find(".e-vscroll").length > 0 && (!this._mediaQuery)) this._renderUpDownIconPosition();
                        this._nextPrevButton(this._filtered);
                    }
                }
                else
                    this._renderMonthAppointment();
                this._wireResizeEvents();
                this._dragdropAppointments();
                if (!this.model.showOverflowButton && this.model.orientation == "horizontal") {
                    var restop = this.element.find(".e-draggableworkarea").offset().top - this.element.find(".e-workcellstab").offset().top;
                    this.element.find(".e-horires").css("top", -restop + "px");
                }
            }
            var appLevelsInDay = $.map(this._processed, function (value, Index) {
                if (value.Index != null) {
                    delete value.Index;
                }
            });
        },

        _renderBlockAppointments: function () {
            this.element.find(".e-blocktimewrapper").remove();
            if (!this.model.blockoutSettings.enable || (!ej.isNullOrUndefined(this.model.blockoutSettings) && this.model.blockoutSettings.dataSource instanceof ej.DataManager) || this.currentView() == "agenda")
                return;
            this._processBlockApps();
            var dateCount = this.model.orientation == "horizontal" && this.currentView() == "month" ? $.extend(true, [], this.monthDays) : $.extend(true, [], this._dateRender);
            if (!this.model.group) this.res1 = ["0"];
            for (var res = 0; res < this.res1.length; res++) {
                var day = 0, diff, count = dateCount.length;
                if (new Date(dateCount[0]) < this.model.minDate)
                    day = Math.floor((new Date(this.model.minDate) - new Date(dateCount[0])) / (1000 * 60 * 60 * 24));
                if (new Date(dateCount[dateCount.length - 1]) > this.model.maxDate) {
                    diff = Math.floor((new Date(dateCount[dateCount.length - 1]) - new Date(this.model.maxDate)) / (1000 * 60 * 60 * 24));
                    count = dateCount.length - diff;
                }
                if (this._resWorkWeek) {
                    count = 0; day = 0; var temp = 0;
                    for (var a = 0; a < res + 1; a++) {
                        if (!ej.isNullOrUndefined(this.res1[a][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]])) {
                            count += this.res1[a][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]].length;
                            if (a == res) temp += this.res1[a][this._tempResource[this._tempResource.length - 1].resourceSettings["workWeek"]].length;
                        }
                        else {
                            count += this.model.workWeek.length;
                            if (a == res) temp += this.model.workWeek.length;
                        }
                        if (a == res) {
                            day = count - temp;
                            break;
                        }
                    }
                }
                for (day; day < count; day++) {
                    this._getBlockIntervals(day, res, dateCount);
                }
            }
        },

        _processBlockApps: function () {
            this._processedIntervals = [];
            var data = $.extend(true, [], this.model.blockoutSettings.dataSource);
            for (var app = 0; app < data.length; app++) {
                data[app] = this._processtimeZone(data[app]);
                if (new Date(new Date(data[app][this.model.blockoutSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(data[app][this.model.blockoutSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime())
                    this._blockTimeSplit(data[app], new Date(data[app][this.model.blockoutSettings["startTime"]]), new Date(data[app][this.model.blockoutSettings["endTime"]]));
                else
                    this._processedIntervals.push(data[app]);
            }
        },

        _blockTimeSplit: function (app, startTime, endTime) {
            var start = (new Date(this._dateRender[0]) <= startTime) ? startTime : new Date(this._dateRender[0]);
            var end = new Date(new Date(endTime).getFullYear(), new Date(endTime).getMonth(), new Date(endTime).getDate(), 23, 59, 59);
            var next = 0, differDate, nextDay, day_start, day_end;
            while (start <= end) {
                differDate = 0; day_start = start;
                if (this.currentView() == "month" || this._isCustomMonthView() || (this.currentView() != "agenda" && this.currentView() != "day" && this.model.orientation == "horizontal")) {
                    if ((this.model.orientation == "horizontal" && this.currentView() == "month"))
                        differDate = new Date(day_start.getFullYear(), day_start.getMonth() + 1, 0).getDate() - (day_start.getDate());
                    else if (this.currentView() == "customview" && (this._renderDays <= 7 || this.model.orientation == "horizontal")) {
                        start = (new Date(new Date(day_start).getFullYear(), new Date(day_start).getMonth(), new Date(day_start).getDate()));
                        if (this._dateRender.indexOf(start.getTime()) != -1)
                            differDate = (this._dateRender.length - 1) - this._dateRender.indexOf(start.getTime());
                        else
                            differDate = (start.getTime() < new Date(this._dateRender[0]).getTime()) ? ((new Date(new Date(this._dateRender[0]).setDate(new Date(this._dateRender[0]).getDate() - 1)).getTime() - new Date(start).setHours(0, 0, 0, 0)) / 3600000) / 24 : (start.getTime() > new Date(this._dateRender[this._dateRender.length - 1]).setHours(23, 59, 59)) ? this._dateRender.length - 1 : 0;
                    }
                    else {
                        if (!this.model.showNextPrevMonth && this.currentView() == "month" && new Date(new Date(this.currentDate()).getFullYear(), new Date(this.currentDate()).getMonth(), 1).getTime() != new Date(start.getFullYear(), start.getMonth(), 1).getTime())
                            differDate = new Date(day_start.getFullYear(), day_start.getMonth() + 1, 0).getDate() - (day_start.getDate());
                        else
                            differDate = 6 - day_start.getDay() + this._firstdayofweek;
                        if (this._firstdayofweek > day_start.getDay())
                            differDate = (6 - day_start.getDay()) - (7 - this._firstdayofweek);
                    }
                }
                nextDay = new Date(new Date(start).getFullYear(), new Date(start).getMonth(), new Date(start).getDate() + differDate);
                day_end = (new Date(nextDay).getDate() == new Date(endTime).getDate()) ? new Date(new Date(nextDay).setHours(endTime.getHours(), endTime.getMinutes(), endTime.getSeconds())) : new Date(new Date(nextDay).setHours(23, 59, 59));
                if (day_end >= new Date(endTime))
                    day_end = app[this.model.blockoutSettings["endTime"]];
                if (!this.model.showNextPrevMonth && this.currentView() == "month" && new Date(start.getFullYear(), start.getMonth(), 1).getTime() != new Date(day_end.getFullYear(), day_end.getMonth(), 1).getTime())
                    day_end = new Date(start.getFullYear(), start.getMonth() + 1, 0, day_end.getHours(), day_end.getMinutes(), day_end.getSeconds());
                var data = {};
                data[this.model.blockoutSettings["startTime"]] = day_start;
                data[this.model.blockoutSettings["endTime"]] = day_end;
                this._processedIntervals.push($.extend({}, app, data));
                next = (this.model.orientation == "horizontal" && this.currentView() == "workweek" && new Date(this._dateRender[0]).getDay() == 1 && new Date(this._dateRender[this._dateRender.length - 1]).getDay() == 5) ? 3 : 1;
                start = new Date(new Date(day_end).getFullYear(), new Date(day_end).getMonth(), new Date(day_end).getDate() + next);
                if (new Date(this._dateRender[this._dateRender.length - 1]) < start) {
                    break;
                }
            }
        },

        _getBlockIntervals: function (day, res, dateCount) {
            var appointmentsList = this._processedIntervals;
            var predicate2 = ej.Predicate(this.model.blockoutSettings["endTime"], ej.FilterOperators.greaterThanOrEqual, new Date(dateCount[day])).and(this.model.blockoutSettings["startTime"], ej.FilterOperators.lessThanOrEqual, new Date(new Date(dateCount[day]).setHours(23, 59, 59)));
            var predicate1 = ej.Predicate(this.model.blockoutSettings["startTime"], ej.FilterOperators.greaterThanOrEqual, new Date(dateCount[day])).and(this.model.blockoutSettings["startTime"], ej.FilterOperators.lessThanOrEqual, new Date(new Date(dateCount[day]).setHours(23, 59, 59)));
            var predicate = predicate2["or"](predicate1);
            predicate = !ej.isNullOrUndefined(this.model.group) && ej.scheduleFeatures.resources ? predicate["and"](this.model.blockoutSettings.resourceId, ej.FilterOperators.equal, this.res1[res][this._tempResource[this._tempResource.length - 1].resourceSettings["id"]]) : predicate;
            appointmentsList = new ej.DataManager(appointmentsList).executeLocal(new ej.Query().where(predicate));
            for (var app = 0; app < appointmentsList.length; app++) {
                if ((new Date(new Date(dateCount[day]).setHours(0, 0, 0, 0)).getTime() == new Date(new Date(appointmentsList[app][this.model.blockoutSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime()) &&
            (new Date(new Date(dateCount[day]).setHours(0, 0, 0, 0)).getTime() <= new Date(new Date(appointmentsList[app][this.model.blockoutSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime()) &&
            (new Date(new Date(appointmentsList[app][this.model.blockoutSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime() <= new Date(new Date(appointmentsList[app][this.model.blockoutSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime())) {
                    if (this.currentView() == "month" || this._isCustomMonthView() || !this.model.timeScale.enable)
                        (appointmentsList[app][this.model.blockoutSettings["isAllDay"]]) && this._renderMonthBlockTime(appointmentsList[app], day, res);
                    else
                        this._renderBlockTime(appointmentsList[app], day, res);
                }
            }
        },

        _renderBlockTime: function (record, day, res) {
            var cellHeight = this.element.find(".e-workcells").outerHeight();
            var startHour = parseInt(this.model.startHour) < parseInt(this.model.endHour) ? parseInt(this.model.startHour) : 0;
            var endHour = parseInt(this.model.startHour) < parseInt(this.model.endHour) ? parseInt(this.model.endHour) : 24;
            var dateCount = this._getDateCount(res);
            var rStartTime = record[this.model.blockoutSettings["startTime"]];
            var rEndTime = record[this.model.blockoutSettings["endTime"]];
            rStartTime = new Date(rStartTime).getHours() < startHour ? new Date(new Date(rStartTime).setHours(startHour, rStartTime.getMinutes(), rStartTime.getSeconds())) : rStartTime;
            rEndTime = endHour <= rEndTime.getHours() ? new Date(new Date(rEndTime).setHours(endHour, 00, 00)) : rEndTime;
            var startTime = ((new Date(rStartTime).getHours()) < startHour) ? (new Date(rStartTime).getHours() + (-new Date(rStartTime).getHours()) + (-new Date(rStartTime).getMinutes())) : (new Date(rStartTime).getHours() + (-startHour));
            if (rStartTime <= rEndTime && (new Date(dateCount[0]).getTime() <= rStartTime.getTime() && new Date(new Date(dateCount[dateCount.length - 1]).setHours(23, 59, 59)) >= rStartTime.getTime())) {
                if (this.model.orientation == "vertical") {
                    var appWidth = "100%", appHeight, topPosition, leftPosition = 0;
                    appHeight = ((parseFloat(new Date(new Date(rEndTime).getTime()) - new Date(new Date(rStartTime).getTime()))) / (60 * 1000) * (cellHeight * this.model.timeScale.minorSlotCount) / (this.model.timeScale.majorSlot)) - 1;
                    topPosition = ((parseFloat((((new Date(rStartTime).getHours() * 60)) + new Date(rStartTime).getMinutes() + (new Date(rStartTime).getSeconds() / 60))) - parseInt((startTime * 60) / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) * (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) - (this.model.startHour * 60)) * cellHeight * (this.model.timeScale.minorSlotCount / this.model.timeScale.majorSlot);
                    var timeCellhtml = this._generateBlockElement(record, appWidth, appHeight, topPosition, leftPosition);
                    if (this._resWorkWeek)
                        $(this.element.find("td.e-workcells")[((startTime * this.model.timeScale.minorSlotCount) * this.element.find(".e-headercells").length) + day]).append(timeCellhtml);
                    else
                        $(this.element.find("td.e-workcells")[parseInt((startTime * 60) / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) * dateCount.length * this.res1.length + day + (dateCount.length * res)]).append(timeCellhtml);
                }
                else {
                    var newResCollection = this._horiGroupCollection(), appHeight = cellHeight, appWidth, topPosition = 0, leftPosition, groupIndex = 0;
                    if (!ej.isNullOrUndefined(this.model.group) && this.model.group.resources.length > 1) {
                        var templist = new ej.DataManager(this.res1).executeLocal(new ej.Query().where(this._tempResource[this._tempResource.length - 1].resourceSettings["id"], ej.FilterOperators.equal, record[this.model.blockoutSettings.resourceId]));
                        groupIndex = this._findResourceIndex(newResCollection, this._tempResource[this._tempResource.length - 2].resourceSettings["id"], templist[0][this._tempResource[this._tempResource.length - 1].resourceSettings["groupId"]]) + 1;
                    }
                    var resValue = (!ej.isNullOrUndefined(this.model.group) && !ej.isNullOrUndefined(this._tempResource)) ? this._findResourceIndex(this.res1, this._tempResource[this._tempResource.length - 1].resourceSettings.id, record[this.model.blockoutSettings.resourceId]) + 1 : 1;
                    var diffTime, diffDays, diffMinutes, cellIndex;
                    if (new Date(new Date(new Date(record[this.model.blockoutSettings["startTime"]]).setHours(0, 0, 0, 0)).getTime()) < new Date(new Date(new Date(record[this.model.blockoutSettings["endTime"]]).setHours(0, 0, 0, 0)).getTime())) {
                        var endDiffer = (new Date(rEndTime) < new Date(new Date(rEndTime).setHours(this.model.endHour, 0, 0)) && new Date(rEndTime) < new Date(new Date(rEndTime).setHours(this.model.startHour, 0, 0))) ? (((this.model.endHour) / 2) * 60) : ((new Date(rEndTime).getHours() * 60) + new Date(rEndTime).getMinutes());
                        var startDiffer = new Date(rStartTime) > new Date(new Date(rEndTime).setHours(this.model.startHour, 0, 0)) ? (this.model.startHour * 60) : ((new Date(rStartTime).getHours() * 60) + new Date(rStartTime).getMinutes());
                        var i = 1, rEnd, rStart, end, start, diffTime;
                        rEnd = this._dateRender.indexOf(new Date(rEndTime).setHours(0, 0, 0, 0));
                        rStart = this._dateRender.indexOf(new Date(rStartTime).setHours(0, 0, 0, 0));
                        if (rEnd == -1) {
                            while (i < 7) {
                                if (new Date(this._dateRender[this._dateRender.length - i]).getTime() < new Date(rEndTime).setHours(0, 0, 0, 0)) {
                                    end = this._dateRender.length - i;
                                    endDiffer = this.model.endHour * 60;
                                    break;
                                }
                                else i++;
                            }
                        }
                        else
                            end = rEnd;
                        if (rStart == -1) {
                            start = day;
                            startDiffer = this.model.startHour * 60;
                        }
                        else
                            start = rStart;
                        diffTime = end - start;
                        diffMinutes = ((((diffTime) * ((endHour - startHour)) * 60) - startDiffer) + endDiffer);
                        cellIndex = (((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount) * (60 / this.model.timeScale.majorSlot) * day) + ((rStart == -1) ? 0 : startTime * this.model.timeScale.minorSlotCount) * (60 / this.model.timeScale.majorSlot);
                        appWidth = ((this.element.find(".e-workcells").outerWidth() / (30)) * diffMinutes) + ((diffMinutes / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) - 2);
                        if (diffDays > this._dateRender.length) {
                            diffDays = new Date(this._dateRender[this._dateRender.length - 1]).getDay() + 1 - new Date(rStartTime).getDay();
                            diffMinutes = ((diffDays) * (endHour - startHour) * 60);
                            appWidth = diffMinutes / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount) * this.element.find(".e-workcells").width() + ((diffMinutes / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) - 3);
                        }
                        leftPosition = (rStart == -1 ? 0 : parseFloat((new Date(rStartTime).getMinutes())) * (this.element.find(".e-workcells")[0].offsetWidth) * this.model.timeScale.minorSlotCount / this.model.timeScale.majorSlot);
                    }
                    else {
                        leftPosition = (parseFloat((new Date(rStartTime).getMinutes() + (new Date(rStartTime).getMilliseconds() / 60))) * ($(this.element.find(".e-workcells")[1]).width() * this.model.timeScale.minorSlotCount) / this.model.timeScale.majorSlot) - 1;
                        diffMinutes = ((new Date(rEndTime).getHours() * 60) + new Date(rEndTime).getMinutes()) - ((new Date(rStartTime).getHours() * 60) + new Date(rStartTime).getMinutes()) + 1;
                        appWidth = diffMinutes / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount) * this.element.find(".e-workcells").width() + ((diffMinutes / (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) - 2) + 1;
                        cellIndex = (((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount) * (60 / this.model.timeScale.majorSlot) * day) + (startTime * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot));
                    }
                    appWidth = appWidth + "px";
                    var timeCellhtml = this._generateBlockElement(record, appWidth, appHeight, topPosition, leftPosition);
                    $($(this.element.find(".e-workcellstab tr")[resValue + groupIndex - 1]).find("td.e-workcells")[cellIndex]).append(timeCellhtml);
                }
            }
        },
        _generateBlockElement: function (record, appWidth, appHeight, topPosition, leftPosition) {
            var userTempId = (this.model.blockoutSettings.templateId) ? true : false;
            var userTempHtml = userTempId ? this._getUserTemplate(this.model.blockoutSettings.templateId, record) : "";
            var blockClass = record[this.model.blockoutSettings["isBlockAppointment"]] ? "e-blockenable" : '';
            var timeCellhtml = $(this.blockTimeTemplate.render({ id: record[this.model.blockoutSettings["id"]], subject: record[this.model.blockoutSettings["subject"]], appWidth: appWidth, appHeight: appHeight, left: leftPosition, top: topPosition, blockClass: blockClass, customStyle: record[this.model.blockoutSettings["customStyle"]], userTempId: userTempId, userTemplate: userTempHtml }));
            (!ej.isNullOrUndefined(this.model.queryCellInfo)) && this._renderQueryCellInfo("blockAppointment", record, timeCellhtml);
            return timeCellhtml;
        },
        _renderMonthBlockTime: function (record, day, res) {
            var renderDate = (this.model.orientation == "vertical") ? this._dateRender : this.monthDays;
            var startTime = new Date(record[this.model.blockoutSettings["startTime"]]);
            var endTime = new Date(record[this.model.blockoutSettings["endTime"]]);
            var appWidth, appHeight, topPosition = 0, leftPosition = 0, userTempId, userTempHtml, blockClass, timeCellhtml, cellHeight;
            var cellWidth = this.model.orientation == "vertical" ? this.element.find(".e-monthcells").width() : this.element.find(".e-workcells").width();
            var start = new Date(startTime);
            var r_end = new Date(new Date(renderDate[renderDate.length - 1]).setHours(23, 59, 59));
            var end = new Date(endTime) > r_end ? r_end : new Date(endTime);
            var diffInDays = (start.getHours() == 0 && end.getHours() == 0) ? Math.ceil(((new Date(end) - new Date(start)) / (1000 * 3600)) / 24) : Math.ceil(((new Date(end).setHours(23, 59, 59) - new Date(start).setHours(0, 0, 0)) / (1000 * 3600)) / 24);
            if (startTime <= endTime) {
                if (this.model.orientation == "vertical") {
                    var maxDays = this._firstdayofweek == 0 ? 7 - (new Date(start).getDay()) : 7 - (new Date(start).getDay()) + this._firstdayofweek;
                    diffInDays = diffInDays >= maxDays ? maxDays : diffInDays;
                    var rowPosition = Math.ceil((day + 1) / 7);
                }
                appWidth = (diffInDays * cellWidth) + "px";
                var resIndex = (this._tempResource.length != 0 && !ej.isNullOrUndefined(this.model.group) && ej.scheduleFeatures.resources) ? this._findResourceIndex(this.res1, this._tempResource[this._tempResource.length - 1].resourceSettings.id, record[this.model.blockoutSettings.resourceId]) : 0;
                var cellId = this.model.orientation == "vertical" ? ((resIndex * (7) + (new Date(startTime).getDay() + 1)) + ((rowPosition - 1) * (this.res1.length * 7)) - this._firstdayofweek) : day + 1;
                if (this.model.orientation == "vertical" && this._firstdayofweek != 0 && new Date(startTime).getDay() < this._firstdayofweek)
                    cellId = (resIndex * (7) + (new Date(startTime).getDay() + 1)) + ((rowPosition - 1) * (this.res1.length * 7)) - this._firstdayofweek + 7;
                if (this.model.orientation == "vertical")
                    cellHeight = $(this.element.find("td.e-monthcells")[cellId - 1]).closest("tr").find(".e-monthcells").outerHeight();
                else {
                    var newResCollection = this._horiGroupCollection(), groupIndex = 0;
                    if (!ej.isNullOrUndefined(this.model.group) && this.model.group.resources.length > 1) {
                        var templist = new ej.DataManager(this.res1).executeLocal(new ej.Query().where(this._tempResource[this._tempResource.length - 1].resourceSettings["id"], ej.FilterOperators.equal, record[this.model.blockoutSettings.resourceId]));
                        groupIndex = this._findResourceIndex(newResCollection, this._tempResource[this._tempResource.length - 2].resourceSettings["id"], templist[0][this._tempResource[this._tempResource.length - 1].resourceSettings["groupId"]]) + 1;
                    }
                    var resValue = (!ej.isNullOrUndefined(this.model.group) && !ej.isNullOrUndefined(this._tempResource)) ? this._findResourceIndex(this.res1, this._tempResource[this._tempResource.length - 1].resourceSettings.id, record[this.model.blockoutSettings.resourceId]) + 1 : 1;
                    cellHeight = $(this.element.find(".e-workcellstab tr")[resValue + groupIndex - 1]).find(".e-workcells").height();
                }
                appHeight = cellHeight - this.element.find('.e-monthheader').height();
                var timeCellhtml = this._generateBlockElement(record, appWidth, appHeight, topPosition, leftPosition);
                if (this.model.orientation == "vertical")
                    $(this.element.find("td.e-monthcells")[cellId - 1]).append(timeCellhtml);
                else if (this.model.orientation == "horizontal" && ej.scheduleFeatures.horizontal)
                    $($(this.element.find(".e-workcellstab tr")[resValue + groupIndex - 1]).find("td.e-workcells")[cellId - 1]).append(timeCellhtml);
            }
        },
        _checkAvailability: function (record) {
            if (this.model.blockoutSettings.enable) {
                var start = new Date(record[this._appointmentSettings["startTime"]]), end = new Date(record[this._appointmentSettings["endTime"]]), resId, available = [];
                if (!ej.isNullOrUndefined(this.model.group) && ej.scheduleFeatures.resources)
                    resId = record[this._appointmentSettings.resourceFields.toString().split(',')[this._tempResource.length - 1].trim()];
                var predicate2 = ej.Predicate(this.model.blockoutSettings["startTime"], ej.FilterOperators.greaterThanOrEqual, start).and(this.model.blockoutSettings["endTime"], ej.FilterOperators.greaterThanOrEqual, start).and(this.model.blockoutSettings["startTime"], ej.FilterOperators.lessThan, end);
                var predicate1 = ej.Predicate(this.model.blockoutSettings["startTime"], ej.FilterOperators.lessThanOrEqual, start).and(this.model.blockoutSettings["endTime"], ej.FilterOperators.greaterThan, start);
                var predicate = predicate2["or"](predicate1);
                predicate = !ej.isNullOrUndefined(resId) && !ej.isNullOrUndefined(this.model.group) && ej.scheduleFeatures.resources ? predicate["and"](this.model.blockoutSettings.resourceId, ej.FilterOperators.equal, resId) : predicate;
                predicate = predicate["and"](this.model.blockoutSettings["isBlockAppointment"], ej.FilterOperators.equal, true);
                available = new ej.DataManager(this._processedIntervals).executeLocal(new ej.Query().where(predicate));
                return available;
            }
            return [];
        },
        _alertBlockError: function () {
            $("#" + this._id + "alertWindow").ejDialog("instance").option("title", this._getLocalizedLabels("BlockIntervalAlertTitle"));
            this._alertWindow.find(".e-alerttext").html(this._getLocalizedLabels("BlockIntervalError"));
            this._alertWindow.find(".e-alertOk").html(this._getLocalizedLabels("Ok"));
            this._alertWindow.ejDialog("open");
        },
        _getNewEndTime: function (newStartTime, hours, minutes) {
            var newEndTime = new Date(newStartTime);
            newEndTime.setHours(newEndTime.getHours() + hours);
            newEndTime.setMinutes(newEndTime.getMinutes() + minutes);
            return newEndTime;
        },

        _getNewStartTime: function (newTopTime, newStartTime) {
            newStartTime.setHours((newStartTime.getHours()) + parseInt(this.model.startHour) + parseInt(newTopTime / 60));
            newStartTime.setMinutes((newStartTime.getMinutes()) + parseInt(newTopTime % 60));
            newStartTime.setMinutes(Math.round(newStartTime.getMinutes() / 10.0) * 10);
            return newStartTime;
        },

        _createTemplate: function (elt, templateId) {
            var scriptElt = document.createElement("script");
            scriptElt.id = (this._id + templateId + "_Template");
            scriptElt.type = "text/x-jsrender";
            scriptElt.text = elt;
            $("body").append(scriptElt);
            return scriptElt;
        },

        _documentOnKeyDown: function (event) {
            if (this.model.allowKeyboardNavigation) {
                var oEl = event.target || document.activeElement || event.srcElement;
                if (event.which == 27) {
                    this._processEscapeKey();
                }
                else if (event.which == 13) {
                    this._processEnterKey(oEl);
                }
                else if (event.shiftKey == false && event.which == 9) {
                    this._processWindowTab(oEl);
                }
            }
        },

        _processWindowTab: function (oEl) {
            if ($(oEl).hasClass("qAppDone"))
                this._quickAppointWindow.find(".subject").focus();
            else if ($(oEl).hasClass("e-appointcancel") || $(oEl).hasClass("e-cancelrecur"))
                this._appointmentAddWindow.find(".subject").focus();
            else if ($(oEl).hasClass("e-editseries"))
                this.model.showQuickWindow && this._quickAppDetailsWindow.focus();
        },

        _onKeyDown: function (event) {
            if (this.model.allowKeyboardNavigation) {
                this.model.showQuickWindow && (this._quickAppointWindow.ejDialog("close") && this._quickAppDetailsWindow.ejDialog("close"));
                var oRowCell = this.element.find('div.e-draggableworkarea tr');
                var oEl = event.target || document.activeElement || event.srcElement;
                $(oEl).hasClass("e-alldaycells") && (oRowCell = this.element.find(".e-alldaycells").parent());
                if (this._trigger("keyDown", { event: event }))
                    return false;
                if ($(oEl).hasClass("e-workcells") || $(oEl).hasClass("e-alldaycells") || $(oEl).hasClass("e-monthcells")) {
                    this._getDateByElement($(oEl));
                    var curDate = this.curDate;
                    (event.which == 39) && curDate.setDate(curDate.getDate() + 1);
                    (event.which == 37) && curDate.setDate(curDate.getDate() - 1);
                    if ((curDate >= this.model.minDate) && (curDate <= this.model.maxDate)) {
                        this.element.find("#" + this._id + "_navigator").ejDatePicker("hide");
                        if ($(oEl).hasClass("e-workcells") || $(oEl).hasClass("e-alldaycells") || $(oEl).hasClass("e-monthcells"))
                            $(oEl).addClass("e-selectedCell");
                        if (event.shiftKey == false && event.which == 38) { //up arrow navigation
                            this._stopDefaultAction(event);
                            this._processUpArrow(oEl, oRowCell);
                        }
                        else if (event.shiftKey == false && event.which == 40) { //down arrow for cell navigation
                            this._stopDefaultAction(event);
                            this._processDown(oEl, oRowCell);
                        }
                        else if (event.ctrlKey == false && event.shiftKey == false && event.which == 39) { //right arrow cell navigation
                            this._stopDefaultAction(event);
                            this._processRight(oEl, oRowCell);
                        }
                        else if (event.ctrlKey == false && event.shiftKey == false && event.which == 37) { //left arrow cell navigation
                            this._stopDefaultAction(event);
                            this._processLeft(oEl, oRowCell);
                        }
                        else if (event.shiftKey == true && event.which == 38) { //shift + up arrow
                            this._stopDefaultAction(event);
                            this._processShiftUp(oEl, event, oRowCell);
                        }
                        else if (event.shiftKey == true && event.which == 40) { //shift + down arrow
                            this._stopDefaultAction(event);
                            this._processShiftDown(oEl, event, oRowCell);
                        }
                        else if (event.shiftKey == true && event.which == 37) { //shift+left
                            this._stopDefaultAction(event);
                            this._processShiftLeft(oEl, event, oRowCell);
                        }
                        else if (event.shiftKey == true && event.which == 39) { //shift+right
                            this._stopDefaultAction(event);
                            this._processShiftRight(oEl, event, oRowCell);
                        }
                    }
                }
                else if (this.currentView() == "agenda" && $(oEl).hasClass("e-agendacells")) {
                    this._stopDefaultAction(event);
                    if (event.which == 38 || event.which == 40) {
                        this.element.find('.e-selectedAppointment').removeClass("e-selectedAppointment");
                        var rowcount = oRowCell.length - 1;
                        var currrowindex = this.element.find(".e-selectedCell").parent().index();
                        var newcur = (event.which == 38) ? parseInt(currrowindex) - 1 : parseInt(currrowindex) + 1;
                        if (newcur >= 0 && newcur <= rowcount && currrowindex != "undefined") {
                            $(oRowCell).find(".e-eventcolumn,.e-timecolumn").removeClass("e-selectedCell");
                            $(oRowCell[newcur]).find(".e-eventcolumn,.e-timecolumn").addClass("e-selectedCell").attr("tabIndex", 0).focus();
                        }
                    }
                }
                if (event.altKey == true && event.which == 67) { //Alt+C To show/hide the calendar pane
                    this._stopDefaultAction(event);
                    this.element.find(".e-datedisplay").click();
                }
                else if (event.ctrlKey == true && event.which == 37) { //Previous button
                    this._stopDefaultAction(event);
                    this.element.find("div.e-navigateprevious").click();
                    this.element.find('div.e-navigateprevious').attr("tabIndex", 0).focus();
                    this.element.find("#" + this._id + "_navigator").ejDatePicker({ value: new Date(this.currentDate()) });
                }
                else if (event.ctrlKey == true && event.which == 39) { //Next button
                    this._stopDefaultAction(event);
                    this.element.find("div.e-navigatenext").click();
                    this.element.find('div.e-navigatenext').attr("tabIndex", 0).focus();
                    this.element.find("#" + this._id + "_navigator").ejDatePicker({ value: new Date(this.currentDate()) });
                }
                else if ((event.altKey == true && event.which == 107) || (event.altKey == true && event.which == 187) || (event.altKey == true && event.which == 61)) { //Alt + "+" to navigate through the toolbar items
                    this._stopDefaultAction(event);
                    this._navigateToolbarRight(event);
                }
                else if ((event.altKey == true && event.which == 189) || (event.altKey == true && event.which == 109) || (event.altKey == true && event.which == 45) || (event.altKey == true && event.which == 173)) { // Alt + "-" to navigate back through the toolbar items
                    this._stopDefaultAction(event);
                    this._navigateToolbarLeft(event);
                }
                else if (event.ctrlKey == true && event.which == 67) { //Cancel Ctrl+C
                    this._stopDefaultAction(event);
                    this._cancel();
                }
                else if (event.which == 32) { //spacebar
                    if ($(document.activeElement)[0] === this.element.find("div.e-navigateprevious")[0]) {
                        this._stopDefaultAction(event);
                        this.element.find("div.e-navigateprevious").click();
                        this.element.find('div.e-navigateprevious').attr("tabIndex", 0).focus();
                        this.element.find("#" + this._id + "_navigator").ejDatePicker({ value: new Date(this.currentDate()) });
                    }
                    else if ($(document.activeElement)[0] === this.element.find("div.e-navigatenext")[0]) {
                        this._stopDefaultAction(event);
                        this.element.find("div.e-navigatenext").click();
                        this.element.find('div.e-navigatenext').attr("tabIndex", 0).focus();
                        this.element.find("#" + this._id + "_navigator").ejDatePicker({ value: new Date(this.currentDate()) });
                    }
                }
                else if (event.altKey == true && event.which == 78) { //New appointment window
                    this._stopDefaultAction(event);
                    this.currentView() != "agenda" && this._newAppWindow(oEl, oRowCell);
                    this.element.find("#" + this._id + "_navigator").ejDatePicker("hide");
                }
                else if (event.ctrlKey == true && event.which == 69) { //(E)Edit appointment window
                    this._stopDefaultAction(event);
                    var elmt = this.element.find(".e-selectedAppointment");
                    if (this.currentView() == "agenda" && this.element.find('.e-selectedCell').length > 0) {
                        selCell = this.element.find(".e-selectedCell").parent().find(".e-agendaappointment");
                        selCell.hasClass("e-agendaappointment") && (elmt = selCell);
                    }
                    if (elmt.length > 0) {
                        this._editKey = true;
                        this._cellClick = false;
                        this._appointmentWindow(elmt);
                        this.element.find("#" + this._id + "_navigator").ejDatePicker("hide");
                    }
                }
                else if (event.which == 46) { //Delete
                    this._stopDefaultAction(event);
                    var delap = this.element.find('.e-selectedAppointment');
                    if (this.currentView() == "agenda" && this.element.find('.e-selectedCell').length > 0) {
                        var selCell = this.element.find(".e-selectedCell").parent().find(".e-agendaappointment");
                        selCell.hasClass("e-agendaappointment") && (delap = selCell);
                    }
                    if (delap.length > 0) {
                        this._appUid = delap.attr('guid');
                        this._deleteAppoint();
                    }
                }
                else if (event.shiftKey == true && event.which == 9) { //Shift + tab for reverse navigation of appointments
                    this._stopDefaultAction(event);
                    this._reverseTab(oEl, event, oRowCell);
                    this.element.find("#" + this._id + "_navigator").ejDatePicker("hide");
                }
                else if (event.shiftKey == false && event.which == 9) { // For tab navigation of appointments
                    this._stopDefaultAction(event);
                    this._processTab(oEl, event, oRowCell);
                    this.element.find("#" + this._id + "_navigator").ejDatePicker("hide");
                }
                var proxy = this;
                this.currentView() != "agenda" && this._moveScrollContent(oEl, proxy);
            }
        },

        _processShiftUp: function (oEl, event, oRowCell) {
            if (this.model.orientation == "horizontal") return false;
            if ($(oEl).hasClass('e-workcells')) {
                var rowcount = oRowCell.length - 1;
                var currrowindex = $(oEl).parent()[0].rowIndex;
                var currcolindex = $(oEl)[0].cellIndex;
                if (currrowindex > 0 && currrowindex <= rowcount && currrowindex != "undefined") {
                    var newcur = parseInt(currrowindex) - 1;
                    if (newcur >= 0) {
                        if ($(oRowCell[newcur].cells[currcolindex]).hasClass("e-selectedCell")) {
                            $(oRowCell[newcur].cells[currcolindex]).attr("tabIndex", 0).focus();
                            $(oRowCell[currrowindex].cells[currcolindex]).removeClass("e-selectedCell");
                        }
                        else {
                            $(oRowCell[currrowindex].cells[currcolindex]).addClass("e-selectedCell");
                            $(oRowCell[newcur].cells[currcolindex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                        }
                    }
                    this._currentRowIndex = newcur;
                    this._currentColIndex = currcolindex;
                }
                else {
                    $(oRowCell[currrowindex].cells[currcolindex]).attr("tabIndex", 0).focus();
                    this._currentRowIndex = currrowindex;
                    this._currentColIndex = currcolindex;
                }

            }
            else if ($(oEl).hasClass('e-monthcells')) {
                var resourceIndex = Math.floor($(oEl).index() / 7);
                var rowcount = oRowCell.length - 1, resmaxcolindex = 7 * (resourceIndex + 1), mincolindex = 7 * (parseInt(resourceIndex));
                var currrowindex = $(oEl).parent()[0].rowIndex;
                var currcolindex = $(oEl)[0].cellIndex;
                if (currrowindex > 0 && currrowindex <= rowcount && currrowindex != "undefined") {
                    var newcur = parseInt(currrowindex) - 1;
                    if (newcur >= 0) {
                        if ($(oRowCell[newcur].cells[currcolindex]).hasClass("e-selectedCell")) {
                            for (var i = currcolindex; i >= mincolindex; i--) {
                                $(oRowCell[currrowindex].cells[i]).attr("tabIndex", 0).focus();
                                $(oRowCell[currrowindex].cells[i]).removeClass("e-selectedCell");
                            }
                            for (var j = resmaxcolindex - 1; j >= currcolindex; j--) {
                                if (newcur >= 0) {
                                    $(oRowCell[newcur].cells[j]).attr("tabIndex", 0).focus();
                                    $(oRowCell[newcur].cells[j]).removeClass("e-selectedCell");
                                }
                            }
                            !$(oRowCell[newcur].cells[currcolindex]).hasClass("e-othermonths") && $(oRowCell[newcur].cells[currcolindex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                        }
                        else {
                            for (var i = currcolindex; i >= mincolindex; i--)
                                $(oRowCell[currrowindex].cells[i]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                            for (var j = resmaxcolindex - 1; j >= currcolindex; j--) {
                                if (newcur >= 0)
                                    !$(oRowCell[newcur].cells[j]).hasClass("e-othermonths") && $(oRowCell[newcur].cells[j]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                            }
                        }
                    }
                    else
                        $(oRowCell[newcur + 1].cells[currcolindex]).attr("tabIndex", 0).focus();
                }
                else
                    return false;
            }
            else
                return false;

        },

        _processShiftDown: function (oEl, event, oRowCell) {
            if (this.model.orientation == "horizontal") return false;
            if ($(oEl).hasClass('e-workcells')) {
                var rowcount = oRowCell.length - 1;
                var currrowindex = $(oEl).parent()[0].rowIndex;
                var currcolindex = $(oEl)[0].cellIndex;
                if (currrowindex >= 0 && currrowindex <= rowcount && currrowindex != "undefined") {
                    $(oRowCell[currrowindex].cells[currcolindex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    var newcur = parseInt(currrowindex) + 1;
                    if (newcur <= rowcount) {
                        if ($(oRowCell[newcur].cells[currcolindex]).hasClass("e-selectedCell")) {
                            $(oRowCell[newcur].cells[currcolindex]).attr("tabIndex", 0).focus();
                            $(oRowCell[currrowindex].cells[currcolindex]).removeClass("e-selectedCell");
                        }
                        else {
                            $(oRowCell[currrowindex].cells[currcolindex]).addClass("e-selectedCell");
                            $(oRowCell[newcur].cells[currcolindex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                        }
                        this._currentRowIndex = newcur;
                        this._currentColIndex = currcolindex;
                    }
                    else {
                        $(oRowCell[currrowindex].cells[currcolindex]).attr("tabIndex", 0).focus();
                        this._currentRowIndex = currrowindex;
                        this._currentColIndex = currcolindex;
                    }

                }
            }
            else if ($(oEl).hasClass('e-monthcells')) {
                var resourceIndex = Math.floor($(oEl).index() / 7);
                var rowcount = oRowCell.length - 1, resmaxcolindex = 7 * (resourceIndex + 1), mincolindex = 7 * (parseInt(resourceIndex));
                var currrowindex = $(oEl).parent()[0].rowIndex;
                var currcolindex = $(oEl)[0].cellIndex;
                if (currrowindex >= 0 && currrowindex <= rowcount && currrowindex != "undefined") {
                    var newcur = parseInt(currrowindex) + 1;
                    if (newcur < (this._dateRender.length) / 7) {
                        if ($(oRowCell[newcur].cells[currcolindex]).hasClass("e-selectedCell")) {
                            for (var i = currcolindex; i <= resmaxcolindex - 1; i++) {
                                $(oRowCell[currrowindex].cells[i]).attr("tabIndex", 0).focus();
                                $(oRowCell[currrowindex].cells[i]).removeClass("e-selectedCell");
                            }
                            for (var j = mincolindex; j <= currcolindex; j++) {
                                if (newcur < (this._dateRender.length) / 7) {
                                    $(oRowCell[newcur].cells[j]).attr("tabIndex", 0).focus();
                                    $(oRowCell[newcur].cells[j]).removeClass("e-selectedCell");
                                }
                            }
                            !$(oRowCell[newcur].cells[currcolindex]).hasClass("e-othermonths") && $(oRowCell[newcur].cells[currcolindex]).addClass("e-selectedCell");
                        }
                        else {
                            for (var i = currcolindex; i <= resmaxcolindex - 1; i++)
                                !$(oRowCell[currrowindex].cells[i]).hasClass("e-othermonths") && $(oRowCell[currrowindex].cells[i]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                            for (var j = mincolindex; j <= currcolindex; j++) {
                                if (newcur < (this._dateRender.length) / 7)
                                    !$(oRowCell[newcur].cells[j]).hasClass("e-othermonths") && $(oRowCell[newcur].cells[j]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                            }
                        }
                    }
                    else
                        $(oRowCell[newcur - 1].cells[currcolindex]).attr("tabIndex", 0).focus();
                }
                else
                    return false;
            }
            else
                return false;
        },

        _processShiftLeft: function (oEl, event, oRowCell) {
            var rowcount = oRowCell.length - 1;
            if ($(oEl).hasClass('e-workcells')) {
                var targetElement = oEl;
                var count = this.currentView() == "day" ? 1 : this.currentView() == "workweek" ? this.model.workWeek.length : 7;
                var viewCount = this.model.orientation == "vertical" ? count : this.currentView() == "month" ? this.totdays.length : count * (this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot);
                var resIndex = Math.floor($(targetElement).index() / viewCount);
                var resmaxcolindex = (viewCount * resIndex);
                var currColInx = $(targetElement)[0].cellIndex;
                var currRowInx = $(targetElement).parent()[0].rowIndex;
                var leftColInx = currColInx - 1;
                var irowcount = this.model.orientation == "vertical" ? 0 : currRowInx;
                var Hrowcount = this.model.orientation == "vertical" ? rowcount : currRowInx;
                var flag = this.model.orientation == "vertical" && this.model.showAllDayRow ? true : false;
                var ad = this.element.find(".e-alldaycells").parent();
                if (currColInx > 0 && leftColInx > parseInt(resmaxcolindex) - 1 && currColInx != "undefined") {
                    if ($(oRowCell[currRowInx].cells[leftColInx]).hasClass("e-selectedCell")) {
                        for (var i = irowcount; i <= parseInt(currRowInx) ; i++)
                            $(oRowCell[i].cells[currColInx]).removeClass("e-selectedCell");
                        for (var j = Hrowcount; j >= parseInt(currRowInx) ; j--)
                            $(oRowCell[j].cells[leftColInx]).removeClass("e-selectedCell");
                        flag && $(ad[0].cells[currColInx]).removeClass("e-selectedCell").attr("tabIndex", 0).focus();
                        $(oRowCell[currRowInx].cells[leftColInx]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    }
                    else {
                        for (var i = irowcount; i <= parseInt(currRowInx) ; i++)
                            $(oRowCell[i].cells[currColInx]).addClass("e-selectedCell");
                        for (var j = Hrowcount; j >= parseInt(currRowInx) ; j--)
                            $(oRowCell[j].cells[leftColInx]).addClass("e-selectedCell");
                        if (flag) {
                            $(ad[0].cells[currColInx]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                            $(ad[0].cells[leftColInx]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                        }
                        $(oRowCell[currRowInx].cells[leftColInx]).attr("tabIndex", 0).focus();
                    }
                    this._currentRowIndex = currRowInx;
                    this._currentColIndex = leftColInx;
                }
                else {
                    $(oRowCell[currRowInx].cells[leftColInx + 1]).attr("tabIndex", 0).focus();
                    this._currentRowIndex = currRowInx;
                    this._currentColIndex = leftColInx + 1;
                }
            }
            else if ($(oEl).hasClass('e-monthcells')) {
                var resIndex = Math.floor($(oEl).index() / 7);
                var rowcount = oRowCell.length - 1, mcolind = 7 * (parseInt(resIndex) + 1);
                var mincolindex = 7 * (parseInt(resIndex));
                var currrowindex = $(oEl).parent()[0].rowIndex;
                var currcolindex = $(oEl)[0].cellIndex;
                if (currcolindex >= mincolindex && currcolindex <= mcolind && currcolindex != "undefined") {
                    newcur = parseInt(currcolindex) - 1;
                    if ($(oRowCell[currrowindex].cells[newcur]).hasClass("e-selectedCell")) {
                        if (currcolindex == mincolindex && currrowindex >= 1) {
                            var newrow = parseInt(currrowindex) - 1;
                            var newcol = parseInt(mcolind) - 1;
                            if (newrow >= 0) {
                                $(oRowCell[newrow].cells[newcol]).attr("tabIndex", 0).focus();
                                $(oRowCell[newrow].cells[currcolindex]).removeClass("e-selectedCell");
                                $(oRowCell[currrowindex].cells[mincolindex]).removeClass("e-selectedClass");
                            }
                        }
                        else if (currcolindex < mcolind) {
                            newcur = parseInt(currcolindex) - 1;
                            $(oRowCell[currrowindex].cells[newcur]).attr("tabIndex", 0).focus();
                            $(oRowCell[currrowindex].cells[currcolindex]).removeClass("e-selectedCell");
                        }
                    }
                    else {
                        if (currcolindex == mincolindex && currrowindex >= 0) {
                            var newrow = parseInt(currrowindex) - 1;
                            var newcol = parseInt(mcolind) - 1;
                            if (newrow >= 0)
                                !$(oRowCell[newrow].cells[newcol]).hasClass("e-othermonths") && $(oRowCell[newrow].cells[newcol]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                            else
                                $(oRowCell[newrow + 1].cells[currcolindex]).attr("tabIndex", 0).focus();
                        }
                        else if (currcolindex < mcolind) {
                            newcur = parseInt(currcolindex) - 1;
                            !$(oRowCell[currrowindex].cells[newcur]).hasClass("e-othermonths") && $(oRowCell[currrowindex].cells[newcur]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                        }
                    }
                }
                else
                    return false;
            }
            else if ($(oEl).hasClass('e-alldaycells')) {
                var count = this.currentView() == "day" ? 1 : this.currentView() == "workweek" ? this.model.workWeek.length : 7;
                var resIndex = Math.floor($(oEl).index() / count);
                var resmaxcolindex = (count * resIndex);
                var currColInx = $(oEl)[0].cellIndex;
                var leftColInx = currColInx - 1;
                if (currColInx > 0 && leftColInx > parseInt(resmaxcolindex) - 1 && currColInx != "undefined") {
                    if ($(oRowCell[0].cells[leftColInx]).hasClass("e-selectedCell")) {
                        $(oRowCell[0].cells[currColInx]).removeClass("e-selectedCell");
                        $(oRowCell[0].cells[leftColInx]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    }
                    else
                        $(oRowCell[0].cells[leftColInx]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    this._currentRowIndex = 0;
                    this._currentColIndex = leftColInx;
                }
                else {
                    $(oRowCell[0].cells[leftColInx + 1]).attr("tabIndex", 0).focus();
                    this._currentRowIndex = 0;
                    this._currentColIndex = leftColInx + 1;
                }
            }
            else
                return false;
        },

        _processShiftRight: function (oEl, event, oRowCell) {
            if ($(oEl).hasClass('e-workcells')) {
                var rowcount = oRowCell.length - 1;
                var count = this.currentView() == "day" ? 1 : this.currentView() == "workweek" ? this.model.workWeek.length : 7;
                var viewCount = this.model.orientation == "vertical" ? count : this.currentView() == "month" ? this.totdays.length : count * (this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot);
                var resIndex = Math.floor($(oEl).index() / viewCount);
                var resmaxcolindex = (viewCount * (resIndex + 1));
                var currrowindex = $(oEl).parent()[0].rowIndex;
                var currcolindex = $(oEl)[0].cellIndex;
                var newcur = parseInt(currcolindex) + 1;
                var irowcount = this.model.orientation == "vertical" ? 0 : currrowindex;
                var Hrowcount = this.model.orientation == "vertical" ? rowcount : currrowindex;
                var ad = this.element.find(".e-alldaycells").parent();
                var flag = this.model.orientation == "vertical" && this.model.showAllDayRow ? true : false;
                if (currcolindex >= 0 && currcolindex < parseInt(resmaxcolindex) - 1 && currcolindex != "undefined") {
                    if ($(oRowCell[currrowindex].cells[newcur]).hasClass("e-selectedCell")) {
                        for (var i = parseInt(currrowindex) ; i <= Hrowcount; i++)
                            $(oRowCell[i].cells[currcolindex]).removeClass("e-selectedCell");
                        for (var j = irowcount; j <= currrowindex; j++)
                            $(oRowCell[j].cells[newcur]).removeClass("e-selectedCell").attr("tabIndex", 0).focus();
                        flag && $(ad[0].cells[currcolindex]).removeClass("e-selectedCell");
                        $(oRowCell[currrowindex].cells[newcur]).addClass("e-selectedCell");
                    }
                    else {
                        for (var i = parseInt(currrowindex) ; i <= Hrowcount; i++)
                            $(oRowCell[i].cells[currcolindex]).addClass("e-selectedCell");
                        for (var j = irowcount; j <= currrowindex; j++)
                            $(oRowCell[j].cells[newcur]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                        if (flag) {
                            $(ad[0].cells[newcur]).addClass("e-selectedCell");
                            $(ad[0].cells[currcolindex]).addClass("e-selectedCell");
                        }
                    }
                    this._currentRowIndex = currrowindex;
                    this._currentColIndex = newcur;
                }
                else
                    $(oRowCell[currrowindex].cells[currcolindex]).attr("tabIndex", 0).focus();
            }
            else if ($(oEl).hasClass('e-monthcells')) {
                var resIndex = Math.floor($(oEl).index() / 7);
                var rowcount = oRowCell.length - 1, mcolind = resmaxcolindex = 7 * (parseInt(resIndex) + 1), mincolindex = 7 * (parseInt(resIndex));;
                var currrowindex = $(oEl).parent()[0].rowIndex;
                var currcolindex = $(oEl)[0].cellIndex;
                var newcur = parseInt(currcolindex) + 1;
                if (currcolindex >= 0 && currcolindex <= parseInt(resmaxcolindex) - 1 && currcolindex != "undefined") {
                    if ($(oRowCell[currrowindex].cells[newcur]).hasClass("e-selectedCell")) {
                        if (newcur < mcolind) {
                            $(oRowCell[currrowindex].cells[newcur]).attr("tabIndex", 0).focus();
                            $(oRowCell[currrowindex].cells[currcolindex]).removeClass("e-selectedCell");
                        }
                        if (currcolindex == parseInt(resmaxcolindex) - 1 && currrowindex < (this._dateRender.length) / 7) {
                            var newrow = parseInt(currrowindex) + 1;
                            currcolindex = mincolindex;
                            if (newrow < (this._dateRender.length) / 7) {
                                !$(oRowCell[newrow].cells[currcolindex]).hasClass("e-othermonths") && $(oRowCell[newrow].cells[currcolindex]).removeClass("e-selectedCell").attr("tabIndex", 0).focus();
                                if (newcur < mcolind) {
                                    $(oRowCell[newrow].cells[newcur]).attr("tabIndex", 0).focus();
                                    $(oRowCell[newrow].cells[currcolindex]).removeClass("e-selectedCell");
                                }
                            }
                        }
                    }
                    else {
                        if (newcur < mcolind)
                            !$(oRowCell[currrowindex].cells[newcur]).hasClass("e-othermonths") && $(oRowCell[currrowindex].cells[newcur]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                        if (currcolindex == parseInt(resmaxcolindex) - 1 && currrowindex < (this._dateRender.length) / 7) {
                            var newrow = parseInt(currrowindex) + 1;
                            currcolindex = mincolindex;
                            if (newrow < (this._dateRender.length) / 7) {
                                $(oRowCell[newrow].cells[currcolindex]).hasClass("e-othermonths") && $(oRowCell[newrow].cells[currcolindex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                                if (newcur < mcolind)
                                    $(oRowCell[newrow].cells[newcur]).hasClass("e-othermonths") && $(oRowCell[newrow].cells[newcur]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                            }
                            else
                                $(oRowCell[newrow - 1].cells[newcur - 1]).attr("tabIndex", 0).focus();
                        }
                    }
                }
                else
                    return false;
            }
            else if ($(oEl).hasClass('e-alldaycells')) {
                var count = this.currentView() == "day" ? 1 : this.currentView() == "workweek" ? this.model.workWeek.length : 7;
                var resIndex = Math.floor($(oEl).index() / count);
                var resmaxcolindex = (count * (resIndex + 1));
                var currcolindex = $(oEl)[0].cellIndex;
                var newcur = parseInt(currcolindex) + 1;
                if (currcolindex >= 0 && currcolindex < parseInt(resmaxcolindex) - 1 && currcolindex != "undefined") {
                    if ($(oRowCell[0].cells[newcur]).hasClass("e-selectedCell")) {
                        $(oRowCell[0].cells[currcolindex]).removeClass("e-selectedCell");
                        $(oRowCell[0].cells[newcur]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    }
                    else
                        $(oRowCell[0].cells[newcur]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    this._currentRowIndex = 0;
                    this._currentColIndex = newcur;
                }
                else
                    $(oRowCell[0].cells[currcolindex]).attr("tabIndex", 0).focus();
            }
            else
                return false;
        },

        _processEnterKey: function (oEl) {
            if ($(oEl).hasClass("e-workcells") || $(oEl).hasClass("e-monthcells") || $(oEl).hasClass("e-alldaycells")) {
                var tds = this.element.find('td.e-selectedCell');
                var nt = tds.length - 1;
                if (nt == 0) {
                    this._cellSelection(oEl);
                }
                else {
                    this._multipleCellAppointCreation(oEl);
                }
            }
            else if ($(oEl).hasClass("e-detailedapp e-detailedwindow")) {
                this._appointmentWindow(oEl);
            }
            else if ($(oEl).parent().hasClass("e-allday")) {
                var e = this._appointmentAddWindow.find("#" + this._id + "allday").ejCheckBox("option", "checked");
                var checkedVal = e ? false : true;
                this._appointmentAddWindow.find(".allday").ejCheckBox({ checked: checkedVal });
            }
            else if ($(oEl).parent().hasClass("e-recurrence")) {
                var e = this._appointmentAddWindow.find("#" + this._id + "recurrence").ejCheckBox("option", "checked");
                var checkedVal = e ? false : true;
                this._appointmentAddWindow.find(".recurrence").ejCheckBox({ checked: checkedVal });
                this._recurChecked = checkedVal ? true : false;
                this._repeat(oEl);
            }
            else if ($(oEl).hasClass("e-scheduledelete")) {
                this.model.showQuickWindow && this._quickAppDetailsWindow.find('.e-scheduledelete').click();
            }
            else if ($(oEl).hasClass("e-editevent"))
                this.model.showQuickWindow && this._quickAppDetailsWindow.find('.e-editevent').click();
            else if ($(oEl).hasClass(".e-editseries"))
                this.model.showQuickWindow && this._quickAppDetailsWindow.find('.e-editseries').click();
            else if ($(oEl).hasClass("e-appointment") || $(oEl).hasClass("e-alldayappointment") || $(oEl).hasClass("e-monthappointment"))
                this._cellSelection(oEl);
            else if ($(oEl).parent().hasClass("e-weekday")) {
                var e = this._appointmentAddWindow.find("#" + $(oEl).children()[0].id).ejCheckBox("option", "checked");
                var checkedVal = e ? false : true;
                this._appointmentAddWindow.find("#" + $(oEl).children()[0].id).ejCheckBox({ checked: checkedVal });
            }
        },

        _findMinMaxCellIndex: function () {
            var oRowCell = this.element.find('div.e-draggableworkarea tr');
            var rowcount = oRowCell.length - 1;
            var omincolIndex, omaxcolIndex, rowInx, maxrowInx, checkcolindex;
            var curr_View = this.currentView();
            var viewCount = curr_View == "day" ? 1 : curr_View == "workweek" ? this.model.workWeek.length : 7;
            var proxy = this;
            this.element.find('td.e-selectedCell').each(function (index, tdItem) {
                var targetId = $(tdItem).index();
                if (targetId != null && !isNaN(targetId)) {
                    if (omincolIndex == null) {
                        omincolIndex = targetId;
                        rowInx = $(tdItem).parent()[0].rowIndex;
                    }
                    else if (omincolIndex < targetId) {
                        omincolIndex = omincolIndex;
                    }
                    else {
                        if (omincolIndex != targetId) {
                            omincolIndex = targetId;
                            rowInx = $(tdItem).parent()[0].rowIndex;
                        }
                    }
                    if (curr_View != "month") {
                        for (var i = 0; i <= rowcount; i++) {
                            if ($(oRowCell[i].cells[omincolIndex]).hasClass("e-selectedCell")) {
                                rowInx = i;
                                break;
                            }
                        }
                    }
                    if (omaxcolIndex == null) {
                        omaxcolIndex = targetId;
                        if (curr_View != "month") {
                            checkcolindex = parseInt(omaxcolIndex);
                            for (var i = 0; i <= rowcount; i++) {
                                if ($(oRowCell[i].cells[checkcolindex]).hasClass("e-selectedCell")) {
                                    maxrowInx = i;

                                }
                            }
                        }
                    }
                    else if (omaxcolIndex > targetId) {
                        omaxcolIndex = omaxcolIndex;
                    }
                    else {
                        if (omaxcolIndex != targetId) {
                            omaxcolIndex = targetId;
                            if (curr_View != "month") {
                                checkcolindex = parseInt(omaxcolIndex);
                                for (var i = 0; i <= rowcount; i++) {
                                    if ($(oRowCell[i].cells[checkcolindex]).hasClass("e-selectedCell")) {
                                        maxrowInx = i;
                                    }
                                }
                            }
                        }
                    }
                }
            });
            var _minMaxIndexes = { rowInx: rowInx, maxrowInx: maxrowInx, omincolIndex: omincolIndex, omaxcolIndex: omaxcolIndex };
            return _minMaxIndexes;
        },

        _multipleCellAppointCreation: function (e) {
            var target = !ej.isNullOrUndefined(e.target) ? $(e.target) : $(e); this._multiple = true;
            this._slotByCellSelect(target);
            if (this.model.showQuickWindow && e.type !== "beforeOpen") {
                this._quickAppointWindow.find("#" + this._id + "_quickAppwindow").css("display", "block");
                if (new Date(new Date(this.cur_StartTime).setHours(0, 0, 0, 0)).getTime() == new Date(new Date(this.cur_EndTime).setHours(0, 0, 0, 0)).getTime())
                    this._quickAppointWindow.find('.e-quickstartend').html(this._dayFullNames[new Date(this.cur_StartTime).getDay()] + ", " + ej.format(new Date(this.cur_StartTime), "MMMM", this.model.locale) + " " + new Date(this.cur_StartTime).getDate() + ", " + ej.format(new Date(this.cur_StartTime), this._timeMode == "12" ? this._pattern.t : "HH:mm", this.model.locale) + " - " + ej.format(new Date(this.cur_EndTime), this._timeMode == "12" ? this._pattern.t : "HH:mm", this.model.locale));
                else
                    this._quickAppointWindow.find('.e-quickstartend').html(this._dayFullNames[new Date(this.cur_StartTime).getDay()] + ", " + ej.format(new Date(this.cur_StartTime), "MMMM", this.model.locale) + " " + new Date(this.cur_StartTime).getDate() + ", " + ej.format(new Date(this.cur_StartTime), this._timeMode == "12" ? this._pattern.t : "HH:mm", this.model.locale) + " - " + this._dayFullNames[new Date(this.cur_EndTime).getDay()] + ", " + ej.format(new Date(this.cur_EndTime), "MMMM", this.model.locale) + " " + new Date(this.cur_EndTime).getDate() + ", " + ej.format(new Date(this.cur_EndTime), this._timeMode == "12" ? this._pattern.t : "HH:mm", this.model.locale));
                this._quickAppointWindow.find('.subject').val("");
                if (!this.model.readOnly)
                    this._quickAppointWindow.ejDialog("open");
                var x = $(target).offset().left - ((this._quickAppointWindow.width() - $(target).width()) / 2) + 10;
                var y = $(target).offset().top - this._quickAppointWindow.height() - 10;
                var xy = this._quickWindowPosition(x, y, $(target), this._quickAppointWindow);
                this._quickAppointWindow.ejDialog({ position: { X: xy["X"], Y: xy["Y"] } });
                this._quickAppointWindow.find(".subject").focus();
                if (ej.scheduleFeatures.resources && (this._tempResource.length != 0))
                    this._getResourceDetails($(target));
            }
            this._cellClick = true;

        },
        _slotByCellSelect: function (target) {
            this._cellIndex = $(target).hasClass("e-workcells") ? $(target).index() : $(target).hasClass("e-alldaycells") ? $(target).index() : 7 - ((parseInt($(target).index() / 7) + 1) * 7 - $(target).index()) + ($(target).parent().index() * 7);
            if (this.model.orientation == "horizontal") {
                this._cellIndex = this.currentView() !== "month" ? Math.floor(this._cellIndex / ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount)) : this._cellIndex;
                this._workCellIndex = $(target).parent().index();
            }
            var indexes = this._findMinMaxCellIndex();
            var renderDates = (this.model.orientation == "horizontal" && this.currentView() == "month") ? this.monthDays : this.model.orientation == "vertical" ? this.dateRender : this._dateRender;
            var omincolIndex = indexes.omincolIndex, omaxcolIndex = indexes.omaxcolIndex, rowInx = indexes.rowInx, maxrowInx = indexes.maxrowInx;
            var minStartDate = renderDates[omincolIndex]; var maxEndDate = renderDates[omaxcolIndex];
            if (this.model.orientation == "vertical") {
                if ($(target).hasClass("e-workcells")) {
                    var cellmins = this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount;
                    var minStartTime = (this.model.startHour * 3600000) + (rowInx * cellmins * 60 * 1000);
                    var maxEndTime = ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot) - 1) == maxrowInx ? (this.model.startHour * 3600000) + ((maxrowInx + 1) * cellmins * 60 * 1000) - 1 : (this.model.startHour * 3600000) + ((maxrowInx + 1) * cellmins * 60 * 1000);
                    this.cur_StartTime = new Date(new Date(minStartDate).setMilliseconds(minStartTime));
                    this.cur_EndTime = new Date(new Date(maxEndDate).setMilliseconds(maxEndTime));
                }
                else if ($(target).hasClass("e-monthcells")) {
                    var selCell = this.element.find('td.e-selectedCell');
                    var nsc = selCell.length - 1;
                    var startIndex = ($(selCell[0]).parent().index() * 7) + ($(selCell[0]).index() - (Math.floor($(selCell[0]).index() / 7) * 7));
                    var endIndex = ($(selCell[nsc]).parent().index() * 7) + ($(selCell[nsc]).index() - (Math.floor($(selCell[nsc]).index() / 7) * 7));
                    var startDate = new Date(this._dateRender[startIndex]);
                    var endDate = new Date(this._dateRender[endIndex]);
                    this.cur_StartTime = new Date(startDate.setHours(0, 0, 0));
                    this.cur_EndTime = new Date(endDate.setHours(23, 59, 59));
                }
                else if ($(target).hasClass("e-alldaycells")) {
                    this.cur_StartTime = new Date(minStartDate);
                    this.cur_EndTime = new Date(new Date(maxEndDate).setHours(23, 59, 59));
                }
            }
            else {
                if (this.currentView() != "month" && !this._isCustomMonthView() && this.model.timeScale.enable) {
                    var minStartDate = renderDates[parseInt(omincolIndex / ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot)))];
                    var maxEndDate = renderDates[parseInt(omaxcolIndex / ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot)))];
                    var minVal = (omincolIndex % ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot)));
                    var minStartTime = ((this.model.startHour) + (minVal / (this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot))));
                    var maxVal = (omaxcolIndex % ((this.model.endHour - this.model.startHour) * this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot)));
                    var maxEndTime = ((this.model.startHour) + (maxVal / (this.model.timeScale.minorSlotCount * (60 / this.model.timeScale.majorSlot))));
                    this.cur_StartTime = new Date(minStartDate).setMinutes(minStartTime * 60);
                    this.cur_EndTime = new Date(maxEndDate).setMinutes(maxEndTime * 60);
                    this.cur_EndTime = new Date(new Date(this.cur_EndTime).setMinutes(new Date(this.cur_EndTime).getMinutes() + (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)));
                }
                else {
                    var minStartDate = this.totdays[omincolIndex]; var maxEndDate = this.totdays[omaxcolIndex];
                    this.cur_StartTime = new Date(minStartDate);
                    this.cur_EndTime = new Date(new Date(maxEndDate).setHours(23, 59, 59));
                }
            }
        },

        _addCellSelection: function (oRowCell) {
            var tds = this.element.find('td.e-selectedCell');
            var nt = tds.length - 1;
            if (nt > 0) {
                this.element.find('td.e-selectedCell').removeClass("e-selectedCell");
                $(oRowCell[this._currentRowIndex].cells[this._currentColIndex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
            }
        },

        _processUpArrow: function (oEl, oRowCell) {
            if ($(oEl).hasClass("e-selectedAppointment")) {
                this.element.find('.e-selectedAppointment').removeClass("e-selectedAppointment");
                $(oRowCell[0].cells[0]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
            }
            else if ($(oEl).hasClass("e-selectedCell"))
                this._addCellSelection(oRowCell);
            var allda = this.element.find(".e-alldaycells");
            if ($(oEl).hasClass("e-workcells")) {
                var rowcount = oRowCell.length - 1;
                var currrowindex = this.element.find("td.e-selectedCell").parent()[0].rowIndex;
                var currcolindex = this.element.find("td.e-selectedCell")[0].cellIndex;
                var newcur = parseInt(currrowindex) - 1;
                if (currrowindex > 0 && currrowindex <= rowcount && currrowindex != "undefined") {
                    if ($(oRowCell[currrowindex - 1].cells[currcolindex]).hasClass("e-resourceheadercells")) return false;
                    $(oRowCell[currrowindex].cells[currcolindex]).removeClass("e-selectedCell").blur();
                    $(oRowCell[newcur].cells[currcolindex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                }
                else if (currrowindex == 0) {
                    if (this.model.orientation == "vertical") {
                        var currrowindex = this.element.find("td.e-selectedCell").parent()[0].rowIndex;
                        var currcolindex = this.element.find("td.e-selectedCell")[0].cellIndex;
                        $(oRowCell[currrowindex].cells[currcolindex]).removeClass("e-selectedCell").blur();
                        $(this.element).attr("tabIndex", 0).focus();
                        $(allda[currcolindex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    }
                    else
                        $(oRowCell[0].cells[currcolindex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                }
            }
            else if ($(oEl).hasClass("e-alldaycells")) {
                return false;
            }

            else if ($(oEl).hasClass("e-monthcells")) {
                var rowcount = oRowCell.length - 1;
                var currrowindex = this.element.find("td.e-selectedCell").parent()[0].rowIndex;
                var currcolindex = this.element.find("td.e-selectedCell")[0].cellIndex;
                var newcur = parseInt(currrowindex) - 1;
                if (currrowindex >= 0 && currrowindex <= rowcount && currrowindex != "undefined") {
                    if (newcur >= 0) {
                        $(oRowCell[currrowindex].cells[currcolindex]).removeClass("e-selectedCell").blur();
                        $(oRowCell[newcur].cells[currcolindex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    }
                    else
                        $(oRowCell[0].cells[currcolindex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    this._selectCurrentMonth(oRowCell, currrowindex, currcolindex);
                }
                else
                    return false;
            }
            else
                return false;

        },

        _processDown: function (oEl, oRowCell) {
            if ($(oEl).hasClass("e-selectedAppointment")) {
                this.element.find('.e-selectedAppointment').removeClass("e-selectedAppointment");
                $(oRowCell[0].cells[0]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
            }
            else if ($(oEl).hasClass("e-selectedCell"))
                this._addCellSelection(oRowCell);
            if ($(oEl).hasClass("e-workcells")) {
                var rowcount = oRowCell.length - 1;
                var currrowindex = this.element.find("td.e-selectedCell").parent()[0].rowIndex;
                var currcolindex = this.element.find("td.e-selectedCell")[0].cellIndex;
                var newcur = parseInt(currrowindex) + 1;
                if (currrowindex >= 0 && currrowindex <= rowcount && currrowindex != "undefined") {
                    if (newcur <= rowcount) {
                        if ($(oRowCell[currrowindex + 1].cells[currcolindex]).hasClass("e-resourceheadercells")) return false;
                        $(oRowCell[currrowindex].cells[currcolindex]).removeClass("e-selectedCell").blur();
                        $(oRowCell[newcur].cells[currcolindex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    }
                    else
                        $(oRowCell[currrowindex].cells[currcolindex]).attr("tabIndex", 0).focus();
                }
            }
            else if ($(oEl).hasClass("e-alldaycells")) {
                var allDayInx = this.element.find('td.e-selectedCell')[0].cellIndex;
                var allda = this.element.find(".e-alldaycells");
                $(allda[allDayInx]).removeClass("e-selectedCell").blur();
                $(this.element.find(".e-workcells")[allDayInx]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
            }

            else if ($(oEl).hasClass("e-monthcells")) {
                var rowcount = oRowCell.length - 1;
                var currrowindex = this.element.find("td.e-selectedCell").parent()[0].rowIndex;
                var currcolindex = this.element.find("td.e-selectedCell")[0].cellIndex;
                var newcur = parseInt(currrowindex) + 1;
                if (currrowindex >= 0 && currrowindex < rowcount && currrowindex != "undefined") {
                    if (newcur <= 7) {
                        $(oRowCell[currrowindex].cells[currcolindex]).removeClass("e-selectedCell").blur();
                        $(oRowCell[newcur].cells[currcolindex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    }
                    else
                        $(oRowCell[newcur - 1].cells[currcolindex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                }
                this._selectCurrentMonth(oRowCell, currrowindex, currcolindex);
            }
            else
                return false;
        },

        _processRight: function (oEl, oRowCell) {
            if ($(oEl).hasClass("e-selectedAppointment")) {
                this.element.find('.e-selectedAppointment').removeClass("e-selectedAppointment");
                $(oRowCell[0].cells[0]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
            }
            else if ($(oEl).hasClass("e-selectedCell"))
                this._addCellSelection(oRowCell);
            if ($(oEl).hasClass("e-workcells")) {
                var maxcolindex = oRowCell[0].cells.length;
                var currrowindex = this.element.find("td.e-selectedCell").parent()[0].rowIndex;
                var currcolindex = this.element.find("td.e-selectedCell")[0].cellIndex;
                var newcur = parseInt(currcolindex) + 1;
                if (currcolindex >= 0 && currcolindex < parseInt(maxcolindex) - 1 && currcolindex != "undefined") {
                    $(oRowCell[currrowindex].cells[currcolindex]).removeClass("e-selectedCell").blur();
                    $(oRowCell[currrowindex].cells[newcur]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                }
                else if (currcolindex == parseInt(maxcolindex) - 1) {
                    if (this.currentView() != "month") {
                        var maxrowInx1 = $(oEl).parent()[0].rowIndex;
                        this.element.find("div.e-navigatenext").click();
                        $(oRowCell[maxrowInx1].cells[0]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    } else {
                        this.element.find("div.e-navigatenext").click();
                        $(this.element.find('div.e-draggableworkarea tr')[currrowindex].cells[0]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    }
                }
                else
                    return false;
            }
            else if ($(oEl).hasClass("e-monthcells")) {
                var resIndex = Math.floor($(oEl).index() / 7);
                var rowcount = oRowCell.length - 1, mcolind = resmaxcolindex = 7 * (parseInt(resIndex) + 1), mincolindex = 7 * (parseInt(resIndex));;
                var currrowindex = $(oEl).parent()[0].rowIndex;
                var currcolindex = $(oEl)[0].cellIndex;
                var newcur = parseInt(currcolindex) + 1;
                if (newcur < mcolind) {
                    $(oRowCell[currrowindex].cells[currcolindex]).removeClass("e-selectedCell").blur();
                    $(oRowCell[currrowindex].cells[newcur]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                }
                if (currcolindex == parseInt(resmaxcolindex) - 1 && currrowindex < (this._dateRender.length) / 7) {
                    $(oRowCell[currrowindex].cells[currcolindex]).removeClass("e-selectedCell").blur();
                    var newrow = parseInt(currrowindex) + 1;
                    currcolindex = mincolindex;
                    if (newrow < (this._dateRender.length) / 7) {
                        $(oRowCell[newrow].cells[currcolindex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                        if (newcur < mcolind) {
                            $(oRowCell[newrow].cells[newcur]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                        }
                    }
                    else {
                        var previndex = currcolindex / 7;
                        this.element.find("div.e-navigatenext").click();
                        var index = (!ej.isNullOrUndefined(this.model.group) ? previndex * 7 : 0);
                        $(this.element.find(".e-monthcells")[index]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    }
                }
                this._selectCurrentMonth(oRowCell, currrowindex, currcolindex);
            }
            else if ($(oEl).hasClass("e-alldaycells")) {
                var allDayInx = this.element.find('td.e-selectedCell')[0].cellIndex;
                var nall = parseInt(this.element.find(".e-alldaycells").length) - 1;
                if (allDayInx >= 0 && allDayInx < nall) {
                    $(this.element.find(".e-alldaycells")[allDayInx]).removeClass("e-selectedCell").blur();
                    $(this.element.find(".e-alldaycells")[parseInt(allDayInx) + 1]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                }
                else if (allDayInx == nall) {
                    this.element.find("div.e-navigatenext").click();
                    $(this.element.find(".e-alldaycells")[0]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                }
                else
                    return false;
            }
            this._keyPressed = true;
        },

        _processLeft: function (oEl, oRowCell) {
            if ($(oEl).hasClass("e-selectedAppointment")) {
                this.element.find('.e-selectedAppointment').removeClass("e-selectedAppointment");
                $(oRowCell[0].cells[0]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
            }
            else if ($(oEl).hasClass("e-selectedCell"))
                this._addCellSelection(oRowCell);
            if ($(oEl).hasClass("e-workcells")) {
                var maxcolindex = oRowCell[0].cells.length;
                var currrowindex = this.element.find("td.e-selectedCell").parent()[0].rowIndex;
                var currcolindex = this.element.find("td.e-selectedCell")[0].cellIndex;
                var newcur = parseInt(currcolindex) - 1;
                if (currcolindex > 0 && currcolindex <= parseInt(maxcolindex) - 1 && currcolindex != "undefined") {
                    $(oRowCell[currrowindex].cells[currcolindex]).removeClass("e-selectedCell").blur();
                    $(oRowCell[currrowindex].cells[newcur]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                }
                else if (currcolindex == 0) {
                    if (this.currentView() != "month") {
                        var maxrowInx1 = $(oEl).parent()[0].rowIndex;
                        this.element.find("div.e-navigateprevious").click();
                        $(oRowCell[maxrowInx1].cells[maxcolindex - 1]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    }
                    else {
                        this.element.find("div.e-navigateprevious").click();
                        $(this.element.find('div.e-draggableworkarea tr')[currrowindex].cells[this.totdays.length - 1]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    }
                }
                else
                    return false;
            }
            else if ($(oEl).hasClass("e-monthcells")) {
                var resIndex = Math.floor($(oEl).index() / 7);
                var rowcount = oRowCell.length - 1, mcolind = 7 * (parseInt(resIndex) + 1);
                var mincolindex = 7 * (parseInt(resIndex));
                var count = this.currentView() == "day" ? 1 : this.currentView() == "workweek" ? this.model.workWeek.length : 7;
                var colIndex = this.model.orientation == "vertical" ? count : this.currentView() == "month" ? this.totdays.length : count * (this.model.endHour - this.model.startHour) * 2;
                maxcolindex = ((this._tempResource.length != 0) && !ej.isNullOrUndefined(this.model.group) && ej.scheduleFeatures.resources) && this.model.orientation == "vertical" ? this.render_Resources[this.render_Resources.length - 1].length * colIndex : colIndex;
                var currrowindex = this.element.find("td.e-selectedCell").parent()[0].rowIndex;
                var currcolindex = this.element.find("td.e-selectedCell")[0].cellIndex;

                if (currcolindex == mincolindex && currrowindex >= 0) {
                    var newrow = parseInt(currrowindex) - 1;
                    var newcol = parseInt(mcolind) - 1;
                    if (newrow >= 0) {
                        $(oRowCell[currrowindex].cells[currcolindex]).removeClass("e-selectedCell").blur();
                        $(oRowCell[newrow].cells[newcol]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    }
                    else {
                        var previndex = currcolindex / 7;
                        this.element.find("div.e-navigateprevious").click();
                        var rowmax = this._dateRender.length / 7;
                        var index = (!ej.isNullOrUndefined(this.model.group) ? previndex * 7 : 0);
                        $(this.element.find('div.e-draggableworkarea tr')[rowmax - 1].cells[index + 6]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                    }
                }
                else if (currcolindex < mcolind) {
                    newcur = parseInt(currcolindex) - 1;
                    $(oRowCell[currrowindex].cells[currcolindex]).removeClass("e-selectedCell").blur();
                    $(oRowCell[currrowindex].cells[newcur]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                }
                this._selectCurrentMonth(oRowCell, currrowindex, currcolindex);
            }
            else if ($(oEl).hasClass("e-alldaycells")) {
                var allDayInx = this.element.find('td.e-selectedCell')[0].cellIndex;
                var nall = parseInt(this.element.find(".e-alldaycells").length) - 1;
                if (allDayInx > 0 && allDayInx <= nall) {
                    $(this.element.find(".e-alldaycells")[allDayInx]).removeClass("e-selectedCell").blur();
                    $(this.element.find(".e-alldaycells")[parseInt(allDayInx) - 1]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                }
                else if (allDayInx == 0) {
                    this.element.find("div.e-navigateprevious").click();
                    $(this.element.find(".e-alldaycells")[nall]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                }
                else
                    return false;
            }
            this._keyPressed = true;
        },

        _selectCurrentMonth: function (oRowCell, currrowindex, currcolindex) {
            if (oRowCell.find(".e-selectedCell").hasClass("e-othermonths")) {
                oRowCell.find(".e-selectedCell").removeClass("e-selectedCell").blur();
                $(oRowCell[currrowindex].cells[currcolindex]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
            }
        },

        _navigateToolbarRight: function (event) {
            var views = this.model.views;
            var curViewIndex = this.element.find(".e-commonviewbutton.e-" + this.currentView()).parent().index();
            if (curViewIndex < views.length - 1) {
                var newView = views[curViewIndex + 1].toLowerCase(); this._navView = true;
                this._viewChange(event, this.currentView(), newView);
                this.element.find("#" + this._id + "_navigator").ejDatePicker({ value: new Date(this.currentDate()) });
            }
        },

        _navigateToolbarLeft: function (event) {
            var curViewIndex = this.element.find(".e-commonviewbutton.e-" + this.currentView()).parent().index();
            if (curViewIndex > 0) {
                var newView = this.model.views[curViewIndex - 1].toLowerCase(); this._navView = true;
                this._viewChange(event, this.currentView(), newView);
                this.element.find("#" + this._id + "_navigator").ejDatePicker({ value: new Date(this.currentDate()) });
            }
        },

        _newAppWindow: function (contextElement, oRowCell) {
            if ($(contextElement).hasClass("e-selectedCell")) {
                this._currentAction = ej.Schedule.Actions.Add;
                var targetElement = contextElement == null ? event : contextElement;
                var rowIndex = $(targetElement).parent().index();
                var columnIndex = $(targetElement).index();
                var resourceIndex = 0;
                var renderDates = (this.model.orientation == "horizontal" && this.currentView() == "month") ? this.monthDays : (this.model.orientation == "vertical" || this.currentView() == "customview" && this._dateRender.length <= 7) ? this.dateRender : this._dateRender;
                renderDates = this.model.orientation == "horizontal" && this.currentView() == "customview" && this._dateRender.length <= 7 ? this._dateRender : renderDates;
                var ns = parseInt(this.element.find('td.e-selectedCell').length) - 1;
                _target = $(targetElement);
                if (this.model.timeScale.enable)
                    this._cellIndex = _target.hasClass("e-workcells") ? _target.index() : _target.hasClass("e-alldaycells") ? _target.index() : this._isCustomMonthView() && this._oneWeek ? _target.index() : 7 - ((parseInt(_target.index() / 7) + 1) * 7 - _target.index()) + (_target.parent().index() * 7);
                else
                    this._cellIndex = this.model.orientation == "vertical" && this.currentView() == "month" || (this.currentView() == "customview" && this._dateRender.length >= 7) ? 7 - ((parseInt(_target.index() / 7) + 1) * 7 - _target.index()) + (_target.parent().index() * 7) : _target.index();
                if (this.model.orientation == "horizontal") {
                    this._cellIndex = this.model.timeScale.enable ? this.currentView() !== "month" && !(this._isCustomMonthView()) ? Math.floor(this._cellIndex / ((this.model.endHour - this.model.startHour) * 2)) : this._cellIndex : _target.index();
                    this._workCellIndex = _target.parent().index();
                }
                if (ns == 0) {
                    var curDate = new Date(renderDates[this._cellIndex]);
                    if ((this.model.minDate > curDate || this.model.maxDate < curDate)) { return false; }
                    if (_target.hasClass("e-workcells") && (this.model.timeScale.enable) && this.currentView() !== "month" && !(this._isCustomMonthView())) {
                        var time = this.model.orientation == "vertical" ? this.model.startHour + (_target.parent().index() / 2) : this.model.startHour + ((_target.index() - (((this.model.endHour - this.model.startHour) * 2) * this._cellIndex)) / 2);
                        var timemin = time.toString().split(".");
                        startTime = new Date(curDate).setHours(parseInt(timemin[0]), parseInt(timemin[1]) == 5 ? 30 : 00);
                        var min = (parseInt(new Date(startTime).getHours()) == 23 && parseInt(new Date(startTime).getMinutes()) == 30) ? new Date(startTime).getMinutes() + 29 : new Date(startTime).getMinutes() + 30;
                        endTime = new Date(new Date(startTime).setMinutes(min));
                        this._appointmentAddWindow.find(".allday").ejCheckBox({ checked: false });
                    }
                    else {
                        startTime = new Date(new Date(curDate).setHours(0, 0, 0));
                        endTime = new Date(new Date(curDate).setHours(23, 59, 59));
                        this._appointmentAddWindow.find(".allday").ejCheckBox({ checked: true });
                    }
                }
                else if (ns > 0) {
                    var indexes = this._findMinMaxCellIndex();
                    var omincolIndex = indexes.omincolIndex, omaxcolIndex = indexes.omaxcolIndex, rowInx = indexes.rowInx, maxrowInx = indexes.maxrowInx;
                    if (this.model.orientation == "vertical") {
                        if ($(contextElement).hasClass('e-workcells')) {
                            var minStartDate = renderDates[omincolIndex]; var maxEndDate = renderDates[omaxcolIndex];
                            var minStartTime = (this.model.startHour + (rowInx / 2)).toString().split(".");
                            var maxEndTime = (this.model.startHour + (maxrowInx / 2)).toString().split(".");
                            startTime = new Date(new Date(minStartDate).setHours(parseInt(minStartTime[0]), parseInt(minStartTime[1]) == 5 ? 30 : 00));
                            endTime = new Date(maxEndDate).setHours(parseInt(maxEndTime[0]), parseInt(maxEndTime[1]) == 5 ? 30 : 00);
                            endTime = new Date(new Date(endTime).setMinutes(new Date(endTime).getMinutes() + 30));
                        }
                        else if ($(contextElement).hasClass('e-monthcells')) {
                            var selCell = this.element.find('td.e-selectedCell');
                            var startIndex = ($(selCell[0]).parent().index() * 7) + ($(selCell[0]).index() - (Math.floor($(selCell[0]).index() / 7) * 7));
                            var endIndex = ($(selCell[ns]).parent().index() * 7) + ($(selCell[ns]).index() - (Math.floor($(selCell[ns]).index() / 7) * 7));
                            var startDate = new Date(this._dateRender[startIndex]);
                            var endDate = new Date(this._dateRender[endIndex]);
                            startTime = new Date(new Date(startDate).setHours(0, 0, 0));
                            endTime = new Date(new Date(endDate).setHours(23, 59, 59));
                        }
                        else if ($(contextElement).hasClass('e-alldaycells')) {
                            startTime = new Date(new Date(renderDates[omincolIndex]).setHours(0, 0, 0));
                            endTime = new Date(new Date(renderDates[omaxcolIndex]).setHours(23, 59, 59));
                        }
                    }
                    else {
                        if (this.currentView() != "month" && !this._isCustomMonthView() && this.model.timeScale.enable) {
                            var minStartDate = renderDates[0]; var maxEndDate = renderDates[0];
                            var minStartTime = (this.model.startHour + (omincolIndex / 2)).toString().split(".");
                            var maxEndTime = (this.model.startHour + (omaxcolIndex / 2)).toString().split(".");
                            startTime = new Date(new Date(minStartDate).setHours(parseInt(minStartTime[0]), parseInt(minStartTime[1]) == 5 ? 30 : 00));
                            endTime = new Date(maxEndDate).setHours(parseInt(maxEndTime[0]), parseInt(maxEndTime[1]) == 5 ? 30 : 00);
                            endTime = new Date(new Date(endTime).setMinutes(new Date(endTime).getMinutes() + 30));
                        }
                        else {
                            var minStartDate = this.totdays[omincolIndex]; var maxEndDate = this.totdays[omaxcolIndex];
                            var minStartTime = (this.model.startHour).toString().split(".");
                            var maxEndTime = (this.model.startHour).toString().split(".");
                            startTime = new Date(minStartDate).setHours(parseInt(minStartTime[0]), parseInt(minStartTime[1]) == 5 ? 30 : 00);
                            endTime = new Date(maxEndDate).setHours(parseInt(maxEndTime[0]), parseInt(maxEndTime[1]) == 5 ? 30 : 00);
                            endTime = new Date(new Date(endTime).setMinutes(new Date(endTime).getMinutes() + 30));
                            endTime = new Date(new Date(endTime).setHours(23, 59, 59));
                        }
                    }
                }
                var event = { startTime: new Date(startTime), endTime: new Date(endTime), target: _target, resources: ((this.model.appointmentWindowOpen != null || this.model.cellDoubleClick != null) && (this._tempResource.length != 0)) ? this._getResourceValue(_target) : null };
                if (this._trigger("appointmentWindowOpen", event))
                    return false;
                if (ej.scheduleFeatures.resources && (this._tempResource.length != 0))
                    this._renderResourceData($(targetElement), this._cellIndex);
                this._appointmentAddWindow.find("#" + this._id + "startdate").ejDatePicker("option", "value", new Date(startTime));
                this._appointmentAddWindow.find("#" + this._id + "enddate").ejDatePicker("option", "value", new Date(endTime));
                this._appointmentAddWindow.find("#" + this._id + "starttime").ejTimePicker("option", "value", ej.format(new Date(startTime), this._pattern.t, this.model.locale));
                this._appointmentAddWindow.find("#" + this._id + "endtime").ejTimePicker("option", "value", ej.format(new Date(endTime), this._pattern.t, this.model.locale));
                ($(contextElement).hasClass("e-alldaycells") || this.currentView() == "month" || (this._isCustomMonthView())) && this._appointmentAddWindow.find(".allday").ejCheckBox({ checked: true });
                this._timeZoneCollection(null);
                this._tempStart = this._appointmentAddWindow.find("#" + this._id + "starttime").ejTimePicker("option", "value");
                this._tempEnd = this._appointmentAddWindow.find("#" + this._id + "endtime").ejTimePicker("option", "value");
                this._alldayCheck();
                if (!this.model.readOnly) {
                    this._appointmentAddWindow.find(".e-appsave,#" + this._id + "donerecur").ejButton("enable", true);
                    (this._mediaQuery) && this._appointmentAddWindow.find(".e-btndelete").css("display", "none");
                    this._appointmentAddWindow.ejDialog("open");
                }
                this._appointmentAddWindow.find('.subject').focus();
                this._cellClick = false;
            }

        },

        _tooltipEvents: function (args) {
            if (args == "disable") {
                if (!ej.isNullOrUndefined(this.element.data("ejTooltip"))) {
                    var tipObj = this.element.ejTooltip('instance');
                    tipObj._wireEvents(false);
                }
            }
            else {
                if (!ej.isNullOrUndefined(this.element.data("ejTooltip"))) {
                    var tipObj = this.element.ejTooltip('instance');
                    tipObj._wireEvents(true);
                }
            }
        },
        _showToolTip: function (event) {
            var event = event.event;
            var toolTipObj = this.element.data("ejTooltip");
            if ($(event.target).hasClass("e-appup") || $(event.target).hasClass("e-appdown")) {
                toolTipObj.setModel({ content: this._getLocalizedLabels("AppointmentIndicator") });
                return true;
            } else if ($(event.target).hasClass("e-appsoverflow")) {
                return this._showAppCount(event);
            }
            else if (this.model.tooltipSettings.enable && !ej.isTouchDevice()) {
                var appData = this._getAppDetails(event.currentTarget);
                if (appData == false) return false;
                if (ej.isNullOrUndefined(this.model.tooltipSettings.templateId)) {
                    var startTime = this._timeMode == "12" ? ej.format(appData[this._appointmentSettings["startTime"]], this._pattern.t, this.model.locale) : ej.format(appData[this._appointmentSettings["startTime"]], "HH:mm", this.model.locale);
                    var endTime = this._timeMode == "12" ? ej.format(appData[this._appointmentSettings["endTime"]], this._pattern.t, this.model.locale) : ej.format(appData[this._appointmentSettings["endTime"]], "HH:mm", this.model.locale);
                    var subject = (appData[this._appointmentSettings["subject"]] == "" || ej.isNullOrUndefined(appData[this._appointmentSettings["subject"]])) ? this._getLocalizedLabels("NoTitle") : appData[this._appointmentSettings["subject"]];
                    var appDetails = subject + ":&nbsp;(" + startTime + "-" + endTime + ")";
                } else {
                    var appDetails = $(this.model.tooltipSettings.templateId).render(appData).trim();
                }
                toolTipObj.setModel({ content: appDetails });
                return true;
            }
            return false;
        },
        _showAppCount: function (e) {
            var id = e.target.id.split("_");
            var date = (this.currentView() != "day") ? new Date(parseInt($(e.currentTarget).attr("cellinfo"))) : new Date($(e.currentTarget).attr("cellinfo"));
            if (ej.scheduleFeatures.resources && !ej.isNullOrUndefined(this.model.group)) var resValue = this._resourceSort()[parseInt(id[id.length - 2])].id;
            if (this.model.orientation == "horizontal" && this.currentView() != "month") {
                var cellIndex = parseInt(id[id.length - 1]);
                var starttime = new Date(date.setMilliseconds(((this.model.startHour * 60) + cellIndex * (this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount)) * (60 * 1000)));
                var endtime = new Date(starttime.setMilliseconds((this.model.timeScale.majorSlot / this.model.timeScale.minorSlotCount) * 60 * 1000));
            }
            var userTempHtml = $.templates($(this.model.appointmentTemplateId).html());
            var appoverflowheight = this.element.find(".e-appsoverflow").height();
            if (this.model.orientation == "vertical") {
                var monthcellheight = this.element.find(".e-monthcells").outerHeight();
                var monthappheight = this.element.find(".e-monthappointment").outerHeight();
                var monthheaderheight = this.element.find(".e-monthheader").height();
                if (ej.isNullOrUndefined(monthappheight)) monthappheight = (!this.model.appointmentTemplateId) ? 19 : ($(userTempHtml.markup).css('height') == "100%" ? (monthcellheight - this.element.find('.e-monthheader').height() - 15) : $(userTempHtml.markup).css('height') == "0px" ? 20 : $(userTempHtml.markup).height());
                var appCount = parseInt($(e.currentTarget).attr("appcount"));
                var total = (appCount * monthappheight) + monthheaderheight + appoverflowheight;
                var overflowapps = Math.round((total - monthcellheight) / monthappheight);
                overflowapps = (overflowapps == 0) ? 1 : overflowapps;
            }
            else {
                var cellheight = this.element.find(".e-workcells").outerHeight();
                var appheight = (this.currentView() == "month") ? appheight = this.element.find(".e-monthappointment").outerHeight() : this.element.find(".e-appointment").height();
                if (ej.isNullOrUndefined(appheight)) appheight = (!this.model.appointmentTemplateId) ? 20 : ($(userTempHtml.markup).css('height') == "100%" ? (cellheight - 15) : $(userTempHtml.markup).css('height') == "0px" ? 20 : $(userTempHtml.markup).height());
                var appoverflowheight = this.element.find(".e-appsoverflow").height();
                var appCount = parseInt($(e.currentTarget).attr("appcount"));
                var total = (appCount * appheight) + appoverflowheight;
                var overflowapps = Math.ceil((total - cellheight) / appheight);
            }
            var data = { Date: date, ResourceValue: resValue, StartTime: starttime, EndTime: endtime };
            this._overflowApp = data;
            var toolTipObj = this.element.data("ejTooltip");
            if (this._trigger("overflowButtonHover", { event: e, datas: data })) {
                return false;
            }
            toolTipObj.setModel({ content: overflowapps + "&nbsp;" + this._getLocalizedLabels("OverFlowAppCount") });
            return true;
        },

        _horizontalRender: function () {
            (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) && this.element.find(".resemptytd").width((this.element.find(".e-horizontalrestd").width() < 100) ? 5 : (this.element.find(".e-horizontalrestd").width() >= 100 && this.element.find(".e-horizontalrestd").width() <= 150) ? 10 : 25);
            if (this._mediaQuery) {
                this.element.find(".e-parentnode,.e-childnode").height(this.element.find(".e-workcells").height());
            }
            else {
                var resLength = (this._tempResource.length == 0) ? this.res1.length : this._resourceSort().length;
                var scrollHeight = (this.element.find("div#" + this._id + "_scroller").ejScroller("isHScroll")) ? this.element.find("div#" + this._id + "_scroller").find(".e-hscroll").outerHeight() : 0;
                scrollHeight = ej.isNullOrUndefined(scrollHeight) ? 0 : scrollHeight;
                var workareaheight = this.scHeight - 1 - ((this.element.find('.e-draggableworkarea').offset().top - this.element.offset().top) + scrollHeight);
                if (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) {
                    var workcellheight = Math.round(workareaheight / resLength) - 1;
                    this.element.find(".e-workcells").css('height', ((this.model.cellHeight != "20px") || workcellheight < 20) ? parseInt(this.model.cellHeight) : workcellheight + "px");
                    this.element.find(".e-childnode").css('height', ((this.model.cellHeight != "20px") || workcellheight < 20) ? parseInt(this.model.cellHeight) : workcellheight + "px");
                    this.element.find(".e-parentnode").css('height', ((this.model.cellHeight != "20px") || workcellheight < 20) ? parseInt(this.model.cellHeight) : workcellheight + "px");
                    if (this.currentView() != "agenda") {
                        var restop = this.element.find(".e-draggableworkarea").offset().top - this.element.find(".e-workcellstab").offset().top;//this.element.find(".e-draggableworkarea")[0].scrollTop;
                        this.element.find(".e-horires").css("top", -restop + "px");
                    }
                }
                else {
                    this.element.find(".e-workcells").css('height', ((this.model.cellHeight != "20px")) ? parseInt(this.model.cellHeight) : Math.round(workareaheight - 2) + "px");
                }
            }
            if (this.element.find(".e-workcells").height() > workareaheight) this.element.find("div#" + this._id + "_scroller").ejScroller("refresh");
            this.element.find("div#" + this._id + "_scroller").ejScroller("isVScroll") && this._showScrollTd();
        },
        _monthCellsRender: function () {
            var len = this.element.find(".e-workcellstab tr").length;
            var workareaheight = parseInt(this.scHeight) - 1 - (this.element.find('.e-draggableworkarea').offset().top - this.element.offset().top);
            this.element.find(".e-monthcells, .e-timecells").outerHeight(((this.model.cellHeight != "20px") || workareaheight < 20) ? parseInt(this.model.cellHeight) + 1 : Math.round(workareaheight / len));
        },

        _processTab: function (oEl, event, oRowCell) {
            var appo = this.element.find('div.e-appointment,div.e-alldayappointment,div.e-monthappointment,div.e-agendaappointment');
            if (oEl.id == this._id || $(oEl).hasClass("e-datedisplay")) {
                if (appo.length != 0)
                    $(appo[0]).addClass("e-selectedAppointment").attr("tabIndex", 0).focus();
                else
                    $(oRowCell[0].cells[0]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
            }
            if ($(oEl).hasClass("e-selectedCell")) {
                if (appo.length != 0) {
                    var selcel = this.element.find('td.e-selectedCell');
                    var n = parseInt(selcel.length) - 1;
                    if (n > 0) {
                        for (var i = 0; i <= n; i++) {
                            selcel[i].blur();
                            $(selcel[i]).removeClass("e-selectedCell");
                        }
                    }
                    else
                        $(oEl).removeClass("e-selectedCell").blur();
                    $(appo[0]).addClass("e-selectedAppointment").attr("tabIndex", 0).focus();
                }
            }
            if ($(oEl).hasClass("e-navigateprevious")) {
                this.element.find('.e-navigatenext').attr("tabIndex", 0).focus();
            }
            else if ($(oEl).hasClass("e-navigatenext")) {
                $(oRowCell[0].cells[0]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                if ($(oRowCell[0].cells[0]).hasClass("e-resourceheadercells"))
                    $(oRowCell[1].cells[0]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
            }
            if ($(oEl).hasClass("e-appointment") || $(oEl).hasClass("e-alldayappointment") || $(oEl).hasClass("e-monthappointment") || $(oEl).hasClass("e-agendaappointment")) {
                var appcount = appo.length;
                var appindex = this.element.find("div.e-appointment,div.e-alldayappointment,div.e-monthappointment,div.e-agendaappointment").index(this.element.find(".e-selectedAppointment"));
                if (appindex < appcount && appindex >= 0) {
                    $(appo[appindex]).removeClass("e-selectedAppointment").blur();
                    var newappindex = parseInt(appindex) + 1;
                    if (newappindex < appcount)
                        $(appo[newappindex]).addClass("e-selectedAppointment").attr("tabIndex", 0).focus();
                    else if (newappindex == appcount)
                        this.element.find('.e-navigateprevious').attr("tabIndex", 0).focus();
                }
                else if (appindex == appcount)
                    this.element.find('.e-navigateprevious').attr("tabIndex", 0).focus();
            }
        },

        _reverseTab: function (oEl, event, oRowCell) {
            var appo = this.element.find('div.e-appointment,div.e-alldayappointment,div.e-monthappointment,div.e-agendaappointment');
            if (oEl.id == this._id || $(oEl).hasClass("e-datedisplay")) {
                var len = parseInt(appo.length) - 1;
                if (appo.length != 0)
                    $(appo[len]).addClass("e-selectedAppointment").attr("tabIndex", 0).focus();
            }
            var appcount = appo.length;
            if ($(oEl).hasClass("e-selectedCell")) {
                var len = appo.length - 1;
                if (appo.length != 0) {
                    var selcel = this.element.find('td.e-selectedCell');
                    var n = parseInt(selcel.length) - 1;
                    if (n > 0) {
                        for (var i = 0; i <= n; i++)
                            $(selcel[i]).removeClass("e-selectedCell").blur();
                    }
                    else
                        $(oEl).removeClass("e-selectedCell").blur();
                    $(appo[len]).addClass("e-selectedAppointment").attr("tabIndex", 0).focus();
                }
            }
            if ($(oEl).hasClass("e-navigatenext"))
                $(this.element).find('.e-navigateprevious').attr("tabIndex", 0).focus();
            else if ($(oEl).hasClass("e-navigateprevious")) {
                $(oRowCell[0].cells[0]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
                if ($(oRowCell[0].cells[0]).hasClass("e-resourceheadercells"))
                    $(oRowCell[1].cells[0]).addClass("e-selectedCell").attr("tabIndex", 0).focus();
            }
            if ($(oEl).hasClass("e-appointment") || $(oEl).hasClass("e-alldayappointment") || $(oEl).hasClass("e-monthappointment") || $(oEl).hasClass("e-agendaappointment")) {
                var appindex = this.element.find("div.e-appointment,div.e-alldayappointment,div.e-monthappointment,div.e-agendaappointment").index(this.element.find(".e-selectedAppointment"));
                if (appindex < appcount && appindex > 0) {
                    $(appo[appindex]).removeClass("e-selectedAppointment").blur();
                    var newappindex = parseInt(appindex) - 1;
                    if (newappindex < appcount && appindex >= 0)
                        $(appo[newappindex]).addClass("e-selectedAppointment").attr("tabIndex", 0).focus();
                    else if (newappindex == 0)
                        $(this.element).find('.e-navigatenext').attr("tabIndex", 0).focus();
                }
                else if (appindex == 0) {
                    $(appo[appindex]).removeClass("e-selectedAppointment").blur();
                    $(this.element).find('.e-navigatenext').attr("tabIndex", 0).focus();
                }
            }
        },

        _stopDefaultAction: function (e) {
            e.cancelBubble = true; e.returnValue = false; e.stopPropagation(); e.preventDefault();
        },

        _getLocalizedLabels: function (property) {
            var _localizedText;
            if (property == "Categorize")
                _localizedText = !ej.isNullOrUndefined(this.model.categorizeSettings.title) ? this.model.categorizeSettings.title : this._localizedLabels[property] === undefined ? ej.Schedule.Locale["en-US"][property] : this._localizedLabels[property];
            else if (property == "Priority")
                _localizedText = !ej.isNullOrUndefined(this.model.prioritySettings.title) ? this.model.prioritySettings.title : this._localizedLabels[property] === undefined ? ej.Schedule.Locale["en-US"][property] : this._localizedLabels[property];
            else
                _localizedText = this._localizedLabels[property] === undefined ? ej.Schedule.Locale["en-US"][property] : this._localizedLabels[property];;
            return _localizedText;
        },

        refreshAppointments: function () {
            !ej.isNullOrUndefined(this._appointmentSettings) && (this._dataManager = this.dataSource() instanceof ej.DataManager ? this.dataSource() : this.dataSource() != null ? ej.DataManager(this.dataSource()) : null);
            this._bindAppointmentsData("Refresh");
        },

        refresh: function () {
            this._destroy();
            this._init();
        },

        getSlotByElement: function (args) {
            var target = !ej.isNullOrUndefined(args) ? $(args) : $(this.element.find("td.e-selectedCell"));
            if (ej.isNullOrUndefined(target) || target.length == 0 || this.currentView() == "agenda") return false;
            if (target.hasClass("e-workcells") || target.hasClass("e-monthcells") || target.hasClass("e-alldaycells")) {
                if (target.length == 1)
                    this._slotByElement(target, "");
                else
                    this._slotByCellSelect(target);
            }
            return { startTime: new Date(this.cur_StartTime), endTime: new Date(this.cur_EndTime), resources: (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) ? this._getResourceValue(target) : null };
        },

        saveAppointment: function (obj) {
            if (!this.model.readOnly) {
                var recurEdit = this._appointmentAddWindow.find(".e-recurrenceeditor").data("ejRecurrenceEditor");
                var appointments = this._sortAppById(this._processed), maxId;
                this._publicMethodSave = false;
                if (this.model.appointmentSettings.applyTimeOffset) {
                    ej.isNullOrUndefined(obj[this._appointmentSettings["startTimeZone"]]) && (obj[this._appointmentSettings["startTimeZone"]] = (this.model.timeZone == null) ? "UTC " + this._timezoneStringValue() : this.model.timeZone);
                    ej.isNullOrUndefined(obj[this._appointmentSettings["endTimeZone"]]) && (obj[this._appointmentSettings["endTimeZone"]] = (this.model.timeZone == null) ? "UTC " + this._timezoneStringValue() : this.model.timeZone);
                }
                var savingTimeZone = this._timeZoneSavingAppoint(obj, "");
                obj = savingTimeZone.obj;
                if (!ej.isNullOrUndefined(obj[this._appointmentSettings["id"]]) || !obj[this._appointmentSettings["id"]] == "") {
                    var tempApp = new ej.DataManager(this._processed).executeLocal(new ej.Query().where(this._appointmentSettings["id"], ej.FilterOperators.equal, obj[this._appointmentSettings["id"]]));
                    if (!ej.isNullOrUndefined(tempApp[0])) {
                        obj.Guid = tempApp[0].Guid;
                        obj.AppTaskId = tempApp[0].AppTaskId;
                        obj.RecurrenceId = tempApp[0].recurrenceId;
                        obj.recurrenceExDate = tempApp[0].recurrenceExDate;
                        obj.ParentId = tempApp[0].ParentId;
                    }
                }
                var proxy = this;
                maxId = !ej.isNullOrUndefined(this._appMainId) ? this._appMainId + 1 : 1;
                var currentAction = this._currentAction == "save" ? "edit" : this._currentAction;
                if (ej.isNullOrUndefined(obj["AppTaskId"]) || obj["AppTaskId"] == "") {
                    obj[this._appointmentSettings["id"]] = (ej.isNullOrUndefined(obj[this._appointmentSettings["id"]]) || obj[this._appointmentSettings["id"]] == "") ? maxId : obj[this._appointmentSettings["id"]];
                    obj["AppTaskId"] = obj["ParentId"] = maxId;
                    obj.Guid = this._guidFormatGenerate();
                    if (this._trigger("actionBegin", { data: obj, requestType: "appointmentSave", methodType: "public" }))
                        return false;
                    if (this._trigger("beforeAppointmentCreate", { appointment: obj, methodType: "public" }))
                        return false;
                    var temp = this._timeZoneAppointments(obj, "");
                    var promise = this._dataManager.insert(temp, this.model.appointmentSettings.query._fromTable);
                    new ej.DataManager(this._currentAppointmentData).update("AppTaskId", this._timeZoneAppointments(temp, "reverse"));
                    if (!ej.isNullOrUndefined(promise) && $.isFunction(promise.promise) && this.dataSource() instanceof ej.DataManager) {
                        promise.done(function (e) {
                            proxy._processUrlBinding(e);
                            proxy._trigger("appointmentCreated", { appointment: temp, requestType: "appointmentSaved", methodType: "public" });
                            proxy._trigger("actionComplete", { data: temp, requestType: "appointmentSave", methodType: "public" });
                        });
                    }
                    else {
                        this._renderSingleApp();
                        this._appMainId = this._sortAppById(this._processed)[this._processed.length - 1]["AppTaskId"];
                        this._trigger("appointmentCreated", { appointment: obj, requestType: "appointmentSaved", methodType: "public" });
                        this._trigger("actionComplete", { data: obj, requestType: "appointmentSave", methodType: "public" });
                    }
                }
                else if (this._currentAction == "editOccurrence") {
                    if (this._trigger("actionBegin", { data: obj, requestType: "appointmentEdit", currentAction: currentAction }))
                        return false;
                    if (this._trigger("beforeAppointmentChange", { appointment: obj, currentAction: currentAction }))
                        return false;
                    var _appList = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid))[0];
                    var Parid = _appList[this._appointmentSettings["recurrenceId"]] == null ? _appList["ParentId"] : _appList[this._appointmentSettings["recurrenceId"]];
                    var MapValue = _appList[this._appointmentSettings["recurrenceId"]] == null ? "ParentId" : this._appointmentSettings["recurrenceId"];
                    var recurColl = this._appointmentRecurrenceSort(new ej.DataManager(this._processed).executeLocal(new ej.Query().where(MapValue, ej.FilterOperators.equal, Parid)));
                    var index = this._recuCollectionIndex(recurColl, _appList);
                    var model = this._appointmentSettings;
                    if (((index == 0) ? (!ej.isNullOrUndefined(recurColl[index + 1]) ? !(new Date(new Date(recurColl[index + 1][model["startTime"]]).setHours(0, 0, 0, 0)).getTime() > new Date(new Date(obj[model["endTime"]]).setHours(0, 0, 0, 0)).getTime()) : false) : (index == recurColl.length - 1) ? !(new Date(new Date(recurColl[index - 1][model["endTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(obj[model["startTime"]]).setHours(0, 0, 0, 0)).getTime()) : !((new Date(new Date(recurColl[index - 1][model["endTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(obj[model["startTime"]]).setHours(0, 0, 0, 0)).getTime()) && (new Date(new Date(recurColl[index + 1][model["startTime"]]).setHours(0, 0, 0, 0)).getTime() > new Date(new Date(obj[model["endTime"]]).setHours(0, 0, 0, 0)).getTime())))) {
                        this._alertCreateError();
                        return false;
                    }
                    var _editApps = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid));
                    this._objDate = _editApps;
                    var MapValue = this._objDate[0][this._appointmentSettings["recurrenceId"]] == null ? "ParentId" : this._appointmentSettings["recurrenceId"];
                    var _editApp = this._deleteOcurrence(this._objDate[0][MapValue], new Date(_editApps[0][this._appointmentSettings["startTime"]]));
                    obj[this._appointmentSettings["recurrence"]] = 1;
                    obj[this._appointmentSettings["recurrenceRule"]] = _editApp[0][this._appointmentSettings["recurrenceRule"]] + ";RECUREDITID=" + _editApp[0]["ParentId"];
                    obj[this._appointmentSettings["recurrenceId"]] = _editApp[0][this._appointmentSettings["recurrenceId"]];
                    obj[this._appointmentSettings["recurrenceExDate"]] = _editApp[0][this._appointmentSettings["recurrenceExdate"]];
                    obj["Guid"] = _editApps[0]["Guid"];
                    obj[this._appointmentSettings["id"]] = _editApps[0][this._appointmentSettings["id"]];
                    var args = [], newAppointment;
                    newAppointment = this._addAppData(obj, maxId, new Date(obj[this._appointmentSettings["startTime"]]), new Date(obj[this._appointmentSettings["endTime"]]), obj[this._appointmentSettings["recurrenceId"]]);
                    newAppointment[this._appointmentSettings["id"]] = newAppointment.AppTaskId;
                    args.push(newAppointment);
                    var newApp = [], _editApp = [];
                    var startTimezone1 = args[0][this._appointmentSettings["startTimeZone"]];
                    (startTimezone1 != this.model.timeZone) ? newApp.push(this._timeZoneAppointments(args[0], "")) : newApp.push(args[0]);
                    var _App = new ej.DataManager(this._currentAppointmentData).executeLocal(new ej.Query().where(this._appointmentSettings["id"], ej.FilterOperators.equal, this._parentId));
                    (startTimezone1 != this.model.timeZone) ? _editApp.push(this._timeZoneAppointments(_App[0], "")) : _editApp.push(_App[0]);
                    if (this.dataSource() instanceof ej.DataManager)
                        var promise = this._dataManager.saveChanges({ added: newApp, changed: _editApp, deleted: [] }, this._appointmentSettings["id"], this.model.appointmentSettings.query._fromTable);
                    else
                        var promise = this._dataManager.saveChanges({ added: newApp, changed: _editApp, deleted: [] }, "AppTaskId");
                    var updateTempNew = (startTimezone1 != this.model.timeZone) ? this._timeZoneAppointments(newApp[0], "reverse") : newApp[0];
                    new ej.DataManager(this._currentAppointmentData).update("AppTaskId", updateTempNew);
                    var updateTempNew2 = (startTimezone1 != this.model.timeZone) ? this._timeZoneAppointments(_editApp[0], "reverse") : _editApp[0];
                    new ej.DataManager(this._currentAppointmentData).update("AppTaskId", updateTempNew2);
                    if ($.isFunction(promise.promise) && this.dataSource() instanceof ej.DataManager) {
                        promise.done(function (e) {
                            proxy._processUrlBinding(e);
                            proxy._trigger("appointmentChanged", { appointment: args[0], requestType: "appointmentChanged", currentAction: currentAction, methodType: "public" });
                            proxy._trigger("actionComplete", { data: args, requestType: "appointmentEdit", currentAction: currentAction, methodType: "public" });
                        });
                        promise.fail(function (e) {
                        });
                    }
                    else {
                        this._renderSingleApp();
                        this._trigger("appointmentChanged", { appointment: args[0], requestType: "appointmentChanged", currentAction: currentAction, methodType: "public" });
                        this._trigger("actionComplete", { data: args, requestType: "appointmentEdit", currentAction: currentAction, methodType: "public" });
                    }
                }
                else if ((this._currentAction == "save" && obj[this._appointmentSettings["recurrence"]]) || (this._currentAction == ej.Schedule.Actions.EditSeries)) {
                    if (this._trigger("actionBegin", { data: obj, requestType: "appointmentEdit", currentAction: currentAction }))
                        return false;
                    if (this._trigger("beforeAppointmentChange", { appointment: obj, currentAction: currentAction }))
                        return false;
                    var query = new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid);
                    var _editApps = new ej.DataManager(this._processed).executeLocal(query);
                    if (this._currentAction != ej.Schedule.Actions.EditSeries) {
                        if (!ej.isNullOrUndefined(_editApps[0][this._appointmentSettings["recurrenceRule"]]))
                            obj[this._appointmentSettings["recurrenceRule"]] = _editApps[0][this._appointmentSettings["recurrenceRule"]];
                        var _appList = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, this._appUid))[0];
                        var Parid = _appList[this._appointmentSettings["recurrenceId"]] == null ? _appList["ParentId"] : _appList[this._appointmentSettings["recurrenceId"]];
                        var MapValue = _appList[this._appointmentSettings["recurrenceId"]] == null ? "ParentId" : this._appointmentSettings["recurrenceId"];
                        var recurColl = this._appointmentRecurrenceSort(new ej.DataManager(this._processed).executeLocal(new ej.Query().where(MapValue, ej.FilterOperators.equal, Parid)));
                        var index = this._recuCollectionIndex(recurColl, _appList);
                        var model = this._appointmentSettings;
                        if (((index == 0) ? (!ej.isNullOrUndefined(recurColl[index + 1]) ? !(new Date(new Date(recurColl[index + 1][model["startTime"]]).setHours(0, 0, 0, 0)).getTime() > new Date(new Date(obj[model["endTime"]]).setHours(0, 0, 0, 0)).getTime()) : false) : (index == recurColl.length - 1) ? !(new Date(new Date(recurColl[index - 1][model["endTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(obj[model["startTime"]]).setHours(0, 0, 0, 0)).getTime()) : !((new Date(new Date(recurColl[index - 1][model["endTime"]]).setHours(0, 0, 0, 0)).getTime() < new Date(new Date(obj[model["startTime"]]).setHours(0, 0, 0, 0)).getTime()) && (new Date(new Date(recurColl[index + 1][model["startTime"]]).setHours(0, 0, 0, 0)).getTime() > new Date(new Date(obj[model["endTime"]]).setHours(0, 0, 0, 0)).getTime())))) {
                            this._alertCreateError();
                            return false;
                        }
                    }
                    else {
                        var Parid = _editApps[0][this._appointmentSettings["recurrenceId"]] == null ? _editApps[0]["ParentId"] : _editApps[0][this._appointmentSettings["recurrenceId"]];
                        var query = new ej.Query().where(this._appointmentSettings["id"], ej.FilterOperators.equal, Parid);
                        var _editApp = new ej.DataManager(this._currentAppointmentData).executeLocal(query);
                        maxId = obj["AppTaskId"] = _editApp[0]["AppTaskId"];
                        obj[this._appointmentSettings["id"]] = _editApp[0][this._appointmentSettings["id"]];
                        obj[this._appointmentSettings["recurrenceId"]] = _editApp[0][this._appointmentSettings["recurrenceId"]];
                        obj[this._appointmentSettings["recurrenceExDate"]] = _editApp[0][this._appointmentSettings["recurrenceExate"]];
                        obj[this._appointmentSettings["recurrenceRule"]] = (ej.isNullOrUndefined(recurEdit._recRule) || recurEdit._recRule == "") ? _editApp[0][this._appointmentSettings["recurrenceRule"]] : recurEdit._recRule;
                    }
                    obj["Guid"] = _editApps[0]["Guid"];
                    obj[this._appointmentSettings["id"]] = (this._currentAction != ej.Schedule.Actions.EditSeries) ? _editApps[0][this._appointmentSettings["id"]] : obj[this._appointmentSettings["id"]];
                    var args = [], newAppointment;
                    var parId = this._currentAction == ej.Schedule.Actions.EditOccurrence || (!ej.isNullOrUndefined(obj[this._appointmentSettings["recurrenceRule"]]) && obj[this._appointmentSettings["recurrenceRule"]].toString().indexOf("RECUREDITID") != -1) ? this._parentId : this._currentAction == (ej.Schedule.Actions.Save) ? _editApps[0].AppTaskId : maxId;
                    var taskId = ((((new Date(obj[this._appointmentSettings["endTime"]]) - new Date(obj[this._appointmentSettings["startTime"]])) / 3600000) > 24) && this._currentAction != ej.Schedule.Actions.EditOccurrence && (obj[this._appointmentSettings["allDay"]] == true)) ? parId : this._currentAction == (ej.Schedule.Actions.Save) ? _editApps[0].AppTaskId : this._appMainId + 1;
                    taskId = (this._currentAction == ej.Schedule.Actions.EditSeries) ? parId : taskId;
                    newAppointment = this._addAppData(obj, taskId, new Date(obj[this._appointmentSettings["startTime"]]), new Date(obj[this._appointmentSettings["endTime"]]), parId);
                    args.push(newAppointment);
                    var newApp = [], editedApp = [], deleted = [];
                    var GId = this._currentAction == ej.Schedule.Actions.Save ? args[0]["Guid"] : args[0][this._appointmentSettings["recurrenceId"]];
                    var idName = this._currentAction == ej.Schedule.Actions.Save ? "Guid" : this._appointmentSettings["recurrenceId"];
                    var _editApp = new ej.DataManager(this._currentAppointmentData).executeLocal(new ej.Query().where(idName, ej.FilterOperators.equal, GId));
                    (!ej.isNullOrUndefined(_editApp) && _editApp.length > 0) ? editedApp.push(args[0]) : newApp.push(args[0]);
                    if (this._currentAction == ej.Schedule.Actions.EditSeries) {
                        var query = ej.Query().where(ej.Predicate(this._appointmentSettings["recurrenceRule"], ej.FilterOperators.contains, "RECUREDITID=" + args[0].ParentId, true));
                        var dele = new ej.DataManager(this._currentAppointmentData).executeLocal(query);
                        deleted = deleted.concat(dele);
                        //this._appointmentAddWindow.find('.recurbutton').click();
                        editedApp[0][this._appointmentSettings["recurrenceRule"]] = recurEdit._recRule;
                        editedApp[0][this._appointmentSettings["recurrenceExDate"]] = null;
                    }

                    var proxy = this, promise, newTemp = [], editTemp = [];
                    if (newApp.length > 0)
                        newTemp.push(this._timeZoneAppointments(newApp[0], ""));
                    if (editedApp.length > 0)
                        editTemp.push(this._timeZoneAppointments(editedApp[0], ""));
                    if (this.dataSource() instanceof ej.DataManager)
                        var promise = this._dataManager.saveChanges({ added: newTemp, changed: editTemp, deleted: deleted }, this._appointmentSettings["id"], this.model.appointmentSettings.query._fromTable);
                    else
                        var promise = this._dataManager.saveChanges({ added: newTemp, changed: editTemp, deleted: deleted }, "AppTaskId");
                    if (editedApp.length > 0)
                        var updateTemp = this._timeZoneAppointments(editTemp[0], "reverse");
                    if (newApp.length > 0)
                        var updateTemp = this._timeZoneAppointments(newTemp[0], "reverse");
                    new ej.DataManager(this._currentAppointmentData).update("AppTaskId", updateTemp);
                    if ($.isFunction(promise.promise) && this.dataSource() instanceof ej.DataManager) {
                        promise.done(function (e) {
                            proxy._processUrlBinding(e);
                            proxy._trigger("appointmentChanged", { appointment: editedApp[0], requestType: "appointmentChanged", currentAction: currentAction, methodType: "public" });
                            proxy._trigger("actionComplete", { data: editedApp, requestType: "appointmentEdit", currentAction: currentAction, methodType: "public" });
                        });
                        promise.fail(function (e) {
                        });
                    }
                    else {
                        this._renderSingleApp();
                        this._trigger("appointmentChanged", { appointment: editedApp[0], requestType: "appointmentChanged", currentAction: currentAction, methodType: "public" });
                        this._trigger("actionComplete", { data: editedApp, requestType: "appointmentEdit", currentAction: currentAction, methodType: "public" });
                    }
                }
                else {
                    if (this._trigger("actionBegin", { data: obj, requestType: "appointmentEdit", currentAction: currentAction, methodType: "public" }))
                        return false;
                    if (this._trigger("beforeAppointmentChange", { appointment: obj, currentAction: currentAction, methodType: "public" }))
                        return false;
                    var temp = this._timeZoneAppointments(obj, "");
                    if (this.dataSource() instanceof ej.DataManager)
                        var promise = this._dataManager.update(this._appointmentSettings["id"], temp, this.model.appointmentSettings.query._fromTable);
                    else
                        var promise = this._dataManager.update("AppTaskId", temp);
                    new ej.DataManager(this._currentAppointmentData).update("AppTaskId", this._timeZoneAppointments(temp, "reverse"));
                    if ($.isFunction(promise.promise) && this.dataSource() instanceof ej.DataManager) {
                        promise.done(function (e) {
                            proxy._processUrlBinding(e);
                            proxy._trigger("appointmentChanged", { appointment: obj, requestType: "appointmentChanged", currentAction: currentAction, methodType: "public" });
                            proxy._trigger("actionComplete", { data: obj, requestType: "appointmentEdit", currentAction: currentAction, methodType: "public" });
                        });
                    }
                    else {
                        this._renderSingleApp();
                        this._trigger("appointmentChanged", { appointment: obj, requestType: "appointmentChanged", currentAction: currentAction, methodType: "public" });
                        this._trigger("actionComplete", { data: obj, requestType: "appointmentEdit", currentAction: currentAction, methodType: "public" });
                    }
                }
            }
        },

        print: function (appointment) {
            if (!ej.isNullOrUndefined(appointment))
                this._printAppointment(appointment);
            else {
                var cloneElement = this.element.clone();
                if (this.currentView() == "agenda") {
                    cloneElement.width(this.element.find('.e-agendacellstab').width() + 2);
                    cloneElement.height($("#" + this._id + " .e-headertr").height() + this.element.find('.e-agendacellstab').height() + $("#" + this._id + " .e-scheduleheader").height() + 2);
                    cloneElement.find("div#" + this._id + "_scroller").ejScroller({ width: this.element.find('.e-agendacellstab').width(), height: this.element.find('.e-agendacellstab').height() + 2 });
                    cloneElement.find('.e-commonviewbutton').css({ 'margin-top': '0px' });
                    cloneElement.find('.e-viewstable').css({ 'padding-top': '15px' });
                }
                else {
                    cloneElement.find(".e-upicon,.e-downicon").remove();
                    if (this.model.orientation == "vertical") {
                        if (this.model.timeScale.enable) {
                            if (this.currentView() == "month" || (this._isCustomMonthView() && this._renderDays > 7))
                                cloneElement.width(this.element.find('.e-workcellstab').width() + $('.e-monthleftindent').width());
                            else
                                cloneElement.width(this.element.find('.e-workcellstab').width() + $('.e-workleftindent').width());
                            cloneElement.height($("#" + this._id + " .e-headertr").height() + $("#" + this._id + " .e-workcellstab").height() + $("#" + this._id + " .e-scheduleheader").height() + 2);
                            cloneElement.find('.e-scroller').ejScroller({ width: $('.e-dateheader').width(), height: $("#" + this._id + " .e-workcellstab").height() + 2 });
                            cloneElement.find('.e-scrolltimecells').css({ top: 0 });
                            cloneElement.find('.e-commonviewbutton').css({ 'margin-top': '0px' });
                            cloneElement.find('.e-viewstable').css({ 'padding-top': '15px' });
                            cloneElement.children().first().css({ border: "0px solid #bbbcbb" });
                            cloneElement.css({ border: "1px solid #bbbcbb" });
                            if (this.currentView() == "month")
                                cloneElement.find('.e-draggableworkarea').css({ 'height': this.element.find('.e-timecells').height() * this.element.find('.e-timecells').length + 2 });
                        }
                        else {
                            cloneElement.width(this.element.find('.e-workcellstab').width() + $('.e-workleftindent').width());
                            cloneElement.find(".e-workcellstab").css({ left: -($("div#" + this._id + "_scroller").data("ejScroller").scrollLeft()), position: 'absolute' });
                        }
                    }
                    else {
                        if (this.currentView() == "month" || (this._isCustomMonthView() && this._renderDays > 7)) {
                            cloneElement.width(this.element.find('.e-workcellstab').width());
                        }
                        else {
                            cloneElement.find(".e-workcellstab").css({ left: -($("div#" + this._id + "_scroller").data("ejScroller").scrollLeft()), position: 'absolute' });
                            cloneElement.find(".e-horizontaltimecells tr:nth-child(2)").css("left", -($("div#" + this._id + "_scroller").data("ejScroller").scrollLeft()) + "px");
                        }
                    }
                }
                ej.print(cloneElement);
            }
        },

        notifyChanges: function (action, data) {
            if (!ej.isNullOrUndefined(data) || data.length != 0) {
                var app = (!ej.isNullOrUndefined(data)) ? data : data[0];
                var object = $.extend(true, {}, app);
                object[this._appointmentSettings["startTime"]] = new Date(object[this._appointmentSettings["startTime"]]);
                object[this._appointmentSettings["endTime"]] = new Date(object[this._appointmentSettings["endTime"]]);

                if (action == "beforeAppointmentCreate") {
                    new ej.DataManager(this._currentAppointmentData).insert(object);
                    this._appointmentProcessing(object);
                    this._renderAppointmentAll();
                }
                else if (action == "beforeAppointmentChange") {
                    new ej.DataManager(this._currentAppointmentData).update(this._appointmentSettings["id"], object);
                    new ej.DataManager(this._processed).remove(this._appointmentSettings["id"], object[this._appointmentSettings["id"]]);
                    this._dataProcessing(this._currentAppointmentData);
                    this._renderAppointmentAll();
                }
                else if (action == "beforeAppointmentRemove") {
                    var appointment = new ej.DataManager(this._processed).executeLocal(new ej.Query().where(this._appointmentSettings["id"], ej.FilterOperators.equal, object[this._appointmentSettings["id"]]));
                    new ej.DataManager(this._currentAppointmentData).remove(this._appointmentSettings["id"], appointment[0][this._appointmentSettings["id"]]);
                    new ej.DataManager(this._processed).remove(this._appointmentSettings["id"], appointment[0][this._appointmentSettings["id"]]);
                    this._renderAppointmentAll();
                }
            }
        },

        deleteAppointment: function (id) {
            if (!this.model.readOnly) {
                if (typeof id == "string") {
                    var appointment = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("Guid", ej.FilterOperators.equal, id));
                    if (appointment[0][this._appointmentSettings["recurrence"]]) {
                        this._deleteUid = id;
                        this._deletingAppointment();
                    }
                    else this._deleteApp(id);
                }
                else if (typeof id == "object") {
                    this._deleteUid = id.Guid;
                    if (ej.isNullOrUndefined(this._deleteUid)) {
                        var appointment = new ej.DataManager(this._processed).executeLocal(new ej.Query().where("ParentId", ej.FilterOperators.equal, id.ParentId));
                        this._deleteUid = appointment[0].Guid;
                    }
                    if (id[this._appointmentSettings["recurrence"]])
                        this._deletingAppointment();
                    else this._deleteApp(this._deleteUid);
                }
            }
        },

        getAppointments: function () {
            var appList = this.dataSource();
            return appList;
        },

        searchAppointments: function (searchString, fields, filterOperator, ignoreCase) {
            var queryManagar = ej.Query();
            var result, _fields = ej.isNullOrUndefined(fields) ? this._getColumns(this._appointmentSettings) : fields;
            filterOperator = ej.isNullOrUndefined(filterOperator) ? "contains" : filterOperator;
            ignoreCase = ej.isNullOrUndefined(ignoreCase) ? true : ignoreCase;
            if (typeof searchString == "string") {
                if (searchString.length) {
                    queryManagar.search(searchString, _fields, filterOperator, ignoreCase);
                    if ((this.dataSource() instanceof ej.DataManager)) {
                        result = queryManagar;
                    }
                    else
                        result = this._dataManager.executeLocal(queryManagar);
                }
            }
            else if (typeof searchString == "object")
                result = this.filterAppointments(searchString);
            return result;
        },

        filterAppointments: function (filterConditions) {
            var result, queryManagar = ej.Query(), matchcaseVal;
            if (!ej.isNullOrUndefined(filterConditions)) {
                var firstFilterCondition = filterConditions[0];
                matchcaseVal = ej.isNullOrUndefined(firstFilterCondition.matchcase) ? true : firstFilterCondition.matchcase;
                var predicate = ej.Predicate(firstFilterCondition.field, firstFilterCondition.operator, firstFilterCondition.value, matchcaseVal);
                for (var i = 1; i < filterConditions.length; i++) {
                    matchcaseVal = ej.isNullOrUndefined(filterConditions[i].matchcase) ? true : filterConditions[i].matchcase;
                    predicate = predicate[filterConditions[i].predicate](filterConditions[i].field, filterConditions[i].operator, filterConditions[i].value, matchcaseVal);
                }
                queryManagar.where(predicate);
                if ((this.dataSource() instanceof ej.DataManager)) {
                    result = queryManagar;
                }
                else
                    result = this._dataManager.executeLocal(queryManagar);
            }
            return result;
        },

        refreshScroller: function () {
            var scrollerObj = this.element.find('div#' + this._id + '_scroller').data("ejScroller");
            var scrollWidth = (this.model.orientation === "vertical") ? this.element.width() - (this._mediaQuery && (this.currentView() == "month" || this._isCustomMonthView()) ? 1 : (this.element.find('.e-scrolltimecells').length > 0 ? this.element.find('.e-scrolltimecells').parent().outerWidth() : 0)) : (this.model.orientation == "horizontal") && (!ej.isNullOrUndefined(this.model.group) && (this._tempResource.length != 0)) ? this.element.width() - this.element.find(".e-resourceheadertable").width() : this.element.width();
            scrollerObj.model.width = parseInt(scrollWidth) - 2;
            scrollerObj.model.height = this.scHeight - 1 - (this.element.find('.e-draggableworkarea').offset().top - this.element.offset().top);
            scrollerObj.refresh();
            if (this.model.orientation == "vertical") {
                this._renderHoriVerticalScroll();
                this.element.find(".e-datecommondiv").parent().width(parseInt(this.element.width()) - 2);
                this.element.find(".e-headrealldaytable").css("left", -(this.element.find(".e-draggableworkarea").scrollLeft()) + "px");
            }
            else {
                $(this.element.find(".e-horizontaltimecells").find("table tr")[2]).css("left", -(this.element.find('.e-draggableworkarea').scrollLeft()) + "px");
                this.element.find(".e-horizontresdiv").height(this.element.find('.e-draggableworkarea').height());
            }
            this._reRenderHeaderBar();
            this.model.showAppointmentNavigator && this._refreshAppNavigation();
            if (this.model.showCurrentTimeIndicator) this.element.find(".e-highlightcurrenttimeline").remove();
            this._highlightCurrentTime(this.model.showCurrentTimeIndicator);
            if ((this.currentView() == "month" || this._isCustomMonthView()) && this.model.orientation == "vertical")
                this._renderCurrentView();
            this._showScrollTd();
            this.element.find(".e-mobileNavigation").css(this.model.enableRTL ? "right" : "left", this.element.outerWidth() - 36);
        },
        _refreshAppNavigation: function () {
            var base = this.element.find("#" + this._id + "_scroller");
            if ((this._browserInfo.name === "msie" && this._browserInfo.version < 9) || ej.isNullOrUndefined(base.data("ejScroller")))
                return;
            this.height = base.height();
            this.width = base.width();
            var scroll = (base.ejScroller('instance').isVScroll()) ? base.find(".e-vscroll").width() : 0;
            var timecell = this.element.find(".e-scrolltimecells").width();
            timecell = ej.isNullOrUndefined(timecell) ? this.model.orientation == "vertical" ? 56 : 0 : timecell;
            var top = (this.height / 2) - (150 / 2), left;
            left = (this.model.showTimeScale && this.currentView() != "agenda") ? (this.model.orientation == "vertical") ? ((this.currentView() != "month") && !(this._isCustomMonthView()) ? -4 : -10) : -61 : -61;
            this.width = (this.model.showTimeScale && this.currentView() != "agenda") ? this.width : this.width - timecell;
            if (!this.model.enableRTL) {
                this.element.find(".e-prevapp").css("top", (top + 40) + "px").css("transform", "rotate(90deg)").css("left", left + "px");
                this.element.find(".e-nextapp").css("top", (top + 40) + "px").css("transform", "rotate(-90deg)").css("left", (this.width - scroll - (this.model.orientation == "vertical" && (this.currentView() == "month" || this._isCustomMonthView()) ? 41 : this.model.orientation == "vertical" ? 35 : 90)) + "px");
            }
            else {
                this.element.find(".e-prevapp").css("top", (top + 40) + "px").css("transform", "rotate(-90deg)").css("right", left + "px");
                this.element.find(".e-nextapp").css("top", (top + 40) + "px").css("transform", "rotate(90deg)").css("right", (this.width - scroll - (this.model.orientation == "vertical" && (this.currentView() == "month" || this._isCustomMonthView()) ? 41 : this.model.orientation == "vertical" ? 35 : 90)) + "px");
            }
        },
        getDifference: function (value) {
            var time = "";
            if (value.toString().indexOf("-") != -1) {
                time = value.toString().substring(value.toString().indexOf("-") + 1, value.toString().indexOf("-") + 5);
                return -(parseInt(time.substring(0, 2)) * 60) + parseInt(time.substring(2, 4));
            }
            else {
                time = value.toString().substring(value.toString().indexOf("+") + 1, value.toString().indexOf("+") + 5);
                return (parseInt(time.substring(0, 2)) * 60) + parseInt(time.substring(2, 4));
            }
        },
        exportSchedule: function (action, serverEvent, id) {
            var sampleModel = {}, processedApp = [], blockedApp = [];
            $.extend(true, sampleModel, this.model);
            $.extend(true, processedApp, this._processed);
            $.extend(true, blockedApp, this._processedIntervals);
            for (var i = 0; i < processedApp.length; i++) {
                processedApp[i][this._appointmentSettings["startTime"]] = new Date(processedApp[i][this._appointmentSettings["startTime"]].getTime() + (this.getDifference(processedApp[i][this._appointmentSettings["startTime"]]) * 60000));
                processedApp[i][this._appointmentSettings["endTime"]] = new Date(processedApp[i][this._appointmentSettings["endTime"]].getTime() + (this.getDifference(processedApp[i][this._appointmentSettings["endTime"]]) * 60000));
            }
            for (var a = 0; a < blockedApp.length; a++) {
                blockedApp[a][this.model.blockoutSettings["startTime"]] = new Date(blockedApp[a][this.model.blockoutSettings["startTime"]].getTime() + (this.getDifference(blockedApp[a][this.model.blockoutSettings["startTime"]]) * 60000));
                blockedApp[a][this.model.blockoutSettings["endTime"]] = new Date(blockedApp[a][this.model.blockoutSettings["endTime"]].getTime() + (this.getDifference(blockedApp[a][this.model.blockoutSettings["endTime"]]) * 60000));
            }
            var value = new Date(new Date(this.currentDate()).setHours(0, 0, 0));
            sampleModel.currentDate = new Date(value.getTime() + (this.getDifference(value) * 60000));
            var appointmentClone = JSON.parse(JSON.stringify(this._appointmentSettings));
            $.extend(true, sampleModel.appointmentSettings, appointmentClone);
            var blockAppsClone = JSON.parse(JSON.stringify(this.model.blockoutSettings));
            $.extend(true, sampleModel.blockoutSettings, blockAppsClone);
            var modelClone = JSON.parse(JSON.stringify(sampleModel));
            var attr = { action: action, method: 'post' };
            var form = ej.buildTag('form', "", null, attr);
            var view = this.currentView() == "day" ? "Day" : this.currentView() == "month" ? "Month" : this.currentView() == "week" ? "Week" : this.currentView() == "agenda" ? "Agenda" : this.currentView() == "workweek" ? "WorkWeek" : "CustomView";
            if (this._ignoreFromAppointmentOnExport) {
                for (var i = 0; i < this._ignoreFromAppointmentOnExport.length; i++) {
                    delete appointmentClone[this._ignoreFromAppointmentOnExport[i]];
                    delete blockAppsClone[this._ignoreFromAppointmentOnExport[i]];
                }
            }
            if (this._ignoreFromModelOnExport) {
                for (var i = 0; i < this._ignoreFromModelOnExport.length; i++) {
                    delete modelClone[this._ignoreFromModelOnExport[i]];
                }
            }
            delete modelClone.appointmentSettings.dataSource;
            delete modelClone.blockoutSettings.dataSource;
            if (ej.raiseWebFormsServerEvents) {
                var args = { model: modelClone, originalEventType: serverEvent };
                var clientArgs = { appSetting: JSON.stringify(appointmentClone), appId: id, processedApp: JSON.stringify(processedApp), blockedApp: JSON.stringify(blockedApp), model: JSON.stringify(modelClone), locale: this._getLocalizedLabels(view) + ',' + this._getLocalizedLabels("AllDay") + ',' + this._getLocalizedLabels("Date") + ',' + this._getLocalizedLabels("Time") + ',' + this._getLocalizedLabels("Event") };
                ej.raiseWebFormsServerEvents(serverEvent, args, clientArgs);
            } else {
                var inputAttr = { name: 'ScheduleApps', type: 'hidden', value: JSON.stringify(appointmentClone) }
                var input = ej.buildTag('input', "", null, inputAttr);
                var blockInputAttr = { name: 'ScheduleBlockedApps', type: 'hidden', value: JSON.stringify(blockAppsClone) }
                var blockInput = ej.buildTag('input', "", null, blockInputAttr);
                var inputAttrModel = { name: 'ScheduleModel', type: 'hidden', value: JSON.stringify(modelClone) }
                var inputModel = ej.buildTag('input', "", null, inputAttrModel);
                var processedApp = { name: 'ScheduleProcesedApps', type: 'hidden', value: JSON.stringify(processedApp) }
                var inputApp = ej.buildTag('input', "", null, processedApp);
                var blockedApp = { name: 'ScheduleProcesedIntervalsApps', type: 'hidden', value: JSON.stringify(blockedApp) }
                var blockInputApp = ej.buildTag('input', "", null, blockedApp);
                var localeText = { name: 'Locale', type: 'hidden', value: this._getLocalizedLabels(view) + ',' + this._getLocalizedLabels("AllDay") + ',' + this._getLocalizedLabels("Date") + ',' + this._getLocalizedLabels("Time") + ',' + this._getLocalizedLabels("Event") }
                var inputLocale = ej.buildTag('input', "", null, localeText);
                form.append(inputModel);
                form.append(inputApp);
                form.append(blockInputApp);
                form.append(inputLocale);
                if (!ej.isNullOrUndefined(id)) {
                    var idAttr = { name: 'AppointmentId', type: 'hidden', value: id }
                    var inputId = ej.buildTag('input', "", null, idAttr);
                    form.append(inputId);
                }
                form.append(input);
                form.append(blockInput);
                form.append(this);
                $('body').append(form);
                form.submit();
            }
            return true;
        }
    });

    if (ej.scheduleFeatures.resources)
        $.extend(ej.Schedule.prototype, ej.scheduleFeatures.resources);
    if (ej.scheduleFeatures.horizontal)
        $.extend(ej.Schedule.prototype, ej.scheduleFeatures.horizontal);

    ej.Schedule.Locale = ej.Schedule.Locale || {};
    ej.Schedule.Locale['default'] = ej.Schedule.Locale["en-US"] = {
        ReminderWindowTitle: "Reminder window",
        CreateAppointmentTitle: "Create Appointment",
        RecurrenceEditTitle: "Edit Repeat Appointment",
        RecurrenceEditMessage: "How would you like to change the appointment in the series?",
        RecurrenceEditOnly: "Only this appointment",
        RecurrenceEditSeries: "Entire series",
        PreviousAppointment: "Previous Appointment",
        NextAppointment: "Next Appointment",
        AppointmentSubject: "Subject",
        StartTime: "Start Time",
        EndTime: "End Time",
        AllDay: "All day",
        StartTimeZone: "Start TimeZone",
        EndTimeZone: "End TimeZone",
        Today: "Today",
        Recurrence: "Repeat",
        Done: "Done",
        Cancel: "Cancel",
        Ok: "OK",
        Repeat: "Repeat",
        RepeatBy: "Repeat by",
        RepeatEvery: "Repeat every",
        RepeatOn: "Repeat on",
        StartsOn: "Starts on",
        Ends: "Ends",
        Summary: "Summary",
        Daily: "Daily",
        Weekly: "Weekly",
        Monthly: "Monthly",
        Yearly: "Yearly",
        Every: "Every",
        EveryWeekDay: "Every weekday",
        Never: "Never",
        After: "After",
        Occurrence: "Occurrence(s)",
        On: "On",
        Edit: "Edit",
        RecurrenceDay: "Day(s)",
        RecurrenceWeek: "Week(s)",
        RecurrenceMonth: "Month(s)",
        RecurrenceYear: "Year(s)",
        The: "The",
        OfEvery: "of every",
        First: "First",
        Second: "Second",
        Third: "Third",
        Fourth: "Fourth",
        Last: "Last",
        WeekDay: "Weekday",
        WeekEndDay: "Weekendday",
        Subject: "Subject",
        Categorize: "Categories",
        DueIn: "Due In",
        DismissAll: "Dismiss All",
        Dismiss: "Dismiss",
        OpenItem: "Open Item",
        Snooze: "Snooze",
        Day: "Day",
        Week: "Week",
        WorkWeek: "Work Week",
        Month: "Month",
        AddEvent: "Add Event",
        CustomView: "Custom View",
        Agenda: "Agenda",
        Detailed: "Edit Appointment",
        EventBeginsin: "Appointment Begins in",
        Editevent: "Edit Appointment",
        Editseries: "Edit Series",
        Times: "times",
        Until: "until",
        Eventwas: "Appointment was",
        Hours: "hrs",
        Minutes: "mins",
        Overdue: "Overdue Appointment",
        Days: "day(s)",
        Event: "Event",
        Select: "select",
        Previous: "Previous",
        Next: "Next",
        Close: "Close",
        Delete: "Delete",
        Date: "Date",
        Showin: "Show in",
        Gotodate: "Go To Date",
        Resources: "RESOURCES",
        RecurrenceDeleteTitle: "Delete Repeat Appointment",
        Location: "Location",
        Priority: "Priority",
        RecurrenceAlert: "Alert",
        NoTitle: "No Title",
        OverFlowAppCount: "more appointment(s)",
        AppointmentIndicator: "Click for more appointments",
        WrongPattern: "The recurrence pattern is not valid",
        CreateError: "The duration of the appointment must be shorter than how frequently it occurs. Shorten the duration, or change the recurrence pattern in the Appointment Recurrence dialog box.",
        DragResizeError: "Cannot reschedule an occurrence of the recurring appointment if it skips over a later occurrence of the same appointment.",
        StartEndError: "End time should be greater than start time",
        MouseOverDeleteTitle: "Delete Appointment",
        DeleteConfirmation: "Are you sure you want to delete this appointment?",
        Time: "Time",
        EmptyResultText: "No suggestions",
        BlockIntervalAlertTitle: "Alert",
        BlockIntervalError: "The selected time interval has been blocked and is unavailable for selection."
    };

    ej.Schedule.Actions = {
        Add: "add",
        Save: "save",
        Delete: "delete",
        DeleteOccurrence: "deleteOccurrence",
        DeleteSeries: "deleteSeries",
        EditOccurrence: "editOccurrence",
        EditSeries: "editSeries"
    };

    ej.Schedule.CurrentView = {
        Day: "day",
        Week: "week",
        Workweek: "workweek",
        Month: "month",
        CustomView: "customview",
        Agenda: "agenda"
    };

    ej.Schedule.TimeMode = {
        Hour12: "12",
        Hour24: "24"
    };

    ej.Schedule.Orientation = {
        Vertical: "vertical",
        Horizontal: "horizontal"
    };
    ej.Schedule.DayOfWeek = {
        Sunday: "Sunday",
        Monday: "Monday",
        Tuesday: "Tuesday",
        Wednesday: "Wednesday",
        Thursday: "Thursday",
        Friday: "Friday",
        Saturday: "Saturday"
    };
})(jQuery, Syncfusion);;

});